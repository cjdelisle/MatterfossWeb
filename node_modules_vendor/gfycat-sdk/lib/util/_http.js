'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var https = require('https');
var zlib = require('zlib');

/**
 * Server-side https request
 * @param options {Object}
 *   options.request {Object} - Request data including method, host and path
 *   options.timeout {Number} - Request timeout before returning an error. Defaults to 30000 milliseconds
 *   options.postData {Object} - Post data to be written to request stream
 */

exports.request = function (options, resolve, reject) {
  var timeout = options.timeout;

  var req = https.request(options.request, function (res) {
    switch (res.headers['content-encoding']) {
      case 'gzip' || 'deflate':
        var output = zlib.createUnzip();
        res.pipe(output);
        break;
      default:
        var output = res;
        break;
    }

    var body = '';

    output.on('data', function (d) {
      body += d;
    });

    output.on('end', function () {
      try {
        body = JSON.parse(body);
      } catch (e) {
        body = {};
      }

      body.statusCode = res.statusCode;
      if (body.statusCode >= 400) {
        return reject(body);
      }

      return resolve(body);
    });

    output.on('error', function (err) {
      return reject(err);
    });
  });

  req.on('error', function (err) {
    return reject(err);
  });

  req.on('socket', function (socket) {
    socket.setTimeout(timeout);
    socket.on('timeout', function () {
      req.abort();
    });
  });

  if (options.postData) {
    req.write((0, _stringify2.default)(options.postData));
    req.end();
  } else {
    req.end();
  }
};