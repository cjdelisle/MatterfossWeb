"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeFormat = void 0;
var tslib_1 = require("tslib");
var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
var get_internal_slots_1 = tslib_1.__importDefault(require("./get_internal_slots"));
var links_1 = tslib_1.__importDefault(require("./data/links"));
var packer_1 = require("./packer");
var UPPERCASED_LINKS = Object.keys(links_1.default).reduce(function (all, l) {
    all[l.toUpperCase()] = links_1.default[l];
    return all;
}, {});
var RESOLVED_OPTIONS_KEYS = [
    'locale',
    'calendar',
    'numberingSystem',
    'dateStyle',
    'timeStyle',
    'timeZone',
    'hourCycle',
    'weekday',
    'era',
    'year',
    'month',
    'day',
    'hour',
    'minute',
    'second',
    'timeZoneName',
];
var formatDescriptor = {
    enumerable: false,
    configurable: true,
    get: function () {
        if (typeof this !== 'object' || !(this instanceof exports.DateTimeFormat)) {
            throw TypeError('Intl.DateTimeFormat format property accessor called on incompatible receiver');
        }
        var internalSlots = get_internal_slots_1.default(this);
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var dtf = this;
        var boundFormat = internalSlots.boundFormat;
        if (boundFormat === undefined) {
            // https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-number-format-functions
            boundFormat = function (date) {
                var x;
                if (date === undefined) {
                    x = Date.now();
                }
                else {
                    x = Number(date);
                }
                return ecma402_abstract_1.FormatDateTime(dtf, x, {
                    getInternalSlots: get_internal_slots_1.default,
                    localeData: exports.DateTimeFormat.localeData,
                    tzData: exports.DateTimeFormat.tzData,
                    getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
                });
            };
            try {
                // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/format-function-name.js
                Object.defineProperty(boundFormat, 'name', {
                    configurable: true,
                    enumerable: false,
                    writable: false,
                    value: '',
                });
            }
            catch (e) {
                // In older browser (e.g Chrome 36 like polyfill.io)
                // TypeError: Cannot redefine property: name
            }
            internalSlots.boundFormat = boundFormat;
        }
        return boundFormat;
    },
};
try {
    // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/name.js
    Object.defineProperty(formatDescriptor.get, 'name', {
        configurable: true,
        enumerable: false,
        writable: false,
        value: 'get format',
    });
}
catch (e) {
    // In older browser (e.g Chrome 36 like polyfill.io)
    // TypeError: Cannot redefine property: name
}
exports.DateTimeFormat = function (locales, options) {
    // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
    if (!this || !(this instanceof exports.DateTimeFormat)) {
        return new exports.DateTimeFormat(locales, options);
    }
    ecma402_abstract_1.InitializeDateTimeFormat(this, locales, options, {
        tzData: exports.DateTimeFormat.tzData,
        uppercaseLinks: UPPERCASED_LINKS,
        availableLocales: exports.DateTimeFormat.availableLocales,
        relevantExtensionKeys: exports.DateTimeFormat.relevantExtensionKeys,
        getDefaultLocale: exports.DateTimeFormat.getDefaultLocale,
        getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
        getInternalSlots: get_internal_slots_1.default,
        localeData: exports.DateTimeFormat.localeData,
    });
    /** IMPL START */
    var internalSlots = get_internal_slots_1.default(this);
    var dataLocale = internalSlots.dataLocale;
    var dataLocaleData = exports.DateTimeFormat.localeData[dataLocale];
    ecma402_abstract_1.invariant(dataLocaleData !== undefined, "Cannot load locale-dependent data for " + dataLocale + ".");
    /** IMPL END */
};
// Static properties
ecma402_abstract_1.defineProperty(exports.DateTimeFormat, 'supportedLocalesOf', {
    value: function supportedLocalesOf(locales, options) {
        return ecma402_abstract_1.SupportedLocales(exports.DateTimeFormat.availableLocales, ecma402_abstract_1.CanonicalizeLocaleList(locales), options);
    },
});
ecma402_abstract_1.defineProperty(exports.DateTimeFormat.prototype, 'resolvedOptions', {
    value: function resolvedOptions() {
        if (typeof this !== 'object' || !(this instanceof exports.DateTimeFormat)) {
            throw TypeError('Method Intl.DateTimeFormat.prototype.resolvedOptions called on incompatible receiver');
        }
        var internalSlots = get_internal_slots_1.default(this);
        var ro = {};
        for (var _i = 0, RESOLVED_OPTIONS_KEYS_1 = RESOLVED_OPTIONS_KEYS; _i < RESOLVED_OPTIONS_KEYS_1.length; _i++) {
            var key = RESOLVED_OPTIONS_KEYS_1[_i];
            var value = internalSlots[key];
            if (key === 'hourCycle') {
                var hour12 = value === 'h11' || value === 'h12'
                    ? true
                    : value === 'h23' || value === 'h24'
                        ? false
                        : undefined;
                if (hour12 !== undefined) {
                    ro.hour12 = hour12;
                }
            }
            if (ecma402_abstract_1.DATE_TIME_PROPS.indexOf(key) > -1) {
                if (internalSlots.dateStyle !== undefined ||
                    internalSlots.timeStyle !== undefined) {
                    value = undefined;
                }
            }
            if (value !== undefined) {
                ro[key] = value;
            }
        }
        return ro;
    },
});
ecma402_abstract_1.defineProperty(exports.DateTimeFormat.prototype, 'formatToParts', {
    value: function formatToParts(date) {
        if (date === undefined) {
            date = Date.now();
        }
        else {
            date = ecma402_abstract_1.ToNumber(date);
        }
        return ecma402_abstract_1.FormatDateTimeToParts(this, date, {
            getInternalSlots: get_internal_slots_1.default,
            localeData: exports.DateTimeFormat.localeData,
            tzData: exports.DateTimeFormat.tzData,
            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
        });
    },
});
ecma402_abstract_1.defineProperty(exports.DateTimeFormat.prototype, 'formatRangeToParts', {
    value: function formatRangeToParts(startDate, endDate) {
        var dtf = this;
        if (typeof dtf !== 'object') {
            throw new TypeError();
        }
        if (startDate === undefined || endDate === undefined) {
            throw new TypeError('startDate/endDate cannot be undefined');
        }
        var x = ecma402_abstract_1.ToNumber(startDate);
        var y = ecma402_abstract_1.ToNumber(endDate);
        return ecma402_abstract_1.FormatDateTimeRangeToParts(dtf, x, y, {
            getInternalSlots: get_internal_slots_1.default,
            localeData: exports.DateTimeFormat.localeData,
            tzData: exports.DateTimeFormat.tzData,
            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
        });
    },
});
ecma402_abstract_1.defineProperty(exports.DateTimeFormat.prototype, 'formatRange', {
    value: function formatRange(startDate, endDate) {
        var dtf = this;
        if (typeof dtf !== 'object') {
            throw new TypeError();
        }
        if (startDate === undefined || endDate === undefined) {
            throw new TypeError('startDate/endDate cannot be undefined');
        }
        var x = ecma402_abstract_1.ToNumber(startDate);
        var y = ecma402_abstract_1.ToNumber(endDate);
        return ecma402_abstract_1.FormatDateTimeRange(dtf, x, y, {
            getInternalSlots: get_internal_slots_1.default,
            localeData: exports.DateTimeFormat.localeData,
            tzData: exports.DateTimeFormat.tzData,
            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
        });
    },
});
var DEFAULT_TIMEZONE = 'UTC';
exports.DateTimeFormat.__setDefaultTimeZone = function (timeZone) {
    if (timeZone !== undefined) {
        timeZone = String(timeZone);
        if (!ecma402_abstract_1.IsValidTimeZoneName(timeZone, {
            tzData: exports.DateTimeFormat.tzData,
            uppercaseLinks: UPPERCASED_LINKS,
        })) {
            throw new RangeError('Invalid timeZoneName');
        }
        timeZone = ecma402_abstract_1.CanonicalizeTimeZoneName(timeZone, {
            tzData: exports.DateTimeFormat.tzData,
            uppercaseLinks: UPPERCASED_LINKS,
        });
    }
    else {
        timeZone = DEFAULT_TIMEZONE;
    }
    exports.DateTimeFormat.__defaultTimeZone = timeZone;
};
exports.DateTimeFormat.relevantExtensionKeys = ['nu', 'ca', 'hc'];
exports.DateTimeFormat.__defaultTimeZone = DEFAULT_TIMEZONE;
exports.DateTimeFormat.getDefaultTimeZone = function () { return exports.DateTimeFormat.__defaultTimeZone; };
exports.DateTimeFormat.__addLocaleData = function __addLocaleData() {
    var data = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        data[_i] = arguments[_i];
    }
    for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
        var datum = data_1[_a];
        var availableLocales = datum.availableLocales;
        var _loop_1 = function (locale) {
            try {
                var _a = ecma402_abstract_1.unpackData(locale, datum), dateFormat = _a.dateFormat, timeFormat = _a.timeFormat, dateTimeFormat = _a.dateTimeFormat, formats_1 = _a.formats, intervalFormats_1 = _a.intervalFormats, rawData = tslib_1.__rest(_a, ["dateFormat", "timeFormat", "dateTimeFormat", "formats", "intervalFormats"]);
                var processedData = tslib_1.__assign(tslib_1.__assign({}, rawData), { dateFormat: {
                        full: ecma402_abstract_1.parseDateTimeSkeleton(dateFormat.full),
                        long: ecma402_abstract_1.parseDateTimeSkeleton(dateFormat.long),
                        medium: ecma402_abstract_1.parseDateTimeSkeleton(dateFormat.medium),
                        short: ecma402_abstract_1.parseDateTimeSkeleton(dateFormat.short),
                    }, timeFormat: {
                        full: ecma402_abstract_1.parseDateTimeSkeleton(timeFormat.full),
                        long: ecma402_abstract_1.parseDateTimeSkeleton(timeFormat.long),
                        medium: ecma402_abstract_1.parseDateTimeSkeleton(timeFormat.medium),
                        short: ecma402_abstract_1.parseDateTimeSkeleton(timeFormat.short),
                    }, dateTimeFormat: {
                        full: ecma402_abstract_1.parseDateTimeSkeleton(dateTimeFormat.full).pattern,
                        long: ecma402_abstract_1.parseDateTimeSkeleton(dateTimeFormat.long).pattern,
                        medium: ecma402_abstract_1.parseDateTimeSkeleton(dateTimeFormat.medium).pattern,
                        short: ecma402_abstract_1.parseDateTimeSkeleton(dateTimeFormat.short).pattern,
                    }, formats: {} });
                var _loop_2 = function (calendar) {
                    processedData.formats[calendar] = Object.keys(formats_1[calendar]).map(function (skeleton) {
                        return ecma402_abstract_1.parseDateTimeSkeleton(skeleton, formats_1[calendar][skeleton], intervalFormats_1[skeleton], intervalFormats_1.intervalFormatFallback);
                    });
                };
                for (var calendar in formats_1) {
                    _loop_2(calendar);
                }
                exports.DateTimeFormat.localeData[locale] = processedData;
            }
            catch (e) {
                // Ignore if we got no data
            }
        };
        for (var _b = 0, availableLocales_1 = availableLocales; _b < availableLocales_1.length; _b++) {
            var locale = availableLocales_1[_b];
            _loop_1(locale);
        }
    }
    exports.DateTimeFormat.availableLocales = Object.keys(exports.DateTimeFormat.localeData);
    if (!exports.DateTimeFormat.__defaultLocale) {
        exports.DateTimeFormat.__defaultLocale = exports.DateTimeFormat.availableLocales[0];
    }
};
Object.defineProperty(exports.DateTimeFormat.prototype, 'format', formatDescriptor);
exports.DateTimeFormat.__defaultLocale = '';
exports.DateTimeFormat.localeData = {};
exports.DateTimeFormat.availableLocales = [];
exports.DateTimeFormat.getDefaultLocale = function () {
    return exports.DateTimeFormat.__defaultLocale;
};
exports.DateTimeFormat.polyfilled = true;
exports.DateTimeFormat.tzData = {};
exports.DateTimeFormat.__addTZData = function (d) {
    exports.DateTimeFormat.tzData = packer_1.unpack(d);
};
try {
    if (typeof Symbol !== 'undefined') {
        Object.defineProperty(exports.DateTimeFormat.prototype, Symbol.toStringTag, {
            value: 'Intl.DateTimeFormat',
            writable: false,
            enumerable: false,
            configurable: true,
        });
    }
    Object.defineProperty(exports.DateTimeFormat.prototype.constructor, 'length', {
        value: 1,
        writable: false,
        enumerable: false,
        configurable: true,
    });
}
catch (e) {
    // Meta fix so we're test262-compliant, not important
}
