{"version":3,"sources":["webpack://mattermost-webapp/./components/password_reset_form/password_reset_form.js","webpack://mattermost-webapp/./components/password_reset_form/index.js"],"names":["PasswordResetForm","React","constructor","props","super","async","e","preventDefault","password","this","passwordInput","current","value","length","Constants","setState","error","id","defaultMessage","values","chars","token","URLSearchParams","location","search","get","data","actions","resetUserPassword","browserHistory","message","state","render","className","formClass","onSubmit","handlePasswordReset","siteName","type","name","ref","placeholder","t","spellCheck","autoFocus","PropTypes","isRequired","connect","SiteName","getConfig","dispatch","bindActionCreators"],"mappings":"qbAae,MAAMA,UAA0BC,gBAS3CC,YAAYC,GACRC,MAAMD,GADS,8BAUGE,UAClBC,EAAEC,iBAEF,MAAMC,EAAWC,KAAKC,cAAcC,QAAQC,MAC5C,IAAKJ,GAAYA,EAASK,OAASC,yBAY/B,YAXAL,KAAKM,SAAS,CACVC,MACI,gBAAC,IAAD,CACIC,GAAG,sBACHC,eAAe,4CACfC,OAAQ,CACJC,MAAON,8BAQ3BL,KAAKM,SAAS,CAACC,MAAO,OAEtB,MAAMK,EAAS,IAAIC,gBAAgBb,KAAKN,MAAMoB,SAASC,QAASC,IAAI,UAC9D,KAACC,EAAD,MAAOV,SAAeP,KAAKN,MAAMwB,QAAQC,kBAAkBP,EAAOb,GACpEkB,GACAG,SAAoB,gBAAkBf,sBACtCL,KAAKM,SAAS,CAACC,MAAO,QACfA,GACPP,KAAKM,SAAS,CAACC,MAAOA,EAAMc,aAlChCrB,KAAKsB,MAAQ,CACTf,MAAO,MAGXP,KAAKC,cAAgBT,cAkCzB+B,SACI,IAAIhB,EAAQ,KACRP,KAAKsB,MAAMf,QACXA,EACI,uBAAKiB,UAAU,wBACX,yBAAOA,UAAU,iBACZxB,KAAKsB,MAAMf,SAM5B,IAAIkB,EAAY,aAKhB,OAJIlB,IACAkB,GAAa,cAIb,uBAAKD,UAAU,aACX,uBAAKA,UAAU,0BACX,0BACI,gBAAC,IAAD,CACIhB,GAAG,sBACHC,eAAe,oBAGvB,wBAAMiB,SAAU1B,KAAK2B,qBACjB,yBACI,gBAAC,IAAD,CACInB,GAAG,sBACHC,eAAe,oDACfC,OAAQ,CACJkB,SAAU5B,KAAKN,MAAMkC,aAIjC,uBAAKJ,UAAWC,GACZ,gBAAC,IAAD,CACIjB,GAAG,qBACHqB,KAAK,WACLL,UAAU,eACVM,KAAK,WACLC,IAAK/B,KAAKC,cACV+B,YAAa,CAACxB,IAAIyB,OAAE,qBAAsBxB,eAAgB,YAC1DyB,WAAW,QACXC,WAAW,KAGlB5B,EACD,0BACIC,GAAG,sBACHqB,KAAK,SACLL,UAAU,mBAEV,gBAAC,IAAD,CACIhB,GAAG,uBACHC,eAAe,4B,EA1G1BlB,E,YACE,CACfuB,SAAUsB,sBACVR,SAAUQ,WACVlB,QAASkB,UAAgB,CACrBjB,kBAAmBiB,sBACpBC,aCRX,MAWA,GAAeC,cAXUhB,IACrB,MAAOiB,SAAUX,IAAYY,QAAUlB,GACvC,MAAO,CAACM,eAGgBa,IAAD,CACvBvB,SAASwB,wBAAmB,CACxBvB,kBAAiBA,MAClBsB,MAGP,CAA4DlD","file":"109.6c681745a497511a101c.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nexport default class PasswordResetForm extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            resetUserPassword: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n\n        this.passwordInput = React.createRef();\n    }\n\n    handlePasswordReset = async (e) => {\n        e.preventDefault();\n\n        const password = this.passwordInput.current.value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_form.error'\n                        defaultMessage='Please enter at least {chars} characters.'\n                        values={{\n                            chars: Constants.MIN_PASSWORD_LENGTH,\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({error: null});\n\n        const token = (new URLSearchParams(this.props.location.search)).get('token');\n        const {data, error} = await this.props.actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            this.setState({error: null});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {this.state.error}\n                    </label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='signup-team__container'>\n                    <h3>\n                        <FormattedMessage\n                            id='password_form.title'\n                            defaultMessage='Password Reset'\n                        />\n                    </h3>\n                    <form onSubmit={this.handlePasswordReset}>\n                        <p>\n                            <FormattedMessage\n                                id='password_form.enter'\n                                defaultMessage='Enter a new password for your {siteName} account.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                id='resetPasswordInput'\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref={this.passwordInput}\n                                placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                        </div>\n                        {error}\n                        <button\n                            id='resetPasswordButton'\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='password_form.change'\n                                defaultMessage='Change my password'\n                            />\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {resetUserPassword} from 'matterfoss-redux/actions/users';\n\nimport PasswordResetForm from './password_reset_form';\n\nconst mapStateToProps = (state) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"sourceRoot":""}