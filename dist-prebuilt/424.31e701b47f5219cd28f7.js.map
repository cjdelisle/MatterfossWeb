{"version":3,"sources":["webpack://mattermost-webapp/./actions/views/login.js","webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/common/site_name_and_description.tsx","webpack://mattermost-webapp/./components/login/login_controller/login_controller.jsx","webpack://mattermost-webapp/./components/login/login_controller/index.js","webpack://mattermost-webapp/./components/login/login_mfa.jsx","webpack://mattermost-webapp/./images/logo.png"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","LoginController","constructor","super","state","sessionExpired","document","intl","formatMessage","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","e","preventDefault","onDismissSessionExpired","location","newQuery","search","replace","browserHistory","pathname","hash","loginIdInput","current","value","setState","passwordInput","trim","toLowerCase","t","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","serverError","values","ldapUsername","ldapLoginFieldName","submit","token","loading","actions","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","match","name","GlobalActions","target","brandImageError","enableCustomBrand","text","customBrandText","brandImageUrl","Client4","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","options","mentions","imagesMetadata","loginPlaceholders","push","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableSignUpWithOpenId","enableLdap","enableSaml","extraParam","Constants","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","openIdSigninEnabled","samlSigninEnabled","samlEnabled","errorClass","key","onSubmit","preSubmit","margin","ref","onChange","handleLoginIdChange","placeholder","createLoginPlaceholder","spellCheck","autoCapitalize","autoFocus","type","handlePasswordChange","enableOpenServer","checkSignUpEnabled","href","buttonStyle","openidButtonColor","backgroundColor","buttonText","openidButtonText","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","componentDidMount","configureTitle","currentUser","extra","email","set","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","initializing","content","customContent","customClass","backButton","hideMfa","createLoginOptions","createCustomLogin","logoImage","intlShape","PropTypes","isRequired","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableSignUpWithOpenId","LdapLoginFieldName","SamlLoginButtonText","OpenIdButtonText","OpenIdButtonColor","SiteName","requests","users","logout","status","RequestStatus","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators","LoginMfa","saving","handleSubmit","autoComplete","handleChange","disabled","localizeMessage","savingMessage"],"mappings":"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","file":"424.31e701b47f5219cd28f7.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'matterfoss-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'MatterFOSS',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport Markdown from 'components/markdown';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableSignUpWithOpenId: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        openidButtonText: PropTypes.string,\n        openidButtonColor: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n\n        this.loginIdInput = React.createRef();\n        this.passwordInput = React.createRef();\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.passwordInput.current?.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.',\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.loginIdInput.current) {\n            loginId = this.loginIdInput.current.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.passwordInput.current) {\n            password = this.passwordInput.current.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        <Markdown\n                            message={text}\n                            options={\n                                {mentions: false,\n                                    imagesMetadata: null}\n                            }\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableSignUpWithOpenId ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const openIdSigninEnabled = this.props.enableSignUpWithOpenId;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref={this.loginIdInput}\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref={this.passwordInput}\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>,\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>,\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password.'\n                        />\n                    </Link>\n                </div>,\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled || openIdSigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>,\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>,\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GitLabButton'\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    id='GoogleButton'\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    id='Office365Button'\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (openIdSigninEnabled) {\n            const buttonStyle = {};\n            if (this.props.openidButtonColor) {\n                buttonStyle.backgroundColor = this.props.openidButtonColor;\n            }\n            let buttonText = (\n                <FormattedMessage\n                    id='login.openid'\n                    defaultMessage='Open ID'\n                />\n            );\n            if (this.props.openidButtonText) {\n                buttonText = this.props.openidButtonText;\n            }\n            loginControls.push(\n                <a\n                    id='OpenIdButton'\n                    className='btn btn-custom-login openid'\n                    style={buttonStyle}\n                    key='openid'\n                    href={Client4.getOAuthRoute() + '/openid/login' + this.props.location.search}\n                >\n                    <span>\n                        <span>\n                            {buttonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />,\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'matterfoss-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\nimport {RequestStatus} from 'matterfoss-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableSignUpWithOpenId = config.EnableSignUpWithOpenId === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const openidButtonText = config.OpenIdButtonText;\n    const openidButtonColor = config.OpenIdButtonColor;\n\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableSignUpWithOpenId,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        openidButtonText,\n        openidButtonColor,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId.toLowerCase(),\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/37ecfc86d48a22a44e9c13bb44bc7425.png\";"],"sourceRoot":""}