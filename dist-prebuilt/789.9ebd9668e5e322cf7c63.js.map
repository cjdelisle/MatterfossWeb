{"version":3,"sources":["webpack://mattermost-webapp/./stores/hooks.ts","webpack://mattermost-webapp/./components/widgets/header/header.tsx","webpack://mattermost-webapp/./components/threading/common/chat_illustration.tsx","webpack://mattermost-webapp/./components/threading/common/balloon_illustration.tsx","webpack://mattermost-webapp/./components/threading/global_threads/thread_list/thread_list.tsx","webpack://mattermost-webapp/./components/threading/global_threads/thread_menu/thread_menu.tsx","webpack://mattermost-webapp/./components/threading/global_threads/thread_pane/thread_pane.tsx","webpack://mattermost-webapp/./components/threading/global_threads/thread_item/thread_item.tsx","webpack://mattermost-webapp/./components/threading/global_threads/global_threads.tsx","webpack://mattermost-webapp/./actions/views/threads.ts"],"names":["currentUserAndTeamSuffix","createSelector","getCurrentUserId","getCurrentTeamId","userId","teamId","Headings","Fragment","Header","level","heading","subtitle","right","attrs","H","className","classNames","width","height","viewBox","fill","xmlns","clipPath","cx","cy","rx","ry","fillOpacity","d","fillRule","clipRule","opacity","id","transform","ThreadFilter","ThreadList","currentFilter","none","someUnread","children","setFilter","formatMessage","useIntl","dispatch","useDispatch","currentTeamId","currentUserId","clear","useThreadRouting","isActive","onClick","useCallback","defaultMessage","unread","hasDot","disabled","content","markAllThreadsInTeamRead","memo","ThreadMenu","threadId","isFollowing","unreadTimestamp","hasUnreads","params","team","goToInChannel","isSaved","useSelector","state","get","Preferences","stopPropagationOnToggle","ariaLabel","openLeft","text","t","extraText","setThreadFollow","updateThreadRead","Date","now","unsavePost","savePost","copyToClipboard","getSiteURL","getChannel","makeGetChannel","getPostsForThread","makeGetPostsForThread","ThreadPane","thread","select","is_following","post","channel_id","channelId","channel","getPost","postsInThread","rootId","selectHandler","edit_at","create_at","length","p","goToInChannelHandler","followHandler","allowTextOverflow","display_name","Boolean","unread_replies","unread_mentions","markdownPreviewOptions","singleline","mentionHighlight","atMentions","getDisplayName","makeGetDisplayName","ThreadItem","isSelected","displayName","participantIds","getThread","user_id","useMemo","participants","map","useEffect","teammate_id","getMissingProfilesByIds","fetchChannel","e","stopPropagation","history","useLogic","newReplies","newMentions","last_reply_at","lastReplyAt","reply_count","totalReplies","tabIndex","over","Math","min","THREADING_TIME","value","capitalize","message","options","userIds","size","values","GlobalThreads","url","threadIdentifier","useRouteMatch","filter","initialValue","name","suffix","storedKey","makeGetGlobalItem","newValue","setGlobalItem","useGlobalState","counts","getThreadCountsInCurrentTeam","selectedThread","selectedPost","threadIds","getThreadOrderInCurrentTeam","unreadThreadIds","getUnreadThreadOrderInCurrentTeam","numUnread","total_unread_threads","isLoading","total","selectChannel","loadProfilesForSidebar","getThreads","perPage","type","Threads","data","thread_id","team_id","expanded","iconGraphic","ChatIllustration","title","key","BalloonIllustration","rootPostId","useRelativeTimestamp","link","chunks","Link","to"],"mappings":"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","file":"789.9ebd9668e5e322cf7c63.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {useSelector, useDispatch} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {getCurrentTeamId} from 'matterfoss-redux/selectors/entities/teams';\nimport {getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\n\nimport {makeGetGlobalItem} from 'selectors/storage';\nimport {setGlobalItem} from 'actions/storage';\n\nexport const currentUserAndTeamSuffix = createSelector([\n    getCurrentUserId,\n    getCurrentTeamId,\n], (\n    userId,\n    teamId,\n) => {\n    return `:${userId}:${teamId}`;\n});\n\nexport const currentUserSuffix = createSelector([\n    getCurrentUserId,\n], (\n    userId,\n) => {\n    return `:${userId}`;\n});\n\n/**\n *\n * @param initialValue\n * @param name name of stored value, prepended to suffix\n * @param suffix to provide scope; defaults to user and team\n */\nexport function useGlobalState<TVal>(\n    initialValue: TVal,\n    name: string,\n    suffix: string = useSelector(currentUserAndTeamSuffix),\n): [TVal, (value: TVal) => ReturnType<typeof setGlobalItem>] {\n    const dispatch = useDispatch();\n    const storedKey = `${name}${suffix}`;\n\n    return [\n        useSelector(makeGetGlobalItem(storedKey, initialValue)),\n        (newValue) => dispatch(setGlobalItem(storedKey, newValue)),\n    ];\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode, Fragment, HTMLAttributes} from 'react';\nimport classNames from 'classnames';\n\nimport './header.scss';\n\ntype Props = {\n    heading: ReactNode;\n    level?: 0 | 1 | 2 | 3 | 4 | 5 | 6;\n    subtitle?: ReactNode;\n    right?: ReactNode;\n};\n\ntype HeadingTag = keyof Pick<JSX.IntrinsicElements, 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>;\n\nconst Headings: Array<typeof Fragment | HeadingTag> = [Fragment, 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nconst Header = ({\n    level = 0,\n    heading,\n    subtitle,\n    right,\n    ...attrs\n}: Props & HTMLAttributes<HTMLElement>) => {\n    const H = Headings[level];\n    return (\n        <header\n            {...attrs}\n            className={classNames('Header', attrs.className)}\n        >\n            <div className='left'>\n                <H>{heading}</H>\n                {subtitle ? <p>{subtitle}</p> : null}\n            </div>\n            <div className='spacer'/>\n            {right}\n        </header>\n    );\n};\n\nexport default Header;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst ChatIllustration = (\n    <svg\n        width='234'\n        height='156'\n        viewBox='0 0 234 156'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0)'>\n            <ellipse\n                cx='117'\n                cy='149.878'\n                rx='117'\n                ry='4.03395'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.08'\n            />\n            <path\n                d='M129.797 150.773C139.288 150.773 146.981 149.998 146.981 149.042C146.981 148.086 139.288 147.311 129.797 147.311C120.306 147.311 112.613 148.086 112.613 149.042C112.613 149.998 120.306 150.773 129.797 150.773Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M100.181 150.978C115.528 150.978 127.969 150.157 127.969 149.144C127.969 148.131 115.528 147.311 100.181 147.311C84.8347 147.311 72.3938 148.131 72.3938 149.144C72.3938 150.157 84.8347 150.978 100.181 150.978Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.16'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M119.084 132.652L117.389 134.816L119.248 133.584C119.327 134.03 119.391 134.478 119.441 134.928C122.973 132.109 127.104 130.578 127.104 130.578C127.104 130.578 126.988 131.683 126.67 133.319L125.407 133.774L126.579 133.775C126.31 135.095 125.974 136.398 125.572 137.676L123.106 138.564L125.275 138.567C124.664 140.406 123.8 142.13 122.714 143.681C119.199 148.463 114.931 151.075 113.182 149.515C113.045 149.393 112.928 149.25 112.83 149.086C111.408 147.383 110.77 143.068 111.382 138.19C111.46 137.585 111.572 136.987 111.718 136.398L113.48 138.465L112.072 135.142C113.653 130.138 117.064 125.704 117.064 125.704C117.064 125.704 117.484 126.716 117.979 128.297L117.112 129.405L118.115 128.74C118.505 130.023 118.828 131.329 119.084 132.652Z'\n                fill='white'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M119.084 132.652L117.389 134.816L119.248 133.584C119.327 134.03 119.391 134.478 119.441 134.928C122.973 132.109 127.104 130.578 127.104 130.578C127.104 130.578 126.988 131.683 126.67 133.319L125.407 133.774L126.579 133.775C126.31 135.095 125.974 136.398 125.572 137.676L123.106 138.564L125.275 138.567C124.664 140.406 123.8 142.13 122.714 143.681C119.199 148.463 114.931 151.075 113.182 149.515C113.045 149.393 112.928 149.25 112.83 149.086C111.408 147.383 110.77 143.068 111.382 138.19C111.46 137.585 111.572 136.987 111.718 136.398L113.48 138.465L112.072 135.142C113.653 130.138 117.064 125.704 117.064 125.704C117.064 125.704 117.484 126.716 117.979 128.297L117.112 129.405L118.115 128.74C118.505 130.023 118.828 131.329 119.084 132.652Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M154.294 150.244C158.736 150.244 162.338 149.752 162.338 149.144C162.338 148.537 158.736 148.044 154.294 148.044C149.851 148.044 146.25 148.537 146.25 149.144C146.25 149.752 149.851 150.244 154.294 150.244Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.16'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M144.336 140.849L144.001 142.065L144.555 141.195C145.007 141.908 145.357 142.693 145.593 143.522C146.125 142.017 146.87 140.613 147.8 139.363C147.8 139.363 147.986 139.814 148.207 140.517L147.821 141.01L148.267 140.714C148.44 141.284 148.584 141.865 148.698 142.453L147.944 143.416L148.771 142.868C148.807 143.071 148.836 143.276 148.858 143.481C149.906 142.661 151.052 142.005 152.264 141.531C152.264 141.531 152.213 142.023 152.072 142.75L151.51 142.952L152.031 142.953C151.912 143.54 151.762 144.119 151.583 144.688L150.486 145.083L151.451 145.084C151.179 145.902 150.795 146.669 150.312 147.359C148.749 149.486 146.851 150.647 146.073 149.953C146.012 149.899 145.959 149.835 145.916 149.762C145.704 149.508 145.532 149.125 145.406 148.646C145.312 148.738 145.208 148.805 145.092 148.841C145.017 148.865 144.94 148.875 144.86 148.873C143.934 149.009 142.344 148.164 140.887 146.674C140.707 146.489 140.538 146.291 140.38 146.083L141.514 145.903L140.055 145.62C139.23 144.268 138.606 142.779 138.206 141.21C138.206 141.21 138.648 141.299 139.298 141.504L139.443 142.135L139.479 141.562C140.002 141.733 140.517 141.936 141.02 142.171L141.303 143.403L141.37 142.343C141.542 142.427 141.71 142.518 141.876 142.616C141.867 141.201 142.036 139.79 142.379 138.424C142.379 138.424 142.715 138.752 143.175 139.297L143.004 139.92L143.303 139.45C143.671 139.894 144.016 140.362 144.336 140.849ZM145.825 144.593C145.775 144.301 145.712 144.002 145.637 143.699L146.206 145.039L145.825 144.593Z'\n                fill='white'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M144.336 140.849L144.001 142.065L144.555 141.195C145.007 141.908 145.357 142.693 145.593 143.522C146.125 142.017 146.87 140.613 147.8 139.363C147.8 139.363 147.986 139.814 148.207 140.517L147.821 141.01L148.267 140.714C148.44 141.284 148.584 141.865 148.698 142.453L147.944 143.416L148.771 142.868C148.807 143.071 148.836 143.276 148.858 143.481C149.906 142.661 151.052 142.005 152.264 141.531C152.264 141.531 152.213 142.023 152.072 142.75L151.51 142.952L152.031 142.953C151.912 143.54 151.762 144.119 151.583 144.688L150.486 145.083L151.451 145.084C151.179 145.902 150.795 146.669 150.312 147.359C148.749 149.486 146.851 150.647 146.073 149.953C146.012 149.899 145.959 149.835 145.916 149.762C145.704 149.508 145.532 149.125 145.406 148.646C145.312 148.738 145.208 148.805 145.092 148.841C145.017 148.865 144.94 148.875 144.86 148.873C143.934 149.009 142.344 148.164 140.887 146.674C140.707 146.489 140.538 146.291 140.38 146.083L141.514 145.903L140.055 145.62C139.23 144.268 138.606 142.779 138.206 141.21C138.206 141.21 138.648 141.299 139.298 141.504L139.443 142.135L139.479 141.562C140.002 141.733 140.517 141.936 141.02 142.171L141.303 143.403L141.37 142.343C141.542 142.427 141.71 142.518 141.876 142.616C141.867 141.201 142.036 139.79 142.379 138.424C142.379 138.424 142.715 138.752 143.175 139.297L143.004 139.92L143.303 139.45C143.671 139.894 144.016 140.362 144.336 140.849ZM145.825 144.593C145.775 144.301 145.712 144.002 145.637 143.699L146.206 145.039L145.825 144.593Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M148.444 3.62159C148.444 1.96473 147.101 0.621582 145.444 0.621582H49.8C48.1432 0.621582 46.8 1.96473 46.8 3.62158V59.7488C46.8 61.4057 48.1432 62.7488 49.8 62.7488H59.7108V79.8337L73.6195 62.7488H145.444C147.101 62.7488 148.444 61.4057 148.444 59.7488V3.62159Z'\n                fill='white'\n            />\n            <path\n                opacity='0.24'\n                d='M148.444 3.62159C148.444 1.96473 147.101 0.621582 145.444 0.621582H49.8C48.1432 0.621582 46.8 1.96473 46.8 3.62158V59.7488C46.8 61.4057 48.1432 62.7488 49.8 62.7488H59.7108V79.8337L73.6195 62.7488H145.444C147.101 62.7488 148.444 61.4057 148.444 59.7488V3.62159Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                d='M130.095 18.8716H65.1496C64.2204 18.8716 63.467 19.6249 63.467 20.5542C63.467 21.4835 64.2204 22.2368 65.1496 22.2368H130.095C131.024 22.2368 131.777 21.4835 131.777 20.5542C131.777 19.6249 131.024 18.8716 130.095 18.8716Z'\n                fill='white'\n            />\n            <path\n                d='M130.095 30.0029H65.1496C64.2204 30.0029 63.467 30.7563 63.467 31.6855C63.467 32.6148 64.2204 33.3681 65.1496 33.3681H130.095C131.024 33.3681 131.777 32.6148 131.777 31.6855C131.777 30.7563 131.024 30.0029 130.095 30.0029Z'\n                fill='white'\n            />\n            <path\n                d='M130.095 41.1338H65.1496C64.2204 41.1338 63.467 41.8871 63.467 42.8164C63.467 43.7457 64.2204 44.499 65.1496 44.499H130.095C131.024 44.499 131.777 43.7457 131.777 42.8164C131.777 41.8871 131.024 41.1338 130.095 41.1338Z'\n                fill='white'\n            />\n            <path\n                d='M108.956 56.4297C108.956 54.7728 110.299 53.4297 111.956 53.4297H187.856C189.513 53.4297 190.856 54.7728 190.856 56.4297V100.477C190.856 102.134 189.513 103.477 187.856 103.477H180.453V117.239L169.246 103.477H111.956C110.299 103.477 108.956 102.134 108.956 100.477V56.4297Z'\n                fill='white'\n            />\n            <path\n                opacity='0.48'\n                d='M108.956 56.4297C108.956 54.7728 110.299 53.4297 111.956 53.4297H187.856C189.513 53.4297 190.856 54.7728 190.856 56.4297V100.477C190.856 102.134 189.513 103.477 187.856 103.477H180.453V117.239L169.246 103.477H111.956C110.299 103.477 108.956 102.134 108.956 100.477V56.4297Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                d='M123.741 68.1309H176.071C176.82 68.1309 177.427 68.7377 177.427 69.4863C177.427 70.2349 176.82 70.8417 176.071 70.8417H123.741C122.992 70.8417 122.385 70.2349 122.385 69.4863C122.385 68.7377 122.992 68.1309 123.741 68.1309Z'\n                fill='white'\n            />\n            <path\n                d='M123.741 77.0977H176.071C176.82 77.0977 177.427 77.7045 177.427 78.4531C177.427 79.2017 176.82 79.8085 176.071 79.8085H123.741C122.992 79.8085 122.385 79.2017 122.385 78.4531C122.385 77.7045 122.992 77.0977 123.741 77.0977Z'\n                fill='white'\n            />\n            <path\n                d='M123.741 86.0645H176.071C176.82 86.0645 177.427 86.6713 177.427 87.4199C177.427 88.1685 176.82 88.7753 176.071 88.7753H123.741C122.992 88.7753 122.385 88.1685 122.385 87.4199C122.385 86.6713 122.992 86.0645 123.741 86.0645Z'\n                fill='white'\n            />\n            <path\n                d='M87.7324 149.412C88.8312 149.412 89.7221 148.238 89.7221 146.79C89.7221 145.341 88.8312 144.167 87.7324 144.167C86.6335 144.167 85.7427 145.341 85.7427 146.79C85.7427 148.238 86.6335 149.412 87.7324 149.412Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 146.208C88.8312 146.208 89.7221 145.034 89.7221 143.586C89.7221 142.138 88.8312 140.963 87.7324 140.963C86.6335 140.963 85.7427 142.138 85.7427 143.586C85.7427 145.034 86.6335 146.208 87.7324 146.208Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 143C88.8312 143 89.7221 141.826 89.7221 140.377C89.7221 138.929 88.8312 137.755 87.7324 137.755C86.6335 137.755 85.7427 138.929 85.7427 140.377C85.7427 141.826 86.6335 143 87.7324 143Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 139.796C88.8312 139.796 89.7221 138.622 89.7221 137.173C89.7221 135.725 88.8312 134.551 87.7324 134.551C86.6335 134.551 85.7427 135.725 85.7427 137.173C85.7427 138.622 86.6335 139.796 87.7324 139.796Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 136.587C88.8312 136.587 89.7221 135.413 89.7221 133.965C89.7221 132.516 88.8312 131.342 87.7324 131.342C86.6335 131.342 85.7427 132.516 85.7427 133.965C85.7427 135.413 86.6335 136.587 87.7324 136.587Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 133.384C88.8312 133.384 89.7221 132.21 89.7221 130.761C89.7221 129.313 88.8312 128.139 87.7324 128.139C86.6335 128.139 85.7427 129.313 85.7427 130.761C85.7427 132.21 86.6335 133.384 87.7324 133.384Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M87.7324 130.175C88.8312 130.175 89.7221 129.001 89.7221 127.552C89.7221 126.104 88.8312 124.93 87.7324 124.93C86.6335 124.93 85.7427 126.104 85.7427 127.552C85.7427 129.001 86.6335 130.175 87.7324 130.175Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M95.1779 105.612C95.4495 105.264 95.6971 104.897 95.9188 104.514L90.6906 103.651L96.3421 103.693C96.8845 102.505 97.1806 101.217 97.2125 99.9093C97.2443 98.6015 97.0112 97.3009 96.5273 96.0868L88.939 100.053L95.9347 94.8715C95.2779 93.7345 94.396 92.7457 93.3439 91.9664C92.2917 91.1872 91.0917 90.6343 89.8184 90.3419C88.5451 90.0496 87.2258 90.0242 85.9423 90.2672C84.6589 90.5101 83.4387 91.0164 82.3577 91.7544C81.2766 92.4925 80.3578 93.4465 79.6583 94.5574C78.9588 95.6682 78.4935 96.9121 78.2913 98.2117C78.0892 99.5113 78.1545 100.839 78.4833 102.112C78.812 103.385 79.3971 104.577 80.2023 105.612C79.7784 106.156 79.413 106.744 79.1122 107.366L85.9015 110.916L78.6624 108.469C78.3303 109.462 78.1605 110.503 78.1597 111.55C78.1557 113.704 78.8757 115.795 80.2023 117.483C79.0984 118.899 78.4121 120.598 78.2218 122.388C78.0315 124.178 78.3448 125.986 79.1261 127.605C79.9074 129.224 81.125 130.589 82.6399 131.544C84.1547 132.498 85.9057 133.005 87.6928 133.005C89.4798 133.005 91.2308 132.498 92.7456 131.544C94.2605 130.589 95.4781 129.224 96.2594 127.605C97.0407 125.986 97.354 124.178 97.1637 122.388C96.9734 120.598 96.2872 118.899 95.1832 117.483C96.5048 115.791 97.2228 113.7 97.2219 111.547C97.2209 109.394 96.501 107.303 95.1779 105.612Z'\n                fill='var(--online-indicator, #06D6A0)'\n            />\n            <path\n                opacity='0.1'\n                d='M78.1597 111.545C78.1557 113.698 78.8757 115.789 80.2023 117.478C79.0984 118.893 78.4121 120.593 78.2218 122.383C78.0315 124.173 78.3448 125.981 79.1261 127.6C79.9074 129.218 81.125 130.583 82.6399 131.538C84.1547 132.493 85.9057 133 87.6928 133C89.4798 133 91.2308 132.493 92.7456 131.538C94.2605 130.583 95.4781 129.218 96.2594 127.6C97.0407 125.981 97.3541 124.173 97.1638 122.383C96.9735 120.593 96.2872 118.893 95.1833 117.478C96.4586 115.847 78.1597 110.468 78.1597 111.545Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M71.396 133.35L70.7304 135.764L71.8302 134.038C72.728 135.455 73.4232 137.016 73.8916 138.665C75.2513 143.886 74.8056 148.607 72.8962 149.21C72.7469 149.257 72.593 149.278 72.4356 149.273C70.5978 149.543 67.443 147.867 64.5515 144.91C64.1942 144.543 63.8582 144.15 63.5456 143.736L65.7943 143.379L62.8998 142.819C60.4156 139.026 59.2312 134.066 59.2312 134.066C59.2312 134.066 60.108 134.244 61.3969 134.65L61.6851 135.902L61.7561 134.765C62.7954 135.104 63.8165 135.508 64.8145 135.974L65.3774 138.419L65.5089 136.315C65.8415 136.478 66.1683 136.654 66.4888 136.842C66.4265 132.602 67.5119 128.538 67.5119 128.538C67.5119 128.538 68.1787 129.19 69.0918 130.271L68.751 131.506L69.3451 130.574C70.0756 131.456 70.7603 132.383 71.396 133.35Z'\n                fill='white'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M71.396 133.35L70.7304 135.764L71.8302 134.038C72.728 135.455 73.4232 137.016 73.8916 138.665C75.2513 143.886 74.8056 148.607 72.8962 149.21C72.7469 149.257 72.593 149.278 72.4356 149.273C70.5978 149.543 67.443 147.867 64.5515 144.91C64.1942 144.543 63.8582 144.15 63.5456 143.736L65.7943 143.379L62.8998 142.819C60.4156 139.026 59.2312 134.066 59.2312 134.066C59.2312 134.066 60.108 134.244 61.3969 134.65L61.6851 135.902L61.7561 134.765C62.7954 135.104 63.8165 135.508 64.8145 135.974L65.3774 138.419L65.5089 136.315C65.8415 136.478 66.1683 136.654 66.4888 136.842C66.4265 132.602 67.5119 128.538 67.5119 128.538C67.5119 128.538 68.1787 129.19 69.0918 130.271L68.751 131.506L69.3451 130.574C70.0756 131.456 70.7603 132.383 71.396 133.35Z'\n                fill='var(--center-channel-color, #3D3C40)'\n                fillOpacity='0.32'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0'>\n                <rect\n                    width='234'\n                    height='154.757'\n                    fill='white'\n                    transform='translate(0 0.621582)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default ChatIllustration;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst BalloonIllustration = (\n    <svg\n        width='156'\n        height='225'\n        viewBox='0 0 156 225'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M74.5516 143.929C75.0336 142.195 76.1017 140.693 77.861 140.086L78.0649 140.68C76.5568 141.201 75.6 142.497 75.1551 144.098C74.7096 145.701 74.791 147.573 75.3334 149.154C75.8833 150.758 76.7426 152.23 77.6298 153.729C77.6572 153.775 77.6847 153.822 77.7122 153.868C78.568 155.313 79.4413 156.788 80.0328 158.393L80.0345 158.398L80.0361 158.403C80.5882 160.059 80.9848 161.764 81.2204 163.494C81.9031 167.562 82.5984 171.757 82.0645 175.91C81.5574 179.855 79.9655 183.562 78.2085 187.075L77.9284 186.935L78.2084 187.075C74.8021 193.885 70.6587 200.298 65.853 206.199L65.3678 205.801C70.1443 199.936 74.2627 193.562 77.6484 186.794C79.3984 183.294 80.95 179.666 81.4431 175.83C81.9634 171.782 81.2873 167.679 80.6018 163.593L80.601 163.589L80.6004 163.584C80.3702 161.892 79.9829 160.226 79.4435 158.606C78.8721 157.057 78.0256 155.628 77.1623 154.17C77.1386 154.13 77.1148 154.09 77.0911 154.049C76.2078 152.557 75.3149 151.032 74.741 149.358C74.1595 147.663 74.0702 145.662 74.5516 143.929Z'\n            fill='var(--center-channel-color, #3D3C40)'\n        />\n        <path\n            d='M79.8193 141.655C78.1486 140.579 76.4779 140.579 74.8073 141.655V136.628H79.8193V141.655Z'\n            fill='var(--button-bg, #166DE0)'\n        />\n        <path\n            d='M103 102.073C103 116.473 91.3594 139.456 77 139.456C62.6406 139.456 51 116.473 51 102.073C51 95.1583 53.7393 88.5265 58.6152 83.6367C63.4912 78.747 70.1044 76 77 76C83.8956 76 90.5088 78.747 95.3848 83.6367C100.261 88.5265 103 95.1583 103 102.073Z'\n            fill='var(--button-bg, #166DE0)'\n        />\n        <path\n            opacity='0.7'\n            d='M92.0208 94.452C93.4506 93.615 93.7051 91.391 92.5891 89.4844C91.473 87.5779 89.4092 86.7109 87.9793 87.5479C86.5494 88.3849 86.295 90.609 87.411 92.5155C88.527 94.422 90.5909 95.289 92.0208 94.452Z'\n            fill='var(--button-color, #FFFFFF)'\n        />\n        <g opacity='0.5'>\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M117.117 87.2535C117.487 85.9193 118.309 84.7642 119.662 84.2969L119.819 84.7538C118.659 85.1544 117.923 86.1517 117.581 87.3832C117.238 88.6164 117.301 90.0558 117.718 91.2724C118.141 92.5059 118.802 93.6384 119.484 94.7914C119.506 94.827 119.527 94.8628 119.548 94.8985C120.206 96.0101 120.878 97.1444 121.333 98.3794L121.334 98.383L121.335 98.3866C121.76 99.6607 122.065 100.972 122.246 102.303C122.772 105.433 123.306 108.659 122.896 111.854C122.506 114.889 121.281 117.74 119.93 120.443L119.714 120.334L119.93 120.443C117.309 125.681 114.122 130.614 110.425 135.153L110.052 134.847C113.726 130.336 116.894 125.433 119.499 120.226C120.845 117.534 122.038 114.743 122.418 111.792C122.818 108.679 122.298 105.522 121.771 102.38L121.77 102.376L121.769 102.372C121.592 101.071 121.295 99.789 120.88 98.5434C120.44 97.3518 119.789 96.2522 119.125 95.1306C119.107 95.0998 119.088 95.0689 119.07 95.0381C118.391 93.8902 117.704 92.7169 117.262 91.4296C116.815 90.1255 116.746 88.586 117.117 87.2535Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M121.169 85.5035C119.884 84.6765 118.598 84.6765 117.313 85.5035V81.6372H121.169V85.5035Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                d='M139 55.0565C139 66.1334 130.046 83.8122 119 83.8122C107.954 83.8122 99 66.1334 99 55.0565C99 49.7372 101.107 44.6357 104.858 40.8744C108.609 37.1131 113.696 35 119 35C124.304 35 129.391 37.1131 133.142 40.8744C136.893 44.6357 139 49.7372 139 55.0565Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                opacity='0.7'\n                d='M130.554 49.1939C131.654 48.55 131.85 46.8392 130.992 45.3726C130.133 43.9061 128.546 43.2392 127.446 43.883C126.346 44.5269 126.15 46.2377 127.008 47.7043C127.867 49.1708 129.455 49.8377 130.554 49.1939Z'\n                fill='var(--button-color, #FFFFFF)'\n            />\n        </g>\n        <g opacity='0.3'>\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M29.6816 37.6224C29.9412 36.6618 30.5163 35.8301 31.4636 35.4937L31.5734 35.8227C30.7614 36.1111 30.2462 36.8291 30.0066 37.7158C29.7667 38.6037 29.8105 39.6401 30.1026 40.516C30.3987 41.4041 30.8614 42.2196 31.3391 43.0497C31.3539 43.0754 31.3687 43.1011 31.3835 43.1268C31.8443 43.9272 32.3145 44.7438 32.6331 45.6331L32.634 45.6356L32.6348 45.6382C32.9321 46.5556 33.1456 47.4997 33.2726 48.4581C33.6401 50.7114 34.0145 53.0343 33.727 55.3347C33.454 57.5196 32.5968 59.5727 31.6507 61.5186L31.4999 61.4406L31.6507 61.5186C29.8165 65.2902 27.5854 68.842 24.9978 72.11L24.7365 71.8899C27.3085 68.6416 29.5261 65.1113 31.3492 61.3626C32.2915 59.4245 33.127 57.4147 33.3925 55.2902C33.6726 53.0486 33.3086 50.776 32.9394 48.5132L32.939 48.5105L32.9387 48.5078C32.8147 47.5709 32.6062 46.648 32.3157 45.7511C32.0081 44.8932 31.5523 44.1015 31.0874 43.294C31.0746 43.2718 31.0618 43.2495 31.049 43.2273C30.5734 42.4009 30.0927 41.5561 29.7836 40.6292C29.4705 39.6902 29.4224 38.5818 29.6816 37.6224Z'\n                fill='var(--center-channel-color, #3D3C40)'\n            />\n            <path\n                d='M32.5181 36.3628C31.6185 35.7674 30.7189 35.7674 29.8193 36.3628V33.5791H32.5181V36.3628Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                d='M45 14.4407C45 22.4161 38.732 35.1448 31 35.1448C23.268 35.1448 17 22.4161 17 14.4407C17 10.6108 18.475 6.93773 21.1005 4.22958C23.726 1.52142 27.287 0 31 0C34.713 0 38.274 1.52142 40.8995 4.22958C43.525 6.93773 45 10.6108 45 14.4407Z'\n                fill='var(--button-bg, #166DE0)'\n            />\n            <path\n                opacity='0.7'\n                d='M39.0881 10.2198C39.858 9.75621 39.995 8.52441 39.3941 7.4685C38.7932 6.41258 37.6819 5.9324 36.9119 6.39597C36.142 6.85955 36.005 8.09134 36.6059 9.14726C37.2068 10.2032 38.3181 10.6834 39.0881 10.2198Z'\n                fill='var(--button-color, #FFFFFF)'\n            />\n        </g>\n        <path\n            d='M113.421 162.717C113.421 162.717 95.5003 168.004 102.221 180.074C102.221 180.074 102.634 182.489 104.98 182.799C104.98 182.799 104.661 181.826 106.552 181.512C107.221 181.393 107.872 181.192 108.491 180.914C109.33 180.541 110.019 179.891 110.455 179.065C110.455 179.065 114.613 175.141 113.467 166.039C113.467 166.039 114.214 163.691 113.987 163.24L111.507 165.637C111.507 165.637 113.329 167.494 113.21 169.634C113.21 169.634 111.657 165.674 111.123 165.973C111.008 166.015 109.865 167.308 109.865 167.308C109.865 167.308 113.023 170.552 112.736 173.848C112.736 173.848 111.491 168.888 109.423 167.785L107.809 169.834C107.809 169.834 111.303 173.096 111.116 176.868C111.116 176.868 109.643 171.725 107.483 170.301L106.159 172.527C106.159 172.527 109.507 175.778 109.334 178.914C109.334 178.914 107.049 173.135 105.887 173.058C105.887 173.058 104.791 175.179 104.765 175.896C104.765 175.896 107.126 178.303 106.86 180.094C106.86 180.094 104.943 176.386 104.512 176.521C104.512 176.521 103.806 179.699 104.273 181.51C103.761 179.848 103.674 178.089 104.021 176.406C103.14 176.94 102.436 177.732 101.995 178.686C101.995 178.686 101.589 176.77 104.201 175.638C104.201 175.638 104.871 173.177 105.168 172.932C105.168 172.932 102.428 173.67 101.091 175.003C101.091 175.003 101.881 172.771 105.498 172.334L106.764 170.075C106.764 170.075 103.089 170.865 101.801 171.941C101.801 171.941 102.953 169.8 107.132 169.529L108.7 167.525C108.7 167.525 105.473 167.945 103.785 168.83C103.785 168.83 105.277 167.093 109.169 166.964L110.374 165.757C110.374 165.757 108.028 166.106 107.359 166.268C106.689 166.43 106.592 166.259 106.592 166.259C107.889 165.514 109.37 165.162 110.871 165.243C110.871 165.243 113.548 162.897 113.421 162.717Z'\n            fill='var(--online-indicator, #06D6A0)'\n        />\n        <path\n            d='M0.35387 95.0252C0.35387 95.0252 19.0016 93.8532 16.8229 107.495C16.8229 107.495 17.2615 109.905 15.1644 111C15.1644 111 15.1302 109.977 13.2457 110.33C12.5765 110.447 11.8963 110.481 11.2192 110.432C10.3039 110.369 9.43347 109.995 8.74103 109.368C8.74103 109.368 3.49032 107.106 1.44889 98.1616C1.44889 98.1616 -0.0575027 96.2123 0.00170135 95.7107L3.15221 97.1126C3.15221 97.1126 2.07734 99.4818 2.92154 101.452C2.92154 101.452 3.02461 97.1991 3.62804 97.2969C3.75084 97.2969 5.26731 98.12 5.26731 98.12C5.26731 98.12 3.41226 102.249 4.81078 105.248C4.81078 105.248 4.28103 100.162 5.84619 98.4168L8.06434 99.7886C8.06434 99.7886 5.90013 104.051 7.3675 107.531C7.3675 107.531 6.98947 102.194 8.53051 100.116L10.5377 101.754C10.5377 101.754 8.50597 105.955 9.74267 108.842C9.74267 108.842 9.90929 102.63 10.9745 102.159C10.9745 102.159 12.7313 103.776 13.0015 104.441C13.0015 104.441 11.6078 107.511 12.4713 109.103C12.4713 109.103 13.0015 104.963 13.4527 104.942C13.4527 104.942 15.2047 107.685 15.3863 109.547C15.2985 107.81 14.7775 106.128 13.8746 104.665C14.8856 104.865 15.8186 105.368 16.5589 106.114C16.5589 106.114 16.284 104.174 13.4426 104.006C13.4426 104.006 11.9705 101.923 11.6073 101.795C11.6073 101.795 14.4338 101.55 16.1467 102.344C16.1467 102.344 14.6403 100.517 11.0921 101.346L9.12912 99.6574C9.12912 99.6574 12.8524 99.1406 14.4311 99.7104C14.4311 99.7104 12.6156 98.0935 8.5963 99.2705L6.43691 97.9248C6.43691 97.9248 9.61196 97.2137 11.5012 97.4675C11.5012 97.4675 9.5041 96.3467 5.80366 97.5589L4.25778 96.8374C4.25778 96.8374 6.58206 96.3613 7.26619 96.2845C7.95032 96.2077 7.98279 96.0134 7.98279 96.0134C6.50964 95.7578 4.99733 95.935 3.6153 96.525C3.6153 96.525 0.296421 95.2383 0.35387 95.0252Z'\n            fill='var(--online-indicator, #06D6A0)'\n        />\n        <ellipse\n            cx='75.5'\n            cy='221'\n            rx='33.5'\n            ry='4'\n            fill='var(--center-channel-color, #3D3C40)'\n            fillOpacity='0.08'\n        />\n        <ellipse\n            cx='34.5'\n            cy='213'\n            rx='16.5'\n            ry='2'\n            fill='var(--center-channel-color, #3D3C40)'\n            fillOpacity='0.08'\n        />\n        <ellipse\n            cx='119'\n            cy='212'\n            rx='26'\n            ry='3'\n            fill='var(--center-channel-color, #3D3C40)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M155.834 79.0095C155.834 79.0095 147.05 78.5689 148.085 83.6854C148.085 83.6854 147.876 84.5898 148.865 85C148.865 85 148.881 84.621 149.767 84.7502C150.082 84.7937 150.402 84.8065 150.721 84.7884C151.151 84.7648 151.561 84.6257 151.888 84.392C151.888 84.392 154.357 83.5439 155.317 80.1897C155.317 80.1897 156.027 79.4578 155.999 79.2696L154.517 79.7959C154.517 79.7959 155.024 80.6848 154.621 81.4233C154.621 81.4233 154.573 79.8277 154.288 79.8624C154.231 79.8694 153.518 80.1702 153.518 80.1702C153.518 80.1702 154.389 81.7181 153.732 82.8438C153.732 82.8438 153.981 80.9361 153.246 80.2821L152.203 80.7886C152.203 80.7886 153.221 82.3877 152.53 83.6928C152.53 83.6928 152.707 81.6913 151.983 80.9117L151.037 81.5248C151.037 81.5248 151.994 83.1004 151.411 84.1829C151.411 84.1829 151.335 81.8536 150.833 81.6776C150.833 81.6776 150.005 82.2846 149.879 82.5326C149.879 82.5326 150.534 83.6773 150.127 84.2808C150.127 84.2808 149.878 82.7286 149.674 82.7199C149.674 82.7199 148.849 83.7484 148.764 84.4543C148.764 84.4543 148.799 83.4058 149.474 82.6228C149.474 82.6228 148.677 82.7364 148.212 83.1653C148.212 83.1653 148.34 82.4386 149.678 82.3744C149.678 82.3744 150.359 81.594 150.54 81.5472C150.54 81.5472 149.211 81.4542 148.405 81.7518C148.405 81.7518 149.114 81.0659 150.785 81.3781L151.718 80.7442C151.718 80.7442 149.968 80.5455 149.225 80.765C149.225 80.765 150.079 80.158 151.97 80.6003L152.986 80.0955C152.986 80.0955 151.493 79.8284 150.604 79.9221C150.604 79.9221 151.543 79.5015 153.284 79.9577L154.015 79.6864C154.015 79.6864 152.921 79.5078 152.601 79.4792C152.281 79.4506 152.264 79.3778 152.264 79.3778C152.957 79.2818 153.668 79.3475 154.318 79.5677C154.318 79.5677 155.861 79.0902 155.834 79.0095Z'\n            fill='var(--online-indicator, #06D6A0)'\n        />\n    </svg>\n);\n\nexport default BalloonIllustration;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, PropsWithChildren} from 'react';\nimport {FormattedMessage, useIntl} from 'react-intl';\nimport {useDispatch} from 'react-redux';\n\nimport {markAllThreadsInTeamRead} from 'matterfoss-redux/actions/threads';\n\nimport SimpleTooltip from 'components/widgets/simple_tooltip';\nimport Header from 'components/widgets/header';\n\nimport Button from '../../common/button';\n\nimport './thread_list.scss';\nimport {useThreadRouting} from '../../hooks';\n\nexport enum ThreadFilter {\n    none = '',\n    unread = 'unread'\n}\n\nexport const FILTER_STORAGE_KEY = 'globalThreads_filter';\n\ntype Props = {\n    currentFilter: ThreadFilter;\n    someUnread: boolean;\n    setFilter: (filter: ThreadFilter) => void;\n};\n\nconst ThreadList = ({\n    currentFilter = ThreadFilter.none,\n    someUnread,\n    children,\n    setFilter,\n}: PropsWithChildren<Props>) => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const {currentTeamId, currentUserId, clear} = useThreadRouting();\n\n    return (\n        <div className={'ThreadList'}>\n            <Header\n                heading={(\n                    <>\n                        <Button\n                            className={'Button___large Margined'}\n                            isActive={currentFilter === ''}\n                            onClick={useCallback(() => setFilter(ThreadFilter.none), [])}\n                        >\n                            <FormattedMessage\n                                id='threading.filters.allThreads'\n                                defaultMessage='All your threads'\n                            />\n                        </Button>\n                        <Button\n                            className={'Button___large Margined'}\n                            isActive={currentFilter === ThreadFilter.unread}\n                            hasDot={someUnread}\n                            onClick={useCallback(() => {\n                                setFilter(ThreadFilter.unread);\n                            }, [setFilter])}\n                        >\n                            <FormattedMessage\n                                id='threading.filters.unreads'\n                                defaultMessage='Unreads'\n                            />\n                        </Button>\n                    </>\n                )}\n                right={(\n                    <div className='right-anchor'>\n                        <SimpleTooltip\n                            id='threadListMarkRead'\n                            disabled={!someUnread}\n                            content={formatMessage({\n                                id: 'threading.threadList.markRead',\n                                defaultMessage: 'Mark all as read',\n                            })}\n                        >\n                            <Button\n                                className={'Button___large Button___icon'}\n                                disabled={!someUnread}\n                                onClick={useCallback(() => {\n                                    dispatch(markAllThreadsInTeamRead(currentUserId, currentTeamId));\n                                    if (currentFilter === ThreadFilter.unread) {\n                                        clear();\n                                    }\n                                }, [currentTeamId, currentUserId])}\n                            >\n                                <span className='Icon'>\n                                    <i className='icon-playlist-check'/>\n                                </span>\n                            </Button>\n                        </SimpleTooltip>\n                    </div>\n                )}\n            />\n            <div className='threads'>\n                {children}\n            </div>\n        </div>\n    );\n};\n\nexport default memo(ThreadList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {Preferences} from 'matterfoss-redux/constants';\nimport {$ID} from 'matterfoss-redux/types/utilities';\nimport {UserThread} from 'matterfoss-redux/types/threads';\nimport {get} from 'matterfoss-redux/selectors/entities/preferences';\n\nimport {setThreadFollow, updateThreadRead} from 'matterfoss-redux/actions/threads';\n\nimport {\n    flagPost as savePost,\n    unflagPost as unsavePost,\n} from 'actions/post_actions';\n\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n';\nimport {copyToClipboard} from 'utils/utils';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport {GlobalState} from 'types/store';\n\nimport {useThreadRouting} from '../../hooks';\n\nimport './thread_menu.scss';\n\ntype Props = {\n    threadId: $ID<UserThread>;\n    isFollowing?: boolean;\n    hasUnreads: boolean;\n    children: ReactNode;\n    unreadTimestamp: number;\n};\n\nfunction ThreadMenu({\n    threadId,\n    isFollowing = false,\n    unreadTimestamp,\n    hasUnreads,\n    children,\n}: Props) {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const {\n        params: {\n            team,\n        },\n        currentTeamId,\n        currentUserId,\n        goToInChannel,\n    } = useThreadRouting();\n\n    const isSaved = useSelector((state: GlobalState) => get(state, Preferences.CATEGORY_FLAGGED_POST, threadId, null) != null);\n\n    return (\n        <MenuWrapper\n            stopPropagationOnToggle={true}\n        >\n            {children}\n            <Menu\n                ariaLabel={''}\n                openLeft={true}\n            >\n                <Menu.ItemAction\n                    {...isFollowing ? {\n                        text: formatMessage({\n                            id: t('threading.threadMenu.unfollow'),\n                            defaultMessage: 'Unfollow thread',\n                        }),\n                        extraText: formatMessage({\n                            id: t('threading.threadMenu.unfollowExtra'),\n                            defaultMessage: 'You won’t be notified about replies',\n                        }),\n                    } : {\n                        text: formatMessage({\n                            id: t('threading.threadMenu.follow'),\n                            defaultMessage: 'Follow thread',\n                        }),\n                        extraText: formatMessage({\n                            id: t('threading.threadMenu.followExtra'),\n                            defaultMessage: 'You will be notified about replies',\n                        }),\n                    }}\n                    onClick={useCallback(() => {\n                        dispatch(setThreadFollow(currentUserId, currentTeamId, threadId, !isFollowing));\n                    }, [currentUserId, currentTeamId, threadId, isFollowing, setThreadFollow])}\n                />\n                <Menu.ItemAction\n                    text={formatMessage({\n                        id: t('threading.threadMenu.openInChannel'),\n                        defaultMessage: 'Open in channel',\n                    })}\n                    onClick={useCallback(() => {\n                        goToInChannel(threadId);\n                    }, [threadId])}\n                />\n                <Menu.ItemAction\n                    text={formatMessage(hasUnreads ? {\n                        id: t('threading.threadMenu.markRead'),\n                        defaultMessage: 'Mark as read',\n                    } : {\n                        id: t('threading.threadMenu.markUnread'),\n                        defaultMessage: 'Mark as unread',\n                    })}\n                    onClick={useCallback(() => {\n                        dispatch(updateThreadRead(currentUserId, currentTeamId, threadId, hasUnreads ? Date.now() : unreadTimestamp));\n                    }, [currentUserId, currentTeamId, threadId, hasUnreads, updateThreadRead, unreadTimestamp])}\n                />\n\n                <Menu.ItemAction\n                    text={formatMessage(isSaved ? {\n                        id: t('threading.threadMenu.unsave'),\n                        defaultMessage: 'Unsave',\n                    } : {\n                        id: t('threading.threadMenu.save'),\n                        defaultMessage: 'Save',\n                    })}\n                    onClick={useCallback(() => {\n                        dispatch(isSaved ? unsavePost(threadId) : savePost(threadId));\n                    }, [threadId, isSaved])}\n                />\n                <Menu.ItemAction\n                    text={formatMessage({\n                        id: t('threading.threadMenu.copy'),\n                        defaultMessage: 'Copy link',\n                    })}\n                    onClick={useCallback(() => {\n                        copyToClipboard(`${getSiteURL()}/${team}/pl/${threadId}`);\n                    }, [team, threadId])}\n                />\n            </Menu>\n        </MenuWrapper>\n    );\n}\n\nexport default memo(ThreadMenu);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, ReactNode} from 'react';\nimport {useIntl} from 'react-intl';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {UserThread} from 'matterfoss-redux/types/threads';\nimport {setThreadFollow} from 'matterfoss-redux/actions/threads';\n\nimport {makeGetChannel} from 'matterfoss-redux/selectors/entities/channels';\nimport {getPost, makeGetPostsForThread} from 'matterfoss-redux/selectors/entities/posts';\n\nimport {t} from 'utils/i18n';\n\nimport {GlobalState} from 'types/store';\nimport ThreadMenu from '../thread_menu';\nimport Button from '../../common/button';\nimport FollowButton from '../../common/follow_button';\nimport SimpleTooltip from 'components/widgets/simple_tooltip';\nimport Header from 'components/widgets/header';\nimport {useThreadRouting} from '../../hooks';\n\nimport './thread_pane.scss';\n\nconst getChannel = makeGetChannel();\nconst getPostsForThread = makeGetPostsForThread();\n\ntype Props = {\n    thread: UserThread;\n    children?: ReactNode;\n};\n\nconst ThreadPane = ({\n    thread,\n    children,\n}: Props) => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n    const {\n        currentTeamId,\n        currentUserId,\n        goToInChannel,\n        select,\n    } = useThreadRouting();\n\n    const {\n        id: threadId,\n        is_following: isFollowing,\n        post: {\n            channel_id: channelId,\n        },\n    } = thread;\n\n    const channel = useSelector((state: GlobalState) => getChannel(state, {id: channelId}));\n    const post = useSelector((state: GlobalState) => getPost(state, thread.id));\n    const postsInThread = useSelector((state: GlobalState) => getPostsForThread(state, {rootId: post.id}));\n    const selectHandler = useCallback(() => select(), []);\n    let unreadTimestamp = post.edit_at || post.create_at;\n\n    // if we have the whole thread, get the posts in it, sorted from newest to oldest.\n    // Last post - root post, second to last post - oldest reply. Use that timestamp\n    if (postsInThread.length > 1) {\n        const p = postsInThread[postsInThread.length - 2];\n        unreadTimestamp = p.edit_at || p.create_at;\n    }\n    const goToInChannelHandler = useCallback(() => {\n        goToInChannel(threadId);\n    }, [goToInChannel, threadId]);\n\n    const followHandler = useCallback(() => {\n        dispatch(setThreadFollow(currentUserId, currentTeamId, threadId, !isFollowing));\n    }, [currentUserId, currentTeamId, threadId, isFollowing, setThreadFollow]);\n\n    return (\n        <div className='ThreadPane'>\n            <Header\n                className='ThreadPane___header'\n                heading={(\n                    <>\n                        <Button\n                            className='Button___icon Button___large back'\n                            onClick={selectHandler}\n                        >\n                            <i className='icon icon-arrow-back-ios'/>\n                        </Button>\n                        <h3>\n                            <span className='separated'>\n                                {formatMessage({\n                                    id: 'threading.header.heading',\n                                    defaultMessage: 'Thread',\n                                })}\n                            </span>\n                            <Button\n                                className='separated'\n                                allowTextOverflow={true}\n                                onClick={goToInChannelHandler}\n                            >\n                                {channel.display_name}\n                            </Button>\n                        </h3>\n                    </>\n                )}\n                right={(\n                    <>\n                        <FollowButton\n                            isFollowing={isFollowing}\n                            disabled={isFollowing == null}\n                            onClick={followHandler}\n                        />\n                        <ThreadMenu\n                            threadId={threadId}\n                            isFollowing={isFollowing}\n                            hasUnreads={Boolean(thread.unread_replies || thread.unread_mentions)}\n                            unreadTimestamp={unreadTimestamp}\n                        >\n                            <SimpleTooltip\n                                id='threadActionMenu'\n                                content={formatMessage({\n                                    id: t('threading.threadHeader.menu'),\n                                    defaultMessage: 'More Actions',\n                                })}\n                            >\n                                <Button className='Button___icon Button___large'>\n                                    <i className='Icon icon-dots-vertical'/>\n                                </Button>\n                            </SimpleTooltip>\n                        </ThreadMenu>\n                    </>\n                )}\n            />\n            {children}\n        </div>\n    );\n};\n\nexport default memo(ThreadPane);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useCallback, useEffect, MouseEvent, useMemo} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\nimport {useSelector, useDispatch} from 'react-redux';\n\nimport {UserThread} from 'matterfoss-redux/types/threads';\nimport {$ID} from 'matterfoss-redux/types/utilities';\n\nimport {makeGetChannel} from 'matterfoss-redux/selectors/entities/channels';\nimport {getChannel as fetchChannel} from 'matterfoss-redux/actions/channels';\nimport {getMissingProfilesByIds} from 'matterfoss-redux/actions/users';\n\nimport {makeGetDisplayName} from 'matterfoss-redux/selectors/entities/users';\nimport {getThread} from 'matterfoss-redux/selectors/entities/threads';\nimport {getPost, makeGetPostsForThread} from 'matterfoss-redux/selectors/entities/posts';\n\nimport './thread_item.scss';\n\nimport Badge from 'components/widgets/badges/badge';\nimport Timestamp from 'components/timestamp';\nimport Avatars from 'components/widgets/users/avatars';\nimport Button from 'components/threading/common/button';\nimport SimpleTooltip from 'components/widgets/simple_tooltip';\n\nimport Markdown from 'components/markdown';\n\nimport ThreadMenu from '../thread_menu';\n\nimport {THREADING_TIME} from '../../common/options';\nimport {GlobalState} from 'types/store';\nimport {useThreadRouting} from '../../hooks';\n\ntype Props = {\n    threadId: $ID<UserThread>;\n    isSelected: boolean;\n};\n\nconst markdownPreviewOptions = {\n    singleline: true,\n    mentionHighlight: false,\n    atMentions: false,\n};\n\nconst getChannel = makeGetChannel();\nconst getDisplayName = makeGetDisplayName();\nconst getPostsForThread = makeGetPostsForThread();\n\nfunction useLogic(threadId: string) {\n    const {select, goToInChannel} = useThreadRouting();\n    const dispatch = useDispatch();\n\n    const thread = useSelector((state: GlobalState) => getThread(state, threadId));\n    const post = useSelector((state: GlobalState) => getPost(state, threadId));\n    const channel = useSelector((state: GlobalState) => getChannel(state, {id: post.channel_id}));\n    const displayName = useSelector((state: GlobalState) => getDisplayName(state, post.user_id, true));\n\n    const participantIds = useMemo(() => thread?.participants?.map(({id}) => id), [thread?.participants]);\n\n    useEffect(() => {\n        if (channel?.teammate_id) {\n            dispatch(getMissingProfilesByIds([channel.teammate_id]));\n        }\n    }, [channel?.teammate_id]);\n\n    useEffect(() => {\n        if (!channel && thread?.post.channel_id) {\n            dispatch(fetchChannel(thread.post.channel_id));\n        }\n    }, [channel, thread?.post.channel_id]);\n\n    const selectHandler = useCallback(() => select(threadId), []);\n    const goToInChannelHandler = useCallback((e: MouseEvent) => {\n        e.stopPropagation();\n        goToInChannel(threadId);\n    }, [history]);\n\n    return {\n        thread,\n        post,\n        channel,\n        displayName,\n        participantIds,\n        selectHandler,\n        goToInChannelHandler,\n    };\n}\n\nconst ThreadItem = ({\n    threadId,\n    isSelected,\n}: Props) => {\n    const {\n        thread,\n        post,\n        channel,\n        displayName,\n        participantIds,\n        selectHandler,\n        goToInChannelHandler,\n    } = useLogic(threadId);\n\n    if (!thread || !post) {\n        return null;\n    }\n\n    const {\n        unread_replies: newReplies,\n        unread_mentions: newMentions,\n        last_reply_at: lastReplyAt,\n        reply_count: totalReplies,\n        is_following: isFollowing,\n    } = thread;\n\n    const postsInThread = useSelector((state: GlobalState) => getPostsForThread(state, {rootId: post.id}));\n    let unreadTimestamp = post.edit_at || post.create_at;\n\n    // if we have the whole thread, get the posts in it, sorted from newest to oldest.\n    // Last post - root post, second to last post - oldest reply. Use that timestamp\n    if (postsInThread.length > 1) {\n        const p = postsInThread[postsInThread.length - 2];\n        unreadTimestamp = p.edit_at || p.create_at;\n    }\n\n    return (\n        <article\n            className={classNames('ThreadItem', {\n                'has-unreads': newReplies,\n                'is-selected': isSelected,\n            })}\n            tabIndex={0}\n            onClick={selectHandler}\n        >\n            <h1>\n                {Boolean(newMentions || newReplies) && (\n                    <div className='indicator'>\n                        {newMentions ? (\n                            <div className={classNames('dot-mentions', {over: newMentions > 99})}>\n                                {Math.min(newMentions, 99)}\n                                {newMentions > 99 && '+'}\n                            </div>\n                        ) : (\n                            <div className='dot-unreads'/>\n                        )}\n                    </div>\n                )}\n                <span>{displayName}</span>\n                {Boolean(channel) && (\n                    <Badge\n                        onClick={goToInChannelHandler}\n                    >\n                        {channel?.display_name}\n                    </Badge>\n                )}\n                <Timestamp\n                    {...THREADING_TIME}\n                    className='alt-hidden'\n                    value={lastReplyAt}\n                    capitalize={true}\n                />\n            </h1>\n            <span className='menu-anchor alt-visible'>\n                <ThreadMenu\n                    threadId={threadId}\n                    isFollowing={isFollowing ?? false}\n                    hasUnreads={Boolean(newReplies)}\n                    unreadTimestamp={unreadTimestamp}\n                >\n                    <SimpleTooltip\n                        id='threadActionMenu'\n                        content={(\n                            <FormattedMessage\n                                id='threading.threadItem.menu'\n                                defaultMessage='Actions'\n                            />\n                        )}\n                    >\n                        <Button className='Button___icon'>\n                            <i className='Icon icon-dots-vertical'/>\n                        </Button>\n                    </SimpleTooltip>\n                </ThreadMenu>\n            </span>\n            <div className='preview'>\n                <Markdown\n                    message={post?.message ?? '(message deleted)'}\n                    options={markdownPreviewOptions}\n                />\n            </div>\n            {Boolean(totalReplies) && (\n                <div className='activity'>\n                    {participantIds?.length ? (\n                        <Avatars\n                            userIds={participantIds}\n                            size='xs'\n                        />\n                    ) : null}\n                    {newReplies ? (\n                        <FormattedMessage\n                            id='threading.numNewReplies'\n                            defaultMessage='{newReplies, plural, =1 {# new reply} other {# new replies}}'\n                            values={{newReplies}}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='threading.numReplies'\n                            defaultMessage='{totalReplies, plural, =0 {Reply} =1 {# reply} other {# replies}}'\n                            values={{totalReplies}}\n                        />\n                    )}\n                </div>\n            )}\n        </article>\n    );\n};\n\nexport default memo(ThreadItem);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {memo, useEffect} from 'react';\nimport {useIntl} from 'react-intl';\nimport {isEmpty} from 'lodash';\nimport {Link, useRouteMatch} from 'react-router-dom';\nimport {useSelector, useDispatch} from 'react-redux';\nimport classNames from 'classnames';\n\nimport {\n    getThreadOrderInCurrentTeam,\n    getUnreadThreadOrderInCurrentTeam,\n    getThreadCountsInCurrentTeam,\n    getThread,\n} from 'matterfoss-redux/selectors/entities/threads';\n\nimport {getThreads} from 'matterfoss-redux/actions/threads';\nimport {selectChannel} from 'matterfoss-redux/actions/channels';\n\nimport {getPost} from 'matterfoss-redux/selectors/entities/posts';\n\nimport {GlobalState} from 'types/store/index';\n\nimport {useGlobalState} from 'stores/hooks';\nimport {setSelectedThreadId} from 'actions/views/threads';\nimport {loadProfilesForSidebar} from 'actions/user_actions';\n\nimport RHSSearchNav from 'components/rhs_search_nav';\nimport Header from 'components/widgets/header';\nimport LoadingScreen from 'components/loading_screen';\nimport NoResultsIndicator from 'components/no_results_indicator';\n\nimport {useThreadRouting} from '../hooks';\nimport ChatIllustration from '../common/chat_illustration';\nimport BalloonIllustration from '../common/balloon_illustration';\n\nimport ThreadViewer from '../thread_viewer';\n\nimport ThreadList, {ThreadFilter, FILTER_STORAGE_KEY} from './thread_list';\nimport ThreadPane from './thread_pane';\nimport ThreadItem from './thread_item';\n\nimport './global_threads.scss';\n\nconst GlobalThreads = () => {\n    const {formatMessage} = useIntl();\n    const dispatch = useDispatch();\n\n    const {url, params: {threadIdentifier}} = useRouteMatch<{threadIdentifier?: string}>();\n    const [filter, setFilter] = useGlobalState(ThreadFilter.none, FILTER_STORAGE_KEY);\n    const {currentTeamId, currentUserId, clear} = useThreadRouting();\n\n    const counts = useSelector(getThreadCountsInCurrentTeam);\n    const selectedThread = useSelector((state: GlobalState) => getThread(state, threadIdentifier));\n    const selectedPost = useSelector((state: GlobalState) => getPost(state, threadIdentifier!));\n    const threadIds = useSelector((state: GlobalState) => getThreadOrderInCurrentTeam(state, selectedThread?.id));\n    const unreadThreadIds = useSelector((state: GlobalState) => getUnreadThreadOrderInCurrentTeam(state, selectedThread?.id));\n    const numUnread = counts?.total_unread_threads || 0;\n    const isLoading = counts?.total == null;\n\n    useEffect(() => {\n        dispatch(selectChannel(''));\n        loadProfilesForSidebar();\n    }, []);\n    useEffect(() => {\n        dispatch(getThreads(currentUserId, currentTeamId, {unread: filter === 'unread', perPage: 200}));\n    }, [currentUserId, currentTeamId, filter]);\n\n    useEffect(() => {\n        dispatch(setSelectedThreadId(currentTeamId, selectedThread?.id));\n        if ((!selectedThread || !selectedPost) && !isLoading) {\n            clear();\n        }\n    }, [currentTeamId, selectedThread, selectedPost, isLoading, counts, filter]);\n\n    return (\n        <div\n            id='app-content'\n            className={classNames('GlobalThreads app__content', {'thread-selected': Boolean(selectedThread)})}\n        >\n            <Header\n                level={2}\n                className={'GlobalThreads___header'}\n                heading={formatMessage({\n                    id: 'globalThreads.heading',\n                    defaultMessage: 'Followed threads',\n                })}\n                subtitle={formatMessage({\n                    id: 'globalThreads.subtitle',\n                    defaultMessage: 'Threads you’re participating in will automatically show here',\n                })}\n                right={<RHSSearchNav/>}\n            />\n\n            {isEmpty(threadIds) ? (\n                <div className='no-results__holder'>\n                    {isLoading ? (\n                        <LoadingScreen/>\n                    ) : (\n                        <NoResultsIndicator\n                            expanded={true}\n                            iconGraphic={ChatIllustration}\n                            title={formatMessage({\n                                id: 'globalThreads.noThreads.title',\n                                defaultMessage: 'No followed threads yet',\n                            })}\n                            subtitle={formatMessage({\n                                id: 'globalThreads.noThreads.subtitle',\n                                defaultMessage: 'Any threads you are mentioned in or have participated in will show here along with any threads you have followed.',\n                            })}\n                        />\n                    )}\n                </div>\n            ) : (\n                <>\n                    <ThreadList\n                        currentFilter={filter}\n                        setFilter={setFilter}\n                        someUnread={Boolean(numUnread)}\n                    >\n                        {(filter === 'unread' ? unreadThreadIds : threadIds).map((id) => (\n                            <ThreadItem\n                                key={id}\n                                threadId={id}\n                                isSelected={threadIdentifier === id}\n                            />\n                        ))}\n                        {filter === 'unread' && !numUnread && isEmpty(unreadThreadIds) ? (\n                            <NoResultsIndicator\n                                expanded={true}\n                                iconGraphic={BalloonIllustration}\n                                title={formatMessage({\n                                    id: 'globalThreads.threadList.noUnreadThreads',\n                                    defaultMessage: 'No unread threads',\n                                })}\n                            />\n                        ) : null}\n                    </ThreadList>\n                    {selectedThread && selectedPost ? (\n                        <ThreadPane\n                            thread={selectedThread}\n                        >\n                            <ThreadViewer\n                                rootPostId={selectedThread.id}\n                                useRelativeTimestamp={true}\n                            />\n                        </ThreadPane>\n                    ) : (\n                        <NoResultsIndicator\n                            expanded={true}\n                            iconGraphic={ChatIllustration}\n                            title={formatMessage({\n                                id: 'globalThreads.threadPane.unselectedTitle',\n                                defaultMessage: '{numUnread, plural, =0 {Looks like you’re all caught up} other {Catch up on your threads}}',\n                            }, {numUnread})}\n                            subtitle={formatMessage({\n                                id: 'globalThreads.threadPane.unreadMessageLink',\n                                defaultMessage: `\n                                    You have\n                                    {numUnread, plural,\n                                        =0 {no unread threads}\n                                        =1 {<link>{numUnread} thread</link>}\n                                        other {<link>{numUnread} threads</link>}\n                                    }\n                                    {numUnread, plural,\n                                        =0 {}\n                                        other {with unread messages}\n                                    }\n                                `,\n                            }, {\n                                numUnread,\n                                link: (chunks) => (\n                                    <Link\n                                        key='single'\n                                        to={url}\n                                    >\n                                        {chunks}\n                                    </Link>\n                                ),\n                            })}\n                        />\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default memo(GlobalThreads);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Threads} from 'utils/constants';\n\nexport function setSelectedThreadId(teamId: string, threadId: string | undefined) {\n    return {\n        type: Threads.CHANGED_SELECTED_THREAD,\n        data: {\n            thread_id: threadId,\n            team_id: teamId,\n        },\n    };\n}\n"],"sourceRoot":""}