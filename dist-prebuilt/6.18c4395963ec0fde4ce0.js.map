{"version":3,"sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/should_verify_email/should_verify_email.tsx","webpack://mattermost-webapp/./components/should_verify_email/index.ts"],"names":["BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","ShouldVerifyEmail","constructor","super","async","email","URLSearchParams","location","search","get","setState","resendStatus","data","error","actions","sendVerificationEmail","state","resendConfirm","data-testid","values","siteName","handleResend","connect","SiteName","getConfig","dispatch","bindActionCreators"],"mappings":"iUAoBe,MAAMA,UAAmBC,gBAK7BC,SACH,OACI,uBACIC,GAAG,cACHC,UAAU,iBAEV,gBAAC,EAAAC,KAAD,CACIC,QAASC,KAAKC,MAAMF,QACpBG,GAAIF,KAAKC,MAAME,KAEf,gBAAC,IAAD,CACIP,GAAG,qBACHQ,eAAe,cAEbC,GACE,wBACIT,GAAG,mBACHC,UAAU,yBACVQ,MAAOA,EAAMC,eAIzB,gBAAC,IAAD,CACIV,GAAG,kBACHQ,eAAe,Y,EA7BlBX,E,aARjBU,I,WAKAJ,Q,aAGiBN,E,eAC4B,CACzCU,IAAK,O,yUCME,MAAMI,UAA0Bb,gBAC3Cc,YAAYP,GACRQ,MAAMR,GADgB,uBAQJS,UAClB,MAAMC,EAAS,IAAIC,gBAAgBZ,KAAKC,MAAMY,SAASC,QAASC,IAAI,SAEpE,GAAIJ,EAAO,CACPX,KAAKgB,SAAS,CAACC,aAAc,YAE7B,MAAM,KAACC,EAAD,MAAOC,SAAenB,KAAKC,MAAMmB,QAAQC,sBAAsBV,GAEjEO,EACAlB,KAAKgB,SAAS,CAACC,aAAc,YACtBE,GACPnB,KAAKgB,SAAS,CAACC,aAAc,gBAhBrCjB,KAAKsB,MAAQ,CACTL,aAAc,QAoBftB,SACH,IAAI4B,EAA2B,GA0C/B,MAxCgC,YAA5BvB,KAAKsB,MAAML,eACXM,EACI,2BACI,2BACA,qBACIC,cAAY,yBACZ3B,UAAU,uBAEV,gBAAC,IAAD,MACA,gBAAC,IAAD,CACID,GAAG,oBACHQ,eAAe,iCAOH,YAA5BJ,KAAKsB,MAAML,eACXM,EACI,2BACI,2BACA,qBAAG1B,UAAU,sBACT,gBAAC,IAAD,CACID,GAAG,qBACHQ,eAAe,iBAEbC,GACE,qBACIR,UAAU,cACVQ,MAAOA,MAInB,gBAAC,IAAD,CAAkBT,GAAG,2BAOjC,2BACI,gBAAC,IAAD,MACA,uBAAKC,UAAU,aACX,uBAAKA,UAAU,0BACX,sBAAI2B,cAAY,qBACZ,gBAAC,IAAD,CACI5B,GAAG,sBACHQ,eAAe,kCACfqB,OAAQ,CACJC,SAAU1B,KAAKC,MAAMyB,aAIjC,2BACI,qBAAGF,cAAY,8BACX,gBAAC,IAAD,CACI5B,GAAG,+BACHQ,eAAe,sEAGvB,0BACIoB,cAAY,oBACZzB,QAASC,KAAK2B,aACd9B,UAAU,mBAEV,gBAAC,IAAD,CACID,GAAG,sBACHQ,eAAe,kBAGtBmB,O,EAnGRhB,E,aAlBjBM,S,WACIC,O,mCAEJY,S,WACAN,Q,WACIC,sB,mCCOR,MAWA,GAAeO,cAXUN,IACrB,MAAOO,SAAUH,IAAYI,QAAUR,GACvC,MAAO,CAACI,eAGgBK,IAAD,CACvBX,SAASY,wBAAiE,CACtEX,sBAAqBA,MACtBU,MAGP,CAA4DxB","file":"6.18c4395963ec0fde4ce0.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport BackButton from 'components/common/back_button';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    siteName?: string;\n    actions: {\n        sendVerificationEmail: (email: string) => Promise<{\n            data: boolean;\n            error?: {\n                err: string;\n            };\n        }>;\n    };\n}\n\ntype State = {\n    resendStatus: string;\n}\n\nexport default class ShouldVerifyEmail extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            resendStatus: 'none',\n        };\n    }\n\n    public handleResend = async (): Promise<void> => {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n\n        if (email) {\n            this.setState({resendStatus: 'sending'});\n\n            const {data, error} = await this.props.actions.sendVerificationEmail(email);\n\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (error) {\n                this.setState({resendStatus: 'failure'});\n            }\n        }\n    }\n\n    public render(): JSX.Element {\n        let resendConfirm: ReactNode = '';\n\n        if (this.state.resendStatus === 'success') {\n            resendConfirm = (\n                <div>\n                    <br/>\n                    <p\n                        data-testid='emailVerifySentMessage'\n                        className='alert alert-success'\n                    >\n                        <SuccessIcon/>\n                        <FormattedMessage\n                            id='email_verify.sent'\n                            defaultMessage=' Verification email sent.'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        if (this.state.resendStatus === 'failure') {\n            resendConfirm = (\n                <div>\n                    <br/>\n                    <p className='alert alert-danger'>\n                        <FormattedMessage\n                            id='generic_icons.fail'\n                            defaultMessage='Faliure Icon'\n                        >\n                            {(title: string) => (\n                                <i\n                                    className='fa fa-times'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage id='email_verify.failed'/>\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <h3 data-testid='emailVerifyAlmost'>\n                            <FormattedMessage\n                                id='email_verify.almost'\n                                defaultMessage='{siteName}: You are almost done'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </h3>\n                        <div>\n                            <p data-testid='emailVerifyNotVerifiedBody'>\n                                <FormattedMessage\n                                    id='email_verify.notVerifiedBody'\n                                    defaultMessage='Please verify your email address. Check your inbox for an email.'\n                                />\n                            </p>\n                            <button\n                                data-testid='emailVerifyResend'\n                                onClick={this.handleResend}\n                                className='btn btn-primary'\n                            >\n                                <FormattedMessage\n                                    id='email_verify.resend'\n                                    defaultMessage='Resend Email'\n                                />\n                            </button>\n                            {resendConfirm}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {sendVerificationEmail} from 'matterfoss-redux/actions/users';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport ShouldVerifyEmail from './should_verify_email';\n\ntype Actions = {\n    sendVerificationEmail: (email: string) => Promise<{\n        data: boolean;\n        error?: {\n            err: string;\n        };\n    }>;\n}\n\nconst mapStateToProps = (state: GlobalState) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch<GenericAction>) => ({\n    actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n        sendVerificationEmail,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ShouldVerifyEmail);\n"],"sourceRoot":""}