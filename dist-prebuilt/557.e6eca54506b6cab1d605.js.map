{"version":3,"sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/do_verify_email/do_verify_email.tsx","webpack://mattermost-webapp/./components/do_verify_email/index.ts","webpack://mattermost-webapp/./images/logo.png"],"names":["BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","DoVerifyEmail","constructor","super","async","actions","verifyUserEmail","verify","URLSearchParams","location","search","get","handleSuccess","handleError","VerifyEmailErrors","state","verifyStatus","serverError","componentDidMount","verifyEmail","handleRedirect","isLoggedIn","GlobalActions","link","email","encodeURIComponent","redirectTo","browserHistory","setState","clearErrors","logError","message","AnnouncementBarMessages","type","AnnouncementBarTypes","trackEvent","me","getMe","alt","src","logoImage","siteName","connect","getConfig","SiteName","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"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","file":"557.e6eca54506b6cab1d605.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {AnnouncementBarTypes, AnnouncementBarMessages, VerifyEmailErrors} from 'utils/constants';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport * as GlobalActions from 'actions/global_actions';\n\ntype Props = {\n    location: {\n        search: string;\n    };\n    siteName?: string;\n    actions: {\n        verifyUserEmail: (token: string) => ActionFunc | ActionResult;\n        getMe: () => ActionFunc | ActionResult;\n        logError: (error: ServerError, displayable: boolean) => void;\n        clearErrors: () => void;\n    };\n    isLoggedIn: boolean;\n\n}\n\ntype State = {\n    verifyStatus: string;\n    serverError: JSX.Element | null;\n}\n\nexport default class DoVerifyEmail extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            verifyStatus: 'pending',\n            serverError: null,\n        };\n    }\n\n    public componentDidMount(): void {\n        this.verifyEmail();\n    }\n\n    handleRedirect() {\n        if (this.props.isLoggedIn) {\n            GlobalActions.redirectUserToDefaultTeam();\n        } else {\n            let link = '/login?extra=verified';\n            const email = (new URLSearchParams(this.props.location.search)).get('email');\n            if (email) {\n                link += '&email=' + encodeURIComponent(email);\n            }\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                link += '&redirect_to=' + redirectTo;\n            }\n            browserHistory.push(link);\n        }\n    }\n\n    async handleSuccess() {\n        this.setState({verifyStatus: 'success'});\n        this.props.actions.clearErrors();\n        if (this.props.isLoggedIn) {\n            this.props.actions.logError({\n                message: AnnouncementBarMessages.EMAIL_VERIFIED,\n                type: AnnouncementBarTypes.SUCCESS,\n            } as any, true);\n            trackEvent('settings', 'verify_email');\n            const me = await this.props.actions.getMe();\n            if ('data' in me) {\n                this.handleRedirect();\n            } else if ('error' in me) {\n                this.handleError(VerifyEmailErrors.FAILED_USER_STATE_GET);\n            }\n        } else {\n            this.handleRedirect();\n        }\n    }\n\n    handleError(type: string) {\n        let serverError = null;\n        if (type === VerifyEmailErrors.FAILED_EMAIL_VERIFICATION) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid. Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        } else if (type === VerifyEmailErrors.FAILED_USER_STATE_GET) {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.failed_update_user_state'\n                    defaultMessage='Please clear your cache and try to log in.'\n                />\n            );\n        }\n        this.setState({\n            verifyStatus: 'failure',\n            serverError,\n        });\n    }\n\n    verifyEmail = async () => {\n        const {actions: {verifyUserEmail}} = this.props;\n        const verify = await verifyUserEmail((new URLSearchParams(this.props.location.search)).get('token') || '');\n\n        if ('data' in verify) {\n            this.handleSuccess();\n        } else if ('error' in verify) {\n            this.handleError(VerifyEmailErrors.FAILED_EMAIL_VERIFICATION);\n        }\n    }\n\n    render() {\n        if (this.state.verifyStatus !== 'failure') {\n            return (<LoadingScreen/>);\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                                />\n                            </h4>\n                            {serverError}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {verifyUserEmail, getMe} from 'matterfoss-redux/actions/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\nimport {clearErrors, logError} from 'matterfoss-redux/actions/errors';\n\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from '../../types/store';\n\nimport DoVerifyEmail from './do_verify_email';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    return {\n        isLoggedIn: Boolean(getCurrentUserId(state)),\n        siteName,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            verifyUserEmail,\n            getMe,\n            logError,\n            clearErrors,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DoVerifyEmail);\n","export default __webpack_public_path__ + \"files/37ecfc86d48a22a44e9c13bb44bc7425.png\";"],"sourceRoot":""}