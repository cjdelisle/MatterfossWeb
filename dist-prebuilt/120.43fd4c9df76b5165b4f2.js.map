{"version":3,"sources":["webpack://mattermost-webapp/./components/claim/components/oauth_to_email.jsx","webpack://mattermost-webapp/./components/claim/components/email_to_oauth.jsx","webpack://mattermost-webapp/./components/claim/components/ldap_to_email.jsx","webpack://mattermost-webapp/./components/claim/components/email_to_ldap.jsx","webpack://mattermost-webapp/./components/claim/claim_controller.tsx","webpack://mattermost-webapp/./components/claim/index.ts","webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/login/login_mfa.jsx","webpack://mattermost-webapp/./images/logo.png"],"names":["OAuthToEmail","React","constructor","props","super","e","preventDefault","state","password","this","passwordInput","current","value","error","Utils","setState","valid","passwordConfig","confirmPassword","passwordConfirmInput","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","render","className","formClass","uiType","Constants","id","defaultMessage","values","type","onSubmit","submit","site","siteName","name","ref","placeholder","t","spellCheck","PropTypes","EmailToOAuth","loginId","token","emailToOAuth","newType","showMfa","server_error_id","content","preSubmit","LDAPToEmail","passwordError","confirmError","ldapPasswordError","serverError","ldapPassword","ldapPasswordInput","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","ldapError","emailPasswordInput","ldapId","ldapIdInput","trim","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","autoComplete","display","ClaimController","URLSearchParams","search","get","alt","src","logoImage","path","match","url","actions","minimumLength","requireLowercase","requireUppercase","requireNumber","requireSymbol","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators","BackButton","Link","onClick","to","title","toString","LoginMfa","target","replace","toLowerCase","saving","errorClass","handleSubmit","autoFocus","onChange","handleChange","disabled","localizeMessage","savingMessage"],"mappings":"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","file":"120.43fd4c9df76b5165b4f2.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            },\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to Email and Password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n\n        this.passwordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = this.passwordInput.current.value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            },\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch Account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        this.ldapPasswordInput = React.createRef();\n        this.passwordInput = React.createRef();\n        this.passwordConfirmInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.passwordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.passwordConfirmInput.current.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to MatterFOSS.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref={this.passwordInput}\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref={this.passwordConfirmInput}\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.PureComponent {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n\n        this.emailPasswordInput = React.createRef();\n        this.ldapIdInput = React.createRef();\n        this.ldapPasswordInput = React.createRef();\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.emailPasswordInput.current && this.emailPasswordInput.current.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.ldapIdInput.current && this.ldapIdInput.current.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.ldapPasswordInput.current && this.ldapPasswordInput.current.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            },\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref={this.emailPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref={this.ldapIdInput}\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref={this.ldapPasswordInput}\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch Account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\ninterface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireUppercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n}\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    siteName?: string;\n    ldapLoginFieldName?: string;\n    passwordConfig?: PasswordConfig;\n    match: {\n        url: string;\n    };\n    actions: {\n        switchLdapToEmail: (ldapPassword: string, email: string, emailPassword: string, mfaCode?: string) => ActionFunc;\n    };\n}\n\nexport default class ClaimController extends React.PureComponent<Props> {\n    render(): JSX.Element {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {switchLdapToEmail} from 'matterfoss-redux/actions/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName as string;\n    const ldapLoginFieldName = config.LdapLoginFieldName as string;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId.toLowerCase(),\n            this.props.password,\n            this.state.token,\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/a0a7d819869d6545c06500f0d8179b41.png\";"],"sourceRoot":""}