{"version":3,"sources":["webpack://mattermost-webapp/./components/pdf_preview.jsx"],"names":["PDFPreview","React","constructor","props","super","e","fileDownloadUrl","this","fileInfo","link","getFileDownloadUrl","id","preventDefault","window","location","href","page","bounding","getBoundingClientRect","viewportTop","container","current","scrollTop","viewportBottom","parentElement","clientHeight","top","bottom","async","canvas","pageIndex","isInViewport","pdfPagesRendered","loadPage","state","pdf","pdfPages","context","getContext","viewport","getViewport","scale","height","width","renderContext","canvasContext","render","PDFJS","fileUrl","then","onDocumentLoad","catch","onDocumentLoadError","setState","numPages","i","loading","success","reason","console","log","pdfPagesLoaded","getPage","Object","assign","debounce","renderPDFPage","componentDidMount","getPdfDocument","parentNode","addEventListener","handleScroll","componentWillUnmount","removeEventListener","prevFileUrl","componentDidUpdate","prevProps","prevState","ref","className","pdfCanvases","push","key","PropTypes"],"mappings":"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","file":"271.66f7db12c545676a0fd3.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport PDFJS from 'pdfjs-dist';\nimport debounce from 'lodash/debounce';\n\nimport {getFileDownloadUrl} from 'matterfoss-redux/utils/file_utils';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst INITIAL_RENDERED_PAGES = 3;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n        scale: PropTypes.number.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.pdfPagesRendered = {};\n        this.container = React.createRef();\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.getPdfDocument();\n        if (this.container.current) {\n            this.parentNode = this.container.current.parentElement.parentElement;\n            this.parentNode.addEventListener('scroll', this.handleScroll);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.parentNode) {\n            this.parentNode.removeEventListener('scroll', this.handleScroll);\n        }\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.fileUrl !== state.prevFileUrl) {\n            return {\n                pdf: null,\n                pdfPages: {},\n                pdfPagesLoaded: {},\n                numPages: 0,\n                loading: true,\n                success: false,\n                prevFileUrl: props.fileUrl,\n            };\n        }\n        return null;\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.props.fileUrl !== prevProps.fileUrl) {\n            this.getPdfDocument();\n            this.pdfPagesRendered = {};\n        }\n        if (this.props.scale !== prevProps.scale) {\n            this.pdfPagesRendered = {};\n            if (this.state.success) {\n                for (let i = 0; i < this.state.numPages; i++) {\n                    this.renderPDFPage(i);\n                }\n            }\n        }\n\n        if (!prevState.success && this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    downloadFile = (e) => {\n        const fileDownloadUrl = this.props.fileInfo.link || getFileDownloadUrl(this.props.fileInfo.id);\n        e.preventDefault();\n        window.location.href = fileDownloadUrl;\n    }\n\n    isInViewport = (page) => {\n        const bounding = page.getBoundingClientRect();\n        const viewportTop = this.container.current.scrollTop;\n        const viewportBottom = viewportTop + this.container.current.parentElement.clientHeight;\n        return (\n            (bounding.top >= viewportTop && bounding.top <= viewportBottom) ||\n            (bounding.bottom >= viewportTop && bounding.bottom <= viewportBottom) ||\n            (bounding.top <= viewportTop && bounding.bottom >= viewportBottom)\n        );\n    };\n\n    renderPDFPage = async (pageIndex) => {\n        const canvas = this[`pdfCanvasRef-${pageIndex}`].current;\n        if (!canvas) {\n            // Refs are undefined when testing\n            return;\n        }\n\n        // Always render the first INITIAL_RENDERED_PAGES pages to avoid\n        // problems detecting isInViewport during the open animation\n        if (pageIndex >= INITIAL_RENDERED_PAGES && !this.isInViewport(canvas)) {\n            return;\n        }\n\n        if (this.pdfPagesRendered[pageIndex]) {\n            return;\n        }\n        await this.loadPage(this.state.pdf, pageIndex);\n\n        const page = this.state.pdfPages[pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = page.getViewport(this.props.scale);\n\n        this[`pdfCanvasRef-${pageIndex}`].current.height = viewport.height;\n        this[`pdfCanvasRef-${pageIndex}`].current.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        page.render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    getPdfDocument = () => {\n        PDFJS.getDocument(this.props.fileUrl).then(this.onDocumentLoad).catch(this.onDocumentLoadError);\n    }\n\n    onDocumentLoad = (pdf) => {\n        this.setState({pdf, numPages: pdf.numPages});\n        for (let i = 0; i < pdf.numPages; i++) {\n            this[`pdfCanvasRef-${i}`] = React.createRef();\n        }\n        this.setState({loading: false, success: true});\n    }\n\n    onDocumentLoadError = (reason) => {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    loadPage = async (pdf, pageIndex) => {\n        if (this.state.pdfPagesLoaded[pageIndex]) {\n            return this.state.pdfPages[pageIndex];\n        }\n\n        const page = await pdf.getPage(pageIndex + 1);\n\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        return page;\n    }\n\n    handleScroll = debounce(() => {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }, 100)\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div\n                    ref={this.container}\n                    className='view-image__loading'\n                >\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={this[`pdfCanvasRef-${i}`]}\n                    key={'previewpdfcanvas' + i}\n                />,\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />,\n                );\n            }\n        }\n\n        return (\n            <div\n                ref={this.container}\n                className='post-code'\n            >\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}