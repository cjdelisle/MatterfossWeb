{"version":3,"sources":["webpack://mattermost-webapp/./images/deep-linking/deeplinking-desktop-img.png","webpack://mattermost-webapp/./images/deep-linking/deeplinking-mobile-img.png","webpack://mattermost-webapp/./images/logo.svg","webpack://mattermost-webapp/./components/linking_landing_page/linking_landing_page.tsx","webpack://mattermost-webapp/./components/linking_landing_page/index.tsx","webpack://mattermost-webapp/./components/widgets/icons/checkbox_checked_icon.tsx"],"names":["LinkingLandingPage","PureComponent","constructor","props","super","this","state","navigating","BrowserStore","siteUrl","landingPreference","LandingPreferenceTypes","rememberChecked","setState","pref","clearIfNotChecked","setPreference","redirectPage","window","location","href","nativeLocation","UserAgent","id","defaultMessage","Utils","onMouseDown","onClick","timeout","setTimeout","replace","getDownloadLink","addEventListener","clearTimeout","className","renderSystemDialogMessage","iosAppLink","androidAppLink","desktopAppLink","brandImageError","src","mobileImg","desktopImg","downloadLink","values","link","renderDownloadLinkText","isMobile","openingLink","enableCustomBrand","viewApp","siteName","renderDialogHeader","renderDownloadLinkSection","renderGoNativeAppMessage","handleChecked","renderCheckboxIcon","header","MattermostLogoSvg","brandImageUrl","customLogo","onError","handleBrandImageError","componentDidMount","defaultTheme","checkLandingPreferenceApp","openMatterFOSSApp","clearLandingPreferenceIfNotChecked","componentWillUnmount","removeEventListener","render","checkLandingPreferenceBrowser","openInBrowser","renderHeader","renderGraphic","renderDialogBody","connect","config","getConfig","AppDownloadLink","IosAppDownloadLink","AndroidAppDownloadLink","getTheme","SiteURL","SiteName","Client4","EnableCustomBrand","CheckboxCheckedIcon","React","width","height","viewBox","stroke","strokeWidth","fillRule","transform","d"],"mappings":"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","file":"422.4f9f3fa01fbfeaec7bbe.js","sourcesContent":["export default __webpack_public_path__ + \"files/34c82b247a366d047105491d979556bf.png\";","export default __webpack_public_path__ + \"files/9b0519e1f5fbf82b0548515994fd49d4.png\";","export default __webpack_public_path__ + \"files/e9f9a38a54794f26d712ff61c30394d4.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport desktopImg from 'images/deep-linking/deeplinking-desktop-img.png';\nimport mobileImg from 'images/deep-linking/deeplinking-mobile-img.png';\nimport MattermostLogoSvg from 'images/logo.svg';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport BrowserStore from 'stores/browser_store';\nimport {LandingPreferenceTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils';\n\nimport * as UserAgent from 'utils/user_agent';\n\ntype Props = {\n    defaultTheme: any;\n    desktopAppLink?: string;\n    iosAppLink?: string;\n    androidAppLink?: string;\n    siteUrl?: string;\n    siteName?: string;\n    brandImageUrl?: string;\n    enableCustomBrand: boolean;\n}\n\ntype State = {\n    rememberChecked: boolean;\n    redirectPage: boolean;\n    location: string;\n    nativeLocation: string;\n    brandImageError: boolean;\n    navigating: boolean;\n}\n\nexport default class LinkingLandingPage extends PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        const location = window.location.href.replace('/landing#', '');\n\n        this.state = {\n            rememberChecked: false,\n            redirectPage: false,\n            location,\n            nativeLocation: location.replace(/^(https|http)/, 'matterfoss'),\n            brandImageError: false,\n            navigating: false,\n        };\n\n        if (Utils.isMobile() && !BrowserStore.hasSeenLandingPage()) {\n            BrowserStore.setLandingPageSeen(true);\n        }\n    }\n\n    componentDidMount() {\n        Utils.applyTheme(this.props.defaultTheme);\n        if (this.checkLandingPreferenceApp()) {\n            this.openMatterFOSSApp();\n        }\n\n        window.addEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('beforeunload', this.clearLandingPreferenceIfNotChecked);\n    }\n\n    clearLandingPreferenceIfNotChecked = () => {\n        if (!this.state.navigating) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n    }\n\n    checkLandingPreferenceBrowser = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.BROWSER;\n    }\n\n    checkLandingPreferenceApp = () => {\n        const landingPreference = BrowserStore.getLandingPreference(this.props.siteUrl);\n        return landingPreference && landingPreference === LandingPreferenceTypes.MATTERMOSTAPP;\n    }\n\n    handleChecked = () => {\n        // If it was checked, and now we're unchecking it, clear the preference\n        if (this.state.rememberChecked) {\n            BrowserStore.clearLandingPreference(this.props.siteUrl);\n        }\n        this.setState({rememberChecked: !this.state.rememberChecked});\n    }\n\n    setPreference = (pref: string, clearIfNotChecked?: boolean) => {\n        if (!this.state.rememberChecked) {\n            if (clearIfNotChecked) {\n                BrowserStore.clearLandingPreference(this.props.siteUrl);\n            }\n            return;\n        }\n\n        switch (pref) {\n        case LandingPreferenceTypes.MATTERMOSTAPP:\n            BrowserStore.setLandingPreferenceToMatterFOSSApp(this.props.siteUrl);\n            break;\n        case LandingPreferenceTypes.BROWSER:\n            BrowserStore.setLandingPreferenceToBrowser(this.props.siteUrl);\n            break;\n        default:\n            break;\n        }\n    }\n\n    openMatterFOSSApp = () => {\n        this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP);\n        this.setState({redirectPage: true});\n        window.location.href = this.state.nativeLocation;\n    }\n\n    openInBrowser = () => {\n        this.setPreference(LandingPreferenceTypes.BROWSER);\n        window.location.href = this.state.location;\n    }\n\n    renderSystemDialogMessage = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.systemDialogMessageMobile'\n                    defaultMessage='View in App'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.systemDialogMessage'\n                defaultMessage='View in Desktop App'\n            />\n        );\n    }\n\n    renderGoNativeAppMessage = () => {\n        return (\n            <a\n                href={Utils.isMobile() ? '#' : this.state.nativeLocation}\n                onMouseDown={() => {\n                    this.setPreference(LandingPreferenceTypes.MATTERMOSTAPP, true);\n                }}\n                onClick={() => {\n                    this.setState({redirectPage: true, navigating: true});\n                    if (Utils.isMobile()) {\n                        if (UserAgent.isAndroidWeb()) {\n                            const timeout = setTimeout(() => {\n                                window.location.replace(this.getDownloadLink()!);\n                            }, 2000);\n                            window.addEventListener('blur', () => {\n                                clearTimeout(timeout);\n                            });\n                        }\n                        window.location.replace(this.state.nativeLocation);\n                    }\n                }}\n                className='btn btn-primary btn-lg get-app__download'\n            >\n                {this.renderSystemDialogMessage()}\n            </a>\n        );\n    }\n\n    getDownloadLink = () => {\n        if (UserAgent.isIosWeb()) {\n            return this.props.iosAppLink;\n        } else if (UserAgent.isAndroidWeb()) {\n            return this.props.androidAppLink;\n        }\n\n        return this.props.desktopAppLink;\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    renderCheckboxIcon = () => {\n        if (this.state.rememberChecked) {\n            return (\n                <CheckboxCheckedIcon/>\n            );\n        }\n\n        return null;\n    }\n\n    renderGraphic = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <img src={mobileImg}/>\n            );\n        }\n\n        return (\n            <img src={desktopImg}/>\n        );\n    }\n\n    renderDownloadLinkText = () => {\n        const isMobile = UserAgent.isMobile();\n\n        if (isMobile) {\n            return (\n                <FormattedMessage\n                    id='get_app.dontHaveTheMobileApp'\n                    defaultMessage={'Don\\'t have the Mobile App?'}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='get_app.dontHaveTheDesktopApp'\n                defaultMessage={'Don\\'t have the Desktop App?'}\n            />\n        );\n    }\n\n    renderDownloadLinkSection = () => {\n        const downloadLink = this.getDownloadLink();\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__download-link'>\n                    <FormattedMarkdownMessage\n                        id='get_app.openLinkInBrowser'\n                        defaultMessage='Or, [open this link in your browser.](!{link})'\n                        values={{\n                            link: this.state.location,\n                        }}\n                    />\n                </div>\n            );\n        } else if (downloadLink) {\n            return (\n                <div className='get-app__download-link'>\n                    {this.renderDownloadLinkText()}\n                    {'\\u00A0'}\n                    <br/>\n                    <a href={downloadLink}>\n                        <FormattedMessage\n                            id='get_app.downloadTheAppNow'\n                            defaultMessage='Download the app now.'\n                        />\n                    </a>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    renderDialogHeader = () => {\n        const downloadLink = this.getDownloadLink();\n        const isMobile = UserAgent.isMobile();\n\n        let openingLink = (\n            <FormattedMessage\n                id='get_app.openingLink'\n                defaultMessage='Opening link in MatterFOSS...'\n            />\n        );\n        if (this.props.enableCustomBrand) {\n            openingLink = (\n                <FormattedMessage\n                    id='get_app.openingLinkWhiteLabel'\n                    defaultMessage='Opening link in the Desktop App...'\n                />\n            );\n        }\n\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__launching'>\n                    {openingLink}\n                    <div className={`get-app__alternative${this.state.redirectPage ? ' redirect-page' : ''}`}>\n                        <FormattedMessage\n                            id='get_app.redirectedInMoments'\n                            defaultMessage='You will be redirected in a few moments.'\n                        />\n                        <br/>\n                        {this.renderDownloadLinkText()}\n                        {'\\u00A0'}\n                        <br className='mobile-only'/>\n                        <a href={downloadLink}>\n                            <FormattedMessage\n                                id='get_app.downloadTheAppNow'\n                                defaultMessage='Download the app now.'\n                            />\n                        </a>\n                    </div>\n                </div>\n            );\n        }\n\n        let viewApp = (\n            <FormattedMessage\n                id='get_app.ifNothingPrompts'\n                defaultMessage='You can view {siteName} in the desktop app or continue in your web browser.'\n                values={{\n                    siteName: this.props.enableCustomBrand ? '' : ' MatterFOSS',\n                }}\n            />\n        );\n        if (isMobile) {\n            viewApp = (\n                <FormattedMessage\n                    id='get_app.ifNothingPromptsMobile'\n                    defaultMessage='You can view {siteName} in the mobile app or continue in your web browser.'\n                    values={{\n                        siteName: this.props.enableCustomBrand ? '' : ' MatterFOSS',\n                    }}\n                />\n            );\n        }\n\n        return (\n            <div className='get-app__launching'>\n                <FormattedMessage\n                    id='get_app.launching'\n                    defaultMessage='Where would you like to view this?'\n                />\n                <div className='get-app__alternative'>\n                    {viewApp}\n                </div>\n            </div>\n        );\n    }\n\n    renderDialogBody = () => {\n        if (this.state.redirectPage) {\n            return (\n                <div className='get-app__dialog-body'>\n                    {this.renderDialogHeader()}\n                    {this.renderDownloadLinkSection()}\n                </div>\n            );\n        }\n\n        return (\n            <div className='get-app__dialog-body'>\n                {this.renderDialogHeader()}\n                <div className='get-app__buttons'>\n                    <div className='get-app__status'>\n                        {this.renderGoNativeAppMessage()}\n                    </div>\n                    <div className='get-app__status'>\n                        <a\n                            href={this.state.location}\n                            onMouseDown={() => {\n                                this.setPreference(LandingPreferenceTypes.BROWSER, true);\n                            }}\n                            onClick={() => {\n                                this.setState({navigating: true});\n                            }}\n                            className='btn btn-default btn-lg get-app__continue'\n                        >\n                            <FormattedMessage\n                                id='get_app.continueToBrowser'\n                                defaultMessage='View in Browser'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='get-app__preference'>\n                    <button\n                        className={`get-app__checkbox ${this.state.rememberChecked ? 'checked' : ''}`}\n                        onClick={this.handleChecked}\n                    >\n                        {this.renderCheckboxIcon()}\n                    </button>\n                    <FormattedMessage\n                        id='get_app.rememberMyPreference'\n                        defaultMessage='Remember my preference'\n                    />\n                </div>\n                {this.renderDownloadLinkSection()}\n            </div>\n        );\n    }\n\n    renderHeader = () => {\n        let header = (\n            <div className='get-app__header'>\n                <img\n                    src={MattermostLogoSvg}\n                    className='get-app__logo'\n                />\n            </div>\n        );\n        if (this.props.enableCustomBrand && this.props.brandImageUrl) {\n            let customLogo;\n            if (this.props.brandImageUrl && !this.state.brandImageError) {\n                customLogo = (\n                    <img\n                        src={this.props.brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        className='get-app__custom-logo'\n                    />\n                );\n            }\n\n            header = (\n                <div className='get-app__header'>\n                    {customLogo}\n                    <div className='get-app__custom-site-name'>\n                        <span>{this.props.siteName}</span>\n                    </div>\n                </div>\n            );\n        }\n\n        return header;\n    }\n\n    render() {\n        const isMobile = UserAgent.isMobile();\n\n        if (this.checkLandingPreferenceBrowser()) {\n            this.openInBrowser();\n            return null;\n        }\n\n        return (\n            <div className='get-app'>\n                {this.renderHeader()}\n                <div className='get-app__dialog'>\n                    <div\n                        className={`get-app__graphic ${isMobile ? 'mobile' : ''}`}\n                    >\n                        {this.renderGraphic()}\n                    </div>\n                    {this.renderDialogBody()}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getTheme} from 'matterfoss-redux/selectors/entities/preferences';\n\nimport {GlobalState} from 'types/store';\n\nimport LinkingLandingPage from './linking_landing_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        desktopAppLink: config.AppDownloadLink,\n        iosAppLink: config.IosAppDownloadLink,\n        androidAppLink: config.AndroidAppDownloadLink,\n        defaultTheme: getTheme(state),\n        siteUrl: config.SiteURL,\n        siteName: config.SiteName,\n        brandImageUrl: Client4.getBrandImageUrl('0'),\n        enableCustomBrand: config.EnableCustomBrand === 'true',\n    };\n}\n\nexport default connect(mapStateToProps)(LinkingLandingPage);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n"],"sourceRoot":""}