{"version":3,"sources":["webpack://mattermost-webapp/./actions/views/mfa.js","webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/mfa/setup/setup.tsx","webpack://mattermost-webapp/./components/mfa/setup/index.ts","webpack://mattermost-webapp/./components/mfa/confirm.jsx","webpack://mattermost-webapp/./components/mfa/mfa_controller/mfa_controller.jsx","webpack://mattermost-webapp/./components/mfa/mfa_controller/index.js","webpack://mattermost-webapp/./components/widgets/icons/fa_logout_icon.tsx","webpack://mattermost-webapp/./images/logo.png"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","Setup","constructor","super","e","preventDefault","input","current","value","replace","length","setState","error","actions","then","server_error_id","Utils","message","history","push","state","secret","qrCode","componentDidMount","user","currentUser","mfa_active","data","serverError","qr_code","errorContent","mfaRequired","formClass","enforceMultifactorAuthentication","values","siteName","onSubmit","submit","alt","style","src","ref","placeholder","t","autoFocus","type","maxHeight","connect","config","getConfig","SiteName","EnforceMultifactorAuthentication","getCurrentUser","bindActionCreators","KeyCodes","Constants","Confirm","redirectUserToDefaultTeam","isKeyPressed","ENTER","document","body","addEventListener","onKeyPress","componentWillUnmount","removeEventListener","MFAController","emitUserLoggedOutEvent","classList","add","getElementById","enableMultifactorAuthentication","remove","backButton","mfa","handleOnClick","logoImage","path","match","updateParent","propTypes","location","PropTypes","children","isRequired","license","getLicense","MFA","EnableMultifactorAuthentication","LogoutIcon","formatMessage","useIntl"],"mappings":"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","file":"830.35628cb18499eb271e51.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'matterfoss-redux/actions/users';\nimport {getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\ntype Props = {\n    currentUser: UserProfile;\n    siteName?: string;\n    enforceMultifactorAuthentication: boolean;\n    actions: {\n        activateMfa: (code: string) => Promise<{\n            error?: {\n                server_error_id: string;\n                message: string;\n            };\n        }>;\n        generateMfaSecret: () => Promise<{\n            data: {\n                secret: string;\n                qr_code: string;\n            };\n            error?: {\n                message: string;\n            };\n        }>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\ntype State = {\n    secret: string;\n    qrCode: string;\n    error?: any | null;\n    serverError?: string;\n}\n\nexport default class Setup extends React.PureComponent<Props, State> {\n    private input: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {secret: '', qrCode: ''};\n\n        this.input = React.createRef();\n    }\n\n    public componentDidMount() {\n        const user = this.props.currentUser;\n        if (!user || user.mfa_active) {\n            this.props.history.push('/');\n            return;\n        }\n\n        this.props.actions.generateMfaSecret().then(({data, error}) => {\n            if (error) {\n                this.setState({\n                    serverError: error.message,\n                });\n                return;\n            }\n\n            this.setState({\n                secret: data.secret,\n                qrCode: data.qr_code,\n            });\n        });\n    }\n\n    submit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const code = this.input?.current?.value.replace(/\\s/g, '');\n        if (!code || code.length === 0) {\n            this.setState({error: Utils.localizeMessage('mfa.setup.codeError', 'Please enter the code from Google Authenticator.')});\n            return;\n        }\n\n        this.setState({error: null});\n\n        this.props.actions.activateMfa(code).then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'ent.mfa.activate.authenticate.app_error') {\n                    this.setState({\n                        error: Utils.localizeMessage('mfa.setup.badCode', 'Invalid code. If this issue persists, contact your System Administrator.'),\n                    });\n                } else {\n                    this.setState({\n                        error: error.message,\n                    });\n                }\n\n                return;\n            }\n\n            this.props.history.push('/mfa/confirm');\n        });\n    }\n\n    public render() {\n        let formClass = 'form-group';\n        let errorContent;\n        if (this.state.error) {\n            errorContent = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let mfaRequired;\n        if (this.props.enforceMultifactorAuthentication) {\n            mfaRequired = (\n                <p>\n                    <FormattedMarkdownMessage\n                        id='mfa.setup.required'\n                        defaultMessage='**Multi-factor authentication is required on {siteName}.**'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    className={formClass}\n                >\n                    {mfaRequired}\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step1'\n                            defaultMessage=\"**Step 1: **On your phone, download Google Authenticator from [iTunes](!https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8') or [Google Play](!https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en)\"\n                        />\n                    </p>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step2'\n                            defaultMessage='**Step 2: **Use Google Authenticator to scan this QR code, or manually type in the secret key'\n                        />\n                    </p>\n                    <div className='form-group'>\n                        <div className='col-sm-12'>\n                            <img\n                                alt={'qr code image'}\n                                style={style.qrCode}\n                                src={'data:image/png;base64,' + this.state.qrCode}\n                            />\n                        </div>\n                    </div>\n                    <br/>\n                    <div className='form-group'>\n                        <p className='col-sm-12'>\n                            <FormattedMessage\n                                id='mfa.setup.secret'\n                                defaultMessage='Secret: {secret}'\n                                values={{\n                                    secret: this.state.secret,\n                                }}\n                            />\n                        </p>\n                    </div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.setup.step3'\n                            defaultMessage='**Step 3: **Enter the code generated by Google Authenticator'\n                        />\n                    </p>\n                    <p>\n                        <LocalizedInput\n                            ref={this.input}\n                            className='form-control'\n                            placeholder={{id: t('mfa.setup.code'), defaultMessage: 'MFA Code'}}\n                            autoFocus={true}\n                        />\n                    </p>\n                    {errorContent}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.setup.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    qrCode: {maxHeight: 170},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {activateMfa, generateMfaSecret} from 'actions/views/mfa';\n\nimport Setup from './setup';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        currentUser: getCurrentUser(state),\n        siteName,\n        enforceMultifactorAuthentication,\n    };\n}\n\ntype Actions = {\n    activateMfa: (code: string) => Promise<{ error?: { server_error_id: string; message: string } }>;\n    generateMfaSecret: () => Promise<{data: { secret: string; qr_code: string }; error?: { message: string }}>;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            activateMfa,\n            generateMfaSecret,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Setup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {isKeyPressed} from 'utils/utils.jsx';\n\nimport {redirectUserToDefaultTeam} from 'actions/global_actions';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nconst KeyCodes = Constants.KeyCodes;\n\nexport default class Confirm extends React.PureComponent {\n    componentDidMount() {\n        document.body.addEventListener('keydown', this.onKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.body.removeEventListener('keydown', this.onKeyPress);\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        redirectUserToDefaultTeam();\n    }\n\n    onKeyPress = (e) => {\n        if (isKeyPressed(e, KeyCodes.ENTER)) {\n            this.submit(e);\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form\n                    onSubmit={this.submit}\n                    onKeyPress={this.onKeyPress}\n                    className='form-group'\n                >\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='mfa.confirm.complete'\n                            defaultMessage='**Set up complete!**'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='mfa.confirm.secure'\n                            defaultMessage='Your account is now secure. Next time you sign in, you will be asked to enter a code from the Google Authenticator app on your phone.'\n                        />\n                    </p>\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='mfa.confirm.okay'\n                            defaultMessage='Okay'\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Route, Switch} from 'react-router-dom';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport Setup from '../setup';\nimport Confirm from '../confirm';\n\nexport default class MFAController extends React.PureComponent {\n    componentDidMount() {\n        document.body.classList.add('sticky');\n        document.getElementById('root').classList.add('container-fluid');\n\n        if (!this.props.enableMultifactorAuthentication) {\n            this.props.history.push('/');\n        }\n    }\n\n    componentWillUnmount() {\n        document.body.classList.remove('sticky');\n        document.getElementById('root').classList.remove('container-fluid');\n    }\n\n    handleOnClick = (e) => {\n        e.preventDefault();\n        emitUserLoggedOutEvent('/login');\n    }\n\n    render() {\n        let backButton;\n        if (this.props.mfa && this.props.enforceMultifactorAuthentication) {\n            backButton = (\n                <div className='signup-header'>\n                    <button\n                        className='style--none color--link'\n                        onClick={this.handleOnClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            );\n        } else {\n            backButton = (<BackButton/>);\n        }\n\n        return (\n            <div className='inner-wrap'>\n                <div className='row content'>\n                    <div>\n                        {backButton}\n                        <div className='col-sm-12'>\n                            <div className='signup-team__container'>\n                                <h3>\n                                    <FormattedMessage\n                                        id='mfa.setupTitle'\n                                        defaultMessage='Multi-factor Authentication Setup'\n                                    />\n                                </h3>\n                                <img\n                                    alt={'signup team logo'}\n                                    className='signup-team-logo'\n                                    src={logoImage}\n                                />\n                                <div id='mfa'>\n                                    <Switch>\n                                        <Route\n                                            path={`${this.props.match.url}/setup`}\n                                            render={(props) => (\n                                                <Setup\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                        <Route\n                                            path={`${this.props.match.url}/confirm`}\n                                            render={(props) => (\n                                                <Confirm\n                                                    state={this.state}\n                                                    updateParent={this.updateParent}\n                                                    {...props}\n                                                />\n                                            )}\n                                        />\n                                    </Switch>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nMFAController.propTypes = {\n    location: PropTypes.object.isRequired,\n    children: PropTypes.node,\n    mfa: PropTypes.bool.isRequired,\n    enableMultifactorAuthentication: PropTypes.bool.isRequired,\n    enforceMultifactorAuthentication: PropTypes.bool.isRequired,\n\n    /*\n     * Object from react-router\n     */\n    match: PropTypes.shape({\n        url: PropTypes.string.isRequired,\n    }).isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport MFAController from './mfa_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfa = license.MFA === 'true';\n    const enableMultifactorAuthentication = config.EnableMultifactorAuthentication === 'true';\n    const enforceMultifactorAuthentication = config.EnforceMultifactorAuthentication === 'true';\n\n    return {\n        mfa,\n        enableMultifactorAuthentication,\n        enforceMultifactorAuthentication,\n    };\n}\n\nexport default connect(mapStateToProps)(MFAController);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n","export default __webpack_public_path__ + \"files/37ecfc86d48a22a44e9c13bb44bc7425.png\";"],"sourceRoot":""}