{"version":3,"sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/signup/signup_controller/signup_controller.jsx","webpack://mattermost-webapp/./components/signup/signup_controller/index.js","webpack://mattermost-webapp/./images/logo.png"],"names":["BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","SignupController","constructor","super","async","token","inviteId","data","team","error","actions","addUserToTeamFromInvite","browserHistory","name","Constants","handleInvalidInvite","getTeamInviteInfo","setState","serverError","loading","err","server_error_id","message","noOpenServerError","signupControls","enableSignUpWithEmail","push","key","window","location","search","component","t","enableSignUpWithGitLab","href","Client4","isLicensed","enableSignUpWithGoogle","enableSignUpWithOffice365","enableSignUpWithOpenId","buttonStyle","openidButtonColor","backgroundColor","buttonText","openidButtonText","style","enableLDAP","params","URLSearchParams","append","query","LDAPText","ldapLoginFieldName","enableSAML","samlLoginButtonText","length","signupDisabledError","margin","usedBefore","get","loggedIn","enableOpenServer","noAccounts","state","componentDidMount","removeGlobalItem","isFreeTierWithNoFreeSeats","subscriptionStats","is_paid_tier","isPaidTier","remaining_seats","remainingSeats","isCloud","userLoggedIn","getInviteInfo","GlobalActions","renderSignupControls","alt","src","logoImage","siteName","PropTypes","isRequired","connect","ownProps","license","getLicense","config","getConfig","Cloud","subscriptionStatsSelector","IsLicensed","EnableOpenServer","NoAccounts","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","EnableLdap","EnableSaml","SamlLoginButtonText","LdapLoginFieldName","SiteName","getGlobalItem","Boolean","getCurrentUserId","dispatch","bindActionCreators"],"mappings":"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","file":"810.ae254ab4bfd18c90b5e2.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmpty} from 'lodash';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {browserHistory} from 'utils/browser_history';\nimport * as GlobalActions from 'actions/global_actions';\nimport logoImage from 'images/logo.png';\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport FormError from 'components/form_error';\nimport LocalizedIcon from 'components/localized_icon';\n\nimport LoadingScreen from 'components/loading_screen';\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class SignupController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object,\n        loggedIn: PropTypes.bool.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        noAccounts: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        enableSignUpWithOpenId: PropTypes.bool.isRequired,\n        enableLDAP: PropTypes.bool.isRequired,\n        enableSAML: PropTypes.bool.isRequired,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        usedBefore: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string.isRequired,\n        openidButtonText: PropTypes.string,\n        openidButtonColor: PropTypes.string,\n        subscriptionStats: PropTypes.object,\n        isCloud: PropTypes.bool,\n        actions: PropTypes.shape({\n            removeGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loading = false;\n        let serverError = '';\n        let noOpenServerError = false;\n        let usedBefore = false;\n\n        if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            let token = params.get('t');\n            if (token == null) {\n                token = '';\n            }\n            let inviteId = params.get('id');\n            if (inviteId == null) {\n                inviteId = '';\n            }\n\n            if (inviteId) {\n                loading = true;\n            } else if (!this.props.loggedIn) {\n                usedBefore = props.usedBefore;\n            } else if (!inviteId && !this.props.enableOpenServer && !this.props.noAccounts) {\n                noOpenServerError = true;\n                serverError = (\n                    <FormattedMessage\n                        id='signup_user_completed.no_open_server'\n                        defaultMessage='This server does not allow open signups.  Please speak with your Administrator to receive an invitation.'\n                    />\n                );\n            }\n        }\n\n        this.state = {\n            loading,\n            serverError,\n            noOpenServerError,\n            usedBefore,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.removeGlobalItem('team');\n        let isFreeTierWithNoFreeSeats = false;\n        if (!isEmpty(this.props.subscriptionStats)) {\n            const {is_paid_tier: isPaidTier, remaining_seats: remainingSeats} = this.props.subscriptionStats;\n            isFreeTierWithNoFreeSeats = isPaidTier === 'false' && remainingSeats <= 0;\n        }\n\n        if (this.props.isCloud && isFreeTierWithNoFreeSeats) {\n            browserHistory.push('/error?type=max_free_users_reached');\n        } else if (this.props.location.search) {\n            const params = new URLSearchParams(this.props.location.search);\n            const token = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            const userLoggedIn = this.props.loggedIn;\n\n            if ((inviteId || token) && userLoggedIn) {\n                this.addUserToTeamFromInvite(token, inviteId);\n            } else if (inviteId) {\n                this.getInviteInfo(inviteId);\n            } else if (userLoggedIn) {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        }\n    }\n\n    addUserToTeamFromInvite = async (token, inviteId) => {\n        const {data: team, error} = await this.props.actions.addUserToTeamFromInvite(token, inviteId);\n        if (team) {\n            browserHistory.push('/' + team.name + `/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                serverError: '',\n                loading: false,\n            });\n        } else if (error) {\n            this.handleInvalidInvite(error);\n        }\n    }\n\n    handleInvalidInvite = (err) => {\n        let serverError;\n        if (err.server_error_id === 'store.sql_user.save.max_accounts.app_error') {\n            serverError = err.message;\n        } else if (err.server_error_id === 'api.team.add_user_to_team_from_invite.guest.app_error') {\n            serverError = err.message;\n        } else {\n            serverError = (\n                <FormattedMessage\n                    id='signup_user_completed.invalid_invite'\n                    defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                />\n            );\n        }\n\n        this.setState({\n            noOpenServerError: true,\n            loading: false,\n            serverError,\n        });\n    }\n\n    renderSignupControls = () => {\n        let signupControls = [];\n\n        if (this.props.enableSignUpWithEmail) {\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full email'\n                    key='email'\n                    to={'/signup_email' + window.location.search}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-envelope'\n                            component='span'\n                            title={{id: t('signup.email.icon'), defaultMessage: 'Email Icon'}}\n                        />\n                        <FormattedMessage\n                            id='signup.email'\n                            defaultMessage='Email and Password'\n                        />\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (this.props.enableSignUpWithGitLab) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.gitlab'\n                                defaultMessage='GitLab Single Sign-On'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithGoogle) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.google'\n                                defaultMessage='Google Account'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOffice365) {\n            signupControls.push(\n                <a\n                    className='btn btn-custom-login btn--full office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/signup' + window.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='signup.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSignUpWithOpenId) {\n            const buttonStyle = {};\n            if (this.props.openidButtonColor) {\n                buttonStyle.backgroundColor = this.props.openidButtonColor;\n            }\n            let buttonText = (\n                <FormattedMessage\n                    id='login.openid'\n                    defaultMessage='Open Id'\n                />\n            );\n            if (this.props.openidButtonText) {\n                buttonText = this.props.openidButtonText;\n            }\n            signupControls.push(\n                <a\n                    id='OpenIdButton'\n                    className='btn btn-custom-login btn--full openid'\n                    style={buttonStyle}\n                    key='openid'\n                    href={Client4.getOAuthRoute() + '/openid/signup' + window.location.search}\n                >\n                    <span>\n                        <span>\n                            {buttonText}\n                        </span>\n                    </span>\n                </a>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableLDAP) {\n            const params = new URLSearchParams(this.props.location.search);\n            params.append('extra', 'create_ldap');\n            const query = '?' + params.toString();\n\n            let LDAPText = (\n                <FormattedMessage\n                    id='signup.ldap'\n                    defaultMessage='AD/LDAP Credentials'\n                />\n            );\n            if (this.props.ldapLoginFieldName) {\n                LDAPText = this.props.ldapLoginFieldName;\n            }\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full ldap'\n                    key='ldap'\n                    to={'/login' + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-folder-open fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.ldap.icon'), defaultMessage: 'AD/LDAP Icon'}}\n                        />\n                        <span>\n                            {LDAPText}\n                        </span>\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (this.props.isLicensed && this.props.enableSAML) {\n            let query = '';\n            if (window.location.search) {\n                query = '&action=signup';\n            } else {\n                query = '?action=signup';\n            }\n\n            signupControls.push(\n                <Link\n                    className='btn btn-custom-login btn--full saml'\n                    key='saml'\n                    to={'/login/sso/saml' + window.location.search + query}\n                >\n                    <span>\n                        <LocalizedIcon\n                            className='icon fa fa-lock fa--margin-top'\n                            component='span'\n                            title={{id: t('signup.saml.icon'), defaultMessage: 'SAML Icon'}}\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </Link>,\n            );\n        }\n\n        if (signupControls.length === 0) {\n            const signupDisabledError = (\n                <FormattedMessage\n                    id='signup_user_completed.none'\n                    defaultMessage='No user creation method has been enabled. Please contact an administrator for access.'\n                />\n            );\n            signupControls = (\n                <FormError\n                    error={signupDisabledError}\n                    margin={true}\n                />\n            );\n        } else if (signupControls.length === 1) {\n            if (this.props.enableSignUpWithEmail) {\n                return browserHistory.push('/signup_email' + window.location.search);\n            } else if (this.props.isLicensed && this.props.enableLDAP) {\n                return browserHistory.push('/login' + window.location.search);\n            }\n        }\n\n        return signupControls;\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        if (this.state.usedBefore) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='signup_user_completed.expired'\n                        defaultMessage=\"You've already completed the signup process for this invitation or this invitation has expired.\"\n                    />\n                </div>\n            );\n        }\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className={'form-group has-error'}>\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        let signupControls;\n        if (this.state.noOpenServerError || this.state.usedBefore) {\n            signupControls = null;\n        } else {\n            signupControls = this.renderSignupControls();\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <h1>{this.props.siteName}</h1>\n                            <h4 className='color--light'>\n                                <FormattedMessage\n                                    id='web.root.signup_info'\n                                />\n                            </h4>\n                            <div className='mt-8'>\n                                <h5><strong>\n                                    <FormattedMessage\n                                        id='signup.title'\n                                        defaultMessage='Create an account with:'\n                                    />\n                                </strong></h5>\n                            </div>\n                            {signupControls}\n                            {serverError}\n                        </div>\n                        <span className='color--light'>\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                to={'/login' + this.props.location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense, getSubscriptionStats as subscriptionStatsSelector} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\nimport {getTeamInviteInfo} from 'matterfoss-redux/actions/teams';\n\nimport {getGlobalItem} from 'selectors/storage';\nimport {removeGlobalItem} from 'actions/storage';\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport SignupController from './signup_controller.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const isCloud = license && license.Cloud === 'true';\n    const subscriptionStats = isCloud ? subscriptionStatsSelector(state) : {};\n    const isLicensed = license && license.IsLicensed === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const noAccounts = config.NoAccounts === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const enableLDAP = config.EnableLdap === 'true';\n    const enableSAML = config.EnableSaml === 'true';\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const siteName = config.SiteName;\n\n    let usedBefore;\n    if (ownProps.location.search) {\n        const params = new URLSearchParams(ownProps.location.search);\n        let token = params.get('t');\n        if (token == null) {\n            token = '';\n        }\n        usedBefore = getGlobalItem(state, token, null);\n    }\n\n    return {\n        loggedIn: Boolean(getCurrentUserId(state)),\n        isLicensed,\n        isCloud,\n        enableOpenServer,\n        noAccounts,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        enableLDAP,\n        enableSAML,\n        samlLoginButtonText,\n        ldapLoginFieldName,\n        siteName,\n        usedBefore,\n        subscriptionStats,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            removeGlobalItem,\n            getTeamInviteInfo,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupController);\n","export default __webpack_public_path__ + \"files/a0a7d819869d6545c06500f0d8179b41.png\";"],"sourceRoot":""}