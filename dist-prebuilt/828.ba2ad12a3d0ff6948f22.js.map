{"version":3,"sources":["webpack://mattermost-webapp/./packages/matterfoss-redux/src/constants/permissions_sysconsole.ts","webpack://mattermost-webapp/./components/widgets/admin_console/admin_header.tsx","webpack://mattermost-webapp/./components/widgets/admin_console/formatted_admin_header.tsx","webpack://mattermost-webapp/./components/analytics/doughnut_chart.tsx","webpack://mattermost-webapp/./components/analytics/line_chart.tsx","webpack://mattermost-webapp/./components/analytics/statistic_count.tsx","webpack://mattermost-webapp/./components/analytics/format.tsx","webpack://mattermost-webapp/./components/analytics/system_analytics/system_analytics.tsx","webpack://mattermost-webapp/./components/analytics/system_analytics/index.ts","webpack://mattermost-webapp/./components/admin_console/banner.tsx","webpack://mattermost-webapp/./components/analytics/table_chart.tsx","webpack://mattermost-webapp/./components/analytics/team_analytics/team_analytics.jsx","webpack://mattermost-webapp/./components/analytics/team_analytics/index.js","webpack://mattermost-webapp/./components/admin_console/admin_settings.tsx","webpack://mattermost-webapp/./components/admin_console/set_by_env.jsx","webpack://mattermost-webapp/./components/admin_console/setting.tsx","webpack://mattermost-webapp/./components/admin_console/boolean_setting.tsx","webpack://mattermost-webapp/./components/admin_console/settings_group.jsx","webpack://mattermost-webapp/./components/admin_console/text_setting.tsx","webpack://mattermost-webapp/./components/admin_console/plugin_management/plugin_management.tsx","webpack://mattermost-webapp/./components/admin_console/plugin_management/index.ts","webpack://mattermost-webapp/./utils/policy_roles_adapter.js","webpack://mattermost-webapp/./components/admin_console/request_button/request_button.jsx","webpack://mattermost-webapp/./components/admin_console/dropdown_setting.jsx","webpack://mattermost-webapp/./components/admin_console/multiselect_settings.jsx","webpack://mattermost-webapp/./components/admin_console/radio_setting.tsx","webpack://mattermost-webapp/./components/admin_console/color_setting.tsx","webpack://mattermost-webapp/./components/admin_console/generated_setting.tsx","webpack://mattermost-webapp/./components/admin_console/user_autocomplete_setting/user_autocomplete_setting.jsx","webpack://mattermost-webapp/./components/admin_console/user_autocomplete_setting/index.jsx","webpack://mattermost-webapp/./packages/matterfoss-redux/src/actions/jobs.ts","webpack://mattermost-webapp/./packages/matterfoss-redux/src/selectors/entities/jobs.ts","webpack://mattermost-webapp/./components/admin_console/jobs/table.jsx","webpack://mattermost-webapp/./components/admin_console/jobs/index.jsx","webpack://mattermost-webapp/./components/admin_console/file_upload_setting.jsx","webpack://mattermost-webapp/./components/admin_console/remove_file_setting.jsx","webpack://mattermost-webapp/./components/admin_console/schema_text.jsx","webpack://mattermost-webapp/./components/admin_console/schema_admin_settings.jsx","webpack://mattermost-webapp/./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx","webpack://mattermost-webapp/./components/admin_console/custom_plugin_settings/enable_plugin_setting.js","webpack://mattermost-webapp/./components/admin_console/custom_plugin_settings/index.js","webpack://mattermost-webapp/./images/openid-convert/emoticon-outline.svg","webpack://mattermost-webapp/./components/admin_console/openid_convert/openid_convert.tsx","webpack://mattermost-webapp/./components/admin_console/openid_convert/index.ts","webpack://mattermost-webapp/./components/widgets/icons/fa_reload_icon.tsx","webpack://mattermost-webapp/./components/admin_console/compliance_reports/compliance_reports.tsx","webpack://mattermost-webapp/./components/admin_console/compliance_reports/index.ts","webpack://mattermost-webapp/./components/admin_console/audits/audits.tsx","webpack://mattermost-webapp/./components/admin_console/audits/index.ts","webpack://mattermost-webapp/./components/admin_console/custom_url_schemes_setting.jsx","webpack://mattermost-webapp/./components/admin_console/custom_enable_disable_guest_accounts_setting.tsx","webpack://mattermost-webapp/./components/admin_console/license_settings/renew_license_card/renew_license_card.tsx","webpack://mattermost-webapp/./components/admin_console/license_settings/trial_license_card/trial_license_card.tsx","webpack://mattermost-webapp/./components/admin_console/license_settings/license_settings.jsx","webpack://mattermost-webapp/./components/admin_console/license_settings/index.js","webpack://mattermost-webapp/./packages/matterfoss-redux/src/actions/schemes.ts","webpack://mattermost-webapp/./packages/matterfoss-redux/src/selectors/entities/schemes.ts","webpack://mattermost-webapp/./packages/matterfoss-redux/src/constants/schemes.ts","webpack://mattermost-webapp/./components/widgets/admin_console/admin_panel.tsx","webpack://mattermost-webapp/./components/widgets/admin_console/admin_panel_with_link.tsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/index.jsx","webpack://mattermost-webapp/./components/admin_console/blockable_link/blockable_link.tsx","webpack://mattermost-webapp/./components/admin_console/blockable_link/index.ts","webpack://mattermost-webapp/./components/widgets/icons/accordion_toggle_icon.tsx","webpack://mattermost-webapp/./components/widgets/admin_console/admin_panel_togglable.tsx","webpack://mattermost-webapp/./components/widgets/icons/checkbox_partial_icon.tsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_checkbox.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_description.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_row.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_group.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permissions_tree/permissions_tree.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permissions_tree/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/guest_permissions_tree/guest_permissions_tree.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/guest_permissions_tree/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx","webpack://mattermost-webapp/./components/team_selector_modal/team_selector_modal.tsx","webpack://mattermost-webapp/./components/team_selector_modal/index.ts","webpack://mattermost-webapp/./components/widgets/admin_console/admin_panel_with_button.tsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx","webpack://mattermost-webapp/./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx","webpack://mattermost-webapp/./components/admin_console/data_grid/data_grid_header.tsx","webpack://mattermost-webapp/./components/admin_console/data_grid/data_grid_row.tsx","webpack://mattermost-webapp/./components/admin_console/filter/filter_checkbox.tsx","webpack://mattermost-webapp/./components/admin_console/filter/filter_list.tsx","webpack://mattermost-webapp/./components/admin_console/filter/filter.tsx","webpack://mattermost-webapp/./components/admin_console/data_grid/data_grid_search.tsx","webpack://mattermost-webapp/./components/admin_console/data_grid/data_grid.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_roles.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/index.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/save_changes_panel.jsx","webpack://mattermost-webapp/./components/admin_console/user_grid/user_grid_name.tsx","webpack://mattermost-webapp/./components/admin_console/user_grid/user_grid_remove.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/add_users_to_role_modal/add_users_to_role_modal.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/add_users_to_role_modal/index.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role_users/system_role_users.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role_users/index.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/types.ts","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role_permission_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role_permission.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role_permissions.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/system_role.tsx","webpack://mattermost-webapp/./components/admin_console/system_roles/system_role/index.tsx","webpack://mattermost-webapp/./utils/filter_users.ts","webpack://mattermost-webapp/./components/admin_console/manage_roles_modal/manage_roles_modal.tsx","webpack://mattermost-webapp/./components/admin_console/manage_roles_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx","webpack://mattermost-webapp/./components/admin_console/manage_teams_modal/remove_from_team_button.jsx","webpack://mattermost-webapp/./components/admin_console/manage_teams_modal/manage_teams_modal.jsx","webpack://mattermost-webapp/./components/admin_console/manage_teams_modal/index.jsx","webpack://mattermost-webapp/./components/admin_console/revoke_token_button/revoke_token_button.tsx","webpack://mattermost-webapp/./components/admin_console/revoke_token_button/index.ts","webpack://mattermost-webapp/./components/admin_console/manage_tokens_modal/manage_tokens_modal.tsx","webpack://mattermost-webapp/./components/admin_console/manage_tokens_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/reset_password_modal/reset_password_modal.tsx","webpack://mattermost-webapp/./components/admin_console/reset_password_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/reset_email_modal/reset_email_modal.tsx","webpack://mattermost-webapp/./components/admin_console/reset_email_modal/index.ts","webpack://mattermost-webapp/./components/user_list_row_with_error/user_list_row_with_error.tsx","webpack://mattermost-webapp/./components/user_list_row_with_error/index.ts","webpack://mattermost-webapp/./components/admin_console/system_users/system_users_dropdown/system_users_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/system_users/system_users_dropdown/index.ts","webpack://mattermost-webapp/./components/admin_console/system_users/list/system_users_list.tsx","webpack://mattermost-webapp/./components/admin_console/system_users/list/index.ts","webpack://mattermost-webapp/./components/admin_console/system_users/list/selectors.tsx","webpack://mattermost-webapp/./components/admin_console/system_users/system_users.tsx","webpack://mattermost-webapp/./components/admin_console/system_users/index.ts","webpack://mattermost-webapp/./components/admin_console/admin_button_outline/admin_button_outline.tsx","webpack://mattermost-webapp/./components/admin_console/admin_user_card/admin_user_card.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/team_list/abstract_list.tsx","webpack://mattermost-webapp/./components/widgets/icons/ellipsis_h_icon.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/team_list/team_list_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/team_list/team_row.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/team_list/team_list.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/team_list/index.ts","webpack://mattermost-webapp/./components/widgets/icons/email_icon.tsx","webpack://mattermost-webapp/./components/widgets/icons/at_icon.tsx","webpack://mattermost-webapp/./components/widgets/icons/shield_outline_icon.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/system_user_detail.tsx","webpack://mattermost-webapp/./components/admin_console/system_user_detail/index.ts","webpack://mattermost-webapp/./components/admin_console/server_logs/log_list.tsx","webpack://mattermost-webapp/./components/admin_console/server_logs/logs.tsx","webpack://mattermost-webapp/./components/admin_console/server_logs/index.ts","webpack://mattermost-webapp/./components/admin_console/brand_image_setting/brand_image_setting.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_row.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/groups_list/groups_list.tsx","webpack://mattermost-webapp/./components/admin_console/group_settings/groups_list/index.ts","webpack://mattermost-webapp/./components/admin_console/group_settings/group_settings.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_profile.jsx","webpack://mattermost-webapp/./components/toggle.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/line_switch.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_profile_and_settings.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_teams_and_channels_row.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_teams_and_channels.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_users_row.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_users.jsx","webpack://mattermost-webapp/./components/channel_selector_modal/channel_selector_modal.tsx","webpack://mattermost-webapp/./components/channel_selector_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/group_details.jsx","webpack://mattermost-webapp/./components/admin_console/group_settings/group_details/index.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/abstract_list.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/list/team_list.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/list/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/team_settings.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/remove_confirm_modal.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/group_users_row.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/group_users.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/users_to_be_removed_modal.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/errors.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_profile.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_modes.jsx","webpack://mattermost-webapp/./components/admin_console/member_list_group/member_list_group.tsx","webpack://mattermost-webapp/./components/admin_console/member_list_group/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/group_members_modal.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/group_row.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/group_list.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/group/index.js","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_groups.jsx","webpack://mattermost-webapp/./components/admin_console/user_grid/user_grid_role_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/user_grid/user_grid.tsx","webpack://mattermost-webapp/./components/add_users_to_team_modal/add_users_to_team_modal.tsx","webpack://mattermost-webapp/./components/add_users_to_team_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_members/team_members.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_members/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/team_details.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/team/details/index.js","webpack://mattermost-webapp/./components/admin_console/filter/team_filter_dropdown/team_filter_checkbox.tsx","webpack://mattermost-webapp/./components/admin_console/filter/team_filter_dropdown/team_filter_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/filter/team_filter_dropdown/index.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/list/channel_list.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/list/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/channel_settings.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/convert_confirm_modal.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/convert_and_remove_confirm_modal.jsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_modes.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_groups.tsx","webpack://mattermost-webapp/./components/widgets/icons/unarchive_icon.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_profile.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_members/channel_members.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_members/index.ts","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_moderation.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/channel_details.tsx","webpack://mattermost-webapp/./components/admin_console/team_channel_settings/channel/details/index.ts","webpack://mattermost-webapp/./components/admin_console/push_settings.jsx","webpack://mattermost-webapp/./components/card/title_and_button_card_header/title_and_button_card_header.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/data_retention_settings.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/index.ts","webpack://mattermost-webapp/./components/widgets/inputs/dropdown_input_hybrid.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/dropdown_options/dropdown_options.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/global_policy_form/global_policy_form.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/global_policy_form/index.ts","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/team_list/team_list.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/team_list/index.ts","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/channel_list/channel_list.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/channel_list/index.ts","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/custom_policy_form/custom_policy_form.tsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings/custom_policy_form/index.ts","webpack://mattermost-webapp/./components/admin_console/feature_flags.tsx","webpack://mattermost-webapp/./images/status_green.png","webpack://mattermost-webapp/./images/status_yellow.png","webpack://mattermost-webapp/./components/admin_console/cluster_table.jsx","webpack://mattermost-webapp/./components/admin_console/cluster_table_container.jsx","webpack://mattermost-webapp/./components/admin_console/cluster_settings.jsx","webpack://mattermost-webapp/./components/admin_console/custom_terms_of_service_settings/index.ts","webpack://mattermost-webapp/./components/admin_console/custom_terms_of_service_settings/custom_terms_of_service_settings.tsx","webpack://mattermost-webapp/./images/no_billing_history_graphic.svg","webpack://mattermost-webapp/./images/upgrade-mattermost-cloud-image.svg","webpack://mattermost-webapp/./components/admin_console/billing/billing_summary/billing_summary.tsx","webpack://mattermost-webapp/./components/admin_console/billing/billing_summary/index.tsx","webpack://mattermost-webapp/./components/admin_console/billing/plan_details/plan_details.tsx","webpack://mattermost-webapp/./components/admin_console/billing/plan_details/index.tsx","webpack://mattermost-webapp/./components/alert_banner.tsx","webpack://mattermost-webapp/./images/private-cloud-image.svg","webpack://mattermost-webapp/./images/free-trial-private-cloud-image.svg","webpack://mattermost-webapp/./components/admin_console/billing/billing_history.tsx","webpack://mattermost-webapp/./images/no_company_info_graphic.svg","webpack://mattermost-webapp/./components/admin_console/billing/company_info_display.tsx","webpack://mattermost-webapp/./images/no_payment_info_graphic.svg","webpack://mattermost-webapp/./components/admin_console/billing/payment_info_display.tsx","webpack://mattermost-webapp/./components/admin_console/billing/payment_info_edit.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/feature_discovery.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/index.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/ldap_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/ldap.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/saml_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/saml.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/openid.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/announcement_banner_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/announcement_banner.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/channels_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/channels.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/compliance_export_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/compliance_export.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/custom_terms_of_service_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/custom_terms_of_service.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/data_retention_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/data_retention.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/guest_access_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/guest_access.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/system_roles_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/system_roles.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/groups_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/groups.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/images/permissions_svg.tsx","webpack://mattermost-webapp/./components/admin_console/feature_discovery/features/permissions.tsx","webpack://mattermost-webapp/./components/admin_console/admin_definition_constants.jsx","webpack://mattermost-webapp/./components/admin_console/admin_definition.jsx","webpack://mattermost-webapp/./components/admin_console/billing/billing_subscriptions/index.tsx","webpack://mattermost-webapp/./components/admin_console/billing/billing_subscriptions/billing_subscriptions.tsx","webpack://mattermost-webapp/./components/admin_console/billing/company_info.tsx","webpack://mattermost-webapp/./components/admin_console/billing/company_info_edit.tsx","webpack://mattermost-webapp/./components/admin_console/billing/payment_info.tsx","webpack://mattermost-webapp/./components/admin_console/database_settings.jsx","webpack://mattermost-webapp/./components/admin_console/elasticsearch_settings.jsx","webpack://mattermost-webapp/./components/admin_console/session_length_settings.jsx","webpack://mattermost-webapp/./components/admin_console/password_settings.jsx","webpack://mattermost-webapp/./components/admin_console/data_retention_settings.jsx","webpack://mattermost-webapp/./components/admin_console/message_export_settings.jsx","webpack://mattermost-webapp/./components/admin_console/bleve_settings.jsx","webpack://mattermost-webapp/./selectors/admin_console.jsx","webpack://mattermost-webapp/./components/discard_changes_modal.tsx","webpack://mattermost-webapp/./utils/admin_console_plugin_index.js","webpack://mattermost-webapp/./utils/admin_console_index.jsx","webpack://mattermost-webapp/./components/admin_console/admin_sidebar_category.jsx","webpack://mattermost-webapp/./components/commercial_support_modal/commercial_support_modal.tsx","webpack://mattermost-webapp/./components/commercial_support_modal/index.ts","webpack://mattermost-webapp/./components/admin_console/admin_navbar_dropdown/menu_item_blockable_link.tsx","webpack://mattermost-webapp/./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.tsx","webpack://mattermost-webapp/./components/admin_console/admin_navbar_dropdown/index.ts","webpack://mattermost-webapp/./components/admin_console/admin_sidebar_header/admin_sidebar_header.tsx","webpack://mattermost-webapp/./components/admin_console/admin_sidebar_header/index.ts","webpack://mattermost-webapp/./components/admin_console/admin_sidebar_section.jsx","webpack://mattermost-webapp/./components/admin_console/highlight.tsx","webpack://mattermost-webapp/./components/admin_console/admin_sidebar/admin_sidebar.jsx","webpack://mattermost-webapp/./components/admin_console/admin_sidebar/index.js","webpack://mattermost-webapp/./components/admin_console/admin_console.tsx","webpack://mattermost-webapp/./components/admin_console/index.ts","webpack://mattermost-webapp/./components/backstage/components/backstage_navbar.jsx","webpack://mattermost-webapp/./components/widgets/icons/checkbox_checked_icon.tsx","webpack://mattermost-webapp/./components/widgets/icons/fa_search_icon.tsx","webpack://mattermost-webapp/./packages/matterfoss-redux/src/actions/bots.ts","webpack://mattermost-webapp/./packages/matterfoss-redux/src/selectors/entities/bots.ts"],"names":["RESOURCE_KEYS","ABOUT","EDITION_AND_LICENSE","REPORTING","SITE_STATISTICS","TEAM_STATISTICS","SERVER_LOGS","USER_MANAGEMENT","USERS","GROUPS","TEAMS","CHANNELS","PERMISSIONS","SYSTEM_ROLES","AUTHENTICATION","SIGNUP","EMAIL","PASSWORD","MFA","LDAP","SAML","OPENID","GUEST_ACCESS","INTEGRATIONS","INTEGRATION_MANAGEMENT","BOT_ACCOUNTS","GIF","CORS","COMPLIANCE","DATA_RETENTION_POLICY","COMPLIANCE_EXPORT","COMPLIANCE_MONITORING","CUSTOM_TERMS_OF_SERVICE","SITE","CUSTOMIZATION","LOCALIZATION","USERS_AND_TEAMS","NOTIFICATIONS","ANNOUNCEMENT_BANNER","EMOJI","POSTS","FILE_SHARING_AND_DOWNLOADS","PUBLIC_LINKS","NOTICES","EXPERIMENTAL","FEATURES","FEATURE_FLAGS","BLEVE","ENVIRONMENT","WEB_SERVER","DATABASE","ELASTICSEARCH","FILE_STORAGE","IMAGE_PROXY","SMTP","PUSH_NOTIFICATION_SERVER","HIGH_AVAILABILITY","RATE_LIMITING","LOGGING","SESSION_LENGTHS","PERFORMANCE_MONITORING","DEVELOPER","ResourceToSysConsolePermissionsTable","Permissions","billing","plugins","AdminHeader","React","render","className","this","props","children","FormattedAdminHeader","id","defaultMessage","values","defaultProps","DoughnutChart","update","canvasRef","current","ctx","getContext","dataCopy","JSON","parse","stringify","data","chart","Chart","type","options","componentDidMount","initChart","componentDidUpdate","prevProps","Utils","componentWillUnmount","destroy","content","ref","width","height","title","LineChart","legend","display","chartOptions","labels","length","hasData","hasChart","Boolean","data-testid","data-labels","PropTypes","StatisticCount","loading","icon","count","isNaN","formatPostsPerDayData","fillChartData","datasets","fillColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","formatUsersWithPostsPerDayData","label","chartData","forEach","element","find","e","name","val","value","push","StatTypes","Constants","SystemAnalytics","AdminActions","isLicensed","getStatValue","stat","stats","skippedIntensiveQueries","TOTAL_POSTS","datas","Set","add","Array","from","sort","synchronizeChartLabels","POST_PER_DAY","BOT_POST_PER_DAY","USERS_WITH_POSTS_PER_DAY","postCountsDay","botPostCountsDay","userCountsWithPostsDay","banner","postCount","postTotalGraph","botPostTotalGraph","activeUserGraph","advancedStats","advancedGraphs","sessionCount","commandCount","incomingCount","outgoingCount","TOTAL_SESSIONS","TOTAL_COMMANDS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","channelTypeData","totalPublic","TOTAL_PUBLIC_CHANNELS","totalPrivate","TOTAL_PRIVATE_GROUPS","backgroundColor","hoverBackgroundColor","postTypeData","filePosts","TOTAL_FILE_POSTS","hashtagPosts","TOTAL_HASHTAG_POSTS","totalPosts","postTypeGraph","userCount","TOTAL_USERS","teamCount","TOTAL_TEAMS","totalPublicChannelsCount","totalPrivateGroupsCount","channelCount","dailyActiveUsers","DAILY_ACTIVE_USERS","monthlyActiveUsers","MONTHLY_ACTIVE_USERS","firstRow","secondRow","thirdRow","connect","state","getLicense","IsLicensed","entities","admin","analytics","Banner","description","TableChart","map","item","tooltip","Tooltip","tip","key","delayShow","placement","overlay","TeamAnalytics","constructor","super","async","recentlyActiveUsers","actions","getProfilesInTeam","General","newUsers","setState","teamId","target","team","teams","t","BrowserStore","initialTeam","getData","getTeams","prevState","totalPostsCount","userActiveGraph","recentActiveUsers","locale","user","username","last_activity_at","day","month","getMonthLong","year","hour12","hour","minute","email","newlyCreatedUsers","create_at","formatNewUsersData","a","b","aName","display_name","toUpperCase","bName","onChange","handleTeamChange","isRequired","getTeamsList","getCurrentLocale","teamAnalytics","dispatch","bindActionCreators","AdminSettings","errorTooltip","elm","currentTarget","querySelector","isElipsis","offsetWidth","scrollWidth","saveNeeded","setNavigationBlocked","preventDefault","doSubmit","saving","serverError","config","getConfigFromState","updateConfig","error","getStateFromConfig","callback","handleSaved","message","serverErrorId","server_error_id","str","defaultValue","n","parseInt","minimumValue","path","environmentConfig","getConfigValue","stateInit","Object","assign","errorMessageRef","split","reduce","obj","pathPart","setConfigValue","setValue","pathParts","part","slice","role","onSubmit","handleSubmit","renderTitle","renderSettings","disabled","isDisabled","canSave","onClick","savingMessage","localizeMessage","onMouseOver","openTooltip","onMouseOut","closeTooltip","Overlay","show","SetByEnv","Settings","PureComponent","setByEnv","helpText","inputId","htmlFor","BooleanSetting","disabledText","checked","handleChange","trueText","falseText","SettingsGroup","header","subtitle","container","wrapperClass","contentClass","sectionHeader","AdminTextSetting","sharedProps","isTextDisabled","labelClassName","inputClassName","footer","PluginItemState","PluginState","PluginItemStateDescription","PluginItem","pluginStatus","removing","handleEnable","handleDisable","handleRemove","showInstances","hasSettings","appsEnabled","activateButton","activating","deactivating","active","data-plugin-id","removeButtonText","settingsButton","Link","to","removeButton","notices","instances","some","instance","version","clusterSummary","cluster_id","appsPluginID","settings_schema","settings","pluginStatuses","uploadPlugin","installPluginFromUrl","removePlugin","getPlugins","getPluginStatuses","enablePlugin","disablePlugin","PluginSettings","Enable","enable","EnableUploads","enableUploads","AllowInsecureDownloadUrl","allowInsecureDownloadUrl","EnableMarketplace","enableMarketplace","EnableRemoteMarketplace","enableRemoteMarketplace","AutomaticPrepackagedPlugins","automaticPrepackagedPlugins","MarketplaceUrl","marketplaceUrl","RequirePluginSignature","requirePluginSignature","lastMessage","fileInput","files","fileSelected","file","force","uploading","confirmOverwriteUploadModal","overwritingUpload","msg","helpSubmitUpload","pluginDownloadUrl","installing","confirmOverwriteInstallModal","overwritingInstall","url","installFromUrl","pluginId","getAttribute","showRemoveModal","onConfirm","onCancel","overwriteButton","confirmButtonClass","confirmButtonText","ExperimentalSettings","RestrictSystemAdmin","isSetByEnv","enableUploadButton","fileName","uploadButtonText","pluginsList","pluginsContainer","pluginsListContainer","btnClass","nameCompare","localeCompare","p","showRemovePluginModal","uploadHelpText","overwriteUploadPluginModal","renderOverwritePluginModal","handleOverwriteUploadPlugin","handleOverwriteUploadPluginCancel","removePluginModal","renderRemovePluginModal","handleRemovePlugin","handleRemovePluginCancel","renderEnablePluginsSetting","classNames","accept","handleUpload","handleSubmitUpload","getMarketplaceUrlHelpText","resolveRemoveModal","then","MAPPING","enableTeamCreation","true","roleName","permission","shouldHave","false","editOthersPosts","enableOnlyAdminIntegrations","RequestButton","busy","fail","success","doRequest","requestAction","err","errMsg","includeDetailedError","detailed_error","saveConfigAction","errorMessage","showSuccessMessage","successMessage","widgetClassNames","handleRequest","text","loadingText","buttonText","alternativeActionElement","DropdownSetting","MultiSelectSetting","newValue","selected","found","isMulti","getOptionLabel","delimiter","clearable","noResultsText","noResultText","calculateValue","RadioSetting","ColorSetting","color","GeneratedSetting","crypto","toString","substring","regenerateText","regenerateHelpText","placeholder","regenerate","UserAutocompleteSetting","autocompleteUsers","userSuggestionProviders","GenericUserProvider","onItemSelected","handleUserSelected","listComponent","SuggestionList","listStyle","providers","requiredCharacters","openOnFocus","createJob","job","bindClientFunc","clientFunc","Client4","onRequest","JobTypes","onSuccess","onFailure","params","getJobsByType","page","perPage","cancelJob","jobs","jobsByTypeList","JobTable","is_downloadable","messages_exported","export_type","exportFormats","href","rel","formatMessage","intl","status","JobStatuses","getExtraInfoText","millis","start_at","runningMillis","Date","now","lastActivity","formatDate","formatTime","second","seconds","Math","round","minutes","date","jobType","jobId","reload","cancelButton","data-job-id","handleCancelJob","interval","setInterval","clearInterval","showFilesColumn","downloadExportResults","items","getCancelButton","getStatus","getDownloadLink","getFinishAt","getRunLength","hideJobCreateButton","handleCreateJob","createJobButtonText","createJobHelpText","colSpan","intlShape","injectIntl","ownProps","createSelector","jobsByType","getConfig","MessageExportSettings","DownloadExportResults","Table","FileUploadSetting","Setting","uploadingText","fileType","fileInputRef","$","uploadButtonRef","button","data-loading-text","RemoveFileSetting","removingText","removeButtonRef","SchemaText","isMarkdown","textDefault","textValues","html","marked","breaks","sanitize","renderer","CustomRenderer","dangerouslySetInnerHTML","__html","isTranslated","renderTranslated","renderUntranslated","SchemaAdminSettings","confirmNeededId","showConfirmId","updatedRoles","mappingValues","roles","rolesClone","pertinentRoleNames","roleNames","v1","v2","names","concat","roleNamesInMapping","keys","includes","purgeNonPertinentRoles","mappingKey","roleRules","Error","permissions","addPermissionToRole","permissionIndex","indexOf","splice","removePermissionFromRole","mutateRolesBasedOnMapping","entries","roleClone","originalPermissionSet","newPermissionSet","difference","filter","x","has","size","rolesFromMapping","schema","acc","permissions_mapping_name","Promise","all","editRole","translate","name_default","setting","label_markdown","label_values","label_default","help_text","helpTextValues","helpTextDefault","disabled_help_text","disabled_help_text_markdown","disabled_help_text_values","disabled_help_text_default","help_text_markdown","help_text_values","help_text_default","enterpriseReady","BuildEnterpriseReady","license","consoleAccess","cloud","isCurrentUserSystemAdmin","isHidden","sourceUrlKey","action","metadata","Map","tsetting","setFromMetadataField","inputData","get","buildSettingFunctions","onSetData","renderHelpText","loading_default","renderLabel","success_message","error_message","error_message_default","success_message_default","inputType","dynamic_value","placeholder_default","maxLength","max_length","handlePermissionChange","option","o","display_name_default","selectedValue","selectedOptionForHelpText","locales","I18n","l","order","multiple","no_result","no_result_default","changedId","join","banner_type","additionalClassName","renderBanner","regenerate_help_text","handleGeneratedChange","s","replace","confirm","warning","clientWarning","job_type","render_job","setData","set_action","filename","removeFile","remove_action","remove_help_text","remove_help_text_default","remove_button_text","remove_button_text_default","removing_text","removing_text_default","uploading_text","uploading_text_default","upload_action","idpCertificateFileError","CustomComponent","component","componentInstance","registerSaveAction","setSaveNeeded","unRegisterSaveAction","cancelSubmit","showConfirm","showTitle","saveAction","indexOfSaveAction","saveActions","settingsList","sections","section","results","hasSaveActionError","customComponentWrapperClass","hybridSchemaAndComponent","iconClassName","textClassName","isPlugin","buildTextSetting","buildColorSetting","buildBoolSetting","buildPermissionSetting","buildDropdownSetting","buildRadioSetting","buildBannerSetting","buildGeneratedSetting","buildUsernameSetting","buildButtonSetting","buildLanguageSetting","buildJobsTableSetting","buildFileUploadSetting","buildCustomSetting","prevSchemaId","sectionSettings","getSettingValue","previousValue","onConfigSave","mappingPart","hasOwnProperty","hasUnmetCondition","allConditionsAreMet","mappingPartIterator","mappingValueFromRoles","onConfigLoad","default","getSetting","unescapePathPart","getEnablePluginSetting","plugin","pluginEnabledConfigKey","escapePathPart","getPluginSchema","getAdminConsoleCustomComponents","customComponents","areAppsEnabled","escapedPluginId","toLowerCase","bannerType","displayName","it","any","stateIsFalse","not","userHasWritePermissionOnResource","stateIsTrue","pluginEnableSetting","unshift","match","plugin_id","getRoles","CustomPluginSettings","OpenIdConvert","newConfig","Office365Settings","DirectoryId","DiscoveryEndpoint","GoogleSettings","GitLabSettings","UserApiEndpoint","Scope","AuthEndpoint","TokenEndpoint","browserHistory","undefined","src","imagePath","alt","upgradeConfig","ReloadIcon","useIntl","ComplianceReports","loadingReports","getComplianceReports","runningReport","desc","descInput","emails","emailsInput","keywords","keywordsInput","fromInput","end_at","toInput","createComplianceReport","enabled","getDateTime","style","list","i","reports","report","download","user_id","profile","users","dataCell","readOnly","runReport","margin","greenStatus","redStatus","whiteSpace","marginTop","getUsersForReports","profiles","complianceReports","usersMap","r","u","ComplianceSettings","requests","createCompliance","selectComplianceReports","Audits","loadingAudits","getAudits","clear","marginBottom","audits","showUserId","showIp","showSession","renderComplianceReports","activityLogHeader","Compliance","Selectors","CustomUrlSchemesSetting","trim","arr","valueAsArray","stringToArray","arrayToString","CustomEnableDisableGuestAccountsSetting","submit","confirmNeeded","RenewLicenseCard","totalUsers","isLicenseExpired","titleClass","iconClass","today","moment","endOfLicense","ExpiresAt","daysToEndLicense","diff","cardTitle","days","licensedUsersNum","Users","activeUsersNum","telemetryInfo","TrialLicenseCard","currentDate","endDate","daysToLicenseExpire","toDateString","time","endOf","format","tz","getBrowserTimezone","daysCount","buttonTextElement","trackEvent","window","open","handleContactLinkClick","LicenseSettings","percentage","upgradeToE0Status","reloadPercentage","upgradingPercentage","upgradeError","uploadLicense","getLicenseConfig","removeLicense","upgradeToE0","upgradingPercetage","gettingTrial","gettingTrialError","requestedUsers","max","requestTrialLicense","ping","location","catch","setTimeout","checkRestarted","restarting","restartServer","restartError","isTrialLicense","isLicenseExpiring","upgradedFromTE","edition","licenseType","licenseContent","eelicense","IssuedAt","StartsAt","requestLicense","renderEELicenseText","renderE0Content","skuShortName","SkuShortName","renderE10E20Content","renewLicenseCard","UpgradedFromTE","getScheme","schemeId","SchemeTypes","getSchemes","scope","createScheme","scheme","deleteScheme","getState","forceLogoutIfNecessary","logError","patchScheme","getSchemeTeams","schemes","makeGetSchemeTeams","allTeams","console","log","schemeTeams","scheme_id","AdminPanel","onHeaderClick","titleId","titleDefault","subtitleId","subtitleDefault","subtitleValues","AdminPanelWithLink","linkTextId","linkTextDefault","PermissionsSchemeSummary","schemeName","confirmButton","deleting","showConfirmModal","handleDeleteConfirmed","handleDeleteCanceled","stopPropagation","history","extraTeams","number","confirmModal","renderConfirmModal","goToEdit","delete","PermissionSchemesSettings","loadingMore","loadSchemes","promises","loadSchemeTeams","phase2MigrationIsComplete","docLink","jobsAreEnabled","clusterIsEnabled","teamOverrideUnavalableView","defaultMsg","documentationLink","hasCustomSchemes","CustomPermissionsSchemes","teamOverrideView","teamOverrideSchemesMigrationView","loadMoreSchemes","renderTeamOverrideSchemes","status_code","RunJobs","EnableCluster","BlockableLink","blocked","deferNavigation","Reflect","deleteProperty","NavLink","handleClick","getNavigationBlocked","AccordionToggleIcon","viewBox","stroke","strokeWidth","fill","fillRule","transform","d","cx","cy","AdminPanelTogglable","onToggle","CheckboxPartialIcon","PermissionCheckbox","extraClass","PermissionDescription","isInheritLink","parentElement","selectRow","generateId","contentRef","inherited","rowType","additionalValues","parentPermissionClicked","PermissionRow","uniqId","classes","toggleSelect","getRecursivePermissions","result","PermissionGroup","expanded","ids","permissionsToToggle","fromParent","prevPermissions","PermissionsScope","isInScope","comesFromParent","parentRole","toggleSelectRow","g","toggleSelectSubGroup","combined","root","anyChecked","anyUnchecked","allPermissionsFromParent","hasPermissionsOnScope","permissionsRows","group","addVals","renderPermission","renderGroup","toggleSelectGroup","toggleExpanded","EditPostTimeLimitButton","messageID","timeLimit","PostEditTimeLimit","INT32_MAX","EditPostTimeLimitModal","postEditTimeLimit","ServiceSettings","onClose","Modal","dialogClassName","aria-labelledby","closeButton","componentClass","handleOptionChange","min","step","handleSecondsChange","save","PermissionsTree","sharedChannelsGroup","groups","integrationsGroup","postsGroup","teamsGroup","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableOAuthServiceProvider","EnableCommands","EnableCustomEmoji","EnableGuestAccounts","LDAPGroups","ExperimentalSharedChannels","editTimeLimitModalIsVisible","ADDITIONAL_VALUES","toggleGroup","closePostTimeLimitModal","edit_post","editTimeLimitButton","openPostTimeLimitModal","updateGroups","EXCLUDED_PERMISSIONS","GuestPermissionsTree","guest_edit_post","GUEST_INCLUDED_PERMISSIONS","PermissionSystemSchemeSettings","document","openRoles","all_users","scrollIntoView","behavior","block","toggleRole","selectedPermission","goToSelectedRow","system_user","team_user","channel_user","system_guest","team_guest","channel_guest","teamAdminPromise","team_admin","channelAdminPromise","channel_admin","restoreExcludedPermissions","deriveRolesFromAllUsers","guestRoles","restoreGuestPermissions","deriveRolesFromGuests","guests","haveGuestAccountsPermissions","systemGuestPromise","teamGuestPromise","channelGuestPromise","roleId","newOpenRoles","newPermissions","newRolesState","DefaultRolePermissions","GuestAccountsPermissions","loaded","togglePermission","system_admin","showResetDefaultModal","resetDefaults","urlParams","URLSearchParams","search","rolesNeeded","GeneralConstants","loadRolesIfNeeded","every","loadRolesIntoState","UNSAFE_componentWillReceiveProps","nextProps","TeamSelectorModal","setModalSearchTerm","onModalDismissed","onTeamsSelected","handleHide","confirmed","modalID","ModalIdentifiers","confirmAddModal","confirmAddTeam","teamIds","v","loadingState","loadingTeams","prevPage","setTeamsLoadingState","loadTeams","TEAMS_PER_PAGE","excludePolicyConstrained","term","multiselectComponent","isSelected","onAdd","onMouseMove","rowSelected","selectedItemRef","imageURLForTeam","searchTimeoutId","searchTerm","clearTimeout","searchTeams","renderValue","addValue","numRemainingText","buttonSubmitText","delete_at","currentSchemeId","excludeGroupConstrained","group_constrained","alreadySelected","policy_id","teamsValues","onHide","onExited","handleExit","optionRenderer","renderOption","valueRenderer","handlePageChange","handleInput","handleDelete","handleAdd","placeholderText","views","modalSearch","startsWith","AdminPanelWithButton","onButtonClick","buttonTextId","buttonId","buttonTextDefault","TeamInList","onRemoveTeam","handleRemoveTeam","getTeamStats","loadTeamStats","PermissionTeamSchemeSettings","default_team_guest_role","default_team_user_role","default_team_admin_role","default_channel_guest_role","default_channel_user_role","default_channel_admin_role","teamGuest","teamUser","teamAdmin","channelGuest","channelUser","channelAdmin","isLoaded","baseTeam","baseChannel","schemeDescription","getStateRoles","allUsers","derived","derivedGuests","newScheme","teamUserPromise","channelUserPromise","currentTeams","serverTeams","addedTeams","removedTeams","updateTeamScheme","addTeamOpen","closeAddTeam","addTeams","handleNameChange","rows","handleDescriptionChange","openAddTeam","removeTeam","loadScheme","DataGridHeader","renderHeaderElement","col","flexGrow","field","columns","DataGridRow","renderCell","row","column","textAlign","overflow","cells","FilterCheckbox","updateOption","toggleOption","defaultChecked","FilterList","updateValues","optionKey","valuesToRender","index","currentValue","FilterItem","Filter","addEventListener","handleClickOutside","removeEventListener","event","filterRef","contains","hidePopover","buttonRef","blur","optionsModified","onFilter","filterCount","calculateFilterCount","filterKey","FilterListComponent","valid","filters","renderFilterOptions","Filter__active","togglePopover","Filter__show","resetFilters","DataGridSearch","onSearch","filterProps","aria-hidden","handleSearch","resetSearch","DataGrid","minimumColumnWidth","fixedColumns","fixedColumnWidth","visibleColumns","availableWidth","clientWidth","fixed","nextPage","previousPage","startCount","endCount","total","firstPage","lastPage","prevPageFn","nextPageFn","hiddenColumns","handleResize","renderRows","rowsContainerStyles","rowsToRender","loadingIndicator","placeholderEmpty","renderHeader","renderSearch","searchPlaceholder","renderFooter","SystemRoles","edit","SaveChangesPanel","cancelLink","propTypes","UserGridName","last_picture_update","first_name","last_name","UserGridRemove","removeUser","AddUsersToRoleModal","getProfiles","USERS_PER_PAGE","setUsersLoadingState","searchResults","searchProfiles","displayEntireNameForUser","is_bot","isGuest","needMoreUsers","onAddCallback","num","buttonSubmitLoadingText","addError","usersToDisplay","excludeUsers","hasUser","includeUsers","profilesList","filteredProfilesList","filterProfilesStartingWithTerm","filterProfiles","profileListToMap","searchUsersToAdd","ariaLabelRenderer","renderAriaLabel","maxValues","filterOptions","exclude_roles","selectProfiles","SystemRoleUsers","usersToRemove","usersToAdd","totalCount","getVisibleTotalCount","setUserGridSearch","currentUserId","getPaginationProps","new","remove","onRemoveCallback","getFilteredUsersStats","setStateLoading","dialogType","dialogProps","skipCommit","getRows","getColumns","selectFilteredUserStats","total_users_count","userGridSearch","searchProfilesStartingWithTerm","makeSearchProfilesStartingWithTerm","getCurrentUserId","readAccess","writeAccess","mixedAccess","SystemRolePermissionDropdown","subsections","updatePermissions","canWriteLabel","canWriteDescription","canReadLabel","canReadDescription","noAccessLabel","mixedAccessLabel","noAccessDescription","currentAccess","access","ariaLabel","aria-expanded","updatePermission","SystemRolePermission","visibleSections","permissionsMap","permissionsToUpdate","getAccessForSection","isSectionVisible","chevron","subsectionsCount","setSectionVisible","subsection","renderSectionRow","hasDescription","renderSubsectionToggle","hasNoAccess","canRead","canWrite","getAccessForSectionByName","sectionName","renderSubsections","sectionsList","SECTIONS_BY_ROLES","user_management","authentication","getPermissionsMap","memoizeResult","getSectionsListForRole","sectionsByRole","SystemRolePermissions","visible","isLicensedForCloud","editedSectionsByRole","permissionsToShow","permissionShortName","billingSectionIndex","findIndex","SystemRole","nextState","updatedRolePermissions","getSaveStateNeeded","updateUserRoles","rolePermissionsWithAncillaryPermssions","newRole","isError","userIdsToRemove","removeUserPromises","userId","resultWithError","userIdsToAdd","addUserPromises","saveKey","updatedPermissions","perm","readPermission","writePermission","defaultName","charAt","addUsersToRole","removeUserFromRole","getRolesById","role_id","Cloud","getUserOptionsFromFilter","UserFilters","UserListOptions","getStateFromProps","hasPostAllRole","UserUtils","hasPostAllPublicRole","hasUserAccessTokenRole","isSystemAdmin","ManageRolesModal","oldRoles","trackRoleChanges","isSuccess","handleError","additionalRoles","userAccessTokenContent","handlePostAllChange","handlePostAllPublicChange","userAccessTokensEnabled","handleUserAccessTokenChange","handleSystemAdminChange","renderContents","handleSave","EnableUserAccessTokens","ManageTeamsDropdown","updateTeamMemberSchemeRoles","teamMember","team_id","onError","onMemberChange","handleRemoveUserFromTeam","isTeamAdmin","scheme_admin","isSysAdmin","openLeft","makeTeamAdmin","makeMember","removeFromTeam","RemoveFromTeamButton","ManageTeamsModal","getTeamMembers","getTeamsForUser","filterAndSortTeamsByDisplayName","getTeamMembersForUser","teamMembers","removeUserFromTeam","handleMemberRemove","teamList","member","handleMemberChange","systemAdminIndicator","loadTeamsAndTeamMembers","RevokeTokenButton","response","revokeUserAccessToken","tokenId","ManageTokensModal","userAccessTokens","tokenList","userAccessTokensList","token","prevUserId","getUserAccessTokensForUser","userAccessTokensByUser","ResetPasswordModal","currentPassword","currentPasswordRef","errorMsg","serverErrorCurrentPass","password","passwordRef","passwordConfig","serverErrorNewPass","updateUserPassword","onModalSubmit","urlClass","auth_service","newPasswordFocus","urlClassCurrentPass","data-toggle","autoFocus","doCancel","minimumLength","requireLowercase","requireNumber","requireSymbol","requireUppercase","getPasswordConfig","ResetEmailModal","emailRef","isEmail","patchUser","UserListRowWithError","errorObj","buttons","Action","actionProps","actionUserProps","emailStyle","extraInfo","userCountID","userCountEmail","mfaEnabled","enableUserAccessTokens","experimentalEnableAuthenticationTransfer","doPasswordReset","doEmailReset","doManageTeams","doManageRoles","doManageTokens","getStatusForUserId","UserListRow","SystemUsersDropdown","updateUserActive","onUpdateActiveResult","adminResetMfa","shouldDisableBotsWhenOwnerIsDeactivated","loadBots","showDeactivateMemberModal","confirmationMessage","messageForUsersWithBotAccounts","bot","bots","owner_id","siteURL","getSiteURL","deactivateMemberButton","handleDeactivateMember","handleDeactivateCancel","showRevokeSessionsModal","me","currentUser","revokeAllSessionsForUser","emitUserLoggedOutEvent","showPromoteToUserModal","promoteGuestToUser","showDemoteToGuestModal","demoteUserToGuest","promoteUserButton","handlePromoteToUserConfirm","handlePromoteToUserCancel","demoteGuestButton","handleDemoteToGuestConfirm","handleDemoteToGuestCancel","revokeUserButtonButton","handleRevokeSessions","handleRevokeSessionsCancel","messageId","DisableBotsWhenOwnerIsDeactivated","currentRoles","showMakeActive","showMakeNotActive","showManageTeams","showRevokeSessions","showMfaReset","mfa_active","showManageRoles","disableActivationToggle","deactivateMemberModal","renderDeactivateMemberModal","revokeSessionsModal","renderRevokeSessionsModal","promoteToUserModal","renderPromoteToUserModal","demoteToGuestModal","renderDemoteToGuestModal","renderAccessToken","openUp","handleMakeActive","handleShowDeactivateMemberModal","handleManageRoles","handleManageTeams","handleManageTokens","handleResetMfa","handleResetPassword","handleResetEmail","handlePromoteToUser","GuestAccountsSettings","handleDemoteToGuest","handleShowRevokeSessionsModal","getExternalBotAccounts","getCurrentUser","SystemUsersList","showManageTeamsModal","showManageRolesModal","showManageTokensModal","showPasswordModal","getUser","showEmailModal","getInfoForUser","info","service","userID","renderCount","isSearch","onTermChange","rowComponentType","doManageTeamsDismiss","doManageRolesDismiss","doManageTokensDismiss","doPasswordResetSubmit","doPasswordResetDismiss","doEmailResetSubmit","doEmailResetDismiss","usersPerPage","focusOnMount","renderFilterRow","userSelectorOptionsFromFilter","searchProfilesInTeam","getProfilesWithoutTeam","getUsers","getNonBotUsers","SystemUsers","loadProfilesWithoutTeam","loadProfilesAndTeamMembers","doSearch","SearchUserTeamFilter","getStandardAnalytics","loadDataForTeam","setSystemUsersSearch","revokeSessionsForAllUsers","showRevokeAllSessionsModal","debounce","UserSearchOptions","searchUserOptionsFromFilter","allow_inactive","getUserByTokenOrId","getUserAccessToken","getUserById","revokeAllButton","handleRevokeAllSessions","handleRevokeAllSessionsCancel","onInput","handleFilterChange","searching","revokeAllUsersModal","renderRevokeAllUsersModal","siteName","handleTermChange","handleShowRevokeAllSessionsModal","SiteName","EnableMultifactorAuthentication","ExperimentalEnableAuthenticationTransfer","systemUsersSearch","total_member_count","Stats","Number","AdminButtonOutline","Bullet","nickname","AdminUserCard","body","PAGE_SIZE","AbstractList","performSearch","getTeamsData","onPageChangedCallback","getPaging","headerLabels","headerLabel","emptyListTextId","emptyListTextDefaultMessage","pageStart","pageEnd","renderRow","renderHeaderLabels","EllipsisHorizontalIcon","aria-label","removeGroup","TeamListDropdown","isAdmin","isMember","scheme_user","scheme_guest","showMakeTeamAdmin","showMakeTeamMember","doMakeUserTeamAdmin","doMakeUserTeamMember","doRemoveUserFromTeam","buttonClass","TeamRow","allow_open_invite","teamIconUrl","renderTeamType","renderTeamRole","onRowClick","minWidth","marginLeft","TeamList","memberships","mergeTeamsWithMemberships","teamsWithMemberships","userDetailCallback","object","getTeamsAndMemberships","refreshTeams","EmailIcon","AtIcon","ShieldOutlineIcon","SystemUserDetail","addUserToTeam","finally","emailChanged","adminResetEmail","getAuthenticationText","authLine","errorMessageRefCurrent","position","handleEmailChange","renderActivateDeactivate","renderRemoveMFA","setTeamsData","pathname","apiActions","uiActions","Logs","nextDisabled","logPanel","node","scrollTop","scrollHeight","nextButton","previousButton","logs","fontFamily","tabIndex","loadingLogs","getLogs","BrandImageSetting","prop","brandImage","deleteBrandImage","brandImageExists","uploadBrandImage","brandImageTimestamp","imageRef","fetch","resp","reader","FileReader","img","onload","attr","readAsDataURL","letbtnDefaultClass","handleDeleteButtonPressed","handleImageChange","GroupRow","onCheckToggle","primary_key","link","unlink","mattermost_group_id","has_syncables","failed","unlinkHandler","linkHandler","renderLinked","renderActions","LDAP_GROUPS_PAGE_SIZE","FILTER_STATE_SEARCH_KEY_MAPPING","filterIsConfigured","is_configured","filterIsUnconfigured","filterIsLinked","is_linked","filterIsUnlinked","GroupsList","showFilters","searchString","getLdapGroups","q","searchGroups","newChecked","linkSelectedGroups","unlinkSelectedGroups","selectionActionButtonType","hasSelectedLinked","renderSelectionActionButton","regex","RegExp","newState","opts","re","test","handleGroupSearchKeyUp","k","newSearchString","stateKey","stringFilterPresent","handleFilterCheck","updates","renderSearchFilters","nativeEvent","stopImmediatePropagation","onKeyUp","resetFiltersAndSearch","closeFilters","once","getSortedListOfLdapGroups","ldapGroups","getLdapGroupsCount","fetchLdapGroups","linkLdapGroup","unlinkLdapGroup","GroupSettings","GroupProfile","customID","showAtMention","Toggle","toggled","onText","offText","aria-pressed","LineSwitch","subTitle","singleLine","last","GroupSettingsToggle","isDefault","allowReference","GroupProfileAndSettings","displayname","mentionname","GroupTeamsAndChannelsRow","onRemoveItem","showConfirmationModal","onChangeRoles","schemeAdmin","onToggleCollapse","dropDown","currentRole","roleToBe","testid","changeRoles","extraClasses","arrowIcon","hasChildren","collapsed","toggleCollapse","channelIcon","typeText","displayType","removeItem","displayAssignedRolesDropdown","GroupTeamsAndChannels","channels","existingTeams","teamEntries","team_type","channel","team_display_name","channelEntriesByTeam","channel_type","channel_display_name","channel_id","teamChannels","teamsAndChannelsToEntries","entry","GroupUsersRow","lastPictureUpdate","GROUP_MEMBERS_PAGE_SIZE","GroupUsers","members","groupID","getMembers","numberOfMembersToLoad","renderPagination","ChannelSelectorModal","loadingChannels","onChannelsSelected","setChannelsLoadingState","loadChannels","CHANNELS_PER_PAGE","stateChannelIDs","stateChannel","serverChannel","compareChannels","searchAllChannels","not_associated_to_group","excludeTeamIds","GroupDetails","addChannelOpen","groupTeams","teamsToAdd","group_id","groupChannels","channelsToAdd","itemsToRemove","syncableType","syncableTypeFromEntryType","makeAPIRequest","Groups","gt","gc","entryType","rolesToChange","listToUpdate","keyName","updatedItems","originalAllowReference","allow_reference","groupMentionName","hasAllowReferenceChanged","originalGroupMentionName","hasGroupMentionNameChanged","patchGroupSuccessful","handlePatchGroup","addsSuccessful","handleAddedTeamsAndChannels","removesSuccessful","handleRemovedTeamsAndChannels","rolesSuccessful","handleRolesToUpdate","getGroupSyncables","allSuccuessful","groupTeamOrChannel","fieldKey","GroupNameIsTakenError","lcGroupMentionName","patchGroup","syncableID","patchGroupSyncable","errors","groupTeam","roleChangeKey","auto_add","groupChannel","memberCount","onMentionToggle","onMentionChange","openAddChannel","loadingTeamsAndChannels","onRemoveTeamOrChannel","closeAddChannel","addChannels","getGroup","getGroupStats","gcs","stateIDs","getGroupTeams","getGroupChannels","selectProfilesInGroup","getGroupMemberCount","fetchGroup","getProfilesInGroup","fetchGroupSyncables","linkGroupSyncable","unlinkGroupSyncable","offset","noPadding","isSearching","searchTeamsDebounced","searchErrored","per_page","total_count","loadPage","management","groupConstrained","allowOpenInvite","invite_only","inviteOnly","filtersList","teamsToDisplay","renderManagementMethodText","minHeight","getSortedListOfTeams","pageSize","fetchTeams","TeamsSettings","RemoveConfirmModal","amount","inChannel","modalClass","AdminGroupUsersRow","padding","renderRolesColumn","renderGroupsColumn","AdminGroupUsers","UsersToBeRemovedModal","scopeId","NeedGroupsError","isChannel","NeedDomainsError","UsersWillBeRemovedError","TeamProfile","SyncGroupsToggle","syncChecked","allAllowedChecked","allowedDomainsChecked","allowedDomains","AllowAllToggle","AllowedDomainsToggle","TeamModes","MemberListGroup","loadComplete","in_group_id","searchProfilesInGroup","GroupMembersModal","onLoad","setNewGroupRole","member_count","displayCurrentRole","displayRoleToBe","Header","GroupList","totalGroups","isModeSync","onGroupRemoved","resolve","List","TeamGroups","removedGroups","AddGroupsToTeamModal","excludeGroups","includeGroups","UserGridRoleDropdown","makeAdmin","membership","remote_id","handleUpdateMembership","getDropDownOptions","getCurrentRole","localizedRole","getLocalizedRole","getAriaLabel","sharedTooltip","dropdownEnabled","showMakeAdmin","showMakeMember","handleMakeAdmin","handleMakeUser","UserGrid","membershipsToUpdate","updateMembership","forceUpdate","includeUsersList","numberOfUsersRemoved","pageToLoad","floor","pageLoaded","newMembership","AddUsersToTeamModal","getProfilesNotInTeam","not_in_team_id","teamName","filterExcludeGuests","selectProfilesNotInTeam","TeamMembers","loadProfilesAndReloadTeamMembers","systemRoles","teamRoles","team_roles","setUserGridFilters","in_team","include_bots","updateRole","enableGuestAccounts","PROFILE_CHUNK_SIZE","filtersModified","searchTermModified","searchProfilesAndTeamMembers","getMembersInTeams","getTeam","active_member_count","selectFilteredUsersStats","TeamDetails","gid","processGroupsChange","showRemoveConfirmation","rolesToUpdate","origGroups","teamID","patchTeamPromise","patchTeam","allowed_domains","patchTeamSyncable","getGroups","usersToAddList","usersToRemoveList","userRolesToUpdate","addUserActions","removeUserActions","rolesToPromote","rolesToDemote","schemeUser","usersToRemoveCount","groupIDs","allGroups","og","hideRemoveUsersModal","setToggles","handleGroupChange","handleGroupRemoved","addUserToRemove","addUsersToAdd","addRolesToUpdate","showRemoveUsersModal","membersMinusGroupMembers","ex","getGroupsAssociatedToTeam","getAllGroups","fetchTeam","fetchAssociatedGroups","TeamFilterCheckbox","getSelectedTeams","selectedTeamIds","getFilteredTeams","TeamFilterDropdown","clearRef","team_ids","savedSelectedTeams","searchRef","focus","listRef","scrollPosition","searchTotal","searchRetryInterval","searchRetryId","bind","prevSelectedTeamIds","buttonMore","selectedTeams","buttonOverflowed","generateButtonText","createFilterCheckbox","toggleTeam","visibleTeams","selectedTeam","resetTeams","onScroll","setScrollPosition","InfiniteScroll","hasMore","loadMore","threshold","useWindow","initialLoad","ChannelList","searchChannels","searchChannelsDebounced","include_deleted","channelsToDisplay","iconToDisplay","isArchivedChannel","shared","channelType","exclude_group_constrained","public","publicChannels","private","privateChannels","deleted","compareByDisplayName","getSortedListOfChannels","getAllChannels","c","ChannelsSettings","ConvertConfirmModal","toPublic","confirmMsgId","cancelButtonClass","cancelButtonText","ConvertAndRemoveConfirmModal","removeAmount","convertMessageId","isPublic","isSynced","ChannelModes","ChannelGroups","synced","AddGroupsToChannelModal","UnarchiveIcon","ChannelProfile","isArchived","archiveBtnID","archiveBtnDefault","sharedBlock","ArchiveButton___archived","ArchiveButton___unarchived","onToggleArchive","ChannelMembers","loadProfilesAndReloadChannelMembers","channelId","channelRoles","channel_roles","in_channel","channelMembers","ChannelInviteModal","getChannelStats","searchProfilesAndChannelMembers","in_channel_id","doGetProfilesInChannel","makeGetProfilesInChannel","doSearchProfilesInChannel","makeSearchProfilesInChannel","getChannelMembersInChannels","getChannel","getAllChannelStats","pinnedpost_count","guest_count","PERIOD_TO_SLASH_REGEX","formattedMessages","defineMessages","descriptionMembers","disabledGuests","permissionName","disabledMembers","disabledBoth","disabledGuestsDueToCreatePosts","disabledMembersDueToCreatePosts","disabledBothDueToCreatePosts","subtitleMembers","ChannelModerationTableRow","descriptionId","descriptionDefaultMessage","guestAccountsEnabled","errorMessages","Roles","guestsDisabled","membersDisabled","ChannelModeration","isGuestsDisabled","isMembersDisabled","disabledKey","createPostsKey","createPostsObject","channelPermissions","schemeLink","teamSchemeID","teamSchemeDisplayName","publicOrPrivate","scheme_name","scheme_link","onChannelPermissionsChanged","errorMessagesToDisplay","ChannelDetails","isOriginallyPublic","isPrivacyChanging","channelRole","currentValueIndex","originalObj","showConvertConfirmModal","showRemoveConfirmModal","showConvertAndRemoveConfirmModal","showArchiveConfirmModal","channelToBeArchived","channelID","deleteChannel","channelToBeRestored","unarchiveChannel","previousServerError","convert","updateChannelPrivacy","res","patchChannel","patchChannelSyncable","groupActions","actionsToAwait","getChannelModerations","manageMembersIndex","updatedManageMembers","patchChannelPermissionsArray","patchChannelModerationsResult","patchChannelModerations","restrictChannelMentions","privacyChanging","addChannelMember","removeChannelMember","updateChannelMemberSchemeRoles","isLocalArchived","isServerArchived","teamScheme","nonArchivedContent","hideConvertConfirmModal","channelPermissionsChanged","hideRemoveConfirmModal","hideConvertAndRemoveConfirmModal","hideArchiveConfirmModal","onSave","currentCreatePostRoles","getGroupsAssociatedToChannel","fetchChannel","fetchChannelModerations","PUSH_NOTIFICATIONS_OFF","PUSH_NOTIFICATIONS_MHPNS","PUSH_NOTIFICATIONS_MTPNS","PUSH_NOTIFICATIONS_CUSTOM","TitleAndButtonCardHeader","DataRetentionSettings","deleteDataRetentionCustomPolicy","years","channel_messages","getMessageRetentionSetting","EnableMessageDeletion","MessageRetentionDays","EnableFileDeletion","FileRetentionDays","stopPropagationOnToggle","policy","channel_count","team_count","customPolicies","post_duration","applied_to","getChannelAndTeamCounts","deleteCustomPolicy","customPoliciesLoading","getDataRetentionCustomPolicies","customPoliciesCount","showEditJobTime","inputRef","DeletionJobStartTime","timeArray","minuteIntervals","h","hourLabel","hourValue","timeOfDay","getJobTimeOptions","getGlobalPolicyColumns","getGlobalPolicyRows","getCustomPolicyColumns","getCustomPolicyRows","String","components","DropdownIndicator","IndicatorSeparator","changeJobTimeConfig","styles","control","base","menu","onBlur","getJobStartTime","hideSelectedOptions","isSearchable","getJobTimes","onFocus","menuIsOpen","createRef","getDataRetentionCustomPoliciesCount","fetchDataRetentionCustomPolicies","baseStyles","input","provided","border","boxShadow","cursor","indicatorSeparator","menuPortal","zIndex","IndicatorsContainer","Control","Option","focused","isFocused","DropdownInputHybrid","onDropdownChange","onInputChange","exceptionToInput","inputValue","otherProps","containerRef","useRef","inputFocused","setInputFocused","useState","setFocused","showInput","setShowInput","useEffect","showTextInput","showLegend","Input_fieldset___error","Input_fieldset___legend","Input_fieldset___split","Input_legend___focus","maxWidth","required","Input__focus","classNamePrefix","left","menuPortalTarget","FOREVER","YEARS","DAYS","keepForeverOption","yearsOption","daysOption","GlobalPolicyForm","isEnabled","messageRetentionDropdownValue","messageRetentionInputValue","fileRetentionDropdownValue","fileRetentionInputValue","formErrorText","setDeletionEnabled","messageDays","setRetentionDays","fileDays","dropdownValue","getDefaultDropdownValue","getDefaultInputValue","policyId","getDataRetentionCustomPolicyTeams","setStatePage","teamsToRemove","includeTeamsList","numberOfTeamsRemoved","setTeamListSearch","searchDebounced","getPolicyTeams","getTeamsInPolicy","getDataRetentionCustomPolicy","teamListSearch","searchTeamsInPolicy","filteredTeams","filterTeamsStartingWithTerm","teamListToMap","searchTeamsToAdd","getDataRetentionCustomPolicyChannels","channelsToRemove","removeChannel","setChannelListSearch","setChannelListFilters","getPolicyChannels","getChannelsInPolicy","channelListSearch","searchChannelsInPolicy","filterChannelsMatchingTerm","filterChannelList","channelListToMap","searchChannelsToAdd","CustomPolicyForm","fetchPolicy","policyName","getMessageRetentionDefaultInputValue","getMessageRetentionDefaultDropdownValue","removedTeamsCount","newTeams","removedChannelsCount","newChannels","removedChannels","updateDataRetentionCustomPolicy","addDataRetentionCustomPolicyTeams","removeDataRetentionCustomPolicyTeams","addDataRetentionCustomPolicyChannels","removeDataRetentionCustomPolicyChannels","postDuration","policyInfo","newPolicy","channel_ids","createDataRetentionCustomPolicy","inputErrorText","addToNewTeams","addToRemovedTeams","addToNewChannels","getTeamsToExclude","addToRemovedChannels","fetchPolicyTeams","ClusterTable","versionMismatch","statusGreen","configMismatch","configHash","singleItem","clusterInfos","config_hash","clusterInfo","statusYellow","hostname","ipaddress","clusterCell","clusterTable","ClusterTableContainer","getClusterStatus","load","configLoadedFromCluster","getTermsOfService","createTermsOfService","SupportSettings","CustomTermsOfServiceEnabled","termsEnabled","CustomTermsOfServiceReAcceptancePeriod","parseIntNonZero","reAcceptancePeriod","receivedTermsText","termsText","handleAPIError","loadingTermsText","handleTermsEnabledChange","CustomTermsOfService","handleTermsTextChange","handleReAcceptancePeriodChange","TrialPeriodDays","noBillingHistory","noBillingHistoryGraphic","CloudLinks","screen","BillingSummary","isPaidTier","isFreeTrial","daysLeftOnTrial","onUpgradeMattermostCloud","subscription","useSelector","product","products","product_id","upgradeMattermostCloudImage","TRIAL_1_DAY","TRIAL_3_DAYS","freeTrial","last_invoice","invoice","fullCharges","line_items","partialCharges","getPaymentStatus","period_start","timeZone","charge","price_id","price_per_unit","currency","quantity","positionLeft","tax","lastInvoiceInfo","upgradeFreeTierMattermostCloud","howBillingWorksLink","PlanDetails","subscriptionPlan","userLimit","ExperimentalCloudUserLimit","aboveUserLimit","is_paid_tier","planPricing","planDetailsDescription","price_per_seat","toFixed","getPlanDetailElements","productName","userCountDisplay","withinLimit","overLimit","CloudProducts","trialBadge","planDetailsTopElements","featuresFreeTier","featuresCloudStarter","featuresCloudProfessional","featuresCloudEnterprise","features","feature","featureList","currentPlanText","AlertBanner","mode","onDismiss","AlertBanner__message","noBillingHistorySection","addInfoButton","noCompanyInfoSection","noCompanyInfoGraphic","companyInfo","customer","address","company_address","line1","billing_address","num_employees","employees","line2","city","postal_code","country","noPaymentInfoSection","noPaymentInfoGraphic","paymentInfo","payment_method","brand","card_brand","digits","last_four","exp_month","padStart","exp_year","stripePromise","FeatureDiscovery","featureName","titleID","copyID","copyDefault","learnMoreURL","featureDiscoveryImage","xmlns","clipPath","opacity","fillOpacity","strokeDasharray","y","filterUnits","colorInterpolationFilters","floodOpacity","in","dx","dy","stdDeviation","in2","clipRule","rx","ry","x1","y1","x2","y2","gradientUnits","stopColor","stopOpacity","strokeOpacity","SECTION_NONE","SECTION_TLS","SECTION_STARTTLS","CONNECTION_SECURITY_HELP_TEXT_EMAIL","cellPadding","CONNECTION_SECURITY_HELP_TEXT_LDAP","CONNECTION_SECURITY_HELP_TEXT_WEBSERVER","WEBSERVER_MODE_HELP_TEXT","LOG_LEVEL_OPTIONS","FILE_STORAGE_DRIVER_LOCAL","FILE_STORAGE_DRIVER_S3","MEBIBYTE","pow","SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1","SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256","SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512","func","funcs","stateMatches","stateEquals","configIsTrue","configIsFalse","configContains","word","licensed","licensedForFeature","hidePaymentInfo","is_free_trial","userHasReadPermissionOnResource","read","userHasReadPermissionOnSomeResources","resource","write","icloud","usesLegacyOauth","AdminDefinition","about","sectionTitle","sectionTitleDefault","title_default","searchableStrings","useDispatch","store","useStore","isCloud","isCardExpired","isCustomerCardExpired","getCategory","makeGetCategory","preferences","Preferences","contactSalesLink","getCloudContactUsLink","InquiryType","cancelAccountLink","InquiryIssue","trialQuestionsLink","showCreditCardBanner","setShowCreditCardBanner","sku","getRemainingDaysFromFutureTimestamp","trial_end_at","getCloudSubscription","getCloudProducts","getCloudCustomer","pageVisited","shouldShowInfoBanner","TELEMETRY_CATEGORIES","pref","CloudBanners","openModal","modalId","PurchaseModal","savePreferences","category","creditCardExpiredBanner","freeTrialPrivateCloudImage","privateCloudImage","contactSalesCard","cancelSubscription","billing_history","invoices","billingHistory","setBillingHistory","firstRecord","setFirstRecord","getInvoices","invoicesByDate","paging","startRecord","endRecord","totalRecords","billingHistoryTable","fullUsers","partialUsers","company_info","company_info_edit","companyName","setCompanyName","numEmployees","setNumEmployees","setAddress","address2","setAddress2","setCity","postalCode","setPostalCode","setCountry","getName","sameAsBillingAddress","setSameAsBillingAddress","isValid","setIsValid","isSaving","setIsSaving","setValidation","updateState","setStateFunc","billingAddressDisplay","companyAddressInput","COUNTRIES","stateValue","updateCloudCustomer","updateCloudCustomerAddress","payment_info","isCardAboutToExpire","expiryYear","lastExpiryDate","currentDatePlus10Days","setDate","getDate","payment_info_edit","isDevMode","EnableDeveloper","showCreditCardWarning","setShowCreditCardWarning","isServerError","setIsServerError","billingDetails","setBillingDetails","card","loadStripe","STRIPE_PUBLIC_KEY","Elements","fonts","cssSrc","STRIPE_CSS_SRC","stripe","areBillingDetailsValid","initialBillingDetails","setPaymentMethod","completeStripeAddPaymentMethod","reporting","system_analytics","team_statistics","server_logs","ServerLogs","system_users","system_user_detail","group_detail","groups_feature_discovery","isDiscovery","team_detail","TeamSettings","channel_detail","ChannelSettings","channels_feature_discovery","systemScheme","teamSchemeDetail","permissions_feature_discovery","system_role","system_roles","system_roles_feature_discovery","environment","web_server","testSiteURL","DefinitionConstants","reloadConfig","recycleDatabaseConnections","invalidateAllCaches","database","reloadConfiguration","SqlSettings","MaxIdleConns","maxIdleConns","MaxOpenConns","maxOpenConns","Trace","trace","DisableDatabaseSearch","disableDatabaseSearch","QueryTimeout","queryTimeout","ConnMaxLifetimeMilliseconds","parseIntNonNegative","connMaxLifetimeMilliseconds","ConnMaxIdleTimeMilliseconds","connMaxIdleTimeMilliseconds","MinimumHashtagLength","minimumHashtagLength","dataSource","recycleDbButton","recycleDatabaseConnection","driverName","DriverName","DataSource","elasticsearch","ElasticsearchSettings","ConnectionUrl","connectionUrl","SkipTLSVerification","skipTLSVerification","Username","Password","Sniff","sniff","EnableIndexing","enableIndexing","EnableSearching","enableSearching","EnableAutocomplete","enableAutocomplete","configTested","canPurgeAndIndex","elasticsearchTest","handleSettingChanged","doTestConfig","getExtraInfo","elasticsearchPurgeIndexes","percent","progress","storage","configVal","displayVal","testS3Connection","image_proxy","smtp","testSmtp","push_notification_server","pushNotificationServerType","agree","pushNotificationServer","EmailSettings","SendPushNotifications","PushNotificationServer","MaxNotificationsPerChannel","maxNotificationsPerChannel","pushNotificationServerTypes","MHPNS","tosCheckbox","sendHelpText","pushServerHelpText","handleAgreeChange","handleDropdownChange","isPushNotificationServerSetByEnv","high_availability","ClusterSettings","ClusterName","OverrideHostname","UseIpAddress","EnableExperimentalGossipEncryption","EnableGossipCompression","GossipPort","StreamingPort","showWarning","Cluster","clusterId","clusterTableContainer","overrideHandleChange","rate_limiting","logging","boldedLogLevel","previousVal","session_lengths","ExtendSessionLengthWithActivity","extendSessionLengthWithActivity","SessionLengthWebInDays","sessionLengthWebInDays","SessionLengthMobileInDays","sessionLengthMobileInDays","SessionLengthSSOInDays","sessionLengthSSOInDays","SessionCacheInMinutes","sessionCacheInMinutes","SessionIdleTimeoutInMinutes","parseIntZeroOrMin","sessionIdleTimeoutInMinutes","sessionLengthWebHelpText","sessionLengthMobileHelpText","sessionLengthSSOHelpText","sessionTimeoutSetting","metrics","developer","site","customization","localization","not_present","not_present_default","users_and_teams","notifications","announcement_banner","announcement_banner_feature_discovery","emoji","posts","file_sharing_downloads","public_links","signup","invalidateAllEmailInvites","PasswordSettings","MinimumLength","passwordMinimumLength","Lowercase","passwordLowercase","Uppercase","passwordUppercase","passwordNumber","Symbol","passwordSymbol","MaximumLoginAttempts","maximumLoginAttempts","sampleErrorMsgId","handlePasswordLengthChange","lowercase","handleCheckboxChange","uppercase","symbol","getSampleErrorMsg","sampleErrorMsg","mfa","ldap","uploadPrivateLdapCertificate","removePrivateLdapCertificate","uploadPublicLdapCertificate","removePublicLdapCertificate","ldapTest","linkedLdapGroupsCount","ldapUsers","deleteCount","updateCount","totalLdapGroupsCount","groupDeleteCount","groupMemberDeleteCount","groupMemberAddCount","ldap_users_count","delete_count","update_count","ldap_groups_count","total_ldap_groups_count","group_delete_count","group_member_delete_count","group_member_add_count","ldap_feature_discovery","saml","getSamlMetadataFromIdp","uploadIdpSamlCertificate","setSamlIdpCertificateFromMetadata","removeIdpSamlCertificate","siteUrl","SiteURL","addSlashIfNeeded","uploadPrivateSamlCertificate","removePrivateSamlCertificate","uploadPublicSamlCertificate","removePublicSamlCertificate","saml_feature_discovery","gitlab","Url","oauth","tag","shouldDisplay","OpenId","oauthType","OpenIdSettings","openid","openidType","configSetting","openid_feature_discovery","guest_access","guest_access_feature_discovery","plugin_management","PluginManagement","custom","integrations","integration_management","bot_accounts","gif","cors","compliance","custom_policy_form_edit","CustomDataRetentionForm","custom_policy_form","global_policy_form","GlobalDataRetentionForm","data_retention","data_retention_old","enableMessageDeletion","enableFileDeletion","messageRetentionDays","fileRetentionDays","deletionJobStartTime","messageList","handleSaveConfirmed","handleSaveCanceled","enableMessageDeletionOptions","enableFileDeletionOptions","messageRetentionDaysSetting","fileRetentionDaysSetting","data_retention_feature_discovery","message_export","EnableExport","enableComplianceExport","ExportFormat","exportFormat","DailyRunTime","exportJobStartTime","GlobalRelaySettings","CustomerType","globalRelayCustomerType","SmtpUsername","globalRelaySmtpUsername","SmtpPassword","globalRelaySmtpPassword","EmailAddress","globalRelayEmailAddress","warning_count","exportFormatOptions","globalRelaySettings","globalRelayEmail","dropdownHelpText","getJobDetails","compliance_export_feature_discovery","custom_terms_of_service","CustomTermsOfServiceSettings","custom_terms_of_service_feature_discovery","experimental","experimental_features","feature_flags","flags","FeatureFlags","ffKey","bleve","BleveSettings","IndexDir","indexDir","blevePurgeIndexes","getAdminDefinition","adminConsoleReducers","adminDefinition","reducers","reducer","adminConsoleCustomComponents","getConsoleAccess","getMySystemPermissions","mySystemPermissions","addEntriesForKey","entryKey","DiscardChangesModal","extractTextsFromPlugin","texts","extractTextFromSetting","stripMarkdown","settingsTexts","extractTextsFromSection","searchableString","extractTextFromSettings","schemaSection","generateIndex","idx","FlexSearch","addToIndex","adminDefinitionsToUrlsAndTexts","pluginsObj","getPluginEntries","AdminSidebarCategory","sectionClass","parentLink","definitionKey","activeClassName","clonedChildren","child","CommercialSupportModal","showBannerWarning","updateBannerWarning","supportLink","doHide","hideBannerWarning","EnableFile","FileLevel","isModalOpen","MenuItemBlockableLinkImpl","MenuItemBlockableLink","menuItem","AdminNavbarDropdown","navigationBlocked","GlobalActions","teamToRender","switchTeams","teamsArray","commercialSupport","adminGuideLink","AboutBuildModal","appTitle","handleLogout","getMyTeams","SidebarHeader","profilePicture","AdminSidebarHeader","AdminSidebarSection","getLink","sidebarItemSafeId","sidebarItem","Highlight","markInstance","unmark","Mark","mark","accuracy","leading","trailing","redrawHighlight","renderScrollView","renderScrollThumbHorizontal","renderScrollThumbVertical","AdminSidebar","onFilterChange","query","currentSiteName","buildEnterpriseReady","isVisible","definition","sidebarSections","isSectionHidden","sidebarItems","subKey","subDefinitionKey","moreSidebarItems","renderPluginsMenu","isPluginPresentInSections","updateTitle","isEqual","onClear","handleClearFilter","autoHide","autoHideTimeout","autoHideDuration","renderThumbHorizontal","renderThumbVertical","renderView","renderRootMenu","pure","AdminConsole","extraProps","schemas","defaultUrl","schemaRoutes","isItemDisabled","getEnvironmentConfig","selectChannel","selectTeam","mainRolesLoaded","system_user_manager","system_read_only_admin","system_manager","showNavigationPrompt","cancelNavigation","confirmNavigation","currentUserHasAnAdminRole","unauthorizedRoute","discardChangesModal","renderRoutes","withRouter","getGeneralConfig","LocalStorageStore","BackstageNavbar","CheckboxCheckedIcon","SearchIcon","createBot","BotTypes","patchBot","botUserId","botPatch","disableBot","enableBot","ExternalBotAccountNames","getBotAccounts","accounts","botAccounts","userProfiles","botAccount","botUser"],"mappings":"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6C,kBAAkB5tB,EAAS4sB,EAAgBC,EAAqBE,K,gsBA1JjEL,G,aATjBhmB,S,SACAwmB,kB,oBAKArB,kB,sBCWJ,MAAMgC,GAAgC,CAClC,CACI12C,KAAM,QACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,+BAGf,CACIA,KAAM,UACNk2C,gBAAgB,EAChBzB,YAAa,IAEjB,CACIz0C,KAAM,YACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,6BACP,CAACA,KAAM,6BACP,CAACA,KAAM,2BAGf,CACIA,KAAM,kBACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,wBAAyBk2C,gBAAgB,GAChD,CAACl2C,KAAM,0BACP,CAACA,KAAM,yBACP,CAACA,KAAM,4BACP,CAACA,KAAM,+BACP,CAACA,KAAM,+BAAgCkM,UAAU,KAGzD,CACIlM,KAAM,cACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,0BACP,CAACA,KAAM,wBACP,CAACA,KAAM,6BACP,CAACA,KAAM,4BACP,CAACA,KAAM,2BACP,CAACA,KAAM,oBACP,CAACA,KAAM,wCACP,CAACA,KAAM,iCACP,CAACA,KAAM,6BACP,CAACA,KAAM,uBACP,CAACA,KAAM,+BACP,CAACA,KAAM,sCACP,CAACA,KAAM,2BAGf,CACIA,KAAM,OACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,sBACP,CAACA,KAAM,qBACP,CAACA,KAAM,wBACP,CAACA,KAAM,sBACP,CAACA,KAAM,4BACP,CAACA,KAAM,cACP,CAACA,KAAM,cACP,CAACA,KAAM,mCACP,CAACA,KAAM,qBACP,CAACA,KAAM,kBAGf,CACIA,KAAM,iBACNk2C,gBAAgB,EAChBzB,YAAa,CACT,CAACz0C,KAAM,yBACP,CAACA,KAAM,wBACP,CAACA,KAAM,2BACP,CAACA,KAAM,sBACP,CAACA,KAAM,uBACP,CAACA,KAAM,uBACP,CAACA,KAAM,yBACP,CAACA,KAAM,iCAGf,CACIA,KAAM,UACNk2C,gBAAgB,EAChBzB,YAA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ACNC,OAAO,MACPs9B,QAAQ,cACRG,KAAK,OACL2oD,MAAM,8BAEN,qBAAGC,SAAS,eACR,wBACIC,QAAQ,MACR1oD,EAAE,0/BACFH,KAAK,qBAET,wBACIG,EAAE,2HACFH,KAAK,qBAET,wBACIG,EAAE,gIACFH,KAAK,qBAET,wBACIG,EAAE,mKACFH,KAAK,qBAET,wBACIG,EAAE,oKACFH,KAAK,qBAET,wBACIG,EAAE,mIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,iIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,mIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,gIACFH,KAAK,qBAET,wBACIG,EAAE,+HACFH,KAAK,qBAET,wBACIG,EAAE,kGACFH,KAAK,qBAET,wBACIG,EAAE,gIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,6HACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,iIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,8HACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,kIACFH,KAAK,qBAET,wBACIG,EAAE,oGACFH,KAAK,qBAET,wBACIG,EAAE,mIACFH,KAAK,qBAET,wBACIG,EAAE,oIACFH,KAAK,qBAET,wBACIG,EAAE,iJACFH,KAAK,gCAET,wBACIG,EAAE,kPACFH,KAAK,gCAET,wBACIG,EAAE,4RACFH,KAAK,gCAET,wBACIG,EAAE,0PACFH,KAAK,gCAET,wBACIG,EAAE,4OACFH,KAAK,6BAET,wBACIC,SAAS,UACTwpD,SAAS,UACTtpD,EAAE,0dACFH,KAAK,8BACL8oD,YAAY,SAEhB,wBACID,QAAQ,MACR1oD,EAAE,oNACFH,KAAK,yBAET,wBACI6oD,QAAQ,MACR1oD,EAAE,8MACFH,KAAK,0BAET,wBACI6oD,QAAQ,MACR1oD,EAAE,iNACFH,KAAK,4BAET,wBACI6oD,QAAQ,OACR1oD,EAAE,gDACFH,KAAK,gCAET,wBACIG,EAAE,kPACFH,KAAK,6BAET,wBACIC,SAAS,UACTwpD,SAAS,UACTtpD,EAAE,meACFH,KAAK,8BACL8oD,YAAY,SAEhB,wBACI3oD,EAAE,oPACFH,KAAK,6BAET,wBACIC,SAAS,UACTwpD,SAAS,UACTtpD,EAAE,meACFH,KAAK,8BACL8oD,YAAY,SAEhB,wBACI3oD,EAAE,oDACFH,KAAK,qBAET,wBACIG,EAAE,q4DACFH,KAAK,qBAET,wBACIG,EAAE,63DACFH,KAAK,qBAET,wBACIG,EAAE,k3DACFH,KAAK,qBAET,wBACIG,EAAE,u3DACFH,KAAK,qBAET,wBACIG,EAAE,83DACFH,KAAK,qBAET,wBACIG,EAAE,+3DACFH,KAAK,qBAET,wBACIG,EAAE,o3DACFH,KAAK,qBAET,wBACIG,EAAE,k4DACFH,KAAK,qBAET,wBACIG,EAAE,63DACFH,KAAK,qBAET,wBACIG,EAAE,43DACFH,KAAK,qBAET,wBACIG,EAAE,i4DACFH,KAAK,qBAET,wBACIG,EAAE,ugTACFH,KAAK,8BACL8oD,YAAY,SAEhB,wBACI3oD,EAAE,kNACFH,KAAK,6BAET,wBACIG,EAAE,42BACFH,KAAK,gCAET,wBACIG,EAAE,ggBACFH,KAAK,6BAET,wBACIG,EAAE,m4BACFH,KAAK,gCAET,wBACIG,EAAE,gNACFH,KAAK,6BAET,wBACIG,EAAE,uiCACFH,KAAK,gCAET,wBACIG,EAAE,y/BACFH,KAAK,gCAET,wBACIG,EAAE,ktCACFH,KAAK,6BAET,wBACIG,EAAE,irEACFH,KAAK,gCAET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","file":"828.ba2ad12a3d0ff6948f22.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport Permissions from './permissions';\n\nexport const RESOURCE_KEYS = {\n    ABOUT: {\n        EDITION_AND_LICENSE: 'about.edition_and_license',\n    },\n    REPORTING: {\n        SITE_STATISTICS: 'reporting.site_statistics',\n        TEAM_STATISTICS: 'reporting.team_statistics',\n        SERVER_LOGS: 'reporting.server_logs',\n    },\n    USER_MANAGEMENT: {\n        USERS: 'user_management.users',\n        GROUPS: 'user_management.groups',\n        TEAMS: 'user_management.teams',\n        CHANNELS: 'user_management.channels',\n        PERMISSIONS: 'user_management.permissions',\n        SYSTEM_ROLES: 'user_management.system_roles',\n    },\n    AUTHENTICATION: {\n        SIGNUP: 'authentication.signup',\n        EMAIL: 'authentication.email',\n        PASSWORD: 'authentication.password',\n        MFA: 'authentication.mfa',\n        LDAP: 'authentication.ldap',\n        SAML: 'authentication.saml',\n        OPENID: 'authentication.openid',\n        GUEST_ACCESS: 'authentication.guest_access',\n    },\n    INTEGRATIONS: {\n        INTEGRATION_MANAGEMENT: 'integrations.integration_management',\n        BOT_ACCOUNTS: 'integrations.bot_accounts',\n        GIF: 'integrations.gif',\n        CORS: 'integrations.cors',\n    },\n    COMPLIANCE: {\n        DATA_RETENTION_POLICY: 'compliance.data_retention_policy',\n        COMPLIANCE_EXPORT: 'compliance.compliance_export',\n        COMPLIANCE_MONITORING: 'compliance.compliance_monitoring',\n        CUSTOM_TERMS_OF_SERVICE: 'compliance.custom_terms_of_service',\n    },\n    SITE: {\n        CUSTOMIZATION: 'site.customization',\n        LOCALIZATION: 'site.localization',\n        USERS_AND_TEAMS: 'site.users_and_teams',\n        NOTIFICATIONS: 'site.notifications',\n        ANNOUNCEMENT_BANNER: 'site.announcement_banner',\n        EMOJI: 'site.emoji',\n        POSTS: 'site.posts',\n        FILE_SHARING_AND_DOWNLOADS: 'site.file_sharing_and_downloads',\n        PUBLIC_LINKS: 'site.public_links',\n        NOTICES: 'site.notices',\n    },\n    EXPERIMENTAL: {\n        FEATURES: 'experimental.features',\n        FEATURE_FLAGS: 'experimental.feature_flags',\n        BLEVE: 'experimental.bleve',\n    },\n    ENVIRONMENT: {\n        WEB_SERVER: 'environment.web_server',\n        DATABASE: 'environment.database',\n        ELASTICSEARCH: 'environment.elasticsearch',\n        FILE_STORAGE: 'environment.file_storage',\n        IMAGE_PROXY: 'environment.image_proxy',\n        SMTP: 'environment.smtp',\n        PUSH_NOTIFICATION_SERVER: 'environment.push_notification_server',\n        HIGH_AVAILABILITY: 'environment.high_availability',\n        RATE_LIMITING: 'environment.rate_limiting',\n        LOGGING: 'environment.logging',\n        SESSION_LENGTHS: 'environment.session_lengths',\n        PERFORMANCE_MONITORING: 'environment.performance_monitoring',\n        DEVELOPER: 'environment.developer',\n    },\n};\n\nexport const ResourceToSysConsolePermissionsTable: Record<string, string[]> = {\n    [RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE]: [Permissions.SYSCONSOLE_READ_ABOUT_EDITION_AND_LICENSE, Permissions.SYSCONSOLE_WRITE_ABOUT_EDITION_AND_LICENSE],\n    billing: [Permissions.SYSCONSOLE_READ_BILLING, Permissions.SYSCONSOLE_WRITE_BILLING],\n    [RESOURCE_KEYS.REPORTING.SITE_STATISTICS]: [Permissions.SYSCONSOLE_READ_REPORTING_SITE_STATISTICS, Permissions.SYSCONSOLE_WRITE_REPORTING_SITE_STATISTICS],\n    [RESOURCE_KEYS.REPORTING.TEAM_STATISTICS]: [Permissions.SYSCONSOLE_READ_REPORTING_TEAM_STATISTICS, Permissions.SYSCONSOLE_WRITE_REPORTING_TEAM_STATISTICS],\n    [RESOURCE_KEYS.REPORTING.SERVER_LOGS]: [Permissions.SYSCONSOLE_READ_REPORTING_SERVER_LOGS, Permissions.SYSCONSOLE_WRITE_REPORTING_SERVER_LOGS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.USERS]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_USERS, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_USERS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.GROUPS]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_GROUPS, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_GROUPS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.TEAMS]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_TEAMS, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_TEAMS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.CHANNELS]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_CHANNELS, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_CHANNELS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_PERMISSIONS, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_PERMISSIONS],\n    [RESOURCE_KEYS.USER_MANAGEMENT.SYSTEM_ROLES]: [Permissions.SYSCONSOLE_READ_USERMANAGEMENT_SYSTEM_ROLES, Permissions.SYSCONSOLE_WRITE_USERMANAGEMENT_SYSTEM_ROLES],\n    [RESOURCE_KEYS.SITE.CUSTOMIZATION]: [Permissions.SYSCONSOLE_READ_SITE_CUSTOMIZATION, Permissions.SYSCONSOLE_WRITE_SITE_CUSTOMIZATION],\n    [RESOURCE_KEYS.SITE.LOCALIZATION]: [Permissions.SYSCONSOLE_READ_SITE_LOCALIZATION, Permissions.SYSCONSOLE_WRITE_SITE_LOCALIZATION],\n    [RESOURCE_KEYS.SITE.USERS_AND_TEAMS]: [Permissions.SYSCONSOLE_READ_SITE_USERS_AND_TEAMS, Permissions.SYSCONSOLE_WRITE_SITE_USERS_AND_TEAMS],\n    [RESOURCE_KEYS.SITE.NOTIFICATIONS]: [Permissions.SYSCONSOLE_READ_SITE_NOTIFICATIONS, Permissions.SYSCONSOLE_WRITE_SITE_NOTIFICATIONS],\n    [RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER]: [Permissions.SYSCONSOLE_READ_SITE_ANNOUNCEMENT_BANNER, Permissions.SYSCONSOLE_WRITE_SITE_ANNOUNCEMENT_BANNER],\n    [RESOURCE_KEYS.SITE.EMOJI]: [Permissions.SYSCONSOLE_READ_SITE_EMOJI, Permissions.SYSCONSOLE_WRITE_SITE_EMOJI],\n    [RESOURCE_KEYS.SITE.POSTS]: [Permissions.SYSCONSOLE_READ_SITE_POSTS, Permissions.SYSCONSOLE_WRITE_SITE_POSTS],\n    [RESOURCE_KEYS.SITE.FILE_SHARING_AND_DOWNLOADS]: [Permissions.SYSCONSOLE_READ_SITE_FILE_SHARING_AND_DOWNLOADS, Permissions.SYSCONSOLE_WRITE_SITE_FILE_SHARING_AND_DOWNLOADS],\n    [RESOURCE_KEYS.SITE.PUBLIC_LINKS]: [Permissions.SYSCONSOLE_READ_SITE_PUBLIC_LINKS, Permissions.SYSCONSOLE_WRITE_SITE_PUBLIC_LINKS],\n    [RESOURCE_KEYS.SITE.NOTICES]: [Permissions.SYSCONSOLE_READ_SITE_NOTICES, Permissions.SYSCONSOLE_WRITE_SITE_NOTICES],\n    [RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_WEB_SERVER, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_WEB_SERVER],\n    [RESOURCE_KEYS.ENVIRONMENT.DATABASE]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_DATABASE, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_DATABASE],\n    [RESOURCE_KEYS.ENVIRONMENT.ELASTICSEARCH]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_ELASTICSEARCH, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_ELASTICSEARCH],\n    [RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_FILE_STORAGE, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_FILE_STORAGE],\n    [RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_IMAGE_PROXY, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_IMAGE_PROXY],\n    [RESOURCE_KEYS.ENVIRONMENT.SMTP]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_SMTP, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_SMTP],\n    [RESOURCE_KEYS.ENVIRONMENT.PUSH_NOTIFICATION_SERVER]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_PUSH_NOTIFICATION_SERVER, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_PUSH_NOTIFICATION_SERVER],\n    [RESOURCE_KEYS.ENVIRONMENT.HIGH_AVAILABILITY]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_HIGH_AVAILABILITY, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_HIGH_AVAILABILITY],\n    [RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_RATE_LIMITING, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_RATE_LIMITING],\n    [RESOURCE_KEYS.ENVIRONMENT.LOGGING]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_LOGGING, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_LOGGING],\n    [RESOURCE_KEYS.ENVIRONMENT.SESSION_LENGTHS]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_SESSION_LENGTHS, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_SESSION_LENGTHS],\n    [RESOURCE_KEYS.ENVIRONMENT.PERFORMANCE_MONITORING]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_PERFORMANCE_MONITORING, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_PERFORMANCE_MONITORING],\n    [RESOURCE_KEYS.ENVIRONMENT.DEVELOPER]: [Permissions.SYSCONSOLE_READ_ENVIRONMENT_DEVELOPER, Permissions.SYSCONSOLE_WRITE_ENVIRONMENT_DEVELOPER],\n    [RESOURCE_KEYS.AUTHENTICATION.SIGNUP]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_SIGNUP, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_SIGNUP],\n    [RESOURCE_KEYS.AUTHENTICATION.EMAIL]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_EMAIL, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_EMAIL],\n    [RESOURCE_KEYS.AUTHENTICATION.PASSWORD]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_PASSWORD, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_PASSWORD],\n    [RESOURCE_KEYS.AUTHENTICATION.MFA]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_MFA, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_MFA],\n    [RESOURCE_KEYS.AUTHENTICATION.LDAP]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_LDAP, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_LDAP],\n    [RESOURCE_KEYS.AUTHENTICATION.SAML]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_SAML, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_SAML],\n    [RESOURCE_KEYS.AUTHENTICATION.OPENID]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_OPENID, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_OPENID],\n    [RESOURCE_KEYS.AUTHENTICATION.GUEST_ACCESS]: [Permissions.SYSCONSOLE_READ_AUTHENTICATION_GUEST_ACCESS, Permissions.SYSCONSOLE_WRITE_AUTHENTICATION_GUEST_ACCESS],\n    plugins: [Permissions.SYSCONSOLE_READ_PLUGINS, Permissions.SYSCONSOLE_WRITE_PLUGINS],\n    [RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT]: [Permissions.SYSCONSOLE_READ_INTEGRATIONS_INTEGRATION_MANAGEMENT, Permissions.SYSCONSOLE_WRITE_INTEGRATIONS_INTEGRATION_MANAGEMENT],\n    [RESOURCE_KEYS.INTEGRATIONS.BOT_ACCOUNTS]: [Permissions.SYSCONSOLE_READ_INTEGRATIONS_BOT_ACCOUNTS, Permissions.SYSCONSOLE_WRITE_INTEGRATIONS_BOT_ACCOUNTS],\n    [RESOURCE_KEYS.INTEGRATIONS.GIF]: [Permissions.SYSCONSOLE_READ_INTEGRATIONS_GIF, Permissions.SYSCONSOLE_WRITE_INTEGRATIONS_GIF],\n    [RESOURCE_KEYS.INTEGRATIONS.CORS]: [Permissions.SYSCONSOLE_READ_INTEGRATIONS_CORS, Permissions.SYSCONSOLE_WRITE_INTEGRATIONS_CORS],\n    [RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY]: [Permissions.SYSCONSOLE_READ_COMPLIANCE_DATA_RETENTION_POLICY, Permissions.SYSCONSOLE_WRITE_COMPLIANCE_DATA_RETENTION_POLICY],\n    [RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_EXPORT]: [Permissions.SYSCONSOLE_READ_COMPLIANCE_COMPLIANCE_EXPORT, Permissions.SYSCONSOLE_WRITE_COMPLIANCE_COMPLIANCE_EXPORT],\n    [RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING]: [Permissions.SYSCONSOLE_READ_COMPLIANCE_COMPLIANCE_MONITORING, Permissions.SYSCONSOLE_WRITE_COMPLIANCE_COMPLIANCE_MONITORING],\n    [RESOURCE_KEYS.COMPLIANCE.CUSTOM_TERMS_OF_SERVICE]: [Permissions.SYSCONSOLE_READ_COMPLIANCE_CUSTOM_TERMS_OF_SERVICE, Permissions.SYSCONSOLE_WRITE_COMPLIANCE_CUSTOM_TERMS_OF_SERVICE],\n    [RESOURCE_KEYS.EXPERIMENTAL.FEATURES]: [Permissions.SYSCONSOLE_READ_EXPERIMENTAL_FEATURES, Permissions.SYSCONSOLE_WRITE_EXPERIMENTAL_FEATURES],\n    [RESOURCE_KEYS.EXPERIMENTAL.FEATURE_FLAGS]: [Permissions.SYSCONSOLE_READ_EXPERIMENTAL_FEATURE_FLAGS, Permissions.SYSCONSOLE_WRITE_EXPERIMENTAL_FEATURE_FLAGS],\n    [RESOURCE_KEYS.EXPERIMENTAL.BLEVE]: [Permissions.SYSCONSOLE_READ_EXPERIMENTAL_BLEVE, Permissions.SYSCONSOLE_WRITE_EXPERIMENTAL_BLEVE],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    children: JSX.Element[] | JSX.Element | string;\n};\n\nexport default class AdminHeader extends React.PureComponent<Props> {\n    public render() {\n        return (\n            <div className={'admin-console__header'}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AdminHeader from './admin_header';\n\ntype Props = {\n    id: string;\n    defaultMessage: string;\n    values?: any;\n};\n\nconst FormattedAdminHeader: React.FC<Props> = (props: Props) => (\n    <AdminHeader>\n        <FormattedMarkdownMessage\n            id={props.id}\n            defaultMessage={props.defaultMessage}\n            values={props.values}\n        />\n    </AdminHeader>\n);\n\nFormattedAdminHeader.defaultProps = {\n    values: {},\n};\n\nexport default FormattedAdminHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport Chart, {ChartData} from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\ntype Props = {\n    title: React.ReactNode;\n    width: number;\n    height: number;\n    data?: ChartData;\n}\n\nexport default class DoughnutChart extends React.PureComponent<Props> {\n    private canvasRef = React.createRef<HTMLCanvasElement>();\n\n    public chart: Chart | null = null;\n\n    public componentDidMount(): void {\n        this.initChart();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        if (!Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            this.initChart(true);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.chart && this.canvasRef.current) {\n            this.chart.destroy();\n        }\n    }\n\n    public initChart = (update?: boolean): void => {\n        if (!this.canvasRef.current) {\n            return;\n        }\n        const ctx = this.canvasRef.current.getContext('2d') as CanvasRenderingContext2D;\n        const dataCopy = JSON.parse(JSON.stringify(this.props.data));\n        this.chart = new Chart(ctx, {type: 'doughnut', data: dataCopy, options: {}});\n        if (update && this.chart) {\n            this.chart.update();\n        }\n    }\n\n    public render(): JSX.Element {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else {\n            content = (\n                <canvas\n                    ref={this.canvasRef}\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport Chart, {ChartOptions} from 'chart.js';\n\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    title: React.ReactNode;\n    width: number;\n    height: number;\n    data?: any;\n    id: string;\n}\n\nexport default class LineChart extends React.PureComponent<Props> {\n    private canvasRef = React.createRef<HTMLCanvasElement>()\n    public static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number.isRequired,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number.isRequired,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    public chart: Chart | null = null;\n    public chartOptions: ChartOptions = {\n        legend: {\n            display: false,\n        },\n    };\n\n    public componentDidMount(): void {\n        this.initChart();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        const currentData = this.props.data && this.props.data.labels.length > 0;\n\n        if (!currentData && this.chart) {\n            // Clean up the rendered chart before we render and destroy its context\n            this.chart.destroy();\n            this.chart = null;\n        }\n\n        if (Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            return;\n        }\n\n        const hasData = this.props.data && this.props.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (hasData) {\n            // Update the rendered chart or initialize it as necessary\n            this.initChart(hasChart);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n    }\n\n    public initChart = (update?: boolean): void => {\n        if (!this.canvasRef.current) {\n            return;\n        }\n\n        const ctx = this.canvasRef.current.getContext('2d') as CanvasRenderingContext2D;\n        const dataCopy: any = JSON.parse(JSON.stringify(this.props.data));\n        this.chart = new Chart(ctx, {type: 'line', data: dataCopy, options: this.chartOptions || {}});\n\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    public render(): JSX.Element {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else if (this.props.data.labels.length === 0) {\n            content = (\n                <h5>\n                    <FormattedMessage\n                        id='analytics.chart.meaningful'\n                        defaultMessage='Not enough data for a meaningful representation.'\n                    />\n                </h5>\n            );\n        } else {\n            content = (\n                <canvas\n                    data-testid={this.props.id}\n                    ref={this.canvasRef}\n                    width={this.props.width}\n                    height={this.props.height}\n                    data-labels={this.props.data.labels}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='total-count by-day'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    title: ReactNode;\n    icon: string;\n    count?: number;\n    id?: string;\n}\n\nexport default class StatisticCount extends React.PureComponent<Props> {\n    public render(): JSX.Element {\n        const loading = (\n            <FormattedMessage\n                id='analytics.chart.loading'\n                defaultMessage='Loading...'\n            />\n        );\n\n        return (\n            <div className='col-lg-3 col-md-4 col-sm-6'>\n                <div className='total-count'>\n                    <div\n                        data-testid={`${this.props.id}Title`}\n                        className='title'\n                    >\n                        {this.props.title}\n                        <i className={'fa ' + this.props.icon}/>\n                    </div>\n                    <div\n                        data-testid={this.props.id}\n                        className='content'\n                    >\n                        {typeof this.props.count === 'undefined' || isNaN(this.props.count) ? loading : this.props.count}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport function formatChannelDoughtnutData(totalPublic: any, totalPrivate: any) {\n    const channelTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.publicChannels', 'Public Channels'),\n            Utils.localizeMessage('analytics.system.privateGroups', 'Private Channels'),\n        ],\n        datasets: [{\n            data: [totalPublic, totalPrivate],\n            backgroundColor: ['#46BFBD', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FFC870'],\n        }],\n    };\n\n    return channelTypeData;\n}\n\nexport function formatPostDoughtnutData(filePosts: any, hashtagPosts: any, totalPosts: any) {\n    const postTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.totalFilePosts', 'Posts with Files'),\n            Utils.localizeMessage('analytics.system.totalHashtagPosts', 'Posts with Hashtags'),\n            Utils.localizeMessage('analytics.system.textPosts', 'Posts with Text-only'),\n        ],\n        datasets: [{\n            data: [filePosts, hashtagPosts, (totalPosts - filePosts - hashtagPosts)],\n            backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870'],\n        }],\n    };\n\n    return postTypeData;\n}\n\nexport function formatPostsPerDayData(labels: string[], data: any) {\n    const chartData = {\n        labels: [] as string[],\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [] as any,\n        }],\n    };\n    return fillChartData(chartData, labels, data);\n}\n\n// synchronizeChartLabels converges on a uniform set of labels for all entries in the given chart data.\n// If a given label wasn't already present in the chart data, a 0-valued data point at that label is added.\nexport function synchronizeChartLabels(...datas: any) {\n    const labels: Set<string> = new Set();\n    datas.forEach((data: any) => {\n        if (data?.length) {\n            data.forEach((e: any) => labels.add(e.name));\n        }\n    });\n    return Array.from(labels).sort();\n}\n\nexport function formatUsersWithPostsPerDayData(labels: string[], data: any) {\n    const chartData = {\n        labels: [] as string[],\n        datasets: [{\n            label: '',\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [] as any,\n        }],\n    };\n    return fillChartData(chartData, labels, data);\n}\n\nfunction fillChartData(chartData: any, labels: any, data: any) {\n    if (data?.length) {\n        chartData.labels = labels;\n\n        //labels are in order, add in label order...\n        chartData.labels.forEach((label: string) => {\n            const element = data.find((e: any) => e.name === label);\n            const val = element ? element.value : 0;\n            chartData.datasets[0].data.push(val);\n        });\n    }\n    return chartData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {AnalyticsRow} from 'matterfoss-redux/types/admin';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport DoughnutChart from '../doughnut_chart';\nimport LineChart from '../line_chart';\nimport StatisticCount from '../statistic_count';\n\nimport {\n    formatPostsPerDayData,\n    formatUsersWithPostsPerDayData,\n    formatChannelDoughtnutData,\n    formatPostDoughtnutData,\n    synchronizeChartLabels,\n} from '../format';\n\nconst StatTypes = Constants.StatTypes;\n\ntype Props = {\n    isLicensed: boolean;\n    stats?: Dictionary<number | AnalyticsRow[]>;\n}\n\nexport default class SystemAnalytics extends React.PureComponent<Props> {\n    public componentDidMount() {\n        AdminActions.getStandardAnalytics();\n        AdminActions.getPostsPerDayAnalytics();\n        AdminActions.getBotPostsPerDayAnalytics();\n        AdminActions.getUsersPerDayAnalytics();\n\n        if (this.props.isLicensed) {\n            AdminActions.getAdvancedAnalytics();\n        }\n    }\n\n    private getStatValue(stat: number | AnalyticsRow[]): number | undefined {\n        if (typeof stat === 'number') {\n            return stat;\n        }\n        if (!stat || stat.length === 0) {\n            return undefined;\n        }\n        return stat[0].value;\n    }\n\n    public render() {\n        const stats = this.props.stats!;\n        const isLicensed = this.props.isLicensed;\n        const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;\n\n        const labels = synchronizeChartLabels(stats[StatTypes.POST_PER_DAY], stats[StatTypes.BOT_POST_PER_DAY], stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n        const postCountsDay = formatPostsPerDayData(labels, stats[StatTypes.POST_PER_DAY]);\n        const botPostCountsDay = formatPostsPerDayData(labels, stats[StatTypes.BOT_POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(labels, stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner;\n        let postCount;\n        let postTotalGraph;\n        let botPostTotalGraph;\n        let activeUserGraph;\n        if (skippedIntensiveQueries) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.skippedIntensiveQueries'\n                            defaultMessage='To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html).'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            postCount = (\n                <StatisticCount\n                    id='totalPosts'\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={this.getStatValue(stats[StatTypes.TOTAL_POSTS])}\n                />\n            );\n\n            botPostTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalBotPosts'\n                                defaultMessage='Total Posts from Bots'\n                            />\n                        }\n                        data={botPostCountsDay}\n                        id='totalPostsFromBotsLineChart'\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        id='totalPostsLineChart'\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            activeUserGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        id='activeUsersWithPostsLineChart'\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        let advancedStats;\n        let advancedGraphs;\n        let sessionCount;\n        let commandCount;\n        let incomingCount;\n        let outgoingCount;\n        if (this.props.isLicensed) {\n            sessionCount = (\n                <StatisticCount\n                    id='totalSessions'\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalSessions'\n                            defaultMessage='Total Sessions'\n                        />\n                    }\n                    icon='fa-signal'\n                    count={this.getStatValue(stats[StatTypes.TOTAL_SESSIONS])}\n                />\n            );\n\n            commandCount = (\n                <StatisticCount\n                    id='totalCommands'\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalCommands'\n                            defaultMessage='Total Commands'\n                        />\n                    }\n                    icon='fa-terminal'\n                    count={this.getStatValue(stats[StatTypes.TOTAL_COMMANDS])}\n                />\n            );\n\n            incomingCount = (\n                <StatisticCount\n                    id='incomingWebhooks'\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalIncomingWebhooks'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-down'\n                    count={this.getStatValue(stats[StatTypes.TOTAL_IHOOKS])}\n                />\n            );\n\n            outgoingCount = (\n                <StatisticCount\n                    id='outgoingWebhooks'\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalOutgoingWebhooks'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-up'\n                    count={this.getStatValue(stats[StatTypes.TOTAL_OHOOKS])}\n                />\n            );\n\n            advancedStats = (\n                <div>\n                    <StatisticCount\n                        id='websocketConns'\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalWebsockets'\n                                defaultMessage='WebSocket Conns'\n                            />\n                        }\n                        icon='fa-user'\n                        count={this.getStatValue(stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS])}\n                    />\n                    <StatisticCount\n                        id='masterDbConns'\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalMasterDbConnections'\n                                defaultMessage='Master DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={this.getStatValue(stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS])}\n                    />\n                    <StatisticCount\n                        id='replicaDbConns'\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalReadDbConnections'\n                                defaultMessage='Replica DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={this.getStatValue(stats[StatTypes.TOTAL_READ_DB_CONNECTIONS])}\n                    />\n                </div>\n            );\n\n            const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n            const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);\n\n            let postTypeGraph;\n            if (stats[StatTypes.TOTAL_POSTS] !== -1) {\n                postTypeGraph = (\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.postTypes'\n                                defaultMessage='Posts, Files and Hashtags'\n                            />\n                        }\n                        data={postTypeData}\n                        width={300}\n                        height={225}\n                    />\n                );\n            }\n\n            advancedGraphs = (\n                <div className='row'>\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.channelTypes'\n                                defaultMessage='Channel Types'\n                            />\n                        }\n                        data={channelTypeData}\n                        width={300}\n                        height={225}\n                    />\n                    {postTypeGraph}\n                </div>\n            );\n        }\n\n        const userCount = (\n            <StatisticCount\n                id='totalActiveUsers'\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalUsers'\n                        defaultMessage='Total Active Users'\n                    />\n                }\n                icon='fa-user'\n                count={this.getStatValue(stats[StatTypes.TOTAL_USERS])}\n            />\n        );\n\n        const teamCount = (\n            <StatisticCount\n                id='totalTeams'\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalTeams'\n                        defaultMessage='Total Teams'\n                    />\n                }\n                icon='fa-users'\n                count={this.getStatValue(stats[StatTypes.TOTAL_TEAMS])}\n            />\n        );\n        const totalPublicChannelsCount = this.getStatValue(stats[StatTypes.TOTAL_PUBLIC_CHANNELS]);\n        const totalPrivateGroupsCount = this.getStatValue(stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n        const totalChannelCount = () => {\n            if (totalPublicChannelsCount && totalPrivateGroupsCount) {\n                return totalPublicChannelsCount + totalPrivateGroupsCount;\n            } else if (!totalPublicChannelsCount && totalPrivateGroupsCount) {\n                return totalPrivateGroupsCount;\n            } else if (totalPublicChannelsCount && !totalPrivateGroupsCount) {\n                return totalPublicChannelsCount;\n            }\n            return undefined;\n        };\n        const channelCount = (\n            <StatisticCount\n                id='totalChannels'\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalChannels'\n                        defaultMessage='Total Channels'\n                    />\n                }\n                icon='fa-globe'\n                count={totalChannelCount()}\n            />\n        );\n\n        const dailyActiveUsers = (\n            <StatisticCount\n                id='dailyActiveUsers'\n                title={\n                    <FormattedMessage\n                        id='analytics.system.dailyActiveUsers'\n                        defaultMessage='Daily Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={this.getStatValue(stats[StatTypes.DAILY_ACTIVE_USERS])}\n            />\n        );\n\n        const monthlyActiveUsers = (\n            <StatisticCount\n                id='monthlyActiveUsers'\n                title={\n                    <FormattedMessage\n                        id='analytics.system.monthlyActiveUsers'\n                        defaultMessage='Monthly Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={this.getStatValue(stats[StatTypes.MONTHLY_ACTIVE_USERS])}\n            />\n        );\n\n        let firstRow;\n        let secondRow;\n        if (isLicensed && skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {sessionCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (isLicensed && !skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {sessionCount}\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (!isLicensed) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n        }\n\n        const thirdRow = (\n            <div>\n                {dailyActiveUsers}\n                {monthlyActiveUsers}\n            </div>\n        );\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <FormattedAdminHeader\n                    id='analytics.system.title'\n                    defaultMessage='System Statistics'\n                />\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        {banner}\n                        <div className='row'>\n                            {firstRow}\n                            {secondRow}\n                            {thirdRow}\n                            {advancedStats}\n                        </div>\n                        {advancedGraphs}\n                        {postTotalGraph}\n                        {botPostTotalGraph}\n                        {activeUserGraph}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport SystemAnalytics from './system_analytics';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n        stats: state.entities.admin.analytics,\n    };\n}\n\nexport default connect(mapStateToProps)(SystemAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    title?: JSX.Element;\n    description: JSX.Element;\n}\n\nconst Banner: React.FC<Props> = (props: Props) => {\n    let title = (\n        <FormattedMessage\n            id='admin.banner.heading'\n            defaultMessage='Note:'\n        />\n    );\n\n    if (props.title) {\n        title = props.title;\n    }\n\n    return (\n        <div className='banner'>\n            <div className='banner__content'>\n                <h4 className='banner__heading'>\n                    {title}\n                </h4>\n                <p>\n                    {props.description}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Banner;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants from 'utils/constants';\n\ntype TableItem = {\n    name: string;\n    tip: string;\n    value: React.ReactNode;\n}\ntype Props = {\n    title: React.ReactNode;\n    data: TableItem[];\n}\n\nexport default class TableChart extends React.PureComponent<Props> {\n    public render() {\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count recent-active-users'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        <table>\n                            <tbody>\n                                {\n                                    this.props.data.map((item) => {\n                                        const tooltip = (\n                                            <Tooltip id={'tip-table-entry-' + item.name}>\n                                                {item.tip}\n                                            </Tooltip>\n                                        );\n\n                                        return (\n                                            <tr key={'table-entry-' + item.name}>\n                                                <td>\n                                                    <OverlayTrigger\n                                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                        placement='top'\n                                                        overlay={tooltip}\n                                                    >\n                                                        <time>\n                                                            {item.name}\n                                                        </time>\n                                                    </OverlayTrigger>\n                                                </td>\n                                                <td>\n                                                    {item.value}\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\n\nimport {General} from 'matterfoss-redux/constants';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as AdminActions from 'actions/admin_actions';\nimport BrowserStore from 'stores/browser_store';\nimport {StatTypes} from 'utils/constants';\nimport Banner from 'components/admin_console/banner';\nimport LineChart from 'components/analytics/line_chart';\nimport StatisticCount from 'components/analytics/statistic_count';\nimport TableChart from 'components/analytics/table_chart';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport {formatPostsPerDayData, formatUsersWithPostsPerDayData} from '../format';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nexport default class TeamAnalytics extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Initial team to load analytics for\n         */\n        initialTeam: PropTypes.object,\n\n        /**\n         * The locale of the current user\n          */\n        locale: PropTypes.string.isRequired,\n        stats: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get users in a team\n             */\n            getProfilesInTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            team: props.initialTeam,\n            recentlyActiveUsers: [],\n            newUsers: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.team) {\n            this.getData(this.state.team.id);\n        }\n\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.team && prevState.team !== this.state.team) {\n            this.getData(this.state.team.id);\n        }\n    }\n\n    getData = async (id) => {\n        AdminActions.getStandardAnalytics(id);\n        AdminActions.getPostsPerDayAnalytics(id);\n        AdminActions.getBotPostsPerDayAnalytics(id);\n        AdminActions.getUsersPerDayAnalytics(id);\n        const {data: recentlyActiveUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'last_activity_at');\n        const {data: newUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'create_at');\n\n        this.setState({\n            recentlyActiveUsers,\n            newUsers,\n        });\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n\n        let team;\n        this.props.teams.forEach((t) => {\n            if (t.id === teamId) {\n                team = t;\n            }\n        });\n\n        this.setState({\n            team,\n        });\n\n        BrowserStore.setGlobalItem(LAST_ANALYTICS_TEAM, teamId);\n    }\n\n    render() {\n        if (this.props.teams.length === 0 || !this.state.team || !this.props.stats[this.state.team.id]) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.state.team == null) {\n            return (\n                <Banner\n                    description={\n                        <FormattedMessage\n                            id='analytics.team.noTeams'\n                            defaultMessage='This server has no teams for which to view statistics.'\n                        />\n                    }\n                />\n            );\n        }\n\n        const stats = this.props.stats[this.state.team.id];\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner = (\n            <div className='banner'>\n                <div className='banner__content'>\n                    <FormattedMessage\n                        id='analytics.system.info'\n                        defaultMessage='Use data for only the chosen team. Exclude posts in direct message channels that are not tied to a team.'\n                    />\n                </div>\n            </div>\n        );\n\n        let totalPostsCount;\n        let postTotalGraph;\n        let userActiveGraph;\n        if (stats[StatTypes.TOTAL_POSTS] === -1) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.infoAndSkippedIntensiveQueries'\n                            defaultMessage='Use data for only the chosen team. Exclude posts in direct message channels that are not tied to a team. \\n \\n To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html).'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            totalPostsCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.team.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        id='totalPosts'\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            userActiveGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        id='activeUsersWithPosts'\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);\n        const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);\n\n        const teams = this.props.teams.sort((a, b) => {\n            const aName = a.display_name.toUpperCase();\n            const bName = b.display_name.toUpperCase();\n            if (aName === bName) {\n                return 0;\n            }\n            if (aName > bName) {\n                return 1;\n            }\n            return -1;\n        }).map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <div className='admin-console__header team-statistics__header-row'>\n                    <div className='team-statistics__header'>\n                        <FormattedMarkdownMessage\n                            id='analytics.team.title'\n                            defaultMessage='Team Statistics for {team}'\n                            values={{\n                                team: this.state.team.display_name,\n                            }}\n                        />\n                    </div>\n                    <div className='team-statistics__team-filter'>\n                        <select\n                            data-testid='teamFilter'\n                            className='form-control team-statistics__team-filter__dropdown'\n                            onChange={this.handleTeamChange}\n                            value={this.state.team.id}\n                        >\n                            {teams}\n                        </select>\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        {banner}\n                        <div className='row'>\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.totalUsers'\n                                        defaultMessage='Total Active Users'\n                                    />\n                                }\n                                icon='fa-users'\n                                count={stats[StatTypes.TOTAL_USERS]}\n                            />\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.publicChannels'\n                                        defaultMessage='Public Channels'\n                                    />\n                                }\n                                icon='fa-globe'\n                                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS]}\n                            />\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.privateGroups'\n                                        defaultMessage='Private Channels'\n                                    />\n                                }\n                                icon='fa-lock'\n                                count={stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n                            />\n                            {totalPostsCount}\n                        </div>\n                        {postTotalGraph}\n                        {userActiveGraph}\n                        <div className='row'>\n                            <TableChart\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.recentUsers'\n                                        defaultMessage='Recent Active Users'\n                                    />\n                                }\n                                data={recentActiveUsers}\n                            />\n                            <TableChart\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.newlyCreated'\n                                        defaultMessage='Newly Created Users'\n                                    />\n                                }\n                                data={newlyCreatedUsers}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function formatRecentUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.last_activity_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n\nexport function formatNewUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.create_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeams} from 'matterfoss-redux/actions/teams';\nimport {getProfilesInTeam} from 'matterfoss-redux/actions/users';\nimport {getTeamsList} from 'matterfoss-redux/selectors/entities/teams';\n\nimport BrowserStore from 'stores/browser_store';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamAnalytics from './team_analytics.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nfunction mapStateToProps(state) {\n    const teams = getTeamsList(state);\n    const teamId = BrowserStore.getGlobalItem(LAST_ANALYTICS_TEAM, null);\n    const initialTeam = state.entities.teams.teams[teamId] || (teams.length > 0 ? teams[0] : null);\n\n    return {\n        initialTeam,\n        locale: getCurrentLocale(state),\n        teams,\n        stats: state.entities.admin.teamAnalytics,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getProfilesInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {AdminConfig, EnvironmentConfig} from 'matterfoss-redux/types/config';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\n\nimport AdminHeader from 'components/widgets/admin_console/admin_header';\n\nexport type BaseProps = {\n    config?: DeepPartial<AdminConfig>;\n    environmentConfig?: EnvironmentConfig;\n    setNavigationBlocked?: (blocked: boolean) => void;\n    isDisabled?: boolean;\n    updateConfig?: (config: AdminConfig) => {data: AdminConfig; error: ClientErrorPlaceholder};\n}\n\nexport type BaseState = {\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: string|null;\n    serverErrorId?: string;\n    errorTooltip: boolean;\n}\n\n// Placeholder type until ClientError is exported from redux.\n// TODO: remove ClientErrorPlaceholder and change the return type of updateConfig\ntype ClientErrorPlaceholder = {\n    message: string;\n    server_error_id: string;\n}\n\nexport default abstract class AdminSettings <Props extends BaseProps, State extends BaseState> extends React.Component<Props, State> {\n    private errorMessageRef: React.RefObject<HTMLDivElement>;\n    public constructor(props: Props) {\n        super(props);\n        const stateInit = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n        if (props.config) {\n            this.state = Object.assign(this.getStateFromConfig(props.config), stateInit) as Readonly<State>;\n        } else {\n            this.state = stateInit as Readonly<State>;\n        }\n        this.errorMessageRef = React.createRef();\n    }\n\n    protected abstract getStateFromConfig(config: DeepPartial<AdminConfig>): Partial<State>;\n\n    protected abstract getConfigFromState(config: DeepPartial<AdminConfig>): unknown;\n\n    protected abstract renderTitle(): React.ReactElement;\n\n    protected abstract renderSettings(): React.ReactElement;\n\n    protected handleSaved?: ((config: AdminConfig) => React.ReactElement);\n\n    protected canSave?: () => boolean;\n\n    private closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    private openTooltip = (e: React.MouseEvent) => {\n        const elm: HTMLElement|null = e.currentTarget.querySelector('.control-label');\n        if (elm) {\n            const isElipsis = elm.offsetWidth < elm.scrollWidth;\n            this.setState({errorTooltip: isElipsis});\n        }\n    }\n\n    protected handleChange = (id: string, value: boolean) => {\n        this.setState((prevState) => ({\n            ...prevState,\n            saveNeeded: true,\n            [id]: value,\n        }));\n\n        if (this.props.setNavigationBlocked) {\n            this.props.setNavigationBlocked(true);\n        }\n    };\n\n    private handleSubmit = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        this.doSubmit();\n    }\n\n    protected doSubmit = async (callback?: () => void) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        if (this.props.updateConfig) {\n            const {data, error} = await this.props.updateConfig(config);\n\n            if (data) {\n                this.setState(this.getStateFromConfig(data) as State);\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                if (this.props.setNavigationBlocked) {\n                    this.props.setNavigationBlocked(false);\n                }\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            } else if (error) {\n                this.setState({\n                    saving: false,\n                    serverError: error.message,\n                    serverErrorId: error.server_error_id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        }\n    };\n\n    private parseInt = (str: string, defaultValue?: number) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n)) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    private parseIntNonNegative = (str: string, defaultValue?: number) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    private parseIntZeroOrMin = (str: string, minimumValue = 1) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            return 0;\n        }\n        if (n > 0 && n < minimumValue) {\n            return minimumValue;\n        }\n\n        return n;\n    };\n\n    protected parseIntNonZero = (str: string, defaultValue?: number, minimumValue = 1) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < minimumValue) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 1;\n        }\n\n        return n;\n    };\n\n    private getConfigValue(config: AdminConfig | EnvironmentConfig, path: string) {\n        const pathParts = path.split('.');\n\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        return pathParts.reduce((obj: object | null, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            return obj[(pathPart as keyof object)];\n        }, config);\n    }\n\n    private setConfigValue(config: AdminConfig, path: string, value: any) {\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        function setValue(obj: object, pathParts: string[]) {\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            const part = pathParts[0] as keyof object;\n\n            if (pathParts.length === 1) {\n                Object.assign(obj, {[part]: value});\n            } else {\n                if (obj[part] == null) {\n                    Object.assign(obj, {[part]: {}});\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    protected isSetByEnv = (path: string) => {\n        return Boolean(this.props.environmentConfig && this.getConfigValue(this.props.environmentConfig!, path));\n    };\n\n    public render() {\n        return (\n            <form\n                className='form-horizontal'\n                role='form'\n                onSubmit={this.handleSubmit}\n            >\n                <div className='wrapper--fixed'>\n                    <AdminHeader>\n                        {this.renderTitle()}\n                    </AdminHeader>\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.props.isDisabled || !this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref={this.errorMessageRef}\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            placement='top'\n                            target={this.errorMessageRef.current as HTMLElement}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function SetByEnv() {\n    return (\n        <div className='alert alert-warning'>\n            <FormattedMessage\n                id='admin.set_by_env'\n                defaultMessage='This setting has been set through an environment variable. It cannot be changed through the System Console.'\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\n\nimport SetByEnv from './set_by_env';\n\ntype Props = {\n    inputId?: string;\n    label: React.ReactNode;\n    children: React.ReactNode;\n    helpText?: React.ReactNode;\n    setByEnv?: boolean;\n}\n\nexport default class Settings extends PureComponent<Props> {\n    public render() {\n        const {\n            children,\n            setByEnv,\n            helpText,\n            inputId,\n            label,\n        } = this.props;\n\n        return (\n            <div\n                data-testid={inputId}\n                className='form-group'\n            >\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <div className='col-sm-8'>\n                    {children}\n                    <div\n                        data-testid={inputId + 'help-text'}\n                        className='help-text'\n                    >\n                        {helpText}\n                    </div>\n                    {setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: boolean;\n    onChange: (id: string, foo: boolean) => void;\n    trueText?: React.ReactNode;\n    falseText?: React.ReactNode;\n    disabled: boolean;\n    setByEnv: boolean;\n    disabledText?: React.ReactNode;\n    helpText: React.ReactNode;\n}\n\nexport default class BooleanSetting extends React.PureComponent<Props> {\n    public static defaultProps = {\n        trueText: (\n            <FormattedMessage\n                id='admin.true'\n                defaultMessage='true'\n            />\n        ),\n        falseText: (\n            <FormattedMessage\n                id='admin.false'\n                defaultMessage='false'\n            />\n        ),\n        disabled: false,\n    };\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(this.props.id, e.target.value === 'true');\n    }\n\n    public render() {\n        let helpText;\n        if (this.props.disabled && this.props.disabledText) {\n            helpText = (\n                <div>\n                    <span className='admin-console__disabled-text'>\n                        {this.props.disabledText}\n                    </span>\n                    {this.props.helpText}\n                </div>\n            );\n        } else {\n            helpText = this.props.helpText;\n        }\n\n        return (\n            <Setting\n                inputId={this.props.id}\n                label={this.props.label}\n                helpText={helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <a id={this.props.id}/>\n                <label className='radio-inline'>\n                    <input\n                        data-testid={this.props.id + 'true'}\n                        type='radio'\n                        value='true'\n                        id={Utils.createSafeId(this.props.id) + 'true'}\n                        name={this.props.id}\n                        checked={this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.trueText}\n                </label>\n                <label className='radio-inline'>\n                    <input\n                        data-testid={this.props.id + 'false'}\n                        type='radio'\n                        value='false'\n                        id={Utils.createSafeId(this.props.id) + 'false'}\n                        name={this.props.id}\n                        checked={!this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.falseText}\n                </label>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SettingsGroup extends React.PureComponent {\n    static get propTypes() {\n        return {\n            show: PropTypes.bool.isRequired,\n            header: PropTypes.node,\n            title: PropTypes.node,\n            subtitle: PropTypes.node,\n            children: PropTypes.node,\n            container: PropTypes.bool,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            show: true,\n            container: true,\n        };\n    }\n\n    render() {\n        let wrapperClass = '';\n        let contentClass = '';\n\n        if (!this.props.show) {\n            return null;\n        }\n\n        if (this.props.container) {\n            wrapperClass = 'admin-console__wrapper';\n            contentClass = 'admin-console__content';\n        }\n\n        let header = null;\n        if (this.props.header) {\n            header = (\n                <h4>\n                    {this.props.header}\n                </h4>\n            );\n        }\n\n        let title = null;\n        if (!this.props.header && this.props.title) {\n            title = (\n                <div className={'section-title'}>\n                    {this.props.title}\n                </div>\n            );\n        }\n\n        let subtitle = null;\n        if (!this.props.header && this.props.subtitle) {\n            subtitle = (\n                <div className={'section-subtitle'}>\n                    {this.props.subtitle}\n                </div>\n            );\n        }\n\n        let sectionHeader = null;\n        if (title || subtitle) {\n            sectionHeader = (\n                <div className={'section-header'}>\n                    {title}\n                    {subtitle}\n                </div>\n            );\n        }\n\n        return (\n            <div className={wrapperClass}>\n                <div className={contentClass}>\n                    {header}\n                    {sectionHeader}\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport TextSetting, {WidgetTextSettingProps} from 'components/widgets/settings/text_setting';\n\nimport SetByEnv from './set_by_env';\n\ninterface Props extends WidgetTextSettingProps {\n    setByEnv: boolean;\n    disabled?: boolean;\n}\n\nconst AdminTextSetting: React.SFC<Props> = (props: Props): JSX.Element => {\n    const {setByEnv, disabled, ...sharedProps} = props;\n    const isTextDisabled = disabled || setByEnv;\n\n    return (\n        <TextSetting\n            {...sharedProps}\n            labelClassName='col-sm-4'\n            inputClassName='col-sm-8'\n            disabled={isTextDisabled}\n            footer={setByEnv ? <SetByEnv/> : null}\n        />\n    );\n};\n\nexport default AdminTextSetting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PluginState from 'matterfoss-redux/constants/plugins';\nimport {AdminConfig} from 'matterfoss-redux/types/config';\n\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal';\n\nimport AdminSettings, {BaseProps, BaseState} from '../admin_settings';\nimport BooleanSetting from '../boolean_setting';\nimport SettingsGroup from '../settings_group.jsx';\nimport TextSetting from '../text_setting';\nimport {appsPluginID} from 'utils/apps';\n\nconst PluginItemState = ({state}: {state: number}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.not_running'\n                defaultMessage='Not running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.starting'\n                defaultMessage='Starting'\n            />\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.running'\n                defaultMessage='Running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_start'\n                defaultMessage='Failed to start'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_stay_running'\n                defaultMessage='Crashing'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.stopping'\n                defaultMessage='Stopping'\n            />\n        );\n    default:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.unknown'\n                defaultMessage='Unknown'\n            />\n        );\n    }\n};\n\nconst PluginItemStateDescription = ({state}: {state: number}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-ban'/>\n                <FormattedMessage\n                    id='admin.plugin.state.not_running.description'\n                    defaultMessage='This plugin is not enabled.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.starting.description'\n                    defaultMessage='This plugin is starting.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-check'/>\n                <FormattedMessage\n                    id='admin.plugin.state.running.description'\n                    defaultMessage='This plugin is running.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_start.description'\n                    defaultMessage='This plugin failed to start. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_stay_running.description'\n                    defaultMessage='This plugin crashed multiple times and is no longer running. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.stopping.description'\n                    defaultMessage='This plugin is stopping.'\n                />\n            </div>\n        );\n    default:\n        return null;\n    }\n};\n\ntype PluginStatus = {\n    state: number;\n    active: boolean;\n    id: string;\n    description: string;\n    version: string;\n    name: string;\n    instances: any[];\n    settings_schema?: {\n        header: string;\n        footer: string;\n        settings?: unknown[];\n    };\n}\n\ntype PluginItemProps = {\n    pluginStatus: PluginStatus;\n    removing: boolean;\n    handleEnable: (e: any) => any;\n    handleDisable: (e: any) => any;\n    handleRemove: (e: any) => any;\n    showInstances: boolean;\n    hasSettings: boolean;\n    appsEnabled: boolean;\n    isDisabled?: boolean;\n};\n\nconst PluginItem = ({\n    pluginStatus,\n    removing,\n    handleEnable,\n    handleDisable,\n    handleRemove,\n    showInstances,\n    hasSettings,\n    appsEnabled,\n    isDisabled,\n}: PluginItemProps) => {\n    let activateButton: React.ReactNode;\n    const activating = pluginStatus.state === PluginState.PLUGIN_STATE_STARTING;\n    const deactivating = pluginStatus.state === PluginState.PLUGIN_STATE_STOPPING;\n\n    if (pluginStatus.active) {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                className={deactivating || isDisabled ? 'disabled' : ''}\n                onClick={handleDisable}\n            >\n                {deactivating ?\n                    <FormattedMessage\n                        id='admin.plugin.disabling'\n                        defaultMessage='Disabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.disable'\n                        defaultMessage='Disable'\n                    />\n                }\n            </a>\n        );\n    } else {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                className={activating || isDisabled ? 'disabled' : ''}\n                onClick={handleEnable}\n            >\n                {activating ?\n                    <FormattedMessage\n                        id='admin.plugin.enabling'\n                        defaultMessage='Enabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.enable'\n                        defaultMessage='Enable'\n                    />\n                }\n            </a>\n        );\n    }\n\n    let settingsButton = null;\n    if (hasSettings) {\n        settingsButton = (\n            <span>\n                {' - '}\n                <Link\n                    to={'/admin_console/plugins/plugin_' + pluginStatus.id}\n                >\n                    <FormattedMessage\n                        id='admin.plugin.settingsButton'\n                        defaultMessage='Settings'\n                    />\n                </Link>\n            </span>\n        );\n    }\n\n    let removeButtonText;\n    if (removing) {\n        removeButtonText = (\n            <FormattedMessage\n                id='admin.plugin.removing'\n                defaultMessage='Removing...'\n            />\n        );\n    } else {\n        removeButtonText = (\n            <FormattedMessage\n                id='admin.plugin.remove'\n                defaultMessage='Remove'\n            />\n        );\n    }\n    let removeButton: React.ReactNode = (\n        <span>\n            {' - '}\n            <a\n                data-plugin-id={pluginStatus.id}\n                className={removing || isDisabled ? 'disabled' : ''}\n                onClick={handleRemove}\n            >\n                {removeButtonText}\n            </a>\n        </span>\n    );\n\n    let description;\n    if (pluginStatus.description) {\n        description = (\n            <div className='pt-2'>\n                {pluginStatus.description}\n            </div>\n        );\n    }\n\n    const notices = [];\n    if (pluginStatus.instances.some((instance) => instance.version !== pluginStatus.version)) {\n        notices.push(\n            <div\n                key='multiple-versions'\n                className='alert alert-warning'\n            >\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.multiple_versions_warning'\n                    defaultMessage='There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently.'\n                />\n            </div>,\n        );\n    }\n\n    notices.push(\n        <PluginItemStateDescription\n            key='state-description'\n            state={pluginStatus.state}\n        />,\n    );\n\n    const instances = pluginStatus.instances.slice();\n    instances.sort((a, b) => {\n        if (a.cluster_id < b.cluster_id) {\n            return -1;\n        } else if (a.cluster_id > b.cluster_id) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    let clusterSummary;\n    if (showInstances) {\n        clusterSummary = (\n            <div className='pt-3 pb-3'>\n                <div className='row'>\n                    <div className='col-md-6'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.cluster_instance'\n                                defaultMessage='Cluster Instance'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.version_title'\n                                defaultMessage='Version'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.state'\n                                defaultMessage='State'\n                            />\n                        </strong>\n                    </div>\n                </div>\n                {instances.map((instance) => (\n                    <div\n                        key={instance.cluster_id}\n                        className='row'\n                    >\n                        <div className='col-md-6'>\n                            {instance.cluster_id}\n                        </div>\n                        <div className='col-md-3'>\n                            {instance.version}\n                        </div>\n                        <div className='col-md-3'>\n                            <PluginItemState state={instance.state}/>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    if (pluginStatus.id === appsPluginID && !appsEnabled) {\n        activateButton = (<>{'Plugin disabled by feature flag'}</>);\n        removeButton = null;\n    }\n\n    return (\n        <div data-testid={pluginStatus.id}>\n            <div>\n                <strong>{pluginStatus.name}</strong>\n                {' ('}\n                {pluginStatus.id}\n                {' - '}\n                {pluginStatus.version}\n                {')'}\n            </div>\n            {description}\n            <div className='pt-2'>\n                {activateButton}\n                {removeButton}\n                {settingsButton}\n            </div>\n            <div>\n                {notices}\n            </div>\n            <div>\n                {clusterSummary}\n            </div>\n            <hr/>\n        </div>\n    );\n};\n\ntype Props = BaseProps & {\n    config: DeepPartial<AdminConfig>;\n    pluginStatuses: Record<string, PluginStatus>;\n    plugins: any;\n    appsEnabled: boolean;\n    actions: {\n        uploadPlugin: (fileData: File, force: boolean) => any;\n        removePlugin: (pluginId: string) => any;\n        getPlugins: () => unknown;\n        getPluginStatuses: () => any;\n        enablePlugin: (pluginId: string) => any;\n        disablePlugin: (pluginId: string) => any;\n        installPluginFromUrl: (url: string, force: boolean) => any;\n    };\n};\n\ntype State = BaseState & {\n    loading: boolean;\n    fileSelected: boolean;\n    file: File | null;\n    pluginDownloadUrl: string;\n    serverError: JSX.Element | string | null ;\n    lastMessage: string | null;\n    uploading: boolean;\n    installing: boolean;\n    overwritingUpload: boolean;\n    confirmOverwriteUploadModal: boolean;\n    overwritingInstall?: boolean;\n    confirmOverwriteInstallModal: boolean;\n    showRemoveModal: boolean;\n    resolveRemoveModal: string| null;\n    enable: boolean;\n    enableUploads: boolean;\n    allowInsecureDownloadUrl: boolean;\n    enableMarketplace: boolean;\n    enableRemoteMarketplace: boolean;\n    automaticPrepackagedPlugins: boolean;\n    marketplaceUrl: string;\n    requirePluginSignature: boolean;\n    removing: string | null;\n}\nexport default class PluginManagement extends AdminSettings<Props, State> {\n    private fileInput: React.RefObject<HTMLInputElement>;\n    constructor(props: Props) {\n        super(props);\n\n        this.state = Object.assign(this.state, {\n            loading: true,\n            fileSelected: false,\n            file: null,\n            pluginDownloadUrl: '',\n            serverError: null,\n            lastMessage: null,\n            uploading: false,\n            installing: false,\n            overwritingUpload: false,\n            confirmOverwriteUploadModal: false,\n            overwritingInstall: false,\n            confirmOverwriteInstallModal: false,\n            showRemoveModal: false,\n            resolveRemoveModal: null,\n        });\n        this.fileInput = React.createRef();\n    }\n    getConfigFromState = (config: Props['config']) => {\n        if (config && config.PluginSettings) {\n            config.PluginSettings.Enable = this.state.enable;\n            config.PluginSettings.EnableUploads = this.state.enableUploads;\n            config.PluginSettings.AllowInsecureDownloadUrl = this.state.allowInsecureDownloadUrl;\n            config.PluginSettings.EnableMarketplace = this.state.enableMarketplace;\n            config.PluginSettings.EnableRemoteMarketplace = this.state.enableRemoteMarketplace;\n            config.PluginSettings.AutomaticPrepackagedPlugins = this.state.automaticPrepackagedPlugins;\n            config.PluginSettings.MarketplaceUrl = this.state.marketplaceUrl;\n            config.PluginSettings.RequirePluginSignature = this.state.requirePluginSignature;\n        }\n\n        return config;\n    }\n\n    getStateFromConfig(config: Props['config']) {\n        const state = {\n            enable: config?.PluginSettings?.Enable,\n            enableUploads: config?.PluginSettings?.EnableUploads,\n            allowInsecureDownloadUrl: config?.PluginSettings?.AllowInsecureDownloadUrl,\n            enableMarketplace: config?.PluginSettings?.EnableMarketplace,\n            enableRemoteMarketplace: config?.PluginSettings?.EnableRemoteMarketplace,\n            automaticPrepackagedPlugins: config?.PluginSettings?.AutomaticPrepackagedPlugins,\n            marketplaceUrl: config?.PluginSettings?.MarketplaceUrl,\n            requirePluginSignature: config?.PluginSettings?.RequirePluginSignature,\n        };\n\n        return state;\n    }\n\n    componentDidMount() {\n        if (this.state.enable) {\n            this.props.actions.getPluginStatuses().then(\n                () => this.setState({loading: false}),\n            );\n        }\n    }\n\n    handleUpload = () => {\n        this.setState({lastMessage: null, serverError: null});\n        const element = this.fileInput.current as HTMLInputElement;\n        if (element.files && element.files.length > 0) {\n            this.setState({fileSelected: true, file: element.files[0]});\n        }\n    }\n\n    helpSubmitUpload = async (file: File, force: boolean) => {\n        this.setState({uploading: true});\n        const {error} = await this.props.actions.uploadPlugin(file, force);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {\n                this.setState({confirmOverwriteUploadModal: true, overwritingUpload: true});\n                return;\n            }\n            this.setState({\n                file: null,\n                fileSelected: false,\n                uploading: false,\n            });\n            if (error.server_error_id === 'app.plugin.activate.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')});\n            } else if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n            this.setState({file: null, fileSelected: false});\n            return;\n        }\n\n        this.setState({loading: true});\n        await this.props.actions.getPlugins();\n\n        let msg = `Successfully uploaded plugin from ${file?.name}`;\n        if (this.state.overwritingUpload) {\n            msg = `Successfully updated plugin from ${file?.name}`;\n        }\n\n        this.setState({\n            file: null,\n            fileSelected: false,\n            serverError: null,\n            lastMessage: msg,\n            overwritingUpload: false,\n            uploading: false,\n            loading: false,\n        });\n    }\n\n    handleSubmitUpload = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        const element = this.fileInput.current as HTMLInputElement;\n        if (element.files?.length === 0) {\n            return;\n        }\n        const file = element.files && element.files[0];\n        if (file) {\n            this.helpSubmitUpload(file, false);\n        }\n        Utils.clearFileInput(element);\n    }\n\n    handleOverwriteUploadPluginCancel = () => {\n        this.setState({\n            file: null,\n            fileSelected: false,\n            serverError: null,\n            confirmOverwriteUploadModal: false,\n            lastMessage: null,\n            uploading: false,\n        });\n    }\n\n    handleOverwriteUploadPlugin = () => {\n        this.setState({confirmOverwriteUploadModal: false});\n        if (this.state.file) {\n            this.helpSubmitUpload(this.state.file, true);\n        }\n    }\n\n    onPluginDownloadUrlChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            pluginDownloadUrl: e.target.value,\n        });\n    }\n\n    installFromUrl = async (force: boolean) => {\n        const {pluginDownloadUrl} = this.state;\n\n        this.setState({\n            installing: true,\n            serverError: null,\n            lastMessage: null,\n        });\n        const {error} = await this.props.actions.installPluginFromUrl(pluginDownloadUrl, force);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {\n                this.setState({confirmOverwriteInstallModal: true, overwritingInstall: true});\n                return;\n            }\n\n            this.setState({\n                installing: false,\n            });\n\n            if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n            return;\n        }\n\n        this.setState({loading: true});\n        await this.props.actions.getPlugins();\n\n        let msg = `Successfully installed plugin from ${pluginDownloadUrl}`;\n        if (this.state.overwritingInstall) {\n            msg = `Successfully updated plugin from ${pluginDownloadUrl}`;\n        }\n\n        this.setState({\n            serverError: null,\n            lastMessage: msg,\n            overwritingInstall: false,\n            installing: false,\n            loading: false,\n        });\n    }\n\n    getMarketplaceUrlHelpText = (url: string) => {\n        return (\n            <div>\n                {\n                    url === '' &&\n                    <div className='alert-warning'>\n                        <i className='fa fa-warning'/>\n                        <FormattedMarkdownMessage\n                            id='admin.plugins.settings.marketplaceUrlDesc.empty'\n                            defaultMessage=' Marketplace URL is a required field.'\n                        />\n                    </div>\n                }\n                {\n                    url !== '' &&\n                    <FormattedMarkdownMessage\n                        id='admin.plugins.settings.marketplaceUrlDesc'\n                        defaultMessage='URL of the marketplace server.'\n                    />\n                }\n            </div>\n        );\n    }\n\n    canSave = () => {\n        return this.state.marketplaceUrl !== '';\n    }\n\n    handleSubmitInstall = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        return this.installFromUrl(false);\n    }\n\n    handleOverwriteInstallPluginCancel = () => {\n        this.setState({\n            confirmOverwriteInstallModal: false,\n            installing: false,\n            serverError: null,\n            lastMessage: null,\n        });\n    }\n\n    handleOverwriteInstallPlugin = () => {\n        this.setState({confirmOverwriteInstallModal: false});\n        return this.installFromUrl(true);\n    }\n\n    showRemovePluginModal = (e: React.SyntheticEvent) => {\n        if (this.props.isDisabled) {\n            return;\n        }\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        this.setState({showRemoveModal: true, removing: pluginId});\n    }\n\n    handleRemovePluginCancel = () => {\n        this.setState({showRemoveModal: false, removing: null});\n    }\n\n    handleRemovePlugin = () => {\n        this.setState({showRemoveModal: false});\n        this.handleRemove();\n    }\n\n    handleRemove = async () => {\n        this.setState({lastMessage: null, serverError: null});\n        if (this.state.removing !== null) {\n            const {error} = await this.props.actions.removePlugin(this.state.removing);\n            this.setState({removing: null});\n\n            if (error) {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    handleEnable = async (e: React.KeyboardEvent) => {\n        e.preventDefault();\n        if (this.props.isDisabled) {\n            return;\n        }\n        this.setState({lastMessage: null, serverError: null});\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        if (pluginId) {\n            const {error} = await this.props.actions.enablePlugin(pluginId);\n\n            if (error) {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    handleDisable = async (e: React.KeyboardEvent) => {\n        this.setState({lastMessage: null, serverError: null});\n        e.preventDefault();\n        if (this.props.isDisabled) {\n            return;\n        }\n        this.setState({lastMessage: null, serverError: null});\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        if (pluginId) {\n            const {error} = await this.props.actions.disablePlugin(pluginId);\n\n            if (error) {\n                this.setState({serverError: error.message});\n            }\n        }\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.plugin.management.title'\n                defaultMessage='Management'\n            />\n        );\n    }\n\n    renderOverwritePluginModal = (\n        {show, onConfirm, onCancel}:\n        {show: boolean; onConfirm: (checked: boolean) => void; onCancel: (checked: boolean) => void }) => {\n        const title = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.title'\n                defaultMessage='Overwrite existing plugin?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.desc'\n                defaultMessage='A plugin with this ID already exists. Would you like to overwrite it?'\n            />\n        );\n\n        const overwriteButton = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.overwrite'\n                defaultMessage='Overwrite'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={overwriteButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n\n    renderRemovePluginModal = (\n        show: boolean, onConfirm: (checked: boolean) => void, onCancel: (checked: boolean) => void) => {\n        const title = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.title'\n                defaultMessage='Remove plugin?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.desc'\n                defaultMessage='Are you sure you would like to remove the plugin?'\n            />\n        );\n\n        const removeButton = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.overwrite'\n                defaultMessage='Remove'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={removeButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n\n    renderEnablePluginsSetting = () => {\n        const hideEnablePlugins = this.props.config.ExperimentalSettings && this.props.config.ExperimentalSettings.RestrictSystemAdmin;\n        if (!hideEnablePlugins) {\n            return (\n                <BooleanSetting\n                    id='enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.plugins.settings.enable'\n                            defaultMessage='Enable Plugins: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.plugins.settings.enableDesc'\n                            defaultMessage='When true, enables plugins on your MatterFOSS server. Use plugins to integrate with third-party systems, extend functionality, or customize the user interface of your MatterFOSS server. See [documentation](https://example.com/default-plugin-uploads) to learn more.'\n                        />\n                    }\n                    value={this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('PluginSettings.Enable')}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n        return null;\n    }\n\n    renderSettings = () => {\n        const {enableUploads} = this.state;\n        const enable = this.props.config?.PluginSettings?.Enable;\n        let serverError = <React.Fragment/>;\n        let lastMessage = <React.Fragment/>;\n\n        // Using props values to make sure these are set on the server and not just locally\n        const enableUploadButton = enableUploads && enable && !(this.props.config.PluginSettings && this.props.config.PluginSettings.RequirePluginSignature);\n\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error half'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n        if (this.state.lastMessage) {\n            lastMessage = <div className='col-sm-12'><div className='form-group half'>{this.state.lastMessage}</div></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.file) {\n            fileName = this.state.file.name;\n        }\n\n        let uploadButtonText;\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.upload'\n                    defaultMessage='Upload'\n                />\n            );\n        }\n\n        let pluginsList;\n        let pluginsContainer;\n        let pluginsListContainer;\n        const plugins = Object.values(this.props.pluginStatuses);\n        if (this.state.loading) {\n            pluginsList = <LoadingScreen/>;\n        } else if (plugins.length === 0) {\n            pluginsListContainer = (\n                <FormattedMessage\n                    id='admin.plugin.no_plugins'\n                    defaultMessage='No installed plugins.'\n                />\n            );\n        } else {\n            const showInstances = plugins.some((pluginStatus) => pluginStatus.instances.length > 1);\n            plugins.sort((a, b) => {\n                const nameCompare = a.name.localeCompare(b.name);\n                if (nameCompare !== 0) {\n                    return nameCompare;\n                }\n\n                return a.id.localeCompare(b.id);\n            });\n            pluginsList = plugins.map((pluginStatus: PluginStatus) => {\n                const p = this.props.plugins[pluginStatus.id];\n                const hasSettings = Boolean(p && p.settings_schema && (p.settings_schema.header || p.settings_schema.footer || (p.settings_schema.settings && p.settings_schema.settings.length > 0)));\n                return (\n                    <PluginItem\n                        key={pluginStatus.id}\n                        pluginStatus={pluginStatus}\n                        removing={this.state.removing === pluginStatus.id}\n                        handleEnable={this.handleEnable}\n                        handleDisable={this.handleDisable}\n                        handleRemove={this.showRemovePluginModal}\n                        showInstances={showInstances}\n                        hasSettings={hasSettings}\n                        appsEnabled={this.props.appsEnabled}\n                        isDisabled={this.props.isDisabled}\n                    />\n                );\n            });\n\n            pluginsListContainer = (\n                <div className='alert alert-transparent'>\n                    {pluginsList}\n                </div>\n            );\n        }\n\n        if (enable) {\n            pluginsContainer = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.plugin.installedTitle'\n                            defaultMessage='Installed Plugins: '\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <p className='help-text'>\n                            <FormattedMessage\n                                id='admin.plugin.installedDesc'\n                                defaultMessage='Installed plugins on your MatterFOSS server.'\n                            />\n                        </p>\n                        <br/>\n                        {pluginsListContainer}\n                    </div>\n                </div>\n            );\n        }\n\n        let uploadHelpText;\n\n        if (enableUploads && enable) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDesc'\n                    defaultMessage='Upload a plugin for your MatterFOSS server. See [documentation](!https://example.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else if (enable && !enableUploads) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDisabledDesc'\n                    defaultMessage='Enable plugin uploads in config.json. See [documentation](!https://example.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadAndPluginDisabledDesc'\n                    defaultMessage='To enable plugins, set **Enable Plugins** to true. See [documentation](!https://example.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        }\n\n        const overwriteUploadPluginModal = this.state.confirmOverwriteUploadModal && this.renderOverwritePluginModal({\n            show: this.state.confirmOverwriteUploadModal,\n            onConfirm: this.handleOverwriteUploadPlugin,\n            onCancel: this.handleOverwriteUploadPluginCancel,\n        });\n\n        const removePluginModal = this.state.showRemoveModal && this.renderRemovePluginModal(\n            this.state.showRemoveModal,\n            this.handleRemovePlugin,\n            this.handleRemovePluginCancel,\n        );\n\n        return (\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <SettingsGroup\n                        id={'PluginSettings'}\n                        container={false}\n                    >\n                        {this.renderEnablePluginsSetting()}\n\n                        { !this.props.config.ExperimentalSettings?.RestrictSystemAdmin && (\n                            <>\n                                <BooleanSetting\n                                    id='requirePluginSignature'\n                                    label={\n                                        <FormattedMessage\n                                            id='admin.plugins.settings.requirePluginSignature'\n                                            defaultMessage='Require Plugin Signature:'\n                                        />\n                                    }\n                                    helpText={\n                                        <FormattedMarkdownMessage\n                                            id='admin.plugins.settings.requirePluginSignatureDesc'\n                                            defaultMessage='When true, uploading plugins is disabled and may only be installed through the Marketplace. Plugins are always verified during MatterFOSS server startup and initialization. See [documentation](!https://mattermost.com/pl/default-plugin-signing) to learn more.'\n                                        />\n                                    }\n                                    value={this.state.requirePluginSignature}\n                                    disabled={this.props.isDisabled || !this.state.enable}\n                                    onChange={this.handleChange}\n                                    setByEnv={this.isSetByEnv('PluginSettings.RequirePluginSignature')}\n                                />\n                                <BooleanSetting\n                                    id='automaticPrepackagedPlugins'\n                                    label={\n                                        <FormattedMessage\n                                            id='admin.plugins.settings.automaticPrepackagedPlugins'\n                                            defaultMessage='Enable Automatic Prepackaged Plugins:'\n                                        />\n                                    }\n                                    helpText={\n                                        <FormattedMarkdownMessage\n                                            id='admin.plugins.settings.automaticPrepackagedPluginsDesc'\n                                            defaultMessage='When true, automatically installs any prepackaged plugin found to be enabled in the server configuration.'\n                                        />\n                                    }\n                                    value={this.state.automaticPrepackagedPlugins}\n                                    disabled={this.props.isDisabled || !this.state.enable}\n                                    onChange={this.handleChange}\n                                    setByEnv={this.isSetByEnv('PluginSettings.AutomaticPrepackagedPlugins')}\n                                />\n                                <div className='form-group'>\n                                    <label\n                                        className='control-label col-sm-4'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.plugin.uploadTitle'\n                                            defaultMessage='Upload Plugin: '\n                                        />\n                                    </label>\n                                    <div className='col-sm-8'>\n                                        <div className='file__upload'>\n                                            <button\n                                                type='button'\n                                                className={classNames(['btn', {'btn-primary': enableUploads}])}\n                                                disabled={!enableUploadButton || this.props.isDisabled}\n                                            >\n                                                <FormattedMessage\n                                                    id='admin.plugin.choose'\n                                                    defaultMessage='Choose File'\n                                                />\n                                            </button>\n                                            <input\n                                                ref={this.fileInput}\n                                                type='file'\n                                                accept='.gz'\n                                                onChange={this.handleUpload}\n                                                disabled={!enableUploadButton || this.props.isDisabled}\n                                            />\n                                        </div>\n                                        <button\n                                            className={btnClass}\n                                            id='uploadPlugin'\n                                            disabled={!this.state.fileSelected}\n                                            onClick={this.handleSubmitUpload}\n                                        >\n                                            {uploadButtonText}\n                                        </button>\n                                        <div className='help-text m-0'>\n                                            {fileName}\n                                        </div>\n                                        {serverError}\n                                        {lastMessage}\n                                        <p className='help-text'>\n                                            {uploadHelpText}\n                                        </p>\n                                    </div>\n                                </div>\n                                <BooleanSetting\n                                    id='enableMarketplace'\n                                    label={\n                                        <FormattedMessage\n                                            id='admin.plugins.settings.enableMarketplace'\n                                            defaultMessage='Enable Marketplace:'\n                                        />\n                                    }\n                                    helpText={\n                                        <FormattedMarkdownMessage\n                                            id='admin.plugins.settings.enableMarketplaceDesc'\n                                            defaultMessage='When true, enables System Administrators to install plugins from the [marketplace](!https://mattermost.com/pl/default-mattermost-marketplace.html).'\n                                        />\n                                    }\n                                    value={this.state.enableMarketplace}\n                                    disabled={this.props.isDisabled || !this.state.enable}\n                                    onChange={this.handleChange}\n                                    setByEnv={this.isSetByEnv('PluginSettings.EnableMarketplace')}\n                                />\n                                <BooleanSetting\n                                    id='enableRemoteMarketplace'\n                                    label={\n                                        <FormattedMessage\n                                            id='admin.plugins.settings.enableRemoteMarketplace'\n                                            defaultMessage='Enable Remote Marketplace:'\n                                        />\n                                    }\n                                    helpText={\n                                        <FormattedMarkdownMessage\n                                            id='admin.plugins.settings.enableRemoteMarketplaceDesc'\n                                            defaultMessage='When true, marketplace fetches latest plugins from the configured Marketplace URL.'\n                                        />\n                                    }\n                                    value={this.state.enableRemoteMarketplace}\n                                    disabled={this.props.isDisabled || !this.state.enable || !this.state.enableMarketplace}\n                                    onChange={this.handleChange}\n                                    setByEnv={this.isSetByEnv('PluginSettings.EnableRemoteMarketplace')}\n                                />\n                                <TextSetting\n                                    id={'marketplaceUrl'}\n                                    type={'input'}\n                                    label={\n                                        <FormattedMessage\n                                            id='admin.plugins.settings.marketplaceUrl'\n                                            defaultMessage='Marketplace URL:'\n                                        />\n                                    }\n                                    helpText={this.getMarketplaceUrlHelpText(this.state.marketplaceUrl)}\n                                    value={this.state.marketplaceUrl}\n                                    disabled={this.props.isDisabled || !this.state.enable || !this.state.enableMarketplace || !this.state.enableRemoteMarketplace}\n                                    onChange={this.handleChange}\n                                    setByEnv={this.isSetByEnv('PluginSettings.MarketplaceUrl')}\n                                />\n                            </>\n                        )}\n                        {pluginsContainer}\n                    </SettingsGroup>\n                    {overwriteUploadPluginModal}\n                    {removePluginModal}\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {\n    getPlugins,\n    getPluginStatuses,\n    removePlugin,\n    uploadPlugin,\n    installPluginFromUrl,\n    enablePlugin,\n    disablePlugin,\n} from 'matterfoss-redux/actions/admin';\n\nimport {GenericAction} from 'matterfoss-redux/types/actions';\nimport {appsEnabled} from 'matterfoss-redux/selectors/entities/apps';\n\nimport PluginManagement from './plugin_management';\n\nfunction mapStateToProps(state: any) {\n    return {\n        plugins: state.entities.admin.plugins,\n        pluginStatuses: state.entities.admin.pluginStatuses,\n        appsEnabled: appsEnabled(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            uploadPlugin,\n            installPluginFromUrl,\n            removePlugin,\n            getPlugins,\n            getPluginStatuses,\n            enablePlugin,\n            disablePlugin,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginManagement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Permissions} from 'matterfoss-redux/constants/index';\n\nconst MAPPING = {\n    enableTeamCreation: {\n        true: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: true}],\n        false: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: false}],\n    },\n\n    editOthersPosts: {\n        true: [\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n        false: [\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n    },\n\n    enableOnlyAdminIntegrations: {\n        true: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_INCOMING_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_OUTGOING_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: false},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: false},\n        ],\n        false: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_INCOMING_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_OUTGOING_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: true},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: true},\n        ],\n    },\n};\n\n/**\n * Get the roles that were changed (but unsaved) for given mapping key/values.\n *\n * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.\n * @param {object} roles same structure as returned by matterfoss-redux `getRoles`.\n * @return {object} the updated roles (only) in the same structure as returned by matterfoss-redux `getRoles`.\n */\nexport function rolesFromMapping(mappingValues, roles) {\n    const rolesClone = JSON.parse(JSON.stringify(roles));\n\n    // Purge roles that aren't present in MAPPING, we don't care about them.\n    purgeNonPertinentRoles(rolesClone);\n\n    Object.keys(MAPPING).forEach((mappingKey) => {\n        const value = mappingValues[mappingKey];\n        if (value) {\n            mutateRolesBasedOnMapping(mappingKey, value, rolesClone);\n        }\n    });\n\n    // Purge roles that didn't have permissions changes, we don't care about them.\n    Object.entries(rolesClone).forEach(([roleName, roleClone]) => {\n        const originalPermissionSet = new Set(roles[roleName].permissions);\n        const newPermissionSet = new Set(roleClone.permissions);\n        const difference = [...newPermissionSet].filter((x) => !originalPermissionSet.has(x));\n\n        if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {\n            delete rolesClone[roleName];\n        }\n    });\n\n    return rolesClone;\n}\n\n/**\n * Get the mapping value that matches for a given set of roles.\n *\n * @param {string} key to match under in the mapping.\n * @param {object} roles same structure as returned by matterfoss-redux `getRoles`.\n * @return {string} the value that the roles/permissions assignment match in the mapping.\n */\nexport function mappingValueFromRoles(key, roles) {\n    for (const o of mappingPartIterator(MAPPING[key], roles)) {\n        if (o.allConditionsAreMet) {\n            return o.value;\n        }\n    }\n    throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);\n}\n\nfunction purgeNonPertinentRoles(roles) {\n    const pertinentRoleNames = roleNamesInMapping();\n\n    Object.keys(roles).forEach((key) => {\n        if (!pertinentRoleNames.includes(key)) {\n            delete roles[key];\n        }\n    });\n}\n\nfunction mutateRolesBasedOnMapping(mappingKey, value, roles) {\n    const roleRules = MAPPING[mappingKey][value];\n\n    if (typeof roleRules === 'undefined') {\n        throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);\n    }\n\n    roleRules.forEach((item) => {\n        const role = roles[item.roleName];\n        if (item.shouldHave) {\n            addPermissionToRole(item.permission, role);\n        } else {\n            removePermissionFromRole(item.permission, role);\n        }\n    });\n}\n\n// Returns a set of the role names present in MAPPING.\nfunction roleNamesInMapping() {\n    let roleNames = [];\n\n    Object.values(MAPPING).forEach((v1) => {\n        Object.values(v1).forEach((v2) => {\n            const names = v2.map((item) => item.roleName); // eslint-disable-line max-nested-callbacks\n            roleNames = roleNames.concat(names);\n        });\n    });\n\n    return [...new Set(roleNames.map((item) => item))];\n}\n\nfunction* mappingPartIterator(mappingPart, roles) {\n    for (const value in mappingPart) {\n        if (mappingPart.hasOwnProperty(value)) {\n            const roleRules = mappingPart[value];\n\n            const hasUnmetCondition = roleRules.some((item) => {\n                const role = roles[item.roleName];\n                return (item.shouldHave && !role.permissions.includes(item.permission)) || (!item.shouldHave && role.permissions.includes(item.permission));\n            });\n\n            yield {value, allConditionsAreMet: !hasUnmetCondition};\n        }\n    }\n}\n\nfunction addPermissionToRole(permission, role) {\n    if (!role.permissions.includes(permission)) {\n        role.permissions.push(permission);\n    }\n}\n\nfunction removePermissionFromRole(permission, role) {\n    const permissionIndex = role.permissions.indexOf(permission);\n    if (permissionIndex !== -1) {\n        role.permissions.splice(permissionIndex, 1);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\n/**\n * A button which, when clicked, performs an action and displays\n * its outcome as either success, or failure accompanied by the\n * `message` property of the `err` object.\n */\nexport default class RequestButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * TD to assign to the form\n         */\n        id: PropTypes.string,\n\n        /**\n         * The action to be called to carry out the request.\n         */\n        requestAction: PropTypes.func.isRequired,\n\n        /**\n         * A component that displays help text for the request button.\n         *\n         * Typically, this will be a <FormattedMessage/>.\n         */\n        helpText: PropTypes.element,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        loadingText: PropTypes.string,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        buttonText: PropTypes.element.isRequired,\n\n        /**\n         * The element to display as the field label.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        label: PropTypes.element,\n\n        /**\n         * True if the button form control should be disabled, otherwise false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * True if the config needs to be saved before running the request, otherwise false.\n         *\n         * If set to true, the action provided in the `saveConfigAction` property will be\n         * called before the action provided in the `requestAction` property, with the later\n         * only being called if the former is successful.\n         */\n        saveNeeded: PropTypes.bool,\n\n        /**\n         * Action to be called to save the config, if saveNeeded is set to true.\n         */\n        saveConfigAction: PropTypes.func,\n\n        /**\n         * True if the success message should be show when the request completes successfully,\n         * otherwise false.\n         */\n        showSuccessMessage: PropTypes.bool,\n\n        /**\n         * The message to show when the request completes successfully.\n         */\n        successMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the success message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the success message.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * The message to show when the request returns an error.\n         */\n        errorMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the error message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the error message.\n             *\n             * The placeholder {error} may be used to include the error message returned\n             * by the server in response to the failed request.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * True if the {error} placeholder for the `errorMessage` property should include both\n         * the `message` and `detailed_error` properties of the error returned from the server,\n         * otherwise false to include only the `message` property.\n         */\n        includeDetailedError: PropTypes.bool,\n\n        /**\n         * An element to display adjacent to the request button.\n         */\n        alternativeActionElement: PropTypes.element,\n    }\n\n    static defaultProps = {\n        id: null,\n        disabled: false,\n        saveNeeded: false,\n        showSuccessMessage: true,\n        includeDetailedError: false,\n        successMessage: {\n            id: t('admin.requestButton.requestSuccess'),\n            defaultMessage: 'Test Successful',\n        },\n        errorMessage: {\n            id: t('admin.requestButton.requestFailure'),\n            defaultMessage: 'Test Failure: {error}',\n        },\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            busy: false,\n            fail: null,\n            success: false,\n        };\n    }\n\n    handleRequest = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            busy: true,\n            fail: null,\n            success: false,\n        });\n\n        const doRequest = () => { //eslint-disable-line func-style\n            this.props.requestAction(\n                () => {\n                    this.setState({\n                        busy: false,\n                        success: true,\n                    });\n                },\n                (err) => {\n                    let errMsg = err.message;\n                    if (this.props.includeDetailedError && err.detailed_error) {\n                        errMsg += ' - ' + err.detailed_error;\n                    }\n\n                    this.setState({\n                        busy: false,\n                        fail: errMsg,\n                    });\n                },\n            );\n        };\n\n        if (this.props.saveNeeded) {\n            this.props.saveConfigAction(doRequest);\n        } else {\n            doRequest();\n        }\n    }\n\n    render() {\n        let message = null;\n        if (this.state.fail) {\n            message = (\n                <div>\n                    <div className='alert alert-warning'>\n                        <WarningIcon/>\n                        <FormattedMessage\n                            id={this.props.errorMessage.id}\n                            defaultMessage={this.props.errorMessage.defaultMessage}\n                            values={{\n                                error: this.state.fail,\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        } else if (this.state.success && this.props.showSuccessMessage) {\n            message = (\n                <div>\n                    <div className='alert alert-success'>\n                        <SuccessIcon/>\n                        <FormattedMessage\n                            id={this.props.successMessage.id}\n                            defaultMessage={this.props.successMessage.defaultMessage}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        let widgetClassNames = 'col-sm-8';\n        let label = null;\n        if (this.props.label) {\n            label = (\n                <label\n                    className='control-label col-sm-4'\n                >\n                    {this.props.label}\n                </label>\n            );\n        } else {\n            widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;\n        }\n\n        return (\n            <div\n                className='form-group'\n                id={this.props.id}\n            >\n                {label}\n                <div className={widgetClassNames}>\n                    <div>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.handleRequest}\n                            disabled={this.props.disabled}\n                        >\n                            <LoadingWrapper\n                                loading={this.state.busy}\n                                text={this.props.loadingText || Utils.localizeMessage('admin.requestButton.loading', ' Loading...')}\n                            >\n                                {this.props.buttonText}\n                            </LoadingWrapper>\n                        </button>\n                        {this.props.alternativeActionElement}\n                        {message}\n                    </div>\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting';\n\nexport default class DropdownSetting extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    }\n\n    static defaultProps = {\n        isDisabled: false,\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <option\n                    value={value}\n                    key={value}\n                >\n                    {text}\n                </option>,\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <select\n                    data-testid={this.props.id + 'dropdown'}\n                    className='form-control'\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                >\n                    {options}\n                </select>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\n\nimport FormError from 'components/form_error';\n\nimport Setting from './setting';\n\nexport default class MultiSelectSetting extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        selected: PropTypes.array.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n        noResultText: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {error: false};\n    }\n\n    handleChange = (newValue) => {\n        const values = newValue.map((n) => {\n            return n.value;\n        });\n\n        this.props.onChange(this.props.id, values);\n        this.setState({error: false});\n    }\n\n    calculateValue = () => {\n        return this.props.selected.reduce((values, item) => {\n            const found = this.props.values.find((e) => {\n                return e.value === item;\n            });\n            if (found !== null) {\n                values.push(found);\n            }\n            return values;\n        }, []);\n    };\n\n    getOptionLabel = ({text}) => text;\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <ReactSelect\n                    id={this.props.id}\n                    isMulti={true}\n                    getOptionLabel={this.getOptionLabel}\n                    options={this.props.values}\n                    delimiter={','}\n                    clearable={false}\n                    isDisabled={this.props.disabled || this.props.setByEnv}\n                    noResultsText={this.props.noResultText}\n                    onChange={this.handleChange}\n                    value={this.calculateValue()}\n                />\n                <FormError error={this.state.error}/>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Setting from './setting';\n\ninterface Props {\n    id: string;\n    label: React.ReactNode;\n    values: Array<{ text: string; value: string }>;\n    value: string;\n    setByEnv: boolean;\n    disabled?: boolean;\n    helpText?: React.ReactNode;\n    onChange(id: string, value: any): void;\n}\nexport default class RadioSetting extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        disabled: false,\n    };\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(this.props.id, e.target.value);\n    };\n\n    render(): JSX.Element {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <div\n                    className='radio'\n                    key={value}\n                >\n                    <label>\n                        <input\n                            type='radio'\n                            value={value}\n                            name={this.props.id}\n                            checked={value === this.props.value}\n                            onChange={this.handleChange}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        />\n                        {text}\n                    </label>\n                </div>,\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                {options}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport ColorInput from 'components/color_input';\n\nimport Setting from './setting';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    helpText?: React.ReactNode;\n    value: string;\n    onChange?: (id: string, color: string) => void;\n    disabled?: boolean;\n}\n\nexport default class ColorSetting extends React.PureComponent<Props> {\n    private handleChange = (color: string) => {\n        if (this.props.onChange) {\n            this.props.onChange(this.props.id, color);\n        }\n    }\n\n    public render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <ColorInput\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    isDisabled={this.props.disabled}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SetByEnv from './set_by_env';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    placeholder?: string;\n    value: string;\n    onChange: (id: string, s: string) => void;\n    disabled: boolean;\n    setByEnv: boolean;\n    disabledText?: React.ReactNode;\n    helpText: React.ReactNode;\n    regenerateText: React.ReactNode;\n    regenerateHelpText?: React.ReactNode;\n}\n\nexport default class GeneratedSetting extends React.PureComponent<Props> {\n    public static get defaultProps() {\n        return {\n            disabled: false,\n            regenerateText: (\n                <FormattedMessage\n                    id='admin.regenerate'\n                    defaultMessage='Regenerate'\n                />\n            ),\n        };\n    }\n\n    private regenerate = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        this.props.onChange(this.props.id, crypto.randomBytes(256).toString('base64').substring(0, 32));\n    }\n\n    public render() {\n        let disabledText = null;\n        if (this.props.disabled && this.props.disabledText) {\n            disabledText = (\n                <div className='admin-console__disabled-text'>\n                    {this.props.disabledText}\n                </div>\n            );\n        }\n\n        let regenerateHelpText = null;\n        if (this.props.regenerateHelpText) {\n            regenerateHelpText = (\n                <div className='help-text'>\n                    {this.props.regenerateHelpText}\n                </div>\n            );\n        }\n\n        let text: React.ReactNode = this.props.value;\n        if (!text) {\n            text = (\n                <span className='placeholder-text'>{this.props.placeholder}</span>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={this.props.id}\n                >\n                    {this.props.label}\n                </label>\n                <div className='col-sm-8'>\n                    <div\n                        className='form-control disabled'\n                        id={this.props.id}\n                    >\n                        {text}\n                    </div>\n                    {disabledText}\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                    <div className='help-text'>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            onClick={this.regenerate}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        >\n                            {this.props.regenerateText}\n                        </button>\n                    </div>\n                    {regenerateHelpText}\n                    {this.props.setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport Setting from 'components/admin_console/setting';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class UserAutocompleteSetting extends React.PureComponent {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.string,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n            actions: PropTypes.shape({\n                autocompleteUsers: PropTypes.func.isRequired,\n            }),\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.userSuggestionProviders = [new GenericUserProvider(props.actions.autocompleteUsers)];\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    handleUserSelected = (user) => {\n        this.props.onChange(this.props.id, user.username);\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div\n                    className='admin-setting-user__dropdown'\n                >\n                    <SuggestionBox\n                        id={'admin_user_setting_' + this.props.id}\n                        className='form-control'\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        onChange={this.handleChange}\n                        onItemSelected={this.handleUserSelected}\n                        listComponent={SuggestionList}\n                        listStyle='bottom'\n                        providers={this.userSuggestionProviders}\n                        disabled={this.props.disabled}\n                        requiredCharacters={0}\n                        openOnFocus={true}\n                    />\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators} from 'redux';\n\nimport {autocompleteUsers} from 'actions/user_actions';\n\nimport UserAutocompleteSetting from './user_autocomplete_setting';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autocompleteUsers,\n        }, dispatch),\n    };\n}\nexport default connect(null, mapDispatchToProps)(UserAutocompleteSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {JobTypes} from 'matterfoss-redux/action_types';\nimport {Client4} from 'matterfoss-redux/client';\nimport {General} from '../constants';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\nimport {JobType, Job} from 'matterfoss-redux/types/jobs';\n\nimport {bindClientFunc} from './helpers';\nexport function createJob(job: Job): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.createJob,\n        onRequest: JobTypes.CREATE_JOB_REQUEST,\n        onSuccess: [JobTypes.RECEIVED_JOB, JobTypes.CREATE_JOB_SUCCESS],\n        onFailure: JobTypes.CREATE_JOB_FAILURE,\n        params: [\n            job,\n        ],\n    });\n}\n\nexport function getJob(id: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getJob,\n        onRequest: JobTypes.GET_JOB_REQUEST,\n        onSuccess: [JobTypes.RECEIVED_JOB, JobTypes.GET_JOB_SUCCESS],\n        onFailure: JobTypes.GET_JOB_FAILURE,\n        params: [\n            id,\n        ],\n    });\n}\n\nexport function getJobs(page = 0, perPage: number = General.JOBS_CHUNK_SIZE): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getJobs,\n        onRequest: JobTypes.GET_JOBS_REQUEST,\n        onSuccess: [JobTypes.RECEIVED_JOBS, JobTypes.GET_JOBS_SUCCESS],\n        onFailure: JobTypes.GET_JOBS_FAILURE,\n        params: [\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function getJobsByType(type: JobType, page = 0, perPage: number = General.JOBS_CHUNK_SIZE): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getJobsByType,\n        onRequest: JobTypes.GET_JOBS_REQUEST,\n        onSuccess: [JobTypes.RECEIVED_JOBS, JobTypes.RECEIVED_JOBS_BY_TYPE, JobTypes.GET_JOBS_SUCCESS],\n        onFailure: JobTypes.GET_JOBS_FAILURE,\n        params: [\n            type,\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function cancelJob(job: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.cancelJob,\n        onRequest: JobTypes.CANCEL_JOB_REQUEST,\n        onSuccess: JobTypes.CANCEL_JOB_SUCCESS,\n        onFailure: JobTypes.CANCEL_JOB_FAILURE,\n        params: [\n            job,\n        ],\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\n\nimport {JobType, Job, JobsByType} from 'matterfoss-redux/types/jobs';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {IDMappedObjects} from 'matterfoss-redux/types/utilities';\n\nexport function getAllJobs(state: GlobalState): IDMappedObjects<Job> {\n    return state.entities.jobs.jobs;\n}\n\nexport function getJobsByType(state: GlobalState): JobsByType {\n    return state.entities.jobs.jobsByTypeList;\n}\n\nexport function makeGetJobsByType(type: JobType): (state: GlobalState) => Job[] {\n    return createSelector(\n        getJobsByType,\n        (jobsByType) => {\n            return jobsByType[type] || [];\n        },\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {JobStatuses, exportFormats, JobTypes} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport './table.scss';\n\nclass JobTable extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Used for formatting dates\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Array of jobs\n         */\n        jobs: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Function called when displaying extra text.\n         */\n        getExtraInfoText: PropTypes.func,\n\n        /**\n         * Grey buttons out when disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Help text under the create job button\n         */\n        createJobHelpText: PropTypes.element.isRequired,\n\n        /**\n         * Button text to create a new job\n         */\n        createJobButtonText: PropTypes.element.isRequired,\n\n        /**\n         * The type of jobs to include in this table.\n         */\n        jobType: PropTypes.string.isRequired,\n\n        /**\n         * A variable set in config.json to determine if results can be downloaded or not.\n         * Note that there is NO front-end associated with this setting due to security.\n         * Only the person with access to the config.json file can enable this option.\n         */\n        downloadExportResults: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getJobsByType: PropTypes.func.isRequired,\n            cancelJob: PropTypes.func.isRequired,\n            createJob: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Allows for custom styles on the job table component\n         */\n        className: PropTypes.string,\n\n        /**\n         * Hide the job creation button. This is useful if you want to place the button elsewhere on your page or hide it.\n         */\n        hideJobCreateButton: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.interval = null;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => this.setState({loading: false}),\n        );\n\n        this.interval = setInterval(this.reload, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    getDownloadLink = (job) => {\n        if (job.data?.is_downloadable === 'true' && parseInt(job.data?.messages_exported, 10) > 0 && job.data?.export_type !== exportFormats.EXPORT_FORMAT_GLOBALRELAY) { // eslint-disable-line camelcase\n            return (\n                <a\n                    key={job.id}\n                    href={`${Client4.getJobsRoute()}/${job.id}/download`}\n                    target='_blank'\n                    rel='noopener noreferrer'\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.downloadLink'\n                        defaultMessage='Download'\n                    />\n                </a>\n            );\n        }\n\n        return '--';\n    }\n\n    getStatus = (job) => {\n        const formatMessage = this.props.intl.formatMessage;\n        if (job.status === JobStatuses.PENDING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusPending'\n                        defaultMessage='Pending'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusInProgress'\n                        defaultMessage='In Progress'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.SUCCESS) {\n            return (\n                <span\n                    className='status-icon-success'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusSuccess'\n                        defaultMessage='Success'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.WARNING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusWarning'\n                        defaultMessage='Warning'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.ERROR) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusError'\n                        defaultMessage='Error'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceling'\n                        defaultMessage='Canceling...'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCELED) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceled'\n                        defaultMessage='Canceled'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <span title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}>{job.status}</span>\n        );\n    }\n\n    getExtraInfoText = (job) => {\n        if (job.data && job.data.error && job.data.error.length > 0) {\n            return <span title={job.data.error}>{job.data.error}</span>;\n        }\n\n        if (this.props.getExtraInfoText) {\n            return this.props.getExtraInfoText(job);\n        }\n\n        return <span/>;\n    }\n\n    getRunLength = (job) => {\n        let millis = job.last_activity_at - job.start_at;\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            const runningMillis = Date.now() - job.start_at;\n            if (runningMillis > millis) {\n                millis = runningMillis;\n            }\n        }\n\n        let lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';\n\n        if (job.last_activity_at > 0) {\n            lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') +\n                this.props.intl.formatDate(new Date(job.last_activity_at), {\n                    year: 'numeric',\n                    month: 'short',\n                    day: '2-digit',\n                }) + ' - ' +\n                this.props.intl.formatTime(new Date(job.last_activity_at), {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                });\n        }\n\n        var seconds = Math.round(millis / 1000);\n        var minutes = Math.round(millis / (1000 * 60));\n\n        if (millis <= 0 || job.status === JobStatuses.CANCELED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        if (seconds <= 120) {\n            return (\n                <span\n                    className='whitespace--nowrap'\n                    title={lastActivity}\n                >\n                    {seconds + Utils.localizeMessage('admin.jobTable.runLengthSeconds', ' seconds')}\n                </span>\n            );\n        }\n\n        return (\n            <span\n                className='whitespace--nowrap'\n                title={lastActivity}\n            >\n                {minutes + Utils.localizeMessage('admin.jobTable.runLengthMinutes', ' minutes')}\n            </span>\n        );\n    }\n\n    getFinishAt = (status, millis) => {\n        if (millis === 0 || status === JobStatuses.PENDING || status === JobStatuses.IN_PROGRESS || status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        const date = new Date(millis);\n\n        return (\n            <span className='whitespace--nowrap'>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    reload = () => {\n        this.setState({loading: true});\n\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            },\n        );\n    };\n\n    handleCancelJob = async (e) => {\n        e.preventDefault();\n        const jobId = e.currentTarget.getAttribute('data-job-id');\n        await this.props.actions.cancelJob(jobId);\n        this.reload();\n    };\n\n    handleCreateJob = async (e) => {\n        e.preventDefault();\n        const job = {\n            type: this.props.jobType,\n        };\n\n        await this.props.actions.createJob(job);\n        this.reload();\n    };\n\n    getCancelButton = (job) => {\n        const formatMessage = this.props.intl.formatMessage;\n        let cancelButton = null;\n\n        if (!this.props.disabled && (job.status === JobStatuses.PENDING || job.status === JobStatuses.IN_PROGRESS)) {\n            cancelButton = (\n                <span\n                    data-job-id={job.id}\n                    onClick={this.handleCancelJob}\n                    className='job-table__cancel-button'\n                    title={formatMessage({id: 'admin.jobTable.cancelButton', defaultMessage: 'Cancel'})}\n                >\n                    {'×'}\n                </span>\n            );\n        }\n\n        return cancelButton;\n    }\n\n    render() {\n        const showFilesColumn = this.props.jobType === JobTypes.MESSAGE_EXPORT && this.props.downloadExportResults;\n        var items = this.props.jobs.map((job) => {\n            return (\n                <tr key={job.id}>\n                    <td\n                        width='30px'\n                        className='whitespace--nowrap text-center'\n                    >\n                        {this.getCancelButton(job)}\n                    </td>\n                    <td className='whitespace--nowrap'>{this.getStatus(job)}</td>\n                    {showFilesColumn &&\n                        <td className='whitespace--nowrap'>{this.getDownloadLink(job)}</td>\n                    }\n                    <td className='whitespace--nowrap'>{this.getFinishAt(job.status, job.last_activity_at)}</td>\n                    <td className='whitespace--nowrap'>{this.getRunLength(job)}</td>\n                    <td>{this.getExtraInfoText(job)}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className={classNames('job-table__panel', this.props.className)}>\n                <div className='job-table__create-button'>\n                    {\n                        !this.props.hideJobCreateButton &&\n                        <div>\n                            <button\n                                type='button'\n                                className='btn btn-default'\n                                onClick={this.handleCreateJob}\n                                disabled={this.props.disabled}\n                            >\n                                {this.props.createJobButtonText}\n                            </button>\n                        </div>\n                    }\n                    <div className='help-text'>\n                        {this.props.createJobHelpText}\n                    </div>\n                </div>\n                <div className='job-table__table'>\n                    <table\n                        className='table'\n                        data-testid='jobTable'\n                    >\n                        <thead>\n                            <tr>\n                                <th width='30px'/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerStatus'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                {showFilesColumn &&\n                                    <th>\n                                        <FormattedMessage\n                                            id='admin.jobTable.headerFiles'\n                                            defaultMessage='Files'\n                                        />\n                                    </th>\n                                }\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerFinishAt'\n                                        defaultMessage='Finish Time'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerRunTime'\n                                        defaultMessage='Run Time'\n                                    />\n                                </th>\n                                <th colSpan='3'>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerExtraInfo'\n                                        defaultMessage='Details'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(JobTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getJobsByType, createJob, cancelJob} from 'matterfoss-redux/actions/jobs';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/admin';\nimport * as Selectors from 'matterfoss-redux/selectors/entities/jobs';\n\nimport Table from './table.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        jobs: Selectors.makeGetJobsByType(ownProps.jobType)(state),\n        downloadExportResults: getConfig(state).MessageExportSettings.DownloadExportResults,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getJobsByType,\n            createJob,\n            cancelJob,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting';\n\nexport default class FileUploadSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            uploadingText: PropTypes.node,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            fileType: PropTypes.string.isRequired,\n            error: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileName: null,\n            serverError: props.error,\n        };\n        this.fileInputRef = React.createRef();\n        this.uploadButtonRef = React.createRef();\n    }\n\n    handleChange = () => {\n        const files = this.fileInputRef.current.files;\n        if (files && files.length > 0) {\n            this.setState({fileSelected: true, fileName: files[0].name});\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        $(this.uploadButtonRef.current).button('loading');\n        this.props.onSubmit(this.props.id, this.fileInputRef.current.files[0], (error) => {\n            $(this.uploadButtonRef.current).button('reset');\n            if (error) {\n                Utils.clearFileInput(this.fileInputRef.current);\n            }\n        });\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.file_upload.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='file__upload'>\n                        <button\n                            type='button'\n                            className='btn btn-default'\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.file_upload.chooseFile'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref={this.fileInputRef}\n                            type='file'\n                            disabled={this.props.disabled}\n                            accept={this.props.fileType}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        type='button'\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        ref={this.uploadButtonRef}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`}\n                    >\n                        <FormattedMessage\n                            id='admin.file_upload.uploadFile'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text m-0'>\n                        {fileName}\n                    </div>\n                    {serverError}\n                </div>\n            </Setting>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting';\n\nexport default class RemoveFileSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            removeButtonText: PropTypes.node.isRequired,\n            removingText: PropTypes.node,\n            fileName: PropTypes.string.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.removeButtonRef = React.createRef();\n    }\n\n    handleRemove = (e) => {\n        e.preventDefault();\n\n        $(this.removeButtonRef.current).button('loading');\n        this.props.onSubmit(this.props.id, () => {\n            $(this.removeButtonRef.current).button('reset');\n        });\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='help-text remove-filename'>\n                        {this.props.fileName}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        ref={this.removeButtonRef}\n                        disabled={this.props.disabled}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`}\n                    >\n                        {this.props.removeButtonText}\n                    </button>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport marked from 'marked';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage, {CustomRenderer} from 'components/formatted_markdown_message';\n\nexport default class SchemaText extends React.PureComponent {\n    static propTypes = {\n        isMarkdown: PropTypes.bool,\n        isTranslated: PropTypes.bool,\n        text: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]).isRequired,\n        textDefault: PropTypes.string,\n        textValues: PropTypes.object,\n    };\n\n    static defaultProps = {\n        isTranslated: true,\n    };\n\n    renderTranslated = () => {\n        const {\n            isMarkdown,\n            text,\n            textDefault,\n            textValues,\n        } = this.props;\n\n        if (typeof text === 'object') {\n            return text;\n        }\n\n        if (isMarkdown) {\n            return (\n                <FormattedMarkdownMessage\n                    id={text}\n                    defaultMessage={textDefault}\n                    values={textValues}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id={text}\n                values={textValues}\n                defaultMessage={textDefault}\n            />\n        );\n    };\n\n    renderUntranslated = () => {\n        if (this.props.isMarkdown) {\n            const html = marked(this.props.text, {\n                breaks: true,\n                sanitize: true,\n                renderer: new CustomRenderer(),\n            });\n\n            return <span dangerouslySetInnerHTML={{__html: html}}/>;\n        }\n\n        return <span>{this.props.text}</span>;\n    };\n\n    render() {\n        return this.props.isTranslated ? this.renderTranslated() : this.renderUntranslated();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport Constants from 'utils/constants';\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport * as Utils from 'utils/utils.jsx';\nimport RequestButton from 'components/admin_console/request_button/request_button';\nimport BooleanSetting from 'components/admin_console/boolean_setting';\nimport TextSetting from 'components/admin_console/text_setting';\nimport DropdownSetting from 'components/admin_console/dropdown_setting.jsx';\nimport MultiSelectSetting from 'components/admin_console/multiselect_settings.jsx';\nimport RadioSetting from 'components/admin_console/radio_setting';\nimport ColorSetting from 'components/admin_console/color_setting';\nimport GeneratedSetting from 'components/admin_console/generated_setting';\nimport UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport JobsTable from 'components/admin_console/jobs';\nimport FileUploadSetting from 'components/admin_console/file_upload_setting.jsx';\nimport RemoveFileSetting from 'components/admin_console/remove_file_setting.jsx';\nimport SchemaText from 'components/admin_console/schema_text';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AdminHeader from 'components/widgets/admin_console/admin_header';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport Setting from './setting';\n\nimport './schema_admin_settings.scss';\n\nexport default class SchemaAdminSettings extends React.PureComponent {\n    static propTypes = {\n        config: PropTypes.object,\n        environmentConfig: PropTypes.object,\n        setNavigationBlocked: PropTypes.func,\n        schema: PropTypes.object,\n        roles: PropTypes.object,\n        license: PropTypes.object,\n        editRole: PropTypes.func,\n        updateConfig: PropTypes.func.isRequired,\n        isDisabled: PropTypes.bool,\n        consoleAccess: PropTypes.object,\n        cloud: PropTypes.object,\n        isCurrentUserSystemAdmin: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.isPlugin = false;\n\n        this.saveActions = [];\n\n        this.buildSettingFunctions = {\n            [Constants.SettingsTypes.TYPE_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_LONG_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_COLOR]: this.buildColorSetting,\n            [Constants.SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,\n            [Constants.SettingsTypes.TYPE_PERMISSION]: this.buildPermissionSetting,\n            [Constants.SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,\n            [Constants.SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,\n            [Constants.SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,\n            [Constants.SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,\n            [Constants.SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,\n            [Constants.SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,\n            [Constants.SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,\n            [Constants.SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,\n            [Constants.SettingsTypes.TYPE_FILE_UPLOAD]: this.buildFileUploadSetting,\n            [Constants.SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting,\n        };\n        this.state = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n            customComponentWrapperClass: '',\n            confirmNeededId: '',\n            showConfirmId: '',\n            clientWarning: '',\n        };\n        this.errorMessageRef = React.createRef();\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...SchemaAdminSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (this.state.confirmNeededId) {\n            this.setState({\n                showConfirmId: this.state.confirmNeededId,\n            });\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {\n            const settings = (this.props.schema && this.props.schema.settings) || [];\n            const rolesBinding = settings.reduce((acc, val) => {\n                if (val.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    acc[val.permissions_mapping_name] = this.state[val.key].toString();\n                }\n                return acc;\n            }, {});\n            const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);\n\n            let success = true;\n\n            await Promise.all(Object.values(updatedRoles).map(async (item) => {\n                try {\n                    await this.props.editRole(item);\n                } catch (err) {\n                    success = false;\n                    this.setState({\n                        saving: false,\n                        serverError: err.message,\n                    });\n                }\n            }));\n\n            if (!success) {\n                return;\n            }\n        }\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {\n            this.doSubmit(SchemaAdminSettings.getStateFromConfig);\n        } else {\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.setNavigationBlocked(false);\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            let settings = [];\n\n            if (schema.settings) {\n                settings = schema.settings;\n            } else if (schema.sections) {\n                schema.sections.map((section) => section.settings).forEach((sectionSettings) => settings.push(...sectionSettings));\n            }\n\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    this.setConfigValue(config, setting.key, null);\n                    return;\n                }\n\n                let value = this.getSettingValue(setting);\n                const previousValue = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigSave) {\n                    value = setting.onConfigSave(value, previousValue);\n                }\n\n                this.setConfigValue(config, setting.key, value);\n            });\n\n            if (schema.onConfigSave) {\n                return schema.onConfigSave(config, this.props.config);\n            }\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema, roles) {\n        let state = {};\n\n        if (schema) {\n            let settings = [];\n\n            if (schema.settings) {\n                settings = schema.settings;\n            } else if (schema.sections) {\n                schema.sections.map((section) => section.settings).forEach((sectionSettings) => settings.push(...sectionSettings));\n            }\n\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    try {\n                        state[setting.key] = mappingValueFromRoles(setting.permissions_mapping_name, roles) === 'true';\n                    } catch (e) {\n                        state[setting.key] = false;\n                    }\n                    return;\n                }\n\n                let value = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigLoad) {\n                    value = setting.onConfigLoad(value, config);\n                }\n\n                state[setting.key] = value == null ? setting.default : value;\n            });\n\n            if (schema.onConfigLoad) {\n                state = {...state, ...schema.onConfigLoad(config)};\n            }\n        }\n\n        return state;\n    }\n\n    getSetting(key) {\n        for (const setting of this.props.schema.settings) {\n            if (setting.key === key) {\n                return setting;\n            }\n        }\n\n        return null;\n    }\n\n    getSettingValue(setting) {\n        // Force boolean values to false when disabled.\n        if (setting.type === Constants.SettingsTypes.TYPE_BOOL) {\n            if (this.isDisabled(setting)) {\n                return false;\n            }\n        }\n        if (setting.type === Constants.SettingsTypes.TYPE_TEXT && setting.dynamic_value) {\n            return setting.dynamic_value(this.state[setting.key], this.props.config, this.state, this.props.license);\n        }\n\n        return this.state[setting.key];\n    }\n\n    renderTitle = () => {\n        if (!this.props.schema) {\n            return '';\n        }\n        if (this.props.schema.translate === false) {\n            return (\n                <AdminHeader>\n                    {this.props.schema.name || this.props.schema.id}\n                </AdminHeader>\n            );\n        }\n        return (\n            <FormattedAdminHeader\n                id={this.props.schema.name || this.props.schema.id}\n                defaultMessage={this.props.schema.name_default || this.props.schema.id}\n            />\n        );\n    };\n\n    renderBanner = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (setting.label.translate === false) {\n            return <span>{setting.label}</span>;\n        }\n\n        if (typeof setting.label === 'string') {\n            if (setting.label_markdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={setting.label}\n                        values={setting.label_values}\n                        defaultMessage={setting.label_default}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={setting.label}\n                    defaultMessage={setting.label_default}\n                    values={setting.label_values}\n                />\n            );\n        }\n        return setting.label;\n    }\n\n    renderHelpText = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (!setting.help_text) {\n            return null;\n        }\n\n        let helpText;\n        let isMarkdown;\n        let helpTextValues;\n        let helpTextDefault;\n        if (setting.disabled_help_text && this.isDisabled(setting)) {\n            helpText = setting.disabled_help_text;\n            isMarkdown = setting.disabled_help_text_markdown;\n            helpTextValues = setting.disabled_help_text_values;\n            helpTextDefault = setting.disabled_help_text_default;\n        } else {\n            helpText = setting.help_text;\n            isMarkdown = setting.help_text_markdown;\n            helpTextValues = setting.help_text_values;\n            helpTextDefault = setting.help_text_default;\n        }\n\n        return (\n            <SchemaText\n                isMarkdown={isMarkdown}\n                isTranslated={setting.translate}\n                text={helpText}\n                textDefault={helpTextDefault}\n                textValues={helpTextValues}\n            />\n        );\n    }\n\n    renderLabel = (setting) => {\n        if (!this.props.schema) {\n            return '';\n        }\n\n        if (setting.translate === false) {\n            return setting.label;\n        }\n        return Utils.localizeMessage(setting.label, setting.label_default);\n    }\n\n    isDisabled = (setting) => {\n        const enterpriseReady = this.props.config.BuildEnterpriseReady === 'true';\n        if (typeof setting.isDisabled === 'function') {\n            return setting.isDisabled(this.props.config, this.state, this.props.license, enterpriseReady, this.props.consoleAccess, this.props.cloud, this.props.isCurrentUserSystemAdmin);\n        }\n        return Boolean(setting.isDisabled);\n    }\n\n    isHidden = (setting) => {\n        if (typeof setting.isHidden === 'function') {\n            return setting.isHidden(this.props.config, this.state, this.props.license);\n        }\n        return Boolean(setting.isHidden);\n    }\n\n    buildButtonSetting = (setting) => {\n        const handleRequestAction = (success, error) => {\n            const successCallback = (data) => {\n                const metadata = new Map(Object.entries(data));\n                const settings = (this.props.schema && this.props.schema.settings) || [];\n                settings.forEach((tsetting) => {\n                    if (tsetting.key && tsetting.setFromMetadataField) {\n                        const inputData = metadata.get(tsetting.setFromMetadataField);\n\n                        if (tsetting.type === Constants.SettingsTypes.TYPE_TEXT) {\n                            this.setState({[tsetting.key]: inputData, [`${tsetting.key}Error`]: null});\n                        } else if (tsetting.type === Constants.SettingsTypes.TYPE_FILE_UPLOAD) {\n                            if (this.buildSettingFunctions[tsetting.type] && this.buildSettingFunctions[tsetting.type](tsetting).props.onSetData) {\n                                this.buildSettingFunctions[tsetting.type](tsetting).props.onSetData(tsetting.key, inputData);\n                            }\n                        }\n                    }\n                });\n\n                if (success && typeof success === 'function') {\n                    success();\n                }\n            };\n\n            var sourceUrlKey = 'ServiceSettings.SiteURL';\n            if (setting.sourceUrlKey) {\n                sourceUrlKey = setting.sourceUrlKey;\n            }\n            setting.action(successCallback, error, this.state[sourceUrlKey]);\n        };\n\n        return (\n            <RequestButton\n                id={setting.key}\n                key={this.props.schema.id + '_text_' + setting.key}\n                requestAction={handleRequestAction}\n                helpText={this.renderHelpText(setting)}\n                loadingText={Utils.localizeMessage(setting.loading, setting.loading_default)}\n                buttonText={<span>{this.renderLabel(setting)}</span>}\n                showSuccessMessage={Boolean(setting.success_message)}\n                includeDetailedError={true}\n                disabled={this.isDisabled(setting)}\n                errorMessage={{\n                    id: setting.error_message,\n                    defaultMessage: setting.error_message_default,\n                }}\n                successMessage={setting.success_message && {\n                    id: setting.success_message,\n                    defaultMessage: setting.success_message_default,\n                }}\n            />\n        );\n    }\n\n    buildTextSetting = (setting) => {\n        let inputType = 'input';\n        if (setting.type === Constants.SettingsTypes.TYPE_NUMBER) {\n            inputType = 'number';\n        } else if (setting.type === Constants.SettingsTypes.TYPE_LONG_TEXT) {\n            inputType = 'textarea';\n        }\n\n        let value = this.state[setting.key] || '';\n        if (setting.dynamic_value) {\n            value = setting.dynamic_value(value, this.props.config, this.state, this.props.license);\n        }\n\n        return (\n            <TextSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                type={inputType}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                maxLength={setting.max_length}\n            />\n        );\n    }\n\n    buildColorSetting = (setting) => {\n        return (\n            <ColorSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBoolSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildPermissionSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handlePermissionChange}\n            />\n        );\n    }\n\n    buildDropdownSetting = (setting) => {\n        const enterpriseReady = this.props.config.BuildEnterpriseReady === 'true';\n        const options = [];\n        setting.options.forEach((option) => {\n            if (!option.isHidden || !option.isHidden(this.props.config, this.state, this.props.license, enterpriseReady)) {\n                options.push(option);\n            }\n        });\n\n        const values = options.map((o) => ({value: o.value, text: Utils.localizeMessage(o.display_name, o.display_name_default)}));\n        const selectedValue = this.state[setting.key] || values[0].value;\n\n        let selectedOptionForHelpText = null;\n        for (const option of options) {\n            if (option.help_text && option.value === selectedValue) {\n                selectedOptionForHelpText = option;\n                break;\n            }\n        }\n\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_dropdown_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(selectedOptionForHelpText || setting)}\n                value={selectedValue}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildLanguageSetting = (setting) => {\n        const locales = I18n.getAllLanguages();\n        const values = Object.keys(locales).map((l) => {\n            return {value: locales[l].value, text: locales[l].name, order: locales[l].order};\n        }).sort((a, b) => a.order - b.order);\n\n        if (setting.multiple) {\n            const noResultText = (\n                <FormattedMessage\n                    id={setting.no_result}\n                    defaultMessage={setting.no_result_default}\n                />\n            );\n\n            return (\n                <MultiSelectSetting\n                    key={this.props.schema.id + '_language_' + setting.key}\n                    id={setting.key}\n                    label={this.renderLabel(setting)}\n                    values={values}\n                    helpText={this.renderHelpText(setting)}\n                    selected={(this.state[setting.key] && this.state[setting.key].split(',')) || []}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                    onChange={(changedId, value) => this.handleChange(changedId, value.join(','))}\n                    noResultText={noResultText}\n                />\n            );\n        }\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_language_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                values={values}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildRadioSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: o.display_name}));\n\n        return (\n            <RadioSetting\n                key={this.props.schema.id + '_radio_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0]}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBannerSetting = (setting) => {\n        if (this.isDisabled(setting)) {\n            return null;\n        }\n        return (\n            <div\n                className={'banner ' + setting.banner_type}\n                key={this.props.schema.id + '_bool_' + setting.key}\n            >\n                <div className='banner__content'>\n                    <span>\n                        { setting.banner_type === 'warning' ? <WarningIcon additionalClassName='banner__icon'/> : null}\n                        {this.renderBanner(setting)}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n\n    buildGeneratedSetting = (setting) => {\n        return (\n            <GeneratedSetting\n                key={this.props.schema.id + '_generated_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                regenerateHelpText={setting.regenerate_help_text}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleGeneratedChange}\n            />\n        );\n    }\n\n    handleGeneratedChange = (id, s) => {\n        this.handleChange(id, s.replace('+', '-').replace('/', '_'));\n    }\n\n    handleChange = (id, value, confirm = false, doSubmit = false, warning = false) => {\n        const saveNeeded = this.state.saveNeeded === 'permissions' ? 'both' : 'config';\n        const clientWarning = warning === false ? this.state.clientWarning : warning;\n\n        let confirmNeededId = confirm ? id : this.state.confirmNeededId;\n        if (id === this.state.confirmNeededId && !confirm) {\n            confirmNeededId = '';\n        }\n\n        this.setState({\n            saveNeeded,\n            confirmNeededId,\n            clientWarning,\n            [id]: value,\n        });\n\n        if (doSubmit) {\n            this.doSubmit(SchemaAdminSettings.getStateFromConfig);\n        }\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handlePermissionChange = (id, value) => {\n        let saveNeeded = 'permissions';\n        if (this.state.saveNeeded === 'config') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    buildUsernameSetting = (setting) => {\n        return (\n            <UserAutocompleteSetting\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default) || Utils.localizeMessage('search_bar.search', 'Search')}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildJobsTableSetting = (setting) => {\n        return (\n            <JobsTable\n                key={this.props.schema.id + '_jobstable_' + setting.key}\n                jobType={setting.job_type}\n                getExtraInfoText={setting.render_job}\n                disabled={this.isDisabled(setting)}\n                createJobButtonText={\n                    <FormattedMessage\n                        id={setting.label}\n                        defaultMessage={setting.label_default}\n                    />\n                }\n                createJobHelpText={\n                    <FormattedMarkdownMessage\n                        id={setting.help_text}\n                        defaultMessage={setting.help_text_default}\n                    />\n                }\n            />\n        );\n    }\n\n    buildFileUploadSetting = (setting) => {\n        const setData = (id, data) => {\n            const successCallback = (filename) => {\n                this.handleChange(id, filename);\n                this.setState({[setting.key]: filename, [`${setting.key}Error`]: null});\n            };\n            const errorCallback = (error) => {\n                this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n            };\n            setting.set_action(successCallback, errorCallback, data);\n        };\n\n        if (this.state[setting.key]) {\n            const removeFile = (id, callback) => {\n                const successCallback = () => {\n                    this.handleChange(setting.key, '');\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: null});\n                };\n                const errorCallback = (error) => {\n                    callback();\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n                };\n                setting.remove_action(successCallback, errorCallback);\n            };\n            return (\n                <RemoveFileSetting\n                    id={this.props.schema.id}\n                    key={this.props.schema.id + '_fileupload_' + setting.key}\n                    label={this.renderLabel(setting)}\n                    helpText={\n                        <FormattedMessage\n                            id={setting.remove_help_text}\n                            defaultMessage={setting.remove_help_text_default}\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage(setting.remove_button_text, setting.remove_button_text_default)}\n                    removingText={Utils.localizeMessage(setting.removing_text, setting.removing_text_default)}\n                    fileName={this.state[setting.key]}\n                    onSubmit={removeFile}\n                    onSetData={setData}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                />\n            );\n        }\n        const uploadFile = (id, file, callback) => {\n            const successCallback = (filename) => {\n                this.handleChange(id, filename);\n                this.setState({[setting.key]: filename, [`${setting.key}Error`]: null});\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            };\n            const errorCallback = (error) => {\n                if (callback && typeof callback === 'function') {\n                    callback(error.message);\n                }\n            };\n            setting.upload_action(file, successCallback, errorCallback);\n        };\n\n        return (\n            <FileUploadSetting\n                id={setting.key}\n                key={this.props.schema.id + '_fileupload_' + setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                uploadingText={Utils.localizeMessage(setting.uploading_text, setting.uploading_text_default)}\n                disabled={this.isDisabled(setting)}\n                fileType={setting.fileType}\n                onSubmit={uploadFile}\n                onSetData={setData}\n                error={this.state.idpCertificateFileError}\n                setByEnv={this.isSetByEnv(setting.key)}\n            />\n        );\n    }\n\n    buildCustomSetting = (setting) => {\n        const CustomComponent = setting.component;\n\n        const componentInstance = (\n            <CustomComponent\n                key={this.props.schema.id + '_custom_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key]}\n                disabled={this.isDisabled(setting)}\n                config={this.props.config}\n                license={this.props.license}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                registerSaveAction={this.registerSaveAction}\n                setSaveNeeded={this.setSaveNeeded}\n                unRegisterSaveAction={this.unRegisterSaveAction}\n                cancelSubmit={this.cancelSubmit}\n                showConfirm={this.state.showConfirmId === setting.key}\n            />);\n\n        // Show the plugin custom setting title\n        // consistently as other settings with the Setting component\n        if (setting.showTitle) {\n            return (\n                <Setting\n                    label={setting.label}\n                    inputId={setting.key}\n                    helpText={setting.helpText}\n                >\n                    {componentInstance}\n                </Setting>\n            );\n        }\n        return componentInstance;\n    }\n\n    unRegisterSaveAction = (saveAction) => {\n        const indexOfSaveAction = this.saveActions.indexOf(saveAction);\n        this.saveActions.splice(indexOfSaveAction, 1);\n    }\n\n    registerSaveAction = (saveAction) => {\n        this.saveActions.push(saveAction);\n    }\n\n    setSaveNeeded = () => {\n        this.setState({saveNeeded: 'config'});\n        this.props.setNavigationBlocked(true);\n    }\n\n    renderSettings = () => {\n        const schema = this.props.schema;\n\n        if (schema.settings) {\n            const settingsList = [];\n            if (schema.settings) {\n                schema.settings.forEach((setting) => {\n                    if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                        settingsList.push(this.buildSettingFunctions[setting.type](setting));\n                    }\n                });\n            }\n\n            let header;\n            if (schema.header) {\n                header = (\n                    <div className='banner'>\n                        <SchemaText\n                            text={schema.header}\n                            isMarkdown={true}\n                            isTranslated={this.props.schema.translate}\n                        />\n                    </div>\n                );\n            }\n\n            let footer;\n            if (schema.footer) {\n                footer = (\n                    <div className='banner'>\n                        <SchemaText\n                            text={schema.footer}\n                            isMarkdown={true}\n                            isTranslated={this.props.schema.translate}\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingsGroup container={false}>\n                    {header}\n                    {settingsList}\n                    {footer}\n                </SettingsGroup>\n            );\n        } else if (schema.sections) {\n            const sections = [];\n\n            schema.sections.forEach((section) => {\n                const settingsList = [];\n                if (section.settings) {\n                    section.settings.forEach((setting) => {\n                        if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                            settingsList.push(this.buildSettingFunctions[setting.type](setting));\n                        }\n                    });\n                }\n\n                let header;\n                if (section.header) {\n                    header = (\n                        <div className='banner'>\n                            <SchemaText\n                                text={section.header}\n                                isMarkdown={true}\n                                isTranslated={this.props.schema.translate}\n                            />\n                        </div>\n                    );\n                }\n\n                let footer;\n                if (section.footer) {\n                    footer = (\n                        <div className='banner'>\n                            <SchemaText\n                                text={section.footer}\n                                isMarkdown={true}\n                                isTranslated={this.props.schema.translate}\n                            />\n                        </div>\n                    );\n                }\n\n                sections.push(\n                    <div className={'config-section'}>\n                        <SettingsGroup\n                            show={true}\n                            title={section.title}\n                            subtitle={section.subtitle}\n                        >\n                            <div className={'section-body'}>\n                                {header}\n                                {settingsList}\n                                {footer}\n                            </div>\n                        </SettingsGroup>\n                    </div>,\n                );\n            });\n\n            return (\n                <div>\n                    {sections}\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    doSubmit = async (getStateFromConfig) => {\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        const {error} = await this.props.updateConfig(config);\n        if (error) {\n            this.setState({\n                serverError: error.message,\n                serverErrorId: error.id,\n            });\n        } else {\n            this.setState(getStateFromConfig(config));\n        }\n\n        if (this.handleSaved) {\n            this.handleSaved(config);\n        }\n\n        const results = [];\n        for (const saveAction of this.saveActions) {\n            results.push(saveAction());\n        }\n\n        const hasSaveActionError = await Promise.all(results).then((values) => values.some(((value) => value.error && value.error.message)));\n\n        const hasError = this.state.serverError || hasSaveActionError;\n        if (hasError) {\n            this.setState({saving: false});\n        } else {\n            this.setState({saving: false, saveNeeded: false, confirmNeededId: '', showConfirmId: '', clientWarning: ''});\n            this.props.setNavigationBlocked(false);\n        }\n    };\n\n    cancelSubmit = () => {\n        this.setState({\n            showConfirmId: '',\n        });\n    };\n\n    // Some path parts may contain periods (e.g. plugin ids), but path walking the configuration\n    // relies on splitting by periods. Use this pair of functions to allow such path parts.\n    //\n    // It is assumed that no path contains the symbol '+'.\n    static escapePathPart(pathPart) {\n        return pathPart.replace(/\\./g, '+');\n    }\n\n    static unescapePathPart(pathPart) {\n        return pathPart.replace(/\\+/g, '.');\n    }\n\n    static getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[SchemaAdminSettings.unescapePathPart(pathPart)];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = SchemaAdminSettings.unescapePathPart(pathParts[0]);\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(SchemaAdminSettings.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    hybridSchemaAndComponent = () => {\n        const schema = this.props.schema;\n        if (schema && schema.component && schema.settings) {\n            const CustomComponent = schema.component;\n            return (\n                <CustomComponent\n                    {...this.props}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n        return null;\n    }\n\n    render = () => {\n        const schema = this.props.schema;\n        if (schema && schema.component && !schema.settings) {\n            const CustomComponent = schema.component;\n            return (\n                <CustomComponent\n                    {...this.props}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n\n        if (!schema) {\n            return (\n                <div className={'wrapper--fixed'}>\n                    <AdminHeader>\n                        <FormattedMessage\n                            id='error.plugin_not_found.title'\n                            defaultMessage='Plugin Not Found'\n                        />\n                    </AdminHeader>\n                    <div className='admin-console__wrapper'>\n                        <div className='admin-console__content'>\n                            <p>\n                                <FormattedMessage\n                                    id='error.plugin_not_found.desc'\n                                    defaultMessage='The plugin you are looking for does not exist.'\n                                />\n                            </p>\n                            <Link\n                                to={'plugin_management'}\n                            >\n                                <FormattedMessage\n                                    id='admin.plugin.backToPlugins'\n                                    defaultMessage='Go back to the Plugins'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className={'wrapper--fixed ' + this.state.customComponentWrapperClass}>\n                {this.renderTitle()}\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <form\n                            className='form-horizontal'\n                            role='form'\n                            onSubmit={this.handleSubmit}\n                        >\n                            {this.renderSettings()}\n                        </form>\n                        {this.hybridSchemaAndComponent()}\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <div\n                        className='error-message'\n                        data-testid='errorMessage'\n                        ref={this.errorMessageRef}\n                        onMouseOver={this.openTooltip}\n                        onMouseOut={this.closeTooltip}\n                    >\n                        <FormError\n                            iconClassName='fa-exclamation-triangle'\n                            textClassName='has-warning'\n                            error={this.state.clientWarning}\n                        />\n\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                    <Overlay\n                        show={this.state.errorTooltip}\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        target={this.errorMessageRef.current}\n                    >\n                        <Tooltip id='error-tooltip' >\n                            {this.state.serverError}\n                        </Tooltip>\n                    </Overlay>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-disable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings.jsx';\n\n// No changes required to the base SchemaAdminSettings, except to inject custom props.\nconst CustomPluginSettings = SchemaAdminSettings;\n\nexport default CustomPluginSettings;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {Constants} from '../../../utils/constants';\nimport {t} from '../../../utils/i18n';\nimport SchemaAdminSettings from '../schema_admin_settings';\n\nexport default function getEnablePluginSetting(plugin) {\n    const escapedPluginId = SchemaAdminSettings.escapePathPart(plugin.id);\n    const pluginEnabledConfigKey = 'PluginSettings.PluginStates.' + escapedPluginId + '.Enable';\n\n    return {\n        type: Constants.SettingsTypes.TYPE_BOOL,\n        key: pluginEnabledConfigKey,\n        label: t('admin.plugin.enable_plugin'),\n        label_default: 'Enable Plugin: ',\n        help_text: t('admin.plugin.enable_plugin.help'),\n        help_text_default: 'When true, this plugin is enabled.',\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles';\nimport {appsEnabled} from 'matterfoss-redux/selectors/entities/apps';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport {getAdminConsoleCustomComponents} from 'selectors/admin_console';\nimport SchemaAdminSettings from '../schema_admin_settings';\nimport {it} from '../admin_definition';\n\nimport {appsPluginID} from 'utils/apps';\n\nimport CustomPluginSettings from './custom_plugin_settings.jsx';\nimport getEnablePluginSetting from './enable_plugin_setting';\n\nfunction makeGetPluginSchema() {\n    return createSelector(\n        (state, pluginId) => state.entities.admin.plugins[pluginId],\n        (state, pluginId) => getAdminConsoleCustomComponents(state, pluginId),\n        (state) => appsEnabled(state),\n        (plugin, customComponents, areAppsEnabled) => {\n            if (!plugin) {\n                return null;\n            }\n\n            const escapedPluginId = SchemaAdminSettings.escapePathPart(plugin.id);\n            const pluginEnabledConfigKey = 'PluginSettings.PluginStates.' + escapedPluginId + '.Enable';\n\n            let settings = [];\n            if (plugin.settings_schema && plugin.settings_schema.settings) {\n                settings = plugin.settings_schema.settings.map((setting) => {\n                    const key = setting.key.toLowerCase();\n                    let component = null;\n                    let bannerType = '';\n                    let type = setting.type;\n                    let displayName = setting.display_name;\n                    let isDisabled = it.any(it.stateIsFalse(pluginEnabledConfigKey), it.not(it.userHasWritePermissionOnResource('plugins')));\n\n                    if (customComponents[key]) {\n                        component = customComponents[key].component;\n                        type = Constants.SettingsTypes.TYPE_CUSTOM;\n                    } else if (setting.type === Constants.SettingsTypes.TYPE_CUSTOM) {\n                        // Show a warning banner to enable the plugin in order to display the custom component.\n                        type = Constants.SettingsTypes.TYPE_BANNER;\n                        displayName = localizeMessage('admin.plugin.customSetting.pluginDisabledWarning', 'In order to view this setting, enable the plugin and click Save.');\n                        bannerType = 'warning';\n                        isDisabled = it.any(it.stateIsTrue(pluginEnabledConfigKey), it.not(it.userHasWritePermissionOnResource('plugins')));\n                    }\n\n                    return {\n                        ...setting,\n                        type,\n                        key: 'PluginSettings.Plugins.' + escapedPluginId + '.' + key,\n                        help_text_markdown: true,\n                        label: displayName,\n                        translate: Boolean(plugin.translate),\n                        isDisabled,\n                        banner_type: bannerType,\n                        component,\n                        showTitle: customComponents[key] ? customComponents[key].options.showTitle : false,\n                    };\n                });\n            }\n\n            if (plugin.id !== appsPluginID || areAppsEnabled) {\n                const pluginEnableSetting = getEnablePluginSetting(plugin);\n                pluginEnableSetting.isDisabled = it.any(pluginEnableSetting.isDisabled, it.not(it.userHasWritePermissionOnResource('plugins')));\n                settings.unshift(pluginEnableSetting);\n            }\n\n            settings.forEach((s) => {\n                s.isDisabled = it.any(s.isDisabled, it.not(it.userHasWritePermissionOnResource('plugins')));\n            });\n\n            return {\n                ...plugin.settings_schema,\n                id: plugin.id,\n                name: plugin.name,\n                settings,\n                translate: Boolean(plugin.translate),\n            };\n        },\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getPluginSchema = makeGetPluginSchema();\n\n    return (state, ownProps) => {\n        const pluginId = ownProps.match.params.plugin_id;\n\n        return {\n            schema: getPluginSchema(state, pluginId),\n            roles: getRoles(state),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(CustomPluginSettings);\n","export default __webpack_public_path__ + \"files/e68c2e08344e8bfd792fba89b4dfcc0f.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {AdminConfig} from 'matterfoss-redux/types/config';\n\nimport {BaseProps} from 'components/admin_console/admin_settings';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {Constants} from 'utils/constants';\n\nimport FormError from 'components/form_error';\n\nimport imagePath from 'images/openid-convert/emoticon-outline.svg';\n\nimport './openid_convert.scss';\n\ntype Props = BaseProps & {\n    disabled?: boolean;\n    actions: {\n        updateConfig: (config: AdminConfig) => ActionFunc & Partial<{error?: ClientErrorPlaceholder}>;\n    };\n};\ntype State = {\n    serverError?: string;\n}\n\ntype ClientErrorPlaceholder = {\n    message: string;\n    server_error_id: string;\n}\n\nexport default class OpenIdConvert extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverError: undefined,\n        };\n    }\n\n    upgradeConfig = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n\n        if (newConfig.Office365Settings.DirectoryId) {\n            newConfig.Office365Settings.DiscoveryEndpoint = 'https://login.microsoftonline.com/' + newConfig.Office365Settings.DirectoryId + '/v2.0/.well-known/openid-configuration';\n        }\n        newConfig.GoogleSettings.DiscoveryEndpoint = 'https://accounts.google.com/.well-known/openid-configuration';\n\n        if (newConfig.GitLabSettings.UserApiEndpoint) {\n            const url = newConfig.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n            newConfig.GitLabSettings.DiscoveryEndpoint = url + '/.well-known/openid-configuration';\n        }\n\n        ['Office365Settings', 'GoogleSettings', 'GitLabSettings'].forEach((setting) => {\n            newConfig[setting].Scope = Constants.OPENID_SCOPES;\n            newConfig[setting].UserApiEndpoint = '';\n            newConfig[setting].AuthEndpoint = '';\n            newConfig[setting].TokenEndpoint = '';\n        });\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({serverError: err.message});\n        } else {\n            browserHistory.push('/admin_console/authentication/openid');\n        }\n    }\n\n    render() {\n        return (\n            <div className='OpenIdConvert'>\n                <div className='OpenIdConvert_imageWrapper'>\n                    <img\n                        className='OpenIdConvert_image'\n                        src={imagePath}\n                        alt='OpenId Convert Image'\n                    />\n                </div>\n\n                <div className='OpenIdConvert_copyWrapper'>\n                    <div className='OpenIdConvert__heading'>\n                        <FormattedMessage\n                            id='admin.openIdConvert.heading'\n                            defaultMessage='OAuth 2.0 is being deprecated and replaced by OpenID Connect.'\n                        />\n                    </div>\n                    <p>\n                        <FormattedMessage\n                            id='admin.openIdConvert.message'\n                            defaultMessage='Convert your OAuth 2.0 configuration to the new OpenID Connect standard.'\n                        />\n                    </p>\n                    <div className='OpenIdConvert_actionWrapper'>\n                        <button\n                            className='btn'\n                            data-testid='openIdConvert'\n                            disabled={this.props.disabled}\n                            onClick={this.upgradeConfig}\n                        >\n                            <FormattedMessage\n                                id='admin.openIdConvert.text'\n                                defaultMessage='Convert to OpenID Connect'\n                            />\n                        </button>\n                        <a\n                            className='btn-secondary'\n                            href='https://www.example.com/default-openid-docs'\n                            data-testid='openIdLearnMore'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='admin.openIdConvert.help'\n                                defaultMessage='Learn more'\n                            />\n                        </a>\n                        <div\n                            className='error-message'\n                            data-testid='errorMessage'\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {updateConfig} from 'matterfoss-redux/actions/admin';\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\nimport {AdminConfig} from 'matterfoss-redux/types/config';\n\nimport OpenIdConvert from './openid_convert';\n\ntype Actions = {\n    updateConfig: (config: AdminConfig) => ActionFunc;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(OpenIdConvert);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function ReloadIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-refresh'\n            title={formatMessage({id: 'generic_icons.reload', defaultMessage: 'Reload Icon'})}\n        />\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {Compliance} from 'matterfoss-redux/types/compliance';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport LoadingScreen from 'components/loading_screen';\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {t} from 'utils/i18n.jsx';\n\ntype Props = {\n\n    /*\n        * Set if compliance reports are licensed\n        */\n    isLicensed: boolean;\n\n    /*\n        * Set if compliance reports are enabled in the config\n        */\n    enabled: boolean;\n\n    /*\n        * Array of reports to render\n        */\n    reports: Compliance[];\n    users: Dictionary<UserProfile>;\n\n    /*\n        * Error message to display\n        */\n    serverError?: string;\n\n    readOnly?: boolean;\n\n    actions: {\n\n        /*\n            * Function to get compliance reports\n            */\n        getComplianceReports: () => Promise<{data: Compliance[]}>;\n\n        /*\n            * Function to save compliance reports\n            */\n        createComplianceReport: (job: Partial<Compliance>) => Promise<{data: Compliance; error?: Error}>;\n    };\n}\n\ntype State = {\n    loadingReports: boolean;\n    runningReport?: boolean;\n}\n\nexport default class ComplianceReports extends React.PureComponent<Props, State> {\n    private descInput: React.RefObject<HTMLInputElement>;\n    private emailsInput: React.RefObject<HTMLInputElement>;\n    private fromInput: React.RefObject<HTMLInputElement>;\n    private keywordsInput: React.RefObject<HTMLInputElement>;\n    private toInput: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loadingReports: true,\n        };\n\n        this.descInput = React.createRef();\n        this.emailsInput = React.createRef();\n        this.fromInput = React.createRef();\n        this.keywordsInput = React.createRef();\n        this.toInput = React.createRef();\n    }\n\n    componentDidMount() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return;\n        }\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false}),\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingReports: true});\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false}),\n        );\n    }\n\n    runReport = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        this.setState({runningReport: true});\n\n        const job: Partial<Compliance> = {};\n        job.desc = this.descInput.current?.value;\n        job.emails = this.emailsInput.current?.value;\n        job.keywords = this.keywordsInput.current?.value;\n        job.start_at = this.fromInput.current ? Date.parse(this.fromInput.current.value) : undefined;\n        job.end_at = this.toInput.current ? Date.parse(this.toInput.current.value) : undefined;\n\n        this.props.actions.createComplianceReport(job).then(\n            ({data}) => {\n                if (data) {\n                    if (this.emailsInput.current) {\n                        this.emailsInput.current.value = '';\n                    }\n                    if (this.keywordsInput.current) {\n                        this.keywordsInput.current.value = '';\n                    }\n                    if (this.descInput.current) {\n                        this.descInput.current.value = '';\n                    }\n                    if (this.fromInput.current) {\n                        this.fromInput.current.value = '';\n                    }\n                    if (this.toInput.current) {\n                        this.toInput.current.value = '';\n                    }\n                }\n                this.setState({runningReport: false});\n                this.props.actions.getComplianceReports();\n            },\n        );\n    }\n\n    getDateTime(millis: number) {\n        const date = new Date(millis);\n        return (\n            <span style={style.date}>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return <div/>;\n        }\n\n        let content = null;\n        if (this.state.loadingReports) {\n            content = <LoadingScreen/>;\n        } else {\n            const list = [];\n\n            for (let i = 0; i < this.props.reports.length; i++) {\n                const report = this.props.reports[i];\n\n                let params: string | JSX.Element = '';\n                if (report.type === 'adhoc') {\n                    params = (\n                        <span>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />{' '}{this.getDateTime(report.start_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />{' '}{this.getDateTime(report.end_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />{' '}{report.emails}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />{' '}{report.keywords}\n                        </span>);\n                }\n                let download: string | JSX.Element = '';\n                let status: string | JSX.Element = '';\n                if (report.status === 'finished') {\n                    download = (\n                        <a href={`${Client4.getBaseRoute()}/compliance/reports/${report.id}/download`}>\n                            <FormattedMessage\n                                id='admin.compliance_table.download'\n                                defaultMessage='Download'\n                            />\n                        </a>\n                    );\n\n                    status = (\n                        <span className='status-icon-success'>\n                            <FormattedMessage\n                                id='admin.compliance_table.success'\n                                defaultMessage='Success'\n                            />\n                        </span>\n                    );\n                } else if (report.status === 'running') {\n                    status = (\n                        <span className='status-icon-warning'>\n                            <FormattedMessage\n                                id='admin.compliance_table.pending'\n                                defaultMessage='Pending'\n                            />\n                        </span>\n                    );\n                } else if (report.status === 'failed') {\n                    status = (\n                        <span className='status-icon-error'>\n                            <FormattedMessage\n                                id='admin.compliance_table.failed'\n                                defaultMessage='Failed'\n                            />\n                        </span>\n                    );\n                }\n\n                let user = report.user_id;\n                const profile = this.props.users[report.user_id];\n                if (profile) {\n                    user = profile.email;\n                }\n\n                list[i] = (\n                    <tr key={report.id}>\n                        <td>{status}</td>\n                        <td style={style.dataCell}>{download}</td>\n                        <td>{this.getDateTime(report.create_at)}</td>\n                        <td>{report.count}</td>\n                        <td>{report.type}</td>\n                        <td style={style.dataCell}>{report.desc}</td>\n                        <td>{user}</td>\n                        <td style={style.dataCell}>{params}</td>\n                    </tr>\n                );\n            }\n\n            content = (\n                <div style={style.content}>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.status'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.files'\n                                        defaultMessage='Files'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.timestamp'\n                                        defaultMessage='Timestamp'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.records'\n                                        defaultMessage='Records'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.type'\n                                        defaultMessage='Type'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.desc'\n                                        defaultMessage='Description'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.userId'\n                                        defaultMessage='Requested By'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.params'\n                                        defaultMessage='Params'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        let serverError: string | JSX.Element = '';\n        if (this.props.serverError) {\n            serverError = (\n                <div\n                    className='form-group has-error'\n                    style={style.serverError}\n                >\n                    <label className='control-label'>{this.props.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div className='panel compliance-panel'>\n                <h4>\n                    <FormattedMessage\n                        id='admin.compliance_reports.title'\n                        defaultMessage='Compliance Reports'\n                    />\n                </h4>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.desc'\n                                defaultMessage='Job Name:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='desc'\n                            ref={this.descInput}\n                            placeholder={{id: t('admin.compliance_reports.desc_placeholder'), defaultMessage: 'E.g. \"Audit 445 for HR\"'}}\n                            disabled={this.props.readOnly}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='from'\n                            ref={this.fromInput}\n                            placeholder={{id: t('admin.compliance_reports.from_placeholder'), defaultMessage: 'E.g. \"2016-03-11\"'}}\n                            disabled={this.props.readOnly}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='to'\n                            ref={this.toInput}\n                            placeholder={{id: t('admin.compliance_reports.to_placeholder'), defaultMessage: 'E.g. \"2016-03-15\"'}}\n                            disabled={this.props.readOnly}\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='emails'\n                            ref={this.emailsInput}\n                            placeholder={{id: t('admin.compliance_reports.emails_placeholder'), defaultMessage: 'E.g. \"bill@example.com, bob@example.com\"'}}\n                            disabled={this.props.readOnly}\n                        />\n                    </div>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='keywords'\n                            ref={this.keywordsInput}\n                            placeholder={{id: t('admin.compliance_reports.keywords_placeholder'), defaultMessage: 'E.g. \"shorting stock\"'}}\n                            disabled={this.props.readOnly}\n                        />\n                    </div>\n                </div>\n                <div className='clearfix'>\n                    <button\n                        id='run-button'\n                        type='submit'\n                        className='btn btn-primary'\n                        onClick={this.runReport}\n                        disabled={this.props.readOnly}\n                    >\n                        <FormattedMessage\n                            id='admin.compliance_reports.run'\n                            defaultMessage='Run Compliance Report'\n                        />\n                    </button>\n                </div>\n                {serverError}\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        disabled={this.state.runningReport}\n                        onClick={this.reload}\n                    >\n                        <ReloadIcon/>\n                        <FormattedMessage\n                            id='admin.compliance_reports.reload'\n                            defaultMessage='Reload Completed Compliance Reports'\n                        />\n                    </button>\n                </div>\n                <div className='compliance-panel__table'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style: Dictionary<React.CSSProperties> = {\n    content: {margin: 10},\n    greenStatus: {color: 'green'},\n    redStatus: {color: 'red'},\n    dataCell: {whiteSpace: 'nowrap'},\n    date: {whiteSpace: 'nowrap'},\n    serverError: {marginTop: '10px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {createComplianceReport, getComplianceReports} from 'matterfoss-redux/actions/admin';\nimport {getComplianceReports as selectComplianceReports, getConfig} from 'matterfoss-redux/selectors/entities/admin';\nimport {getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\nimport {Compliance} from 'matterfoss-redux/types/compliance';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport ComplianceReports from './compliance_reports';\n\ntype Actions = {\n    getComplianceReports: () => Promise<{data: Compliance[]}>;\n    createComplianceReport: (job: Partial<Compliance>) => Promise<{data: Compliance; error?: Error}>;\n}\n\nconst getUsersForReports = createSelector(\n    (state: GlobalState) => state.entities.users.profiles,\n    (state: GlobalState) => state.entities.admin.complianceReports,\n    (users, reports) => {\n        const usersMap: Dictionary<UserProfile> = {};\n        Object.values(reports).forEach((r) => {\n            const u = users[r.user_id];\n            if (u) {\n                usersMap[u.id] = u;\n            }\n        });\n        return usersMap;\n    },\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    let enabled = false;\n    const config = getConfig(state);\n    if (config && config.ComplianceSettings) {\n        enabled = config.ComplianceSettings.Enable;\n    }\n\n    let serverError: string | undefined;\n    const error = state.requests.admin.createCompliance.error;\n    if (error) {\n        serverError = error.message;\n    }\n\n    const reports = Object.values(selectComplianceReports(state)).sort((a, b) => {\n        return b.create_at - a.create_at;\n    });\n\n    return {\n        isLicensed,\n        enabled,\n        reports,\n        serverError,\n        users: getUsersForReports(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getComplianceReports,\n            createComplianceReport,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplianceReports);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Audit} from 'matterfoss-redux/types/audits';\n\nimport ComplianceReports from 'components/admin_console/compliance_reports';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\n\ntype Props = {\n    isLicensed: boolean;\n    audits: Audit[];\n    isDisabled?: boolean;\n    actions: {\n        getAudits: () => Promise<{data: Audit[]}>;\n    };\n};\n\ntype State = {\n    loadingAudits: boolean;\n};\n\nexport default class Audits extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loadingAudits: true,\n        };\n    }\n\n    public componentDidMount() {\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false}),\n        );\n    }\n\n    private reload = () => {\n        this.setState({loadingAudits: true});\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false}),\n        );\n    };\n\n    private activityLogHeader = () => {\n        const h4Style: CSSProperties = {\n            display: 'inline-block',\n            marginBottom: '6px',\n        };\n        const divStyle: CSSProperties = {\n            clear: 'both',\n        };\n        return (\n            <div style={divStyle}>\n                <h4 style={h4Style}>\n                    <FormattedMessage\n                        id='admin.complianceMonitoring.userActivityLogsTitle'\n                        defaultMessage='User Activity Logs'\n                    />\n                </h4>\n                <button\n                    type='submit'\n                    className='btn btn-link pull-right'\n                    onClick={this.reload}\n                >\n                    <ReloadIcon/>\n                    <FormattedMessage\n                        id='admin.audits.reload'\n                        defaultMessage='Reload User Activity Logs'\n                    />\n                </button>\n            </div>\n        );\n    };\n\n    private renderComplianceReports = () => {\n        if (!this.props.isLicensed) {\n            return <div/>;\n        }\n        return <ComplianceReports readOnly={this.props.isDisabled}/>;\n    };\n\n    public render() {\n        let content = null;\n\n        if (this.state.loadingAudits) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <div>\n                    <AuditTable\n                        audits={this.props.audits}\n                        showUserId={true}\n                        showIp={true}\n                        showSession={true}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {this.renderComplianceReports()}\n                <div className='panel compliance-panel'>\n                    {this.activityLogHeader()}\n                    <div className='compliance-panel__table'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\nimport {Audit} from 'matterfoss-redux/types/audits';\nimport {getAudits} from 'matterfoss-redux/actions/admin';\nimport * as Selectors from 'matterfoss-redux/selectors/entities/admin';\nimport {getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\n\nimport Audits from './audits';\n\ntype Actions = {\n    getAudits: () => Promise<{data: Audit[]}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const isLicensed = license.Compliance === 'true';\n\n    return {\n        isLicensed,\n        audits: Object.values(Selectors.getAudits(state)),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Audits);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n.jsx';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport Setting from './setting';\n\nexport default class CustomUrlSchemesSetting extends React.PureComponent {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            value: PropTypes.array.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.arrayToString(props.value),\n        };\n    }\n\n    stringToArray = (str) => {\n        return str.split(',').map((s) => s.trim()).filter(Boolean);\n    };\n\n    arrayToString = (arr) => {\n        return arr.join(',');\n    };\n\n    handleChange = (e) => {\n        const valueAsArray = this.stringToArray(e.target.value);\n\n        this.props.onChange(this.props.id, valueAsArray);\n\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    render() {\n        const label = Utils.localizeMessage('admin.customization.customUrlSchemes', 'Custom URL Schemes:');\n        const helpText = Utils.localizeMessage(\n            'admin.customization.customUrlSchemesDesc',\n            'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: \"http\", \"https\", \"ftp\", \"tel\", and \"mailto\".',\n        );\n\n        return (\n            <Setting\n                label={label}\n                helpText={helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                <LocalizedInput\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={{id: t('admin.customization.customUrlSchemesPlaceholder'), defaultMessage: 'E.g.: \"git,smtp\"'}}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport ConfirmModal from 'components/confirm_modal';\n\nimport BooleanSetting from './boolean_setting';\n\ntype Props = {\n    id: string;\n    value: boolean;\n    onChange: (id: string, value: boolean, confirm?: boolean, doSubmit?: boolean, warning?: React.ReactNode | string) => void;\n    cancelSubmit: () => void;\n    disabled?: boolean;\n    setByEnv: boolean;\n    showConfirm: boolean;\n}\n\nexport default class CustomEnableDisableGuestAccountsSetting extends React.PureComponent<Props> {\n    public handleChange = (id: string, value: boolean, submit = false) => {\n        const confirmNeeded = value === false; // Requires confirmation if disabling guest accounts\n        let warning: React.ReactNode | string = '';\n        if (confirmNeeded) {\n            warning = (\n                <FormattedMessage\n                    id='admin.guest_access.disableConfirmWarning'\n                    defaultMessage='All current guest account sessions will be revoked, and marked as inactive'\n                />\n            );\n        }\n        this.props.onChange(id, value, confirmNeeded, submit, warning);\n    };\n\n    public render() {\n        const label = (\n            <FormattedMessage\n                id='admin.guest_access.enableTitle'\n                defaultMessage='Enable Guest Access: '\n            />\n        );\n        const helpText = (\n            <FormattedMarkdownMessage\n                id='admin.guest_access.enableDescription'\n                defaultMessage='When true, external guest can be invited to channels within teams. Please see [Permissions Schemes](../user_management/permissions/system_scheme) for which roles can invite guests.'\n            />\n        );\n\n        return (\n            <>\n                <BooleanSetting\n                    id={this.props.id}\n                    value={this.props.value}\n                    label={label}\n                    helpText={helpText}\n                    setByEnv={this.props.setByEnv}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled}\n                />\n                <ConfirmModal\n                    show={this.props.showConfirm && (this.props.value === false)}\n                    title={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmTitle'\n                            defaultMessage='Save and Disable Guest Access?'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmMessage'\n                            defaultMessage='Disabling guest access will revoke all current Guest Account sessions. Guests will no longer be able to login and new guests cannot be invited into MatterFOSS. Guest users will be marked as inactive in user lists. Enabling this feature will not reinstate previous guest accounts. Are you sure you wish to remove these users?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmButton'\n                            defaultMessage='Save and Disable Guest Access'\n                        />\n                    }\n                    onConfirm={() => {\n                        this.handleChange(this.props.id, false, true);\n                        this.setState({showConfirm: false});\n                    }}\n                    onCancel={this.props.cancelSubmit}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport moment from 'moment';\n\nimport RenewalLink from 'components/announcement_bar/renewal_link/';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport './renew_license_card.scss';\nexport interface RenewLicenseCardProps {\n    license: any;\n    isLicenseExpired: boolean;\n    totalUsers: number;\n    isDisabled: boolean;\n}\n\nconst RenewLicenseCard: React.FC<RenewLicenseCardProps> = ({license, totalUsers, isLicenseExpired, isDisabled}: RenewLicenseCardProps) => {\n    let titleClass = 'RenewLicenseCard__text-title';\n    let iconClass = 'icon-alert-circle-outline';\n    const today = moment(Date.now());\n    const endOfLicense = moment(new Date(parseInt(license?.ExpiresAt, 10)));\n    const daysToEndLicense = endOfLicense.diff(today, 'days');\n    const renewLinkTelemetry = {success: 'renew_license_admin_console_success', error: 'renew_license_admin_console_fail'};\n    let cardTitle = (\n        <FormattedMessage\n            id='admin.license.renewalCard.licenseExpiring'\n            defaultMessage='License expires in {days} days on {date, date, long}.'\n            values={{\n                date: endOfLicense,\n                days: daysToEndLicense,\n            }}\n        />\n    );\n    if (isLicenseExpired) {\n        titleClass = 'RenewLicenseCard__text-title critical';\n        iconClass = 'icon-alert-outline';\n        cardTitle = (\n            <FormattedMessage\n                id='admin.license.renewalCard.licenseExpired'\n                defaultMessage='License expired on {date, date, long}.'\n                values={{\n                    date: endOfLicense,\n                }}\n            />\n        );\n    }\n    return (\n        <div className='RenewLicenseCard'>\n            <div className='RenewLicenseCard__text'>\n                <div className={titleClass}>\n                    <i className={iconClass}/>\n                    {cardTitle}\n                </div>\n                <div className='RenewLicenseCard__text-description bolder'>\n                    <FormattedMessage\n                        id='admin.license.renewalCard.description'\n                        defaultMessage='Renew your Enterprise license through the Customer Portal to avoid any disruption.'\n                    />\n                </div>\n                <div className='RenewLicenseCard__text-description'>\n                    <FormattedMessage\n                        id='admin.license.renewalCard.reviewNumbers'\n                        defaultMessage='Review your numbers below to ensure you renew for the right number of users.'\n                    />\n                </div>\n                <div className='RenewLicenseCard__licensedUsersNum'>\n                    <FormattedMarkdownMessage\n                        id='admin.license.renewalCard.licensedUsersNum'\n                        defaultMessage='**Licensed Users:** {licensedUsersNum}'\n                        values={{\n                            licensedUsersNum: license.Users,\n                        }}\n                    />\n                </div>\n                <div className='RenewLicenseCard__activeUsersNum'>\n                    <FormattedMarkdownMessage\n                        id='admin.license.renewalCard.usersNumbers'\n                        defaultMessage='**Active Users:** {activeUsersNum}'\n                        values={{\n                            activeUsersNum: totalUsers,\n                        }}\n                    />\n                </div>\n                <RenewalLink\n                    isDisabled={isDisabled}\n                    telemetryInfo={renewLinkTelemetry}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default RenewLicenseCard;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport moment from 'moment';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport {daysToLicenseExpire} from 'utils/license_utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport PurchaseLink from 'components/announcement_bar/purchase_link/purchase_link';\n\nimport './trial_license_card.scss';\n\nexport interface Props {\n    license: any;\n}\n\nconst TrialLicenseCard: React.FC<Props> = ({license}: Props) => {\n    const currentDate = new Date();\n    const endDate = new Date(parseInt(license?.ExpiresAt, 10));\n    const daysToEndLicense = daysToLicenseExpire(license);\n\n    const handleContactLinkClick = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('admin', 'in_trial_contact_sales');\n        window.open('https://mattermost.com/contact-us/', '_blank');\n    };\n\n    const message = () => {\n        if (currentDate.toDateString() === endDate.toDateString()) {\n            return (\n                <FormattedMarkdownMessage\n                    id='admin.license.trialCard.description.expiringToday'\n                    defaultMessage='Your free trial expires **Today at {time}**. Visit our customer portal to purchase a license now to continue using E10 & E20 features after trial ends'\n                    values={{\n                        time: moment(endDate).endOf('day').format('h:mm a ') + moment().tz(getBrowserTimezone()).format('z'),\n                    }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMarkdownMessage\n                id='admin.license.trialCard.description'\n                defaultMessage='Your free trial will expire in **{daysCount} {daysCount, plural, one {day} other {days}}**. Visit our customer portal to purchase a license now to continue using E10 & E20 features after trial ends.'\n                values={{\n                    daysCount: daysToEndLicense,\n                }}\n            />\n        );\n    };\n\n    return (\n        <div className='RenewLicenseCard TrialLicense'>\n            <div className='RenewLicenseCard__text'>\n                <div className='TrialLicenseCard__text-title'>\n                    <FormattedMessage\n                        id='admin.license.trialCard.licenseExpiring'\n                        defaultMessage='You’re currently on a free trial of our E20 license.'\n                    />\n                </div>\n                <div className='RenewLicenseCard__text-description'>\n                    {message()}\n                </div>\n                <PurchaseLink\n                    buttonTextElement={\n                        <FormattedMessage\n                            id='admin.license.trialCard.purchase_license'\n                            defaultMessage='Purchase a license'\n                        />\n                    }\n                />\n                <button\n                    className='ContactSales'\n                    onClick={(e) => handleContactLinkClick(e)}\n                >\n                    <FormattedMessage\n                        id='admin.license.trialCard.contactSales'\n                        defaultMessage='Contact sales'\n                    />\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default TrialLicenseCard;\n","// Copyright (c) 2015-present MatterFOSS All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedTime, FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {isLicenseExpired, isLicenseExpiring, isTrialLicense} from 'utils/license_utils.jsx';\nimport {format} from 'utils/markdown';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport RenewLinkCard from './renew_license_card/renew_license_card';\nimport TrialLicenseCard from './trial_license_card/trial_license_card';\n\nexport default class LicenseSettings extends React.PureComponent {\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        enterpriseReady: PropTypes.bool.isRequired,\n        upgradedFromTE: PropTypes.bool.isRequired,\n        stats: PropTypes.object,\n        config: PropTypes.object,\n        isDisabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            getLicenseConfig: PropTypes.func.isRequired,\n            uploadLicense: PropTypes.func.isRequired,\n            removeLicense: PropTypes.func.isRequired,\n            upgradeToE0: PropTypes.func.isRequired,\n            restartServer: PropTypes.func.isRequired,\n            ping: PropTypes.func.isRequired,\n            upgradeToE0Status: PropTypes.func.isRequired,\n            requestTrialLicense: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.interval = null;\n        this.state = {\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n            gettingTrialError: null,\n            gettingTrial: false,\n            removing: false,\n            uploading: false,\n            upgradingPercentage: 0,\n            upgradeError: null,\n            restarting: false,\n            restartError: null,\n        };\n\n        this.fileInputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (!this.props.enterpriseReady) {\n            this.reloadPercentage();\n        }\n        this.props.actions.getLicenseConfig();\n        AdminActions.getStandardAnalytics();\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reloadPercentage = async () => {\n        const {percentage, error} = await this.props.actions.upgradeToE0Status();\n        if (percentage === 100 || error) {\n            if (this.interval) {\n                clearInterval(this.interval);\n                this.interval = null;\n                if (error) {\n                    trackEvent('api', 'upgrade_to_e0_failed', {error});\n                } else {\n                    trackEvent('api', 'upgrade_to_e0_success');\n                }\n            }\n        } else if (percentage > 0 && !this.interval) {\n            this.interval = setInterval(this.reloadPercentage, 2000);\n        }\n        this.setState({upgradingPercentage: percentage || 0, upgradeError: error});\n    }\n\n    handleChange = () => {\n        const element = this.fileInputRef.current;\n        if (element && element.files.length > 0) {\n            this.setState({fileSelected: true, fileName: element.files[0].name});\n        }\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const element = this.fileInputRef.current;\n        if (!element || element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.setState({uploading: true});\n\n        const {error} = await this.props.actions.uploadLicense(file);\n        if (error) {\n            Utils.clearFileInput(element[0]);\n            this.setState({fileSelected: false, fileName: null, serverError: error.message, uploading: false});\n            return;\n        }\n\n        await this.props.actions.getLicenseConfig();\n        this.setState({fileSelected: false, fileName: null, serverError: null, uploading: false});\n    }\n\n    handleRemove = async (e) => {\n        e.preventDefault();\n\n        this.setState({removing: true});\n\n        const {error} = await this.props.actions.removeLicense();\n        if (error) {\n            this.setState({fileSelected: false, fileName: null, serverError: error.message, removing: false});\n            return;\n        }\n\n        await this.props.actions.getLicenseConfig();\n        this.setState({fileSelected: false, fileName: null, serverError: null, removing: false});\n    }\n\n    handleUpgrade = async (e) => {\n        e.preventDefault();\n        if (this.state.upgradingPercentage > 0) {\n            return;\n        }\n        try {\n            await this.props.actions.upgradeToE0();\n            this.setState({upgradingPercetage: 1});\n            await this.reloadPercentage();\n        } catch (error) {\n            trackEvent('api', 'upgrade_to_e0_failed', {error: error.message});\n            this.setState({upgradeError: error.message, upgradingPercetage: 0});\n        }\n    }\n\n    requestLicense = async (e) => {\n        e.preventDefault();\n        if (this.state.gettingTrial) {\n            return;\n        }\n        this.setState({gettingTrial: true, gettingTrialError: null});\n        const requestedUsers = Math.max(this.props.stats.TOTAL_USERS, 30);\n        const {error} = await this.props.actions.requestTrialLicense(requestedUsers, true, true, 'license');\n        if (error) {\n            this.setState({gettingTrialError: error});\n        }\n        this.setState({gettingTrial: false});\n        this.props.actions.getLicenseConfig();\n    }\n\n    checkRestarted = () => {\n        this.props.actions.ping().then(() => {\n            window.location.reload();\n        }).catch(() => {\n            setTimeout(this.checkRestarted, 1000);\n        });\n    }\n\n    handleRestart = async (e) => {\n        e.preventDefault();\n        this.setState({restarting: true});\n        try {\n            await this.props.actions.restartServer();\n        } catch (err) {\n            this.setState({restarting: false, restartError: err});\n        }\n        setTimeout(this.checkRestarted, 1000);\n    }\n\n    render() {\n        let gettingTrialError = '';\n        if (this.state.gettingTrialError) {\n            gettingTrialError = (\n                <p className='trial-error'>\n                    <FormattedMarkdownMessage\n                        id='admin.license.trial-request.error'\n                        defaultMessage='Trial license could not be retrieved. Visit [https://mattermost.com/trial/](https://mattermost.com/trial/) to request a license.'\n                    />\n                </p>\n            );\n        }\n\n        const {license, upgradedFromTE, isDisabled} = this.props;\n        const {uploading} = this.state;\n\n        let edition;\n        let licenseType;\n        let licenseContent;\n        let eelicense;\n\n        const issued = (\n            <React.Fragment>\n                <FormattedDate value={new Date(parseInt(license.IssuedAt, 10))}/>\n                {' '}\n                <FormattedTime value={new Date(parseInt(license.IssuedAt, 10))}/>\n            </React.Fragment>\n        );\n        const startsAt = <FormattedDate value={new Date(parseInt(license.StartsAt, 10))}/>;\n        const expiresAt = <FormattedDate value={new Date(parseInt(license.ExpiresAt, 10))}/>;\n\n        if (!this.props.enterpriseReady) { // Team Edition\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <div>\n                    <p>{'MatterFOSS.'}</p>\n                </div>\n            );\n\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under the GNU Affero GPL 3.0. ' +\n                        'You are reminded that under the terms of the AGPL, providing a ' +\n                        'this web service constitutes redistribution of the software and ' +\n                        'therefore any changes that you make to the software must be made ' +\n                        'available to your users in source code form.'}\n                    </p>\n                    <p>{''}</p>\n                    <p>{'See NOTICE.txt for information about open source software used in the system.'}</p>\n                </div>\n            );\n\n            eelicense = this.renderEELicenseText();\n        } else if (license.IsLicensed === 'true' && !uploading) {\n            edition = 'MatterFOSS - Licensed under the AGPL';\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under the GNU Affero GPL 3.0. ' +\n                        'You are reminded that under the terms of the AGPL, providing a ' +\n                        'this web service constitutes redistribution of the software and ' +\n                        'therefore any changes that you make to the software must be made ' +\n                        'available to your users in source code form.'}\n                    </p>\n                    <br/>\n                    {'See also: '}\n                    <a\n                        rel='noopener noreferrer'\n                        target='_blank'\n                        href='https://www.gnu.org/licenses/agpl-3.0.en.html'\n                    >{'AGPL License text'}</a>\n                </div>\n            );\n\n            let skuShortName = license.SkuShortName;\n            if (isTrialLicense(license)) {\n                skuShortName = `${license.SkuShortName} Trial`;\n            }\n\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = 'MatterFOSS - Licensed under the AGPL';\n            if (upgradedFromTE) {\n                eelicense = this.renderEELicenseText();\n            }\n            licenseType = (\n                <div>\n                    {!upgradedFromTE &&\n                        <p>\n                            {'This software is offered under the GNU Affero GPL 3.0. ' +\n                            'You are reminded that under the terms of the AGPL, providing a ' +\n                            'this web service constitutes redistribution of the software and ' +\n                            'therefore any changes that you make to the software must be made ' +\n                            'available to your users in source code form.'}\n                        </p>}\n                        <br/>\n                        {'See also: '}\n                        <a\n                            rel='noopener noreferrer'\n                            target='_blank'\n                            href='https://www.gnu.org/licenses/agpl-3.0.en.html'\n                        >{'AGPL License text'}</a>\n                </div>\n            );\n            licenseContent = this.renderE10E20Content();\n        } else {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <div>\n                    {'MatterFOSS.'}\n                    <p className='trial'>\n                        <button\n                            type='button'\n                            className='btn btn-primary'\n                            onClick={this.requestLicense}\n                            disabled={isDisabled}\n                        >\n                            <LoadingWrapper\n                                loading={this.state.gettingTrial}\n                                text={Utils.localizeMessage('admin.license.trial-request.loading', 'Getting trial')}\n                            >\n                                <FormattedMessage\n                                    id='admin.license.trial-request.submit'\n                                    defaultMessage='Start trial'\n                                />\n                            </LoadingWrapper>\n                        </button>\n                    </p>\n                    {gettingTrialError}\n                    <p className='trial-legal-terms'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.trial-request.accept-terms'\n                            defaultMessage='By clicking **Start trial**, I agree to the [MatterFOSS Software Evaluation Agreement](!https://mattermost.com/software-evaluation-agreement/), [Privacy Policy](!https://mattermost.com/privacy-policy/), and receiving product emails.'\n                        />\n                    </p>\n                </div>\n            );\n\n            if (upgradedFromTE) {\n                licenseType = (\n                    <div>\n                        <p>{''}</p>\n                        <p>{'See NOTICE.txt for information about open source software used in the system.'}</p>\n                    </div>\n                );\n                eelicense = this.renderEELicenseText();\n            } else {\n                licenseType = 'This software is offered under the GNU Affero GPL 3.0. You are reminded that under the terms of the AGPL, providing a this web service constitutes redistribution of the software and therefore any changes that you make to the software must be made available to your users in source code form.';\n            }\n\n            licenseContent = this.renderE0Content();\n        }\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.license.title'\n                    defaultMessage='Edition and License'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <form\n                            className='form-horizontal'\n                            role='form'\n                        >\n                            {this.renewLicenseCard()}\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                >\n                                    <FormattedMessage\n                                        id='admin.license.edition'\n                                        defaultMessage='Edition: '\n                                    />\n                                </label>\n                                <div className='col-sm-8'>\n                                    {edition}\n                                </div>\n                            </div>\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                >\n                                    <FormattedMessage\n                                        id='admin.license.type'\n                                        defaultMessage='License: '\n                                    />\n                                </label>\n                                <div className='col-sm-8'>\n                                    {licenseType}\n                                </div>\n                            </div>\n                            {licenseContent &&\n                                <div className='form-group'>\n                                    {licenseContent}\n                                </div>}\n                            {eelicense &&\n                                <div className='form-group'>\n                                    {eelicense}\n                                </div>}\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderE10E20Content = () => {\n        let removeButtonText = (\n            <FormattedMessage\n                id='admin.license.keyRemove'\n                defaultMessage='Remove Enterprise License and Downgrade Server'\n            />\n        );\n        if (this.state.removing) {\n            removeButtonText = (\n                <FormattedMessage\n                    id='admin.license.removing'\n                    defaultMessage='Removing License...'\n                />\n            );\n        }\n\n        return (\n            <>\n            </>\n        );\n    }\n\n    renderE0Content = () => {\n        let serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        var btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.license.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        let uploadButtonText = (\n            <FormattedMessage\n                id='admin.license.upload'\n                defaultMessage='Upload'\n            />\n        );\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.license.uploading'\n                    defaultMessage='Uploading License...'\n                />\n            );\n        }\n        return (\n            <>\n                <label\n                    className='control-label col-sm-4'\n                >\n                    <FormattedMessage\n                        id='admin.license.key'\n                        defaultMessage='License Key: '\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button\n                            type='button'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='admin.license.choose'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref={this.fileInputRef}\n                            type='file'\n                            accept='.mattermost-license'\n                            onChange={this.handleChange}\n                            disabled={this.props.isDisabled}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={this.props.isDisabled || !this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        id='upload-button'\n                    >\n                        {uploadButtonText}\n                    </button>\n                    <div className='help-text m-0'>\n                        {fileName}\n                    </div>\n                    <br/>\n                    {serverError}\n                    <p className='help-text m-0'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.uploadDesc'\n                            defaultMessage='Upload a license key for MatterFOSS to upgrade this server. [Visit us online](!http://mattermost.com) to learn more about the benefits of Enterprise Edition or to purchase a key.'\n                        />\n                    </p>\n                </div>\n            </>\n        );\n    }\n\n    renderEELicenseText = () => {\n        return (\n            <>\n            </>\n        );\n    }\n\n    renewLicenseCard = () => {\n        const {isDisabled} = this.props;\n        if (isTrialLicense(this.props.license)) {\n            return (\n                <TrialLicenseCard\n                    license={this.props.license}\n                />\n            );\n        }\n        if (isLicenseExpired(this.props.license) || isLicenseExpiring(this.props.license)) {\n            return (\n                <RenewLinkCard\n                    license={this.props.license}\n                    isLicenseExpired={isLicenseExpired(this.props.license)}\n                    totalUsers={this.props.stats.TOTAL_USERS}\n                    isDisabled={isDisabled}\n                />\n            );\n        }\n        return null;\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getLicenseConfig} from 'matterfoss-redux/actions/general';\nimport {uploadLicense, removeLicense} from 'matterfoss-redux/actions/admin';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {requestTrialLicense, upgradeToE0Status, upgradeToE0, restartServer, ping} from 'actions/admin_actions';\n\nimport LicenseSettings from './license_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    return {\n        stats: state.entities.admin.analytics,\n        upgradedFromTE: config.UpgradedFromTE === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLicenseConfig,\n            uploadLicense,\n            removeLicense,\n            upgradeToE0,\n            upgradeToE0Status,\n            restartServer,\n            ping,\n            requestTrialLicense,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LicenseSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {SchemeTypes} from 'matterfoss-redux/action_types';\nimport {General} from '../constants';\n\nimport {Scheme, SchemeScope, SchemePatch} from 'matterfoss-redux/types/schemes';\n\nimport {ActionFunc, DispatchFunc, GetStateFunc} from 'matterfoss-redux/types/actions';\n\nimport {bindClientFunc, forceLogoutIfNecessary} from './helpers';\nimport {logError} from './errors';\nexport function getScheme(schemeId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getScheme,\n        onSuccess: [SchemeTypes.RECEIVED_SCHEME],\n        params: [\n            schemeId,\n        ],\n    });\n}\n\nexport function getSchemes(scope: SchemeScope, page = 0, perPage: number = General.PAGE_SIZE_DEFAULT): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getSchemes,\n        onSuccess: [SchemeTypes.RECEIVED_SCHEMES],\n        params: [\n            scope,\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function createScheme(scheme: Scheme): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.createScheme,\n        onSuccess: [SchemeTypes.CREATED_SCHEME],\n        params: [\n            scheme,\n        ],\n    });\n}\n\nexport function deleteScheme(schemeId: string): ActionFunc {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        let data = null;\n        try {\n            data = await Client4.deleteScheme(schemeId);\n        } catch (error) {\n            forceLogoutIfNecessary(error, dispatch, getState);\n            dispatch(logError(error));\n            return {error};\n        }\n\n        dispatch({type: SchemeTypes.DELETED_SCHEME, data: {schemeId}});\n\n        return {data};\n    };\n}\n\nexport function patchScheme(schemeId: string, scheme: SchemePatch): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.patchScheme,\n        onSuccess: [SchemeTypes.PATCHED_SCHEME],\n        params: [\n            schemeId,\n            scheme,\n        ],\n    });\n}\n\nexport function getSchemeTeams(schemeId: string, page = 0, perPage: number = General.PAGE_SIZE_DEFAULT): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getSchemeTeams,\n        onSuccess: [SchemeTypes.RECEIVED_SCHEME_TEAMS],\n        params: [\n            schemeId,\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function getSchemeChannels(schemeId: string, page = 0, perPage: number = General.PAGE_SIZE_DEFAULT): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getSchemeChannels,\n        onSuccess: [SchemeTypes.RECEIVED_SCHEME_CHANNELS],\n        params: [\n            schemeId,\n            page,\n            perPage,\n        ],\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\n\nimport {ScopeTypes} from 'matterfoss-redux/constants/schemes';\n\nimport {getAllChannels} from 'matterfoss-redux/selectors/entities/channels';\nimport {getTeams} from 'matterfoss-redux/selectors/entities/teams';\n\nimport {Channel} from 'matterfoss-redux/types/channels';\nimport {Scheme} from 'matterfoss-redux/types/schemes';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nexport function getSchemes(state: GlobalState): {\n    [x: string]: Scheme;\n} {\n    return state.entities.schemes.schemes;\n}\n\nexport function getScheme(state: GlobalState, id: string): Scheme {\n    const schemes = getSchemes(state);\n    return schemes[id];\n}\n\nexport function makeGetSchemeChannels() {\n    return (createSelector(\n        getAllChannels,\n        (state: GlobalState, props: {schemeId: string}) => getScheme(state, props.schemeId),\n        (allChannels, scheme) => {\n            if (!scheme) {\n                return [];\n            }\n\n            if (scheme.scope === ScopeTypes.TEAM) {\n                const msg = `Not implemented: scheme '${scheme.id}' is team-scope but 'getSchemeChannels' only accepts channel-scoped schemes.`;\n                console.log(msg); // eslint-disable-line no-console\n                return [];\n            }\n\n            const schemeChannels: Channel[] = [];\n\n            Object.entries(allChannels).forEach((item: [string, Channel]) => {\n                const [, channel] = item;\n                if (channel.scheme_id === scheme.id) {\n                    schemeChannels.push(channel);\n                }\n            });\n\n            return schemeChannels;\n        }) as (b: GlobalState, a: {\n        schemeId: string;\n    }) => Channel[]);\n}\n\nexport function makeGetSchemeTeams() {\n    return (createSelector(\n        getTeams,\n        (state: GlobalState, props: {schemeId: string}) => getScheme(state, props.schemeId),\n        (allTeams, scheme) => {\n            if (!scheme) {\n                return [];\n            }\n\n            if (scheme.scope === ScopeTypes.CHANNEL) {\n                const msg = `Error: scheme '${scheme.id}' is channel-scoped but 'getSchemeChannels' only accepts team-scoped schemes.`;\n                console.log(msg); // eslint-disable-line no-console\n                return [];\n            }\n\n            const schemeTeams: Team[] = [];\n\n            Object.entries(allTeams).forEach((item: [string, Team]) => {\n                const [, team] = item;\n                if (team.scheme_id === scheme.id) {\n                    schemeTeams.push(team);\n                }\n            });\n\n            return schemeTeams;\n        }) as (b: GlobalState, a: {\n        schemeId: string;\n    }) => Team[]);\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nexport const ScopeTypes = {\n    TEAM: 'team',\n    CHANNEL: 'channel',\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport './admin_panel.scss';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\ntype Props = {\n    id?: string;\n    className?: string;\n    onHeaderClick?: React.EventHandler<React.MouseEvent>;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    subtitleValues?: any;\n    button?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\nconst AdminPanel: React.FC<Props> = (props: Props) => (\n    <div\n        className={'AdminPanel clearfix ' + props.className}\n        id={props.id}\n    >\n        <div\n            className='header'\n            onClick={props.onHeaderClick}\n        >\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id={props.titleId}\n                        defaultMessage={props.titleDefault}\n                    />\n                </h3>\n                <div className='mt-2'>\n                    <FormattedMarkdownMessage\n                        id={props.subtitleId}\n                        defaultMessage={props.subtitleDefault}\n                        values={props.subtitleValues}\n                    />\n                </div>\n            </div>\n            {props.button &&\n                <div className='button'>\n                    {props.button}\n                </div>\n            }\n        </div>\n        {props.children}\n    </div>\n);\n\nAdminPanel.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    url: string;\n    disabled?: boolean;\n    linkTextId: string;\n    linkTextDefault: string;\n}\n\nconst AdminPanelWithLink = (props: Props) => {\n    const button = (\n        <Link\n            data-testid={`${props.id}-link`}\n            className={classNames(['btn', 'btn-primary', {disabled: props.disabled}])}\n            to={props.url}\n            onClick={props.disabled ? (e) => e.preventDefault() : () => null}\n        >\n            <FormattedMessage\n                id={props.linkTextId}\n                defaultMessage={props.linkTextDefault}\n            />\n        </Link>\n    );\n\n    return (\n        <AdminPanel\n            className={'AdminPanelWithLink ' + props.className}\n            id={props.id}\n            data-testid={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            button={button}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelWithLink.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanelWithLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nconst MAX_TEAMS_PER_SCHEME_SUMMARY = 8;\n\nexport default class PermissionsSchemeSummary extends React.PureComponent {\n    static propTypes = {\n        scheme: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        isDisabled: PropTypes.func,\n        actions: PropTypes.shape({\n            deleteScheme: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            deleting: false,\n            serverError: null,\n        };\n    }\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteSchemeTitle'\n                defaultMessage='Delete {scheme} scheme?'\n                values={{scheme: this.props.scheme.display_name}}\n            />\n        );\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='permission-scheme-summary-error-message'>\n                    <i className='fa fa-exclamation-circle'/> {this.state.serverError}\n                </div>\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion'\n                        defaultMessage='The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?'\n                        values={{schemeName: this.props.scheme.display_name}}\n                    />\n                </p>\n                {serverError}\n            </div>\n        );\n\n        const confirmButton = (\n            <LoadingWrapper\n                loading={this.state.deleting}\n                text={Utils.localizeMessage('admin.permissions.permissionsSchemeSummary.deleting', 'Deleting...')}\n            >\n                <FormattedMessage\n                    id='admin.permissions.permissionsSchemeSummary.deleteConfirmButton'\n                    defaultMessage='Yes, Delete'\n                />\n            </LoadingWrapper>\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleDeleteConfirmed}\n                onCancel={this.handleDeleteCanceled}\n            />\n        );\n    }\n\n    stopPropagation = (e) => {\n        e.stopPropagation();\n    }\n\n    handleDeleteCanceled = () => {\n        this.setState({\n            showConfirmModal: false,\n        });\n    }\n\n    handleDeleteConfirmed = async () => {\n        this.setState({deleting: true, serverError: null});\n        const data = await this.props.actions.deleteScheme(this.props.scheme.id);\n        if (data.error) {\n            this.setState({deleting: false, serverError: data.error.message});\n        } else {\n            this.setState({deleting: false, showConfirmModal: false});\n        }\n    }\n\n    delete = (e) => {\n        e.stopPropagation();\n        if (this.props.isDisabled) {\n            return;\n        }\n        this.setState({showConfirmModal: true, serverError: null});\n    }\n\n    goToEdit = () => {\n        this.props.history.push('/admin_console/user_management/permissions/team_override_scheme/' + this.props.scheme.id);\n    }\n\n    render = () => {\n        const {scheme, isDisabled} = this.props;\n\n        let teams = this.props.teams ? this.props.teams.map((team) => (\n            <span\n                className='team'\n                key={team.id}\n            >\n                {team.display_name}\n            </span>\n        )) : [];\n\n        let extraTeams = null;\n        if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {\n            extraTeams = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={\n                        <Tooltip\n                            className='team-scheme-extra-teams-overlay'\n                            id={scheme.id + '-extra-teams-overlay'}\n                        >\n                            {teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY)}\n                        </Tooltip>\n                    }\n                >\n                    <span\n                        className='team'\n                        key='extra-teams'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionsSchemeSummary.moreTeams'\n                            defaultMessage='+{number} more'\n                            values={{number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY}}\n                        />\n                    </span>\n                </OverlayTrigger>\n            );\n            teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);\n        }\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <div\n                className='permissions-scheme-summary'\n                data-testid='permissions-scheme-summary'\n                onClick={this.goToEdit}\n            >\n                <div onClick={this.stopPropagation}>{confirmModal}</div>\n                <div\n                    className='permissions-scheme-summary--header'\n                >\n                    <div className='title'>\n                        {scheme.display_name}\n                    </div>\n                    <div className='actions'>\n                        <Link\n                            data-testid={`${scheme.display_name}-edit`}\n                            className='edit-button'\n                            to={'/admin_console/user_management/permissions/team_override_scheme/' + scheme.id}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.edit'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                        {'-'}\n                        <a\n                            data-testid={`${scheme.display_name}-delete`}\n                            className={isDisabled ? 'delete-button disabled' : 'delete-button'}\n                            onClick={this.delete}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='permissions-scheme-summary--description'>\n                    {scheme.description}\n                </div>\n                <div className='permissions-scheme-summary--teams'>\n                    {teams}\n                    {extraTeams}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deleteScheme} from 'matterfoss-redux/actions/schemes';\n\nimport {makeGetSchemeTeams} from 'matterfoss-redux/selectors/entities/schemes';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return function mapStateToProps(state, ownProps) {\n        return {\n            teams: getSchemeTeams(state, {schemeId: ownProps.scheme.id}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteScheme,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionsSchemeSummary);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport AdminPanelWithLink from 'components/widgets/admin_console/admin_panel_with_link';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary';\n\nconst PAGE_SIZE = 30;\nconst PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;\n\nexport default class PermissionSchemesSettings extends React.PureComponent {\n    static propTypes = {\n        schemes: PropTypes.object.isRequired,\n        jobsAreEnabled: PropTypes.bool,\n        clusterIsEnabled: PropTypes.bool,\n        license: PropTypes.shape({\n            CustomPermissionsSchemes: PropTypes.string,\n        }),\n        actions: PropTypes.shape({\n            loadSchemes: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n        }),\n        isDisabled: PropTypes.bool,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            loadingMore: false,\n            page: 0,\n            phase2MigrationIsComplete: false,\n        };\n    }\n\n    static defaultProps = {\n        schemes: {},\n    };\n\n    componentDidMount() {\n        let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.\n        this.props.actions.loadSchemes('team', 0, PAGE_SIZE).then((schemes) => {\n            if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {\n                phase2MigrationIsComplete = false;\n            }\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loading: false, phase2MigrationIsComplete}));\n        }).catch(() => {\n            this.setState({loading: false, phase2MigrationIsComplete});\n        });\n    }\n\n    loadMoreSchemes = () => {\n        this.setState({loadingMore: true});\n        this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then((schemes) => {\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loadingMore: false, page: this.state.page + 1}));\n        });\n    }\n\n    // |RunJobs && !EnableCluster|(*App).IsPhase2MigrationCompleted|View                                                   |\n    // |-------------------------|---------------------------------|-------------------------------------------------------|\n    // |true                     |true                             |null                                                   |\n    // |false                    |true                             |null (Jobs were disabled after a successful migration.)|\n    // |false                    |false                            |On hold view.                                          |\n    // |true                     |false                            |In progress view.                                      |\n    teamOverrideSchemesMigrationView = () => {\n        if (this.state.phase2MigrationIsComplete) {\n            return null;\n        }\n\n        const docLink = (\n            <a\n                href='https://docs.matterfoss.com/administration/config-settings.html#jobs'\n                rel='noopener noreferrer'\n                target='_blank'\n            >\n                <FormattedMessage\n                    id='admin.permissions.documentationLinkText'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {\n            return this.teamOverrideUnavalableView(\n                t('admin.permissions.teamOverrideSchemesInProgress'),\n                'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.',\n                docLink,\n            );\n        }\n\n        return this.teamOverrideUnavalableView(\n            t('admin.permissions.teamOverrideSchemesNoJobsEnabled'),\n            'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.',\n            docLink,\n        );\n    }\n\n    teamOverrideUnavalableView = (id, defaultMsg, documentationLink) => {\n        return (\n            <div className='team-override-unavailable'>\n                <div className='team-override-unavailable__inner'>\n                    <FormattedMessage\n                        id={id}\n                        defaultMessage={defaultMsg}\n                        values={{documentationLink}}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    renderTeamOverrideSchemes = () => {\n        const schemes = Object.values(this.props.schemes).map((scheme) => (\n            <PermissionsSchemeSummary\n                scheme={scheme}\n                history={this.props.history}\n                key={scheme.id}\n                isDisabled={this.props.isDisabled}\n            />\n        ));\n        const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        if (hasCustomSchemes) {\n            return (\n                <AdminPanelWithLink\n                    id='team-override-schemes'\n                    className='permissions-block'\n                    titleId={t('admin.permissions.teamOverrideSchemesTitle')}\n                    titleDefault='Team Override Schemes'\n                    subtitleId={t('admin.permissions.teamOverrideSchemesBannerText')}\n                    subtitleDefault='Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                    url='/admin_console/user_management/permissions/team_override_scheme'\n                    disabled={(teamOverrideView !== null) || this.props.isDisabled}\n                    linkTextId={t('admin.permissions.teamOverrideSchemesNewButton')}\n                    linkTextDefault='New Team Override Scheme'\n                >\n                    {schemes.length === 0 && teamOverrideView === null &&\n                        <div className='no-team-schemes'>\n                            <FormattedMessage\n                                id='admin.permissions.teamOverrideSchemesNoSchemes'\n                                defaultMessage='No team override schemes created.'\n                            />\n                        </div>}\n                    {teamOverrideView}\n                    {schemes.length > 0 && schemes}\n                    {schemes.length === (PAGE_SIZE * (this.state.page + 1)) &&\n                        <button\n                            type='button'\n                            className='more-schemes theme style--none color--link'\n                            onClick={this.loadMoreSchemes}\n                            disabled={this.props.isDisabled || this.state.loadingMore}\n                        >\n                            <LoadingWrapper\n                                loading={this.state.loadingMore}\n                                text={Utils.localizeMessage('admin.permissions.loadingMoreSchemes', 'Loading...')}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.loadMoreSchemes'\n                                    defaultMessage='Load more schemes'\n                                />\n                            </LoadingWrapper>\n                        </button>}\n                </AdminPanelWithLink>\n            );\n        }\n        return false;\n    }\n\n    render = () => {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.permissions.permissionSchemes'\n                    defaultMessage='Permission Schemes'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='banner info'>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.introBanner'\n                                        defaultMessage='Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions).'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        <AdminPanelWithLink\n                            id='systemScheme'\n                            titleId={t('admin.permissions.systemSchemeBannerTitle')}\n                            titleDefault='System Scheme'\n                            subtitleId={t('admin.permissions.systemSchemeBannerText')}\n                            subtitleDefault='Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.'\n                            url='/admin_console/user_management/permissions/system_scheme'\n                            disabled={teamOverrideView !== null}\n                            linkTextId={t('admin.permissions.systemSchemeBannerButton')}\n                            linkTextDefault='Edit Scheme'\n                        />\n\n                        {this.renderTeamOverrideSchemes()}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nt('admin.permissions.group.delete_posts.description');\nt('admin.permissions.group.delete_posts.name');\nt('admin.permissions.group.integrations.description');\nt('admin.permissions.group.integrations.name');\nt('admin.permissions.group.posts.description');\nt('admin.permissions.group.posts.name');\nt('admin.permissions.group.private_channel.description');\nt('admin.permissions.group.private_channel.name');\nt('admin.permissions.group.public_channel.description');\nt('admin.permissions.group.public_channel.name');\nt('admin.permissions.group.reactions.description');\nt('admin.permissions.group.reactions.name');\nt('admin.permissions.group.send_invites.description');\nt('admin.permissions.group.send_invites.name');\nt('admin.permissions.group.teams.description');\nt('admin.permissions.group.teams.name');\nt('admin.permissions.group.edit_posts.description');\nt('admin.permissions.group.edit_posts.name');\nt('admin.permissions.group.teams_team_scope.description');\nt('admin.permissions.group.teams_team_scope.name');\nt('admin.permissions.permission.assign_system_admin_role.description');\nt('admin.permissions.permission.assign_system_admin_role.name');\nt('admin.permissions.permission.convert_public_channel_to_private.description');\nt('admin.permissions.permission.convert_public_channel_to_private.name');\nt('admin.permissions.permission.convert_private_channel_to_public.description');\nt('admin.permissions.permission.convert_private_channel_to_public.name');\nt('admin.permissions.permission.create_direct_channel.description');\nt('admin.permissions.permission.create_direct_channel.name');\nt('admin.permissions.permission.create_group_channel.description');\nt('admin.permissions.permission.create_group_channel.name');\nt('admin.permissions.permission.create_post.description');\nt('admin.permissions.permission.create_post.name');\nt('admin.permissions.permission.create_private_channel.description');\nt('admin.permissions.permission.create_private_channel.name');\nt('admin.permissions.permission.create_public_channel.description');\nt('admin.permissions.permission.create_public_channel.name');\nt('admin.permissions.permission.create_team.description');\nt('admin.permissions.permission.create_team.name');\nt('admin.permissions.permission.create_user_access_token.description');\nt('admin.permissions.permission.create_user_access_token.name');\nt('admin.permissions.permission.delete_others_posts.description');\nt('admin.permissions.permission.delete_others_posts.name');\nt('admin.permissions.permission.delete_post.description');\nt('admin.permissions.permission.delete_post.name');\nt('admin.permissions.permission.delete_private_channel.description');\nt('admin.permissions.permission.delete_private_channel.name');\nt('admin.permissions.permission.delete_public_channel.description');\nt('admin.permissions.permission.delete_public_channel.name');\nt('admin.permissions.permission.edit_other_users.description');\nt('admin.permissions.permission.edit_other_users.name');\nt('admin.permissions.permission.edit_post.description');\nt('admin.permissions.group.guest_reactions.description');\nt('admin.permissions.group.guest_reactions.name');\nt('admin.permissions.group.guest_create_post.description');\nt('admin.permissions.group.guest_create_post.name');\nt('admin.permissions.group.guest_create_private_channel.description');\nt('admin.permissions.group.guest_create_private_channel.name');\nt('admin.permissions.group.guest_delete_post.description');\nt('admin.permissions.group.guest_delete_post.name');\nt('admin.permissions.group.guest_edit_post.description');\nt('admin.permissions.group.guest_edit_post.name');\nt('admin.permissions.group.guest_use_channel_mentions.description');\nt('admin.permissions.group.guest_use_channel_mentions.name');\nt('admin.permissions.group.guest_use_group_mentions.description');\nt('admin.permissions.group.guest_use_group_mentions.name');\nt('admin.permissions.permission.edit_post.name');\nt('admin.permissions.permission.import_team.description');\nt('admin.permissions.permission.import_team.name');\nt('admin.permissions.permission.list_team_channels.description');\nt('admin.permissions.permission.list_team_channels.name');\nt('admin.permissions.permission.list_users_without_team.description');\nt('admin.permissions.permission.list_users_without_team.name');\nt('admin.permissions.permission.manage_channel_roles.description');\nt('admin.permissions.permission.manage_channel_roles.name');\nt('admin.permissions.permission.create_emojis.description');\nt('admin.permissions.permission.create_emojis.name');\nt('admin.permissions.permission.delete_emojis.description');\nt('admin.permissions.permission.delete_emojis.name');\nt('admin.permissions.permission.delete_others_emojis.description');\nt('admin.permissions.permission.delete_others_emojis.name');\nt('admin.permissions.permission.manage_jobs.description');\nt('admin.permissions.permission.manage_jobs.name');\nt('admin.permissions.permission.manage_oauth.description');\nt('admin.permissions.permission.manage_oauth.name');\nt('admin.permissions.group.manage_private_channel_members_and_read_groups.description');\nt('admin.permissions.group.manage_private_channel_members_and_read_groups.name');\nt('admin.permissions.permission.manage_private_channel_properties.description');\nt('admin.permissions.permission.manage_private_channel_properties.name');\nt('admin.permissions.group.manage_public_channel_members_and_read_groups.description');\nt('admin.permissions.group.manage_public_channel_members_and_read_groups.name');\nt('admin.permissions.group.convert_public_channel_to_private.description');\nt('admin.permissions.group.convert_public_channel_to_private.name');\nt('admin.permissions.permission.manage_public_channel_properties.description');\nt('admin.permissions.permission.manage_public_channel_properties.name');\nt('admin.permissions.permission.manage_roles.description');\nt('admin.permissions.permission.manage_roles.name');\nt('admin.permissions.permission.manage_slash_commands.description');\nt('admin.permissions.permission.manage_slash_commands.name');\nt('admin.permissions.permission.manage_system.description');\nt('admin.permissions.permission.manage_system.name');\nt('admin.permissions.permission.manage_team.description');\nt('admin.permissions.permission.manage_team.name');\nt('admin.permissions.permission.manage_team_roles.description');\nt('admin.permissions.permission.manage_team_roles.name');\nt('admin.permissions.permission.manage_incoming_webhooks.description');\nt('admin.permissions.permission.manage_incoming_webhooks.name');\nt('admin.permissions.permission.manage_outgoing_webhooks.description');\nt('admin.permissions.permission.manage_outgoing_webhooks.name');\nt('admin.permissions.permission.permanent_delete_user.description');\nt('admin.permissions.permission.permanent_delete_user.name');\nt('admin.permissions.permission.read_channel.description');\nt('admin.permissions.permission.read_channel.name');\nt('admin.permissions.permission.read_user_access_token.description');\nt('admin.permissions.permission.read_user_access_token.name');\nt('admin.permissions.permission.remove_user_from_team.description');\nt('admin.permissions.permission.remove_user_from_team.name');\nt('admin.permissions.permission.revoke_user_access_token.description');\nt('admin.permissions.permission.revoke_user_access_token.name');\nt('admin.permissions.permission.upload_file.description');\nt('admin.permissions.permission.upload_file.name');\nt('admin.permissions.permission.use_channel_mentions.description');\nt('admin.permissions.permission.use_channel_mentions.name');\nt('admin.permissions.permission.use_group_mentions.description');\nt('admin.permissions.permission.use_group_mentions.name');\nt('admin.permissions.permission.view_team.description');\nt('admin.permissions.permission.view_team.name');\nt('admin.permissions.permission.edit_others_posts.description');\nt('admin.permissions.permission.edit_others_posts.name');\nt('admin.permissions.permission.invite_guest.name');\nt('admin.permissions.permission.invite_guest.description');\nt('admin.permissions.roles.all_users.name');\nt('admin.permissions.roles.channel_admin.name');\nt('admin.permissions.roles.channel_user.name');\nt('admin.permissions.roles.system_admin.name');\nt('admin.permissions.roles.system_user.name');\nt('admin.permissions.roles.team_admin.name');\nt('admin.permissions.roles.team_user.name');\nt('admin.permissions.group.manage_shared_channels.name');\nt('admin.permissions.group.manage_shared_channels.description');\nt('admin.permissions.permission.manage_shared_channels.name');\nt('admin.permissions.permission.manage_shared_channels.description');\nt('admin.permissions.permission.manage_secure_connections.name');\nt('admin.permissions.permission.manage_secure_connections.description');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSchemeTeams as loadSchemeTeams, getSchemes as loadSchemes} from 'matterfoss-redux/actions/schemes';\nimport {getSchemes} from 'matterfoss-redux/selectors/entities/schemes';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport PermissionSchemesSettings from './permission_schemes_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const schemes = getSchemes(state);\n    const config = getConfig(state);\n\n    return {\n        schemes,\n        jobsAreEnabled: config.RunJobs === 'true',\n        clusterIsEnabled: config.EnableCluster === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadSchemes,\n            loadSchemeTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSchemesSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\n\ntype Props = {\n\n    // Bool whether navigation is blocked\n    blocked: boolean;\n\n    // String Link destination\n    to: string;\n    actions: {\n\n        // Function for deferring navigation while blocked\n        deferNavigation: (func: () => void) => void;\n    };\n    children?: string | React.ReactNode;\n    className?: string;\n    onClick?: (e: React.MouseEvent) => void;\n};\nexport default class BlockableLink extends React.PureComponent<Props> {\n    private handleClick = (e: React.MouseEvent) => {\n        if (this.props.onClick) {\n            this.props.onClick(e);\n        }\n        if (this.props.blocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(() => {\n                browserHistory.push(this.props.to);\n            });\n        }\n    };\n\n    public render() {\n        const props = {...this.props};\n        Reflect.deleteProperty(props, 'blocked');\n        Reflect.deleteProperty(props, 'actions');\n\n        return (\n            <NavLink\n                {...props}\n                onClick={this.handleClick}\n            />);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {deferNavigation} from 'actions/admin_actions';\nimport {getNavigationBlocked} from 'selectors/views/admin';\nimport {GlobalState} from 'types/store';\n\nimport BlockableLink from './blockable_link';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        blocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockableLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AccordionToggleIcon extends React.PureComponent<React.HTMLAttributes<HTMLSpanElement>> {\n    render(): JSX.Element {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='30px'\n                    height='30px'\n                    viewBox='0 0 30 30'\n                >\n                    <g\n                        id='Developer-Export'\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='none'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-995.000000, -1372.000000)'\n                            id='All-Team-Members'\n                        >\n                            <g transform='translate(245.000000, 698.000000)'>\n                                <g\n                                    id='Team-Administrators'\n                                    transform='translate(0.000000, 651.000000)'\n                                >\n                                    <g id='accordion-header'>\n                                        <g\n                                            id='accordion---expanded'\n                                            transform='translate(750.000000, 23.000000)'\n                                        >\n                                            <path\n                                                d='M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z'\n                                                id=''\n                                                fill='#979797'\n                                            />\n                                            <circle\n                                                id='Oval-2'\n                                                stroke='#989898'\n                                                strokeWidth='2'\n                                                cx='15'\n                                                cy='15'\n                                                r='14'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport AccordionToggleIcon from 'components/widgets/icons/accordion_toggle_icon';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    open: boolean;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    onToggle?: React.EventHandler<React.MouseEvent>;\n    isDisabled?: boolean;\n};\n\nconst AdminPanelTogglable: React.FC<Props> = (props: Props) => {\n    return (\n        <AdminPanel\n            className={'AdminPanelTogglable ' + props.className + (props.open ? '' : ' closed')}\n            id={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            onHeaderClick={props.onToggle}\n            button={<AccordionToggleIcon/>}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelTogglable.defaultProps = {\n    className: '',\n    open: true,\n};\n\nexport default AdminPanelTogglable;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxPartialIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-298.000000, -1273.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---@all-@channel-Mentions'\n                                        transform='translate(0.000000, 375.000000)'\n                                    >\n                                        <g id='Stacked-Group'>\n                                            <g\n                                                id='data-table/1st/row-checkbox-label-base'\n                                                transform='translate(25.000000, 5.000000)'\n                                            >\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z'\n                                                        id='checkbox---partial'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport CheckboxPartialIcon from 'components/widgets/icons/checkbox_partial_icon';\n\nexport default class PermissionCheckbox extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n        id: PropTypes.string,\n    };\n\n    static defaultProps = {\n        value: '',\n        id: '',\n    }\n\n    render() {\n        const {value, id} = this.props;\n        let icon = null;\n        let extraClass = '';\n        if (value === 'checked') {\n            icon = (<CheckboxCheckedIcon/>);\n            extraClass = 'checked';\n        } else if (value === 'intermediate') {\n            icon = (<CheckboxPartialIcon/>);\n            extraClass = 'intermediate';\n        }\n        return (\n            <div\n                className={'permission-check ' + extraClass}\n                data-testid={id}\n            >\n                {icon}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport {generateId} from 'utils/utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport Constants from 'utils/constants';\n\nexport class PermissionDescription extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        id: PropTypes.string.isRequired,\n        rowType: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        selectRow: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.id = generateId();\n\n        this.state = {\n            open: false,\n        };\n\n        this.contentRef = React.createRef();\n    }\n\n    closeTooltip = () => {\n        this.setState({open: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('span');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({open: isElipsis});\n    }\n\n    parentPermissionClicked = (e) => {\n        const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';\n        if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {\n            e.stopPropagation();\n        } else if (isInheritLink) {\n            this.props.selectRow(this.props.id);\n            e.stopPropagation();\n        }\n    }\n\n    render() {\n        const {inherited, id, rowType} = this.props;\n\n        let content = '';\n        if (inherited) {\n            content = (\n                <span className='inherit-link-wrapper'>\n                    <FormattedMarkdownMessage\n                        id='admin.permissions.inherited_from'\n                        values={{\n                            name: this.props.intl.formatMessage({\n                                id: 'admin.permissions.roles.' + inherited.name + '.name',\n                                defaultMessage: inherited.display_name,\n                            }),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            content = (\n                <FormattedMessage\n                    id={'admin.permissions.' + rowType + '.' + id + '.description'}\n                    values={this.props.additionalValues}\n                />\n            );\n        }\n        let tooltip = (\n            <Overlay\n                show={this.state.open}\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                target={this.contentRef.current}\n            >\n                <Tooltip id={this.id}>\n                    {content}\n                </Tooltip>\n            </Overlay>\n        );\n        if (content.props.values && Object.keys(content.props.values).length > 0) {\n            tooltip = null;\n        }\n        content = (\n            <span\n                className='permission-description'\n                onClick={this.parentPermissionClicked}\n                ref={this.contentRef}\n                onMouseOver={this.openTooltip}\n                onMouseOut={this.closeTooltip}\n            >\n                {content}\n                {tooltip}\n            </span>\n        );\n\n        return content;\n    }\n}\n\nexport default injectIntl(PermissionDescription);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionRow extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        readOnly: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    toggleSelect = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(this.props.id);\n    }\n\n    render = () => {\n        const {id, uniqId, inherited, value, readOnly, selected, additionalValues} = this.props;\n        let classes = 'permission-row';\n        if (readOnly) {\n            classes += ' read-only';\n        }\n\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        return (\n            <div\n                className={classes}\n                onClick={this.toggleSelect}\n                id={uniqId}\n            >\n                <PermissionCheckbox\n                    value={value}\n                    id={`${uniqId}-checkbox`}\n                />\n                <span className='permission-name'>\n                    <FormattedMessage\n                        id={'admin.permissions.permission.' + id + '.name'}\n                    />\n                </span>\n                <PermissionDescription\n                    inherited={inherited}\n                    id={id}\n                    selectRow={this.props.selectRow}\n                    rowType='permission'\n                    additionalValues={additionalValues}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionRow from './permission_row.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nconst getRecursivePermissions = (permissions) => {\n    let result = [];\n    for (const permission of permissions) {\n        if (typeof permission === 'string') {\n            result.push(permission);\n        } else {\n            result = result.concat(getRecursivePermissions(permission.permissions));\n        }\n    }\n    return result;\n};\n\nexport default class PermissionGroup extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        permissions: PropTypes.array.isRequired,\n        readOnly: PropTypes.bool,\n        role: PropTypes.object,\n        parentRole: PropTypes.object,\n        scope: PropTypes.string.isRequired,\n        combined: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        root: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            prevPermissions: [],\n            selected: props.selected,\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.selected !== state.selected) {\n            if (getRecursivePermissions(props.permissions).indexOf(props.selected) !== -1) {\n                return {expanded: true, selected: props.selected};\n            }\n            return {selected: props.selected};\n        }\n        return null;\n    }\n\n    toggleExpanded = (e) => {\n        e.stopPropagation();\n        this.setState({expanded: !this.state.expanded});\n    }\n\n    toggleSelectRow = (id) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange([id]);\n    }\n\n    toggleSelectSubGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(ids);\n    }\n\n    toggleSelectGroup = () => {\n        const {readOnly, permissions, role, onChange} = this.props;\n        if (readOnly) {\n            return;\n        }\n        if (this.getStatus(permissions) === 'checked') {\n            const permissionsToToggle = [];\n            for (const permission of getRecursivePermissions(permissions)) {\n                if (!this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({expanded: true});\n            onChange(permissionsToToggle);\n        } else if (this.getStatus(permissions) === '') {\n            const permissionsToToggle = [];\n            let expanded = true;\n            if (this.state.prevPermissions.length === 0) {\n                for (const permission of getRecursivePermissions(permissions)) {\n                    if (!this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                        expanded = false;\n                    }\n                }\n            } else {\n                for (const permission of getRecursivePermissions(permissions)) {\n                    if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                    }\n                }\n            }\n            onChange(permissionsToToggle);\n            this.setState({prevPermissions: [], expanded});\n        } else {\n            const permissionsToToggle = [];\n            for (const permission of getRecursivePermissions(permissions)) {\n                if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({prevPermissions: role.permissions, expanded: false});\n            onChange(permissionsToToggle);\n        }\n    }\n\n    isInScope = (permission) => {\n        if (this.props.scope === 'channel_scope' && PermissionsScope[permission] !== 'channel_scope') {\n            return false;\n        }\n        if (this.props.scope === 'team_scope' && PermissionsScope[permission] === 'system_scope') {\n            return false;\n        }\n        return true;\n    }\n\n    renderPermission = (permission, additionalValues) => {\n        if (!this.isInScope(permission)) {\n            return null;\n        }\n        const comesFromParent = this.fromParent(permission);\n        const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;\n        return (\n            <PermissionRow\n                key={permission}\n                id={permission}\n                uniqId={this.props.uniqId + '-' + permission}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly || comesFromParent}\n                inherited={comesFromParent ? this.props.parentRole : null}\n                value={active ? 'checked' : ''}\n                onChange={this.toggleSelectRow}\n                additionalValues={additionalValues}\n            />\n        );\n    }\n\n    renderGroup = (g) => {\n        return (\n            <PermissionGroup\n                key={g.id}\n                id={g.id}\n                uniqId={this.props.uniqId + '-' + g.id}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly}\n                permissions={g.permissions}\n                additionalValues={this.props.additionalValues}\n                role={this.props.role}\n                parentRole={this.props.parentRole}\n                scope={this.props.scope}\n                onChange={this.toggleSelectSubGroup}\n                combined={g.combined}\n                root={false}\n            />\n        );\n    }\n\n    fromParent = (id) => {\n        return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;\n    }\n\n    getStatus = (permissions) => {\n        let anyChecked = false;\n        let anyUnchecked = false;\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                if (!this.isInScope(permission)) {\n                    continue;\n                }\n                anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;\n                anyUnchecked = anyUnchecked || (!this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1);\n            } else {\n                const status = this.getStatus(permission.permissions);\n                if (status === 'intermediate') {\n                    return 'intermediate';\n                }\n                if (status === 'checked') {\n                    anyChecked = true;\n                }\n                if (status === '') {\n                    anyUnchecked = true;\n                }\n            }\n        }\n        if (anyChecked && anyUnchecked) {\n            return 'intermediate';\n        }\n        if (anyChecked && !anyUnchecked) {\n            return 'checked';\n        }\n        return '';\n    }\n\n    hasPermissionsOnScope = () => {\n        return getRecursivePermissions(this.props.permissions).some((permission) => this.isInScope(permission));\n    }\n\n    allPermissionsFromParent = (permissions) => {\n        for (const permission of permissions) {\n            if (typeof permission !== 'string') {\n                if (!this.allPermissionsFromParent(permission.permissions)) {\n                    return false;\n                }\n                continue;\n            }\n            if (this.isInScope(permission) && !this.fromParent(permission)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render = () => {\n        const {id, uniqId, permissions, readOnly, combined, root, selected, additionalValues} = this.props;\n        if (!this.hasPermissionsOnScope()) {\n            return null;\n        }\n        const permissionsRows = permissions.map((group) => {\n            if (typeof group === 'string') {\n                const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};\n                return this.renderPermission(group, addVals);\n            }\n            return this.renderGroup(group);\n        });\n        if (root) {\n            return (\n                <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                    {permissionsRows}\n                </div>\n            );\n        }\n\n        let inherited = null;\n        if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {\n            inherited = this.props.parentRole;\n        }\n\n        let classes = '';\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {\n            classes += ' read-only';\n        }\n\n        if (combined) {\n            classes += ' combined';\n        }\n\n        return (\n            <div className='permission-group'>\n                {!root &&\n                    <div\n                        className={'permission-group-row ' + classes}\n                        onClick={this.toggleSelectGroup}\n                        id={uniqId}\n                    >\n                        {!combined &&\n                            <div\n                                className={'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : '')}\n                                onClick={this.toggleExpanded}\n                            />}\n                        <PermissionCheckbox\n                            value={this.getStatus(this.props.permissions)}\n                            id={`${uniqId}-checkbox`}\n                        />\n                        <span className='permission-name'>\n                            <FormattedMessage id={'admin.permissions.group.' + id + '.name'}/>\n                        </span>\n                        <PermissionDescription\n                            additionalValues={additionalValues?.[id] ? additionalValues[id] : {}}\n                            inherited={inherited}\n                            id={id}\n                            selectRow={this.props.selectRow}\n                            rowType='group'\n                        />\n                    </div>}\n                {!combined &&\n                    <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                        {permissionsRows}\n                    </div>}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class EditPostTimeLimitButton extends React.PureComponent {\n    static propTypes = {\n        timeLimit: PropTypes.number.isRequired,\n        onClick: PropTypes.func,\n        isDisabled: PropTypes.bool,\n    };\n\n    render = () => {\n        let messageID;\n        if (this.props.timeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            messageID = t('edit_post.time_limit_button.no_limit');\n        } else {\n            messageID = t('edit_post.time_limit_button.for_n_seconds');\n        }\n\n        return (\n            <button\n                type='button'\n                className='edit-post-time-limit-button'\n                onClick={this.props.onClick}\n                disabled={this.props.isDisabled}\n            >\n                <i className='fa fa-gear'/>\n                <FormattedMessage\n                    id={messageID}\n                    values={{n: this.props.timeLimit}}\n                />\n            </button>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\n\nfunction mapStateToProps(state) {\n    const {PostEditTimeLimit} = getConfig(state);\n\n    return {\n        timeLimit: parseInt(PostEditTimeLimit, 10),\n    };\n}\n\nexport default connect(mapStateToProps)(EditPostTimeLimitButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst INT32_MAX = 2147483647;\n\nexport default class EditPostTimeLimitModal extends React.PureComponent {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        show: PropTypes.bool,\n        onClose: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateConfig: PropTypes.func.isRequired,\n            getConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),\n            saving: false,\n            errorMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getConfig();\n    }\n\n    save = async () => {\n        this.setState({saving: true, errorMessage: ''});\n\n        const val = parseInt(this.state.postEditTimeLimit, 10);\n        if (val !== Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {\n                this.setState({errorMessage: localizeMessage('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'), saving: false});\n                return false;\n            }\n        }\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.ServiceSettings.PostEditTimeLimit = val;\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({errorMessage: err, saving: false});\n        } else {\n            this.setState({saving: false});\n            this.props.onClose();\n        }\n\n        return true;\n    }\n\n    handleOptionChange = (e) => {\n        const {value} = e.target;\n        if (value === Constants.ALLOW_EDIT_POST_ALWAYS) {\n            this.setState({postEditTimeLimit: Constants.UNSET_POST_EDIT_TIME_LIMIT});\n        } else {\n            this.setState({postEditTimeLimit: ''});\n        }\n    }\n\n    handleSecondsChange = (e) => {\n        const {value} = e.target;\n        this.setState({postEditTimeLimit: value});\n    }\n\n    render = () => {\n        return (\n            <Modal\n                dialogClassName='a11y__modal admin-modal edit-post-time-limit-modal'\n                show={this.props.show}\n                role='dialog'\n                aria-labelledby='editPostTimeModalLabel'\n            >\n                <Modal.Header\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editPostTimeModalLabel'\n                    >\n                        <FormattedMessage\n                            id='edit_post.time_limit_modal.title'\n                            defaultMessage='Configure Global Edit Post Time Limit'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedMarkdownMessage\n                        id='edit_post.time_limit_modal.description'\n                        defaultMessage='Setting a time limit **applies to all users** who have the \"Edit Post\" permissions in any permission scheme.'\n                    />\n                    <div className='pl-3 pb-3 pt-3'>\n                        <div className='pt-3'>\n                            <input\n                                id='anytime'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_ALWAYS}\n                                checked={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='anytime'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_anytime'\n                                    defaultMessage='Anytime'\n                                />\n                            </label>\n                        </div>\n                        <div className='pt-2'>\n                            <input\n                                id='timelimit'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_TIME_LIMIT}\n                                checked={this.state.postEditTimeLimit !== Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.preinput'\n                                    defaultMessage='Can edit for'\n                                />\n                            </label>\n                            <input\n                                type='number'\n                                className='form-control inline'\n                                min='0'\n                                step='1'\n                                max={INT32_MAX}\n                                id='editPostTimeLimit'\n                                readOnly={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleSecondsChange}\n                                value={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.postinput'\n                                    defaultMessage='seconds after posting'\n                                />\n                            </label>\n                        </div>\n                        <div className='pt-3 light'>\n                            <FormattedMessage\n                                id='edit_post.time_limit_modal.subscript'\n                                defaultMessage='Set the length of time users have to edit their messages after posting.'\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className='edit-post-time-limit-modal__error'>\n                        {this.state.errorMessage}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-cancel'\n                        onClick={this.props.onClose}\n                    >\n                        <FormattedMessage\n                            id='confirm_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-default'\n                        onClick={this.save}\n                        disabled={this.state.saving}\n                    >\n                        <FormattedMessage\n                            id={this.state.saving ? t('save_button.saving') : t('edit_post.time_limit_modal.save_button')}\n                            defaultMessage='Save Edit Time'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, updateConfig} from 'matterfoss-redux/actions/admin';\nimport * as Selectors from 'matterfoss-redux/selectors/entities/admin';\n\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateConfig,\n            getConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostTimeLimitModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class PermissionsTree extends React.PureComponent {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n        license: PropTypes.object,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: (\n                    <EditPostTimeLimitButton\n                        onClick={this.openPostTimeLimitModal}\n                        isDisabled={this.props.readOnly}\n                    />\n                ),\n            },\n        };\n\n        this.groups = [\n            {\n                id: 'teams',\n                permissions: [\n                    {\n                        id: 'send_invites',\n                        combined: true,\n                        permissions: [\n                            Permissions.INVITE_USER,\n                            Permissions.GET_PUBLIC_LINK,\n                            Permissions.ADD_USER_TO_TEAM,\n                        ],\n                    },\n                    Permissions.CREATE_TEAM,\n                ],\n            },\n            {\n                id: 'public_channel',\n                permissions: [\n                    Permissions.CREATE_PUBLIC_CHANNEL,\n                    Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES,\n                    {\n                        id: 'manage_public_channel_members_and_read_groups',\n                        combined: true,\n                        permissions: [\n                            Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n                            Permissions.READ_PUBLIC_CHANNEL_GROUPS,\n                        ],\n                    },\n                    Permissions.DELETE_PUBLIC_CHANNEL,\n                    {\n                        id: 'convert_public_channel_to_private',\n                        combined: true,\n                        permissions: [\n                            Permissions.CONVERT_PUBLIC_CHANNEL_TO_PRIVATE,\n                            Permissions.CONVERT_PRIVATE_CHANNEL_TO_PUBLIC,\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 'private_channel',\n                permissions: [\n                    Permissions.CREATE_PRIVATE_CHANNEL,\n                    Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES,\n                    {\n                        id: 'manage_private_channel_members_and_read_groups',\n                        combined: true,\n                        permissions: [\n                            Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS,\n                            Permissions.READ_PRIVATE_CHANNEL_GROUPS,\n                        ],\n                    },\n                    Permissions.DELETE_PRIVATE_CHANNEL,\n                ],\n            },\n            {\n                id: 'posts',\n                permissions: [\n                    {\n                        id: 'edit_posts',\n                        permissions: [\n                            Permissions.EDIT_POST,\n                            Permissions.EDIT_OTHERS_POSTS,\n                        ],\n                    },\n                    {\n                        id: 'delete_posts',\n                        permissions: [\n                            Permissions.DELETE_POST,\n                            Permissions.DELETE_OTHERS_POSTS,\n                        ],\n                    },\n                    {\n                        id: 'reactions',\n                        combined: true,\n                        permissions: [\n                            Permissions.ADD_REACTION,\n                            Permissions.REMOVE_REACTION,\n                        ],\n                    },\n                    Permissions.USE_CHANNEL_MENTIONS,\n                ],\n            },\n            {\n                id: 'integrations',\n                permissions: [\n                ],\n            },\n            {\n                id: 'manage_shared_channels',\n                permissions: [\n                ],\n            },\n        ];\n        this.updateGroups();\n    }\n\n    updateGroups = () => {\n        const {config, scope, license} = this.props;\n        const sharedChannelsGroup = this.groups[this.groups.length - 1];\n        const integrationsGroup = this.groups[this.groups.length - 2];\n        const postsGroup = this.groups[this.groups.length - 3];\n        const teamsGroup = this.groups[0];\n        if (config.EnableIncomingWebhooks === 'true' && !integrationsGroup.permissions.includes(Permissions.MANAGE_INCOMING_WEBHOOKS)) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_INCOMING_WEBHOOKS);\n        }\n        if (config.EnableOutgoingWebhooks === 'true' && !integrationsGroup.permissions.includes(Permissions.MANAGE_OUTGOING_WEBHOOKS)) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_OUTGOING_WEBHOOKS);\n        }\n        if (config.EnableOAuthServiceProvider === 'true' && !integrationsGroup.permissions.includes(Permissions.MANAGE_OAUTH)) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_OAUTH);\n        }\n        if (config.EnableCommands === 'true' && !integrationsGroup.permissions.includes(Permissions.MANAGE_SLASH_COMMANDS)) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_SLASH_COMMANDS);\n        }\n        if (config.EnableCustomEmoji === 'true' && !integrationsGroup.permissions.includes(Permissions.CREATE_EMOJIS)) {\n            integrationsGroup.permissions.push(Permissions.CREATE_EMOJIS);\n        }\n        if (config.EnableCustomEmoji === 'true' && !integrationsGroup.permissions.includes(Permissions.DELETE_EMOJIS)) {\n            integrationsGroup.permissions.push(Permissions.DELETE_EMOJIS);\n        }\n        if (config.EnableCustomEmoji === 'true' && !integrationsGroup.permissions.includes(Permissions.DELETE_OTHERS_EMOJIS)) {\n            integrationsGroup.permissions.push(Permissions.DELETE_OTHERS_EMOJIS);\n        }\n        if (config.EnableGuestAccounts === 'true' && !teamsGroup.permissions.includes(Permissions.INVITE_GUEST)) {\n            teamsGroup.permissions.push(Permissions.INVITE_GUEST);\n        }\n        if (scope === 'team_scope' && this.groups[0].id !== 'teams_team_scope') {\n            this.groups[0].id = 'teams_team_scope';\n        }\n        if (license?.IsLicensed === 'true' && license?.LDAPGroups === 'true' && !postsGroup.permissions.includes(Permissions.USE_GROUP_MENTIONS)) {\n            postsGroup.permissions.push(Permissions.USE_GROUP_MENTIONS);\n        }\n        postsGroup.permissions.push(Permissions.CREATE_POST);\n\n        if (config.ExperimentalSharedChannels === 'true') {\n            sharedChannelsGroup.permissions.push(Permissions.MANAGE_SHARED_CHANNELS);\n            sharedChannelsGroup.permissions.push(Permissions.MANAGE_SECURE_CONNECTIONS);\n        }\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.config !== prevProps.config || this.props.license !== prevProps.license) {\n            this.updateGroups();\n        }\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.groups}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport PermissionsTree from './permissions_tree.jsx';\n\nexport const EXCLUDED_PERMISSIONS = [\n    Permissions.VIEW_MEMBERS,\n    Permissions.JOIN_PUBLIC_TEAMS,\n    Permissions.LIST_PUBLIC_TEAMS,\n    Permissions.JOIN_PRIVATE_TEAMS,\n    Permissions.LIST_PRIVATE_TEAMS,\n];\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    return {\n        config,\n        license,\n    };\n}\n\nexport default connect(mapStateToProps)(PermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class GuestPermissionsTree extends React.PureComponent {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n        license: PropTypes.object,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            guest_edit_post: {\n                editTimeLimitButton: (\n                    <EditPostTimeLimitButton\n                        onClick={this.openPostTimeLimitModal}\n                        isDisabled={this.props.readOnly}\n                    />\n                ),\n            },\n        };\n\n        this.permissions = [\n            Permissions.CREATE_PRIVATE_CHANNEL,\n            Permissions.EDIT_POST,\n            Permissions.DELETE_POST,\n            {\n                id: 'guest_reactions',\n                combined: true,\n                permissions: [\n                    Permissions.ADD_REACTION,\n                    Permissions.REMOVE_REACTION,\n                ],\n            },\n            Permissions.USE_CHANNEL_MENTIONS,\n        ];\n\n        if (props.license && props.license.IsLicensed === 'true' && props.license.LDAPGroups === 'true') {\n            this.permissions.push(Permissions.USE_GROUP_MENTIONS);\n        }\n        this.permissions.push(Permissions.CREATE_POST);\n        this.permissions = this.permissions.map((permission) => {\n            if (typeof (permission) === 'string') {\n                return {\n                    id: `guest_${permission}`,\n                    combined: true,\n                    permissions: [\n                        permission,\n                    ],\n                };\n            }\n            return permission;\n        });\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree guest'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.permissions}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport GuestPermissionsTree from './guest_permissions_tree.jsx';\n\nexport const GUEST_INCLUDED_PERMISSIONS = [\n    Permissions.CREATE_PRIVATE_CHANNEL,\n    Permissions.EDIT_POST,\n    Permissions.DELETE_POST,\n    Permissions.ADD_REACTION,\n    Permissions.REMOVE_REACTION,\n    Permissions.USE_CHANNEL_MENTIONS,\n    Permissions.USE_GROUP_MENTIONS,\n    Permissions.CREATE_POST,\n];\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    return {\n        config,\n        license,\n    };\n}\n\nexport default connect(mapStateToProps)(GuestPermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport GeneralConstants from 'matterfoss-redux/constants/general';\n\nimport ConfirmModal from 'components/confirm_modal';\n\nimport {PermissionsScope, DefaultRolePermissions} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SaveButton from 'components/save_button';\nimport LoadingScreen from 'components/loading_screen';\nimport FormError from 'components/form_error';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport AdminPanelTogglable from 'components/widgets/admin_console/admin_panel_togglable';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree, {EXCLUDED_PERMISSIONS} from '../permissions_tree';\nimport GuestPermissionsTree, {GUEST_INCLUDED_PERMISSIONS} from '../guest_permissions_tree';\n\nexport default class PermissionSystemSchemeSettings extends React.PureComponent {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        isDisabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showResetDefaultModal: false,\n            loaded: false,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: {},\n            openRoles: {\n                guests: true,\n                all_users: true,\n                system_admin: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n            urlParams: new URLSearchParams(props.location.search),\n        };\n        this.rolesNeeded = [\n            GeneralConstants.SYSTEM_ADMIN_ROLE,\n            GeneralConstants.SYSTEM_USER_ROLE,\n            GeneralConstants.TEAM_ADMIN_ROLE,\n            GeneralConstants.TEAM_USER_ROLE,\n            GeneralConstants.CHANNEL_ADMIN_ROLE,\n            GeneralConstants.CHANNEL_USER_ROLE,\n            GeneralConstants.SYSTEM_GUEST_ROLE,\n            GeneralConstants.TEAM_GUEST_ROLE,\n            GeneralConstants.CHANNEL_GUEST_ROLE,\n        ];\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(this.rolesNeeded);\n        if (this.rolesNeeded.every((roleName) => this.props.roles[roleName])) {\n            this.loadRolesIntoState(this.props);\n        }\n\n        if (this.state.urlParams.get('rowIdFromQuery')) {\n            setTimeout(() => {\n                this.selectRow(this.state.urlParams.get('rowIdFromQuery'));\n            }, 1000);\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!this.state.loaded && this.rolesNeeded.every((roleName) => nextProps.roles[roleName])) {\n            this.loadRolesIntoState(nextProps);\n        }\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    loadRolesIntoState(props) {\n        /* eslint-disable camelcase */\n        const {\n            system_admin,\n            team_admin,\n            channel_admin,\n            system_user,\n            team_user,\n            channel_user,\n            system_guest,\n            team_guest,\n            channel_guest,\n        } = props.roles;\n        /* eslint-enable camelcase */\n\n        this.setState({\n            selectedPermission: null,\n            loaded: true,\n            roles: {\n                system_admin,\n                team_admin,\n                channel_admin,\n                all_users: {\n                    name: 'all_users',\n                    displayName: 'All members',\n                    permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions),\n                },\n                guests: {\n                    name: 'guests',\n                    displayName: 'Guests',\n                    permissions: system_guest.permissions.concat(team_guest.permissions).concat(channel_guest.permissions),\n                },\n            },\n        });\n    }\n\n    deriveRolesFromAllUsers = (role) => {\n        return {\n            system_user: {\n                ...this.props.roles.system_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_user: {\n                ...this.props.roles.team_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...this.props.roles.channel_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    deriveRolesFromGuests = (role) => {\n        return {\n            system_guest: {\n                ...this.props.roles.system_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_guest: {\n                ...this.props.roles.team_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_guest: {\n                ...this.props.roles.channel_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    restoreExcludedPermissions = (roles) => {\n        for (const permission of this.props.roles.system_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.system_user.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.team_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_user.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.channel_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_user.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    restoreGuestPermissions = (roles) => {\n        for (const permission of this.props.roles.system_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.system_guest.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.team_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_guest.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.channel_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_guest.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    handleSubmit = async () => {\n        const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);\n        const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);\n        const roles = this.restoreExcludedPermissions(this.deriveRolesFromAllUsers(this.state.roles.all_users));\n        const guestRoles = this.restoreGuestPermissions(this.deriveRolesFromGuests(this.state.roles.guests));\n        const systemUserPromise = this.props.actions.editRole(roles.system_user);\n        const teamUserPromise = this.props.actions.editRole(roles.team_user);\n        const channelUserPromise = this.props.actions.editRole(roles.channel_user);\n\n        const promises = [teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise];\n\n        if (this.haveGuestAccountsPermissions()) {\n            const systemGuestPromise = this.props.actions.editRole(guestRoles.system_guest);\n            const teamGuestPromise = this.props.actions.editRole(guestRoles.team_guest);\n            const channelGuestPromise = this.props.actions.editRole(guestRoles.channel_guest);\n            promises.push(systemGuestPromise, teamGuestPromise, channelGuestPromise);\n        }\n\n        this.setState({saving: true});\n\n        const results = await Promise.all(promises);\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.state.roles};\n        const role = {...roles[roleId]};\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        roles[roleId] = role;\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    resetDefaults = () => {\n        const newRolesState = JSON.parse(JSON.stringify({...this.state.roles}));\n\n        Object.entries(DefaultRolePermissions).forEach(([roleName, permissions]) => {\n            newRolesState[roleName].permissions = permissions;\n        });\n\n        this.setState({roles: newRolesState, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    haveGuestAccountsPermissions = () => {\n        return this.props.license.GuestAccountsPermissions === 'true';\n    }\n\n    render = () => {\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/permissions'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme'\n                            defaultMessage='System Scheme'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.systemScheme.introBanner'\n                                        defaultMessage='Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams.'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        {this.props.license && this.props.config.EnableGuestAccounts === 'true' &&\n                            <AdminPanelTogglable\n                                className='permissions-block'\n                                open={this.state.openRoles.guests}\n                                id='all_users'\n                                onToggle={() => this.toggleRole('guests')}\n                                titleId={t('admin.permissions.systemScheme.GuestsTitle')}\n                                titleDefault='Guests'\n                                subtitleId={t('admin.permissions.systemScheme.GuestsDescription')}\n                                subtitleDefault='Permissions granted to guest users.'\n                            >\n                                <GuestPermissionsTree\n                                    selected={this.state.selectedPermission}\n                                    role={this.state.roles.guests}\n                                    scope={'system_scope'}\n                                    onToggle={this.togglePermission}\n                                    selectRow={this.selectRow}\n                                    readOnly={this.props.isDisabled || !this.haveGuestAccountsPermissions()}\n                                />\n                            </AdminPanelTogglable>}\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.all_users}\n                            id='all_users'\n                            onToggle={() => this.toggleRole('all_users')}\n                            titleId={t('admin.permissions.systemScheme.allMembersTitle')}\n                            titleDefault='All Members'\n                            subtitleId={t('admin.permissions.systemScheme.allMembersDescription')}\n                            subtitleDefault='Permissions granted to all members, including administrators and newly created users.'\n                        >\n                            <PermissionsTree\n                                selected={this.state.selectedPermission}\n                                role={this.state.roles.all_users}\n                                scope={'system_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.channel_admin}\n                            onToggle={() => this.toggleRole('channel_admin')}\n                            titleId={t('admin.permissions.systemScheme.channelAdminsTitle')}\n                            titleDefault='Channel Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.channelAdminsDescription')}\n                            subtitleDefault='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={this.state.roles.all_users}\n                                role={this.state.roles.channel_admin}\n                                scope={'channel_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.team_admin}\n                            onToggle={() => this.toggleRole('team_admin')}\n                            titleId={t('admin.permissions.systemScheme.teamAdminsTitle')}\n                            titleDefault='Team Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.teamAdminsDescription')}\n                            subtitleDefault='Permissions granted to team creators and any users promoted to Team Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={this.state.roles.all_users}\n                                role={this.state.roles.team_admin}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.system_admin}\n                            onToggle={() => this.toggleRole('system_admin')}\n                            titleId={t('admin.permissions.systemScheme.systemAdminsTitle')}\n                            titleDefault='System Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.systemAdminsDescription')}\n                            subtitleDefault='Full permissions granted to System Administrators.'\n                        >\n                            <PermissionsTree\n                                readOnly={true}\n                                role={this.state.roles.system_admin}\n                                scope={'system_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n                    </div>\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={this.props.isDisabled || !this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/user_management/permissions'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <a\n                        data-testid='resetPermissionsToDefault'\n                        onClick={() => this.setState({showResetDefaultModal: true})}\n                        className='cancel-button reset-defaults-btn'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButton'\n                            defaultMessage='Reset to Defaults'\n                        />\n                    </a>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n\n                <ConfirmModal\n                    show={this.state.showResetDefaultModal}\n                    title={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalTitle'\n                            defaultMessage='Reset to Default?'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalBody'\n                            defaultMessage='This will reset all selections on this page to their default settings. Are you sure you want to reset?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsConfirmationButton'\n                            defaultMessage='Yes, Reset'\n                        />\n                    }\n                    onConfirm={() => {\n                        this.resetDefaults();\n                        this.setState({showResetDefaultModal: false});\n                    }}\n                    onCancel={() => this.setState({showResetDefaultModal: false})}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'matterfoss-redux/actions/roles';\n\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles';\nimport {getLicense, getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionSystemSchemeSettings from './permission_system_scheme_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        config: getConfig(state),\n        license: getLicense(state),\n        roles: getRoles(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSystemSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect, {Value} from 'components/multiselect/multiselect';\nimport ConfirmModal from 'components/confirm_modal';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {imageURLForTeam} from 'utils/utils';\n\nconst TEAMS_PER_PAGE = 50;\n\ntype TeamValue = (Team & Value);\n\nexport type Props = {\n    currentSchemeId?: string;\n    alreadySelected?: string[];\n    excludeGroupConstrained?: boolean;\n    searchTerm: string;\n    teams: Team[];\n    onModalDismissed?: () => void;\n    onTeamsSelected?: (a: Team[]) => void;\n    modalID?: string;\n    actions: {\n        loadTeams: (page?: number, perPage?: number, includeTotalCount?: boolean, excludePolicyConstrained?: boolean) => Promise<ActionResult>;\n        setModalSearchTerm: (searchTerm: string) => void;\n        searchTeams: (searchTerm: string) => void;\n    };\n    data?: any;\n    excludePolicyConstrained?: boolean;\n};\n\ntype State = {\n    values: TeamValue[];\n    show: boolean;\n    search: boolean;\n    loadingTeams: boolean;\n    confirmAddModal: boolean;\n    confirmAddTeam: any;\n};\n\nexport default class TeamSelectorModal extends React.PureComponent<Props, State> {\n    private searchTimeoutId?: number;\n    private selectedItemRef?: React.RefObject<HTMLDivElement> | undefined;\n    private currentSchemeId?: string;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingTeams: true,\n            confirmAddModal: false,\n            confirmAddTeam: null,\n        };\n\n        this.selectedItemRef = React.createRef();\n    }\n\n    componentDidMount() {\n        this.props.actions.loadTeams(0, TEAMS_PER_PAGE + 1, false, this.props.excludePolicyConstrained).then(() => {\n            this.setTeamsLoadingState(false);\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (this.props.searchTerm !== prevProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = window.setTimeout(\n                async () => {\n                    this.setTeamsLoadingState(true);\n                    await this.props.actions.searchTeams(searchTerm);\n                    this.setTeamsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e: Event | TeamValue[] | undefined) => {\n        if (e) {\n            (e as Event).preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onTeamsSelected?.(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value: TeamValue, confirmed = false) => {\n        if (this.props.modalID === ModalIdentifiers.ADD_TEAMS_TO_SCHEME && value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {\n            this.setState({confirmAddModal: true, confirmAddTeam: value});\n            return;\n        }\n        const values = Object.assign([], this.state.values);\n        const teamIds = values.map((v: Team) => v.id);\n        if (value && value.id && teamIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values, confirmAddModal: false, confirmAddTeam: null});\n    }\n\n    setTeamsLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingTeams: loadingState,\n        });\n    }\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setTeamsLoadingState(true);\n            this.props.actions.loadTeams(page, TEAMS_PER_PAGE + 1, false, this.props.excludePolicyConstrained).then(() => {\n                this.setTeamsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values: TeamValue[]) => {\n        this.setState({values});\n    }\n\n    search = (term: string, multiselectComponent: { state: { page: number }; setState: (arg0: { page: number }) => void }) => {\n        if (multiselectComponent.state.page !== 0) {\n            multiselectComponent.setState({page: 0});\n        }\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption = (option: TeamValue, isSelected: boolean, onAdd: (value: TeamValue) => void, onMouseMove: (value: TeamValue) => void) => {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='team-info-block'>\n                        <TeamIcon\n                            content={option.display_name}\n                            url={imageURLForTeam(option)}\n                        />\n                        <div className='team-data'>\n                            <div className='title'>{option.display_name}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props: { data: TeamValue }) {\n        return props.data.display_name;\n    }\n\n    renderConfirmModal(show: boolean, team: TeamValue) {\n        const title = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.title'\n                defaultMessage='Team Override Scheme Change?'\n            />\n        );\n        const message = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.message'\n                defaultMessage='This team is already selected in another team scheme, are you sure you want to move it to this team scheme?'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.accept'\n                defaultMessage='Yes, Move Team'\n            />\n        );\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButtonText}\n                onCancel={() => this.setState({confirmAddModal: false, confirmAddTeam: null})}\n                onConfirm={() => this.addValue(team, true)}\n            />\n        );\n    }\n\n    render() {\n        const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectTeams'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let teams = [] as Team[];\n        if (this.props.teams) {\n            teams = this.props.teams.filter((team) => team.delete_at === 0);\n            teams = teams.filter((team) => team.scheme_id !== this.currentSchemeId);\n            teams = this.props.excludeGroupConstrained ? teams.filter((team) => !team.group_constrained) : teams;\n            if (this.props.alreadySelected) {\n                teams = teams.filter((team) => this.props.alreadySelected?.indexOf(team.id) === -1);\n            }\n            if (this.props.excludePolicyConstrained) {\n                teams = teams.filter((team) => team.policy_id === null);\n            }\n            teams.sort((a, b) => {\n                const aName = a.display_name.toUpperCase();\n                const bName = b.display_name.toUpperCase();\n                if (aName === bName) {\n                    return 0;\n                }\n                if (aName > bName) {\n                    return 1;\n                }\n                return -1;\n            });\n        }\n\n        const teamsValues = teams.map((team) => {\n            return {label: team.name, value: team.id, ...team};\n        });\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels team-selector-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='teamSelectorModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='teamSelectorModalLabel'\n                    >\n                        <FormattedMarkdownMessage\n                            id='add_teams_to_scheme.title'\n                            defaultMessage='Add Teams to **Team Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {confirmModal}\n                    <MultiSelect<TeamValue>\n                        key='addTeamsToSchemeKey'\n                        options={teamsValues}\n                        optionRenderer={this.renderOption}\n                        selectedItemRef={this.selectedItemRef}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={TEAMS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingTeams}\n                        placeholderText={localizeMessage('multiselect.addTeamsPlaceholder', 'Search and add teams')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, AnyAction, bindActionCreators, Dispatch} from 'redux';\n\nimport {getTeams as loadTeams, searchTeams} from 'matterfoss-redux/actions/teams';\nimport {getTeams} from 'matterfoss-redux/selectors/entities/teams';\n\nimport {ActionFunc, ActionResult, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport {GlobalState} from 'types/store';\n\nimport TeamSelectorModal from './team_selector_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const teams = Object.values(getTeams(state) || {}).filter((team) => {\n        return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ||\n               team.description.toLowerCase().startsWith(searchTerm.toLowerCase());\n    });\n\n    return {\n        searchTerm,\n        teams,\n    };\n}\n\ntype Actions = {\n    loadTeams: (page?: number, perPage?: number, includeTotalCount?: boolean) => Promise<ActionResult>;\n    searchTeams: (searchTerm: string) => void;\n    setModalSearchTerm: (searchTerm: string) => GenericAction;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<AnyAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            loadTeams,\n            setModalSearchTerm,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    onButtonClick?: React.EventHandler<React.MouseEvent>;\n    disabled?: boolean;\n    buttonTextId?: string;\n    buttonTextDefault?: string;\n}\n\nconst AdminPanelWithButton: React.FC<Props> = (props: Props) => {\n    let button;\n    if (props.onButtonClick && props.buttonTextId) {\n        const buttonId = (props.buttonTextDefault || '').split(' ').join('-').toLowerCase();\n        button = (\n            <a\n                className={classNames('btn', 'btn-primary', {disabled: props.disabled})}\n                onClick={props.disabled ? (e) => e.preventDefault() : props.onButtonClick}\n                data-testid={buttonId}\n            >\n                <FormattedMessage\n                    id={props.buttonTextId}\n                    defaultMessage={props.buttonTextDefault}\n                />\n            </a>\n        );\n    }\n\n    return (\n        <AdminPanel\n            className={'AdminPanelWithButton ' + props.className}\n            id={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            button={button}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelWithButton.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanelWithButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport {imageURLForTeam} from 'utils/utils';\n\nexport default class TeamInList extends React.PureComponent {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRemoveTeam: PropTypes.func,\n        isDisabled: PropTypes.bool,\n    }\n\n    handleRemoveTeam = () => {\n        const {team, isDisabled, onRemoveTeam} = this.props;\n        if (isDisabled) {\n            return;\n        }\n        onRemoveTeam(team.id);\n    }\n\n    render() {\n        const {team, isDisabled} = this.props;\n        return (\n            <div\n                className='team'\n                key={team.id}\n            >\n                <div className='team-info-block'>\n                    <TeamIcon\n                        content={team.display_name}\n                        url={imageURLForTeam(team)}\n                    />\n                    <div className='team-data'>\n                        <div className='title'>{team.display_name}</div>\n                    </div>\n                </div>\n                <a\n                    className={isDisabled ? 'remove disabled' : 'remove'}\n                    onClick={this.handleRemoveTeam}\n                >\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme.removeTeam'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats as loadTeamStats} from 'matterfoss-redux/actions/teams';\n\nimport {getTeamStats} from 'matterfoss-redux/selectors/entities/teams';\n\nimport TeamInList from './team_in_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        stats: getTeamStats(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeamStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SaveButton from 'components/save_button';\nimport LoadingScreen from 'components/loading_screen';\nimport FormError from 'components/form_error';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport AdminPanelTogglable from 'components/widgets/admin_console/admin_panel_togglable';\nimport AdminPanelWithButton from 'components/widgets/admin_console/admin_panel_with_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree, {EXCLUDED_PERMISSIONS} from '../permissions_tree';\nimport GuestPermissionsTree, {GUEST_INCLUDED_PERMISSIONS} from '../guest_permissions_tree';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport TeamInList from './team_in_list';\n\nexport default class PermissionTeamSchemeSettings extends React.PureComponent {\n    static propTypes = {\n        schemeId: PropTypes.string,\n        scheme: PropTypes.object,\n        config: PropTypes.object.isRequired,\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        isDisabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            loadScheme: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            patchScheme: PropTypes.func.isRequired,\n            createScheme: PropTypes.func.isRequired,\n            updateTeamScheme: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: null,\n            teams: null,\n            addTeamOpen: false,\n            selectedPermission: null,\n            openRoles: {\n                all_users: true,\n                team_admin: true,\n                channel_admin: true,\n                guests: true,\n            },\n            urlParams: new URLSearchParams(props.location.search),\n        };\n    }\n\n    static defaultProps = {\n        scheme: null,\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user', 'team_guest', 'channel_guest']);\n        if (this.props.schemeId) {\n            this.props.actions.loadScheme(this.props.schemeId).then((result) => {\n                this.props.actions.loadRolesIfNeeded([\n                    result.data.default_team_guest_role,\n                    result.data.default_team_user_role,\n                    result.data.default_team_admin_role,\n                    result.data.default_channel_guest_role,\n                    result.data.default_channel_user_role,\n                    result.data.default_channel_admin_role,\n                ]);\n            });\n            this.props.actions.loadSchemeTeams(this.props.schemeId);\n        }\n\n        if (this.state.urlParams.get('rowIdFromQuery')) {\n            setTimeout(() => {\n                this.selectRow(this.state.urlParams.get('rowIdFromQuery'));\n            }, 1000);\n        }\n    }\n\n    isLoaded = (props) => {\n        if (props.schemeId) {\n            if (props.scheme !== null &&\n                props.teams !== null &&\n                props.roles[props.scheme.default_team_guest_role] &&\n                props.roles[props.scheme.default_team_user_role] &&\n                props.roles[props.scheme.default_team_admin_role] &&\n                props.roles[props.scheme.default_channel_guest_role] &&\n                props.roles[props.scheme.default_channel_user_role] &&\n                props.roles[props.scheme.default_channel_admin_role]) {\n                return true;\n            }\n            return false;\n        } else if (props.roles.team_guest &&\n            props.roles.team_user &&\n            props.roles.team_admin &&\n            props.roles.channel_guest &&\n            props.roles.channel_user &&\n            props.roles.channel_admin) {\n            return true;\n        }\n        return false;\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    getStateRoles = () => {\n        if (this.state.roles !== null) {\n            return this.state.roles;\n        }\n\n        let teamGuest = null;\n        let teamUser = null;\n        let teamAdmin = null;\n        let channelGuest = null;\n        let channelUser = null;\n        let channelAdmin = null;\n\n        if (this.props.schemeId) {\n            if (this.isLoaded(this.props)) {\n                teamGuest = this.props.roles[this.props.scheme.default_team_guest_role];\n                teamUser = this.props.roles[this.props.scheme.default_team_user_role];\n                teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];\n                channelGuest = this.props.roles[this.props.scheme.default_channel_guest_role];\n                channelUser = this.props.roles[this.props.scheme.default_channel_user_role];\n                channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];\n            }\n        } else if (this.isLoaded(this.props)) {\n            teamGuest = this.props.roles.team_guest;\n            teamUser = this.props.roles.team_user;\n            teamAdmin = this.props.roles.team_admin;\n            channelGuest = this.props.roles.channel_guest;\n            channelUser = this.props.roles.channel_user;\n            channelAdmin = this.props.roles.channel_admin;\n        } else {\n            return null;\n        }\n        return {\n            team_admin: teamAdmin,\n            channel_admin: channelAdmin,\n            team_guest: teamGuest,\n            team_user: teamUser,\n            channel_guest: channelGuest,\n            channel_user: channelUser,\n            all_users: {\n                name: 'all_users',\n                displayName: 'All members',\n                permissions: teamUser.permissions.concat(channelUser.permissions),\n            },\n            guests: {\n                name: 'guests',\n                displayName: 'Guests',\n                permissions: teamGuest.permissions.concat(channelGuest.permissions),\n            },\n        };\n    }\n\n    deriveRolesFromGuests = (teamGuest, channelGuest, role) => {\n        return {\n            team_guest: {\n                ...teamGuest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_guest: {\n                ...channelGuest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    restoreGuestPermissions = (teamGuest, channelGuest, roles) => {\n        for (const permission of teamGuest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_guest.permissions.push(permission);\n            }\n        }\n        for (const permission of channelGuest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_guest.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    deriveRolesFromAllUsers = (baseTeam, baseChannel, role) => {\n        return {\n            team_user: {\n                ...baseTeam,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...baseChannel,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    restoreExcludedPermissions = (baseTeam, baseChannel, roles) => {\n        for (const permission of baseTeam.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_user.permissions.push(permission);\n            }\n        }\n        for (const permission of baseChannel.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_user.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    handleNameChange = (e) => {\n        this.setState({schemeName: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({schemeDescription: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async () => {\n        const roles = this.getStateRoles();\n        let teamAdmin = roles.team_admin;\n        let channelAdmin = roles.channel_admin;\n        const allUsers = roles.all_users;\n        const guests = roles.guests;\n\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        let teamUser = null;\n        let channelUser = null;\n        let teamGuest = null;\n        let channelGuest = null;\n        let schemeId = null;\n\n        this.setState({saving: true});\n\n        let derived = this.deriveRolesFromAllUsers(\n            roles.team_user,\n            roles.channel_user,\n            allUsers,\n        );\n        derived = this.restoreExcludedPermissions(\n            roles.team_user,\n            roles.channel_user,\n            derived,\n        );\n        teamUser = derived.team_user;\n        channelUser = derived.channel_user;\n\n        let derivedGuests = this.deriveRolesFromGuests(\n            roles.team_guest,\n            roles.channel_guest,\n            guests,\n        );\n        derivedGuests = this.restoreGuestPermissions(\n            roles.team_guest,\n            roles.channel_guest,\n            derivedGuests,\n        );\n        teamGuest = derivedGuests.team_guest;\n        channelGuest = derivedGuests.channel_guest;\n\n        if (this.props.schemeId) {\n            await this.props.actions.patchScheme(this.props.schemeId, {\n                display_name: schemeName,\n                description: schemeDescription,\n            });\n            schemeId = this.props.schemeId;\n        } else {\n            const result = await this.props.actions.createScheme({\n                display_name: schemeName,\n                description: schemeDescription,\n                scope: 'team',\n            });\n            if (result.error) {\n                this.setState({serverError: result.error.message, saving: false, saveNeeded: true});\n                this.props.actions.setNavigationBlocked(true);\n                return;\n            }\n            const newScheme = result.data;\n            schemeId = newScheme.id;\n            await this.props.actions.loadRolesIfNeeded([\n                newScheme.default_team_guest_role,\n                newScheme.default_team_user_role,\n                newScheme.default_team_admin_role,\n                newScheme.default_channel_guest_role,\n                newScheme.default_channel_user_role,\n                newScheme.default_channel_admin_role,\n            ]);\n            teamGuest = {...teamGuest, id: this.props.roles[newScheme.default_team_guest_role].id};\n            teamUser = {...teamUser, id: this.props.roles[newScheme.default_team_user_role].id};\n            teamAdmin = {...teamAdmin, id: this.props.roles[newScheme.default_team_admin_role].id};\n            channelGuest = {...channelGuest, id: this.props.roles[newScheme.default_channel_guest_role].id};\n            channelUser = {...channelUser, id: this.props.roles[newScheme.default_channel_user_role].id};\n            channelAdmin = {...channelAdmin, id: this.props.roles[newScheme.default_channel_admin_role].id};\n        }\n\n        const teamAdminPromise = this.props.actions.editRole(teamAdmin);\n        const channelAdminPromise = this.props.actions.editRole(channelAdmin);\n        const promises = [teamAdminPromise, channelAdminPromise];\n\n        const teamUserPromise = this.props.actions.editRole(teamUser);\n        const channelUserPromise = this.props.actions.editRole(channelUser);\n        promises.push(teamUserPromise);\n        promises.push(channelUserPromise);\n\n        if (this.haveGuestAccountsPermissions()) {\n            const teamGuestPromise = this.props.actions.editRole(teamGuest);\n            const channelGuestPromise = this.props.actions.editRole(channelGuest);\n            promises.push(teamGuestPromise, channelGuestPromise);\n        }\n\n        const currentTeams = new Set((this.state.teams || this.props.teams || []).map((team) => team.id));\n        const serverTeams = new Set((this.props.teams || []).map((team) => team.id));\n\n        // Difference of sets (currentTeams - serverTeams)\n        const addedTeams = new Set([...currentTeams].filter((team) => !serverTeams.has(team)));\n\n        // Difference of sets (serverTeams - currentTeams)\n        const removedTeams = new Set([...serverTeams].filter((team) => !currentTeams.has(team)));\n\n        for (const teamId of addedTeams) {\n            promises.push(this.props.actions.updateTeamScheme(teamId, schemeId));\n        }\n\n        for (const teamId of removedTeams) {\n            promises.push(this.props.actions.updateTeamScheme(teamId, ''));\n        }\n\n        const results = await Promise.all(promises);\n\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n        this.props.history.push('/admin_console/user_management/permissions');\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.getStateRoles()};\n        let role = null;\n        if (roles.team_admin.name === roleId) {\n            role = {...roles.team_admin};\n        } else if (roles.channel_admin.name === roleId) {\n            role = {...roles.channel_admin};\n        } else if (roles.all_users.name === roleId) {\n            role = {...roles.all_users};\n        } else if (roles.guests.name === roleId) {\n            role = {...roles.guests};\n        }\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        if (roles.team_admin.name === roleId) {\n            roles.team_admin = role;\n        } else if (roles.channel_admin.name === roleId) {\n            roles.channel_admin = role;\n        } else if (roles.all_users.name === roleId) {\n            roles.all_users = role;\n        } else if (roles.guests.name === roleId) {\n            roles.guests = role;\n        }\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    removeTeam = (teamId) => {\n        const teams = (this.state.teams || this.props.teams).filter((team) => team.id !== teamId);\n        this.setState({teams, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addTeams = (teams) => {\n        const currentTeams = this.state.teams || this.props.teams || [];\n        this.setState({\n            teams: [...currentTeams, ...teams],\n            saveNeeded: true,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    haveGuestAccountsPermissions = () => {\n        return this.props.license.GuestAccountsPermissions === 'true';\n    }\n\n    render = () => {\n        if (!this.isLoaded(this.props)) {\n            return <LoadingScreen/>;\n        }\n        const roles = this.getStateRoles();\n        const teams = this.state.teams || this.props.teams || [];\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        return (\n            <div className='wrapper--fixed'>\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        modalID={ModalIdentifiers.ADD_TEAMS_TO_SCHEME}\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        currentSchemeId={this.props.schemeId}\n                        alreadySelected={teams.map((team) => team.id)}\n                    />\n                }\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/permissions'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.permissions.teamScheme'\n                            defaultMessage='Team Scheme'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.teamScheme.introBanner'\n                                        defaultMessage='[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        <AdminPanel\n                            titleId={t('admin.permissions.teamScheme.schemeDetailsTitle')}\n                            titleDefault='Scheme Details'\n                            subtitleId={t('admin.permissions.teamScheme.schemeDetailsDescription')}\n                            subtitleDefault='Set the name and description for this scheme.'\n                        >\n                            <div className='team-scheme-details'>\n                                <div className='form-group'>\n                                    <label\n                                        className='control-label'\n                                        htmlFor='scheme-name'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.schemeNameLabel'\n                                            defaultMessage='Scheme Name:'\n                                        />\n                                    </label>\n                                    <LocalizedInput\n                                        id='scheme-name'\n                                        className='form-control'\n                                        type='text'\n                                        value={schemeName}\n                                        placeholder={{id: t('admin.permissions.teamScheme.schemeNamePlaceholder'), defaultMessage: 'Scheme Name'}}\n                                        onChange={this.handleNameChange}\n                                        disabled={this.props.isDisabled}\n                                    />\n                                </div>\n                                <div className='form-group'>\n                                    <label\n                                        className='control-label'\n                                        htmlFor='scheme-description'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.schemeDescriptionLabel'\n                                            defaultMessage='Scheme Description:'\n                                        />\n                                    </label>\n                                    <textarea\n                                        id='scheme-description'\n                                        className='form-control'\n                                        rows='5'\n                                        value={schemeDescription}\n                                        placeholder={localizeMessage('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description')}\n                                        onChange={this.handleDescriptionChange}\n                                        disabled={this.props.isDisabled}\n                                    />\n                                </div>\n                            </div>\n                        </AdminPanel>\n\n                        <AdminPanelWithButton\n                            className='permissions-block'\n                            titleId={t('admin.permissions.teamScheme.selectTeamsTitle')}\n                            titleDefault='Select teams to override permissions'\n                            subtitleId={t('admin.permissions.teamScheme.selectTeamsDescription')}\n                            subtitleDefault='Select teams where permission exceptions are required.'\n                            onButtonClick={this.openAddTeam}\n                            buttonTextId={t('admin.permissions.teamScheme.addTeams')}\n                            buttonTextDefault='Add Teams'\n                            disabled={this.props.isDisabled}\n                        >\n                            <div className='teams-list'>\n                                {teams.length === 0 &&\n                                    <div className='no-team-schemes'>\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.noTeams'\n                                            defaultMessage='No team selected. Please add teams to this list.'\n                                        />\n                                    </div>}\n                                {teams.map((team) => (\n                                    <TeamInList\n                                        key={team.id}\n                                        team={team}\n                                        onRemoveTeam={this.removeTeam}\n                                        isDisabled={this.props.isDisabled}\n                                    />\n                                ))}\n                            </div>\n                        </AdminPanelWithButton>\n\n                        {this.props.license && this.props.config.EnableGuestAccounts === 'true' &&\n                            <AdminPanelTogglable\n                                className='permissions-block'\n                                open={this.state.openRoles.guests}\n                                id='guests'\n                                onToggle={() => this.toggleRole('guests')}\n                                titleId={t('admin.permissions.systemScheme.GuestsTitle')}\n                                titleDefault='Guests'\n                                subtitleId={t('admin.permissions.systemScheme.GuestsDescription')}\n                                subtitleDefault='Permissions granted to guest users.'\n                                disabled={this.props.isDisabled}\n                            >\n                                <GuestPermissionsTree\n                                    selected={this.state.selectedPermission}\n                                    role={roles.guests}\n                                    scope={'team_scope'}\n                                    onToggle={this.togglePermission}\n                                    selectRow={this.selectRow}\n                                    readOnly={this.props.isDisabled || !this.haveGuestAccountsPermissions()}\n                                />\n                            </AdminPanelTogglable>\n                        }\n\n                        <AdminPanelTogglable\n                            className='permissions-block all_users'\n                            open={this.state.openRoles.all_users}\n                            id='all_users'\n                            onToggle={() => this.toggleRole('all_users')}\n                            titleId={t('admin.permissions.systemScheme.allMembersTitle')}\n                            titleDefault='All Members'\n                            subtitleId={t('admin.permissions.systemScheme.allMembersDescription')}\n                            subtitleDefault='Permissions granted to all members, including administrators and newly created users.'\n                            disabled={this.props.isDisabled}\n                        >\n                            <PermissionsTree\n                                selected={this.state.selectedPermission}\n                                role={roles.all_users}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block channel_admin'\n                            open={this.state.openRoles.channel_admin}\n                            onToggle={() => this.toggleRole('channel_admin')}\n                            titleId={t('admin.permissions.systemScheme.channelAdminsTitle')}\n                            titleDefault='Channel Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.channelAdminsDescription')}\n                            subtitleDefault='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                            disabled={this.props.isDisabled}\n                        >\n                            <PermissionsTree\n                                parentRole={roles.all_users}\n                                role={roles.channel_admin}\n                                scope={'channel_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block team_admin'\n                            open={this.state.openRoles.team_admin}\n                            onToggle={() => this.toggleRole('team_admin')}\n                            titleId={t('admin.permissions.systemScheme.teamAdminsTitle')}\n                            titleDefault='Team Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.teamAdminsDescription')}\n                            subtitleDefault='Permissions granted to team creators and any users promoted to Team Administrator.'\n                            disabled={this.props.isDisabled}\n                        >\n                            <PermissionsTree\n                                parentRole={roles.all_users}\n                                role={roles.team_admin}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanelTogglable>\n                    </div>\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={this.props.isDisabled || !this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/user_management/permissions'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'matterfoss-redux/actions/roles';\n\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles';\nimport {getLicense, getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getScheme, makeGetSchemeTeams} from 'matterfoss-redux/selectors/entities/schemes';\n\nimport {getScheme as loadScheme, patchScheme, createScheme, getSchemeTeams as loadSchemeTeams} from 'matterfoss-redux/actions/schemes';\n\nimport {updateTeamScheme} from 'matterfoss-redux/actions/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionTeamSchemeSettings from './permission_team_scheme_settings.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return (state, ownProps) => {\n        const schemeId = ownProps.match.params.scheme_id;\n        return {\n            config: getConfig(state),\n            license: getLicense(state),\n            schemeId,\n            scheme: schemeId ? getScheme(state, schemeId) : null,\n            teams: schemeId ? getSchemeTeams(state, {schemeId}) : null,\n            roles: getRoles(state),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            loadScheme,\n            loadSchemeTeams,\n            editRole,\n            patchScheme,\n            updateTeamScheme,\n            createScheme,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionTeamSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\n\nimport './data_grid.scss';\n\nimport {Column} from './data_grid';\n\nexport type Props = {\n    columns: Column[];\n}\n\nclass DataGridHeader extends React.Component<Props> {\n    renderHeaderElement(col: Column) {\n        const style: CSSProperties = {};\n        if (col.width) {\n            style.flexGrow = col.width;\n        }\n\n        return (\n            <div\n                key={col.field}\n                className='DataGrid_cell'\n                style={style}\n            >\n                {col.name}\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <div className='DataGrid_header'>\n                {this.props.columns.map((col) => this.renderHeaderElement(col))}\n            </div>\n        );\n    }\n}\n\nexport default DataGridHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\nimport classNames from 'classnames';\n\nimport {Row, Column} from './data_grid';\n\nimport './data_grid.scss';\n\ntype Props = {\n    columns: Column[];\n    row: Row;\n}\n\nclass DataGridRow extends React.Component<Props> {\n    renderCell(row: Row, column: Column) {\n        const style: CSSProperties = {};\n        if (column.width) {\n            style.flexGrow = column.width;\n        }\n\n        if (column.textAlign) {\n            style.textAlign = column.textAlign;\n        }\n\n        if (column.overflow) {\n            style.overflow = column.overflow;\n        }\n\n        return (\n            <div\n                key={column.field}\n                className={classNames('DataGrid_cell', column.className)}\n                style={style}\n            >\n                {row.cells[column.field]}\n            </div>\n        );\n    }\n\n    render() {\n        const cells = this.props.columns.map((col) => this.renderCell(this.props.row, col));\n        return (\n            <div\n                className='DataGrid_row'\n                onClick={this.props.row.onClick}\n            >\n                {cells}\n            </div>\n        );\n    }\n}\n\nexport default DataGridRow;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    name: string;\n    checked: boolean;\n    label: string | JSX.Element;\n    updateOption: (checked: boolean, name: string) => void;\n};\n\nclass FilterCheckbox extends React.PureComponent<Props> {\n    toggleOption = (e: React.MouseEvent) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const {checked, name, updateOption} = this.props;\n        updateOption(!checked, name);\n    }\n\n    render() {\n        const {name, checked, label} = this.props;\n        return (\n            <div\n                className='FilterList_checkbox'\n                onClick={this.toggleOption}\n            >\n                <label>\n                    {checked &&\n                        <input\n                            type='checkbox'\n                            id={name}\n                            name={name}\n                            defaultChecked={true}\n                        />\n                    }\n\n                    {!checked &&\n                        <input\n                            type='checkbox'\n                            id={name}\n                            name={name}\n                            defaultChecked={false}\n                        />\n                    }\n                    {label}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default FilterCheckbox;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FilterOption, FilterValues} from './filter';\nimport FilterCheckbox from './filter_checkbox';\nimport './filter.scss';\n\ntype Props = {\n    option: FilterOption;\n    optionKey: string;\n    updateValues: (values: FilterValues, optionKey: string) => void;\n}\n\nclass FilterList extends React.PureComponent<Props> {\n    updateOption = async (value: boolean, key: string) => {\n        const values = {\n            ...this.props.option.values,\n            [key]: {\n                ...this.props.option.values[key],\n                value,\n            },\n        };\n        await this.props.updateValues(values, this.props.optionKey);\n    }\n\n    render() {\n        const {option} = this.props;\n        const valuesToRender = option.keys.map((optionKey: string, index: number) => {\n            const currentValue = option.values[optionKey];\n            const {value, name} = currentValue;\n            const FilterItem = option.type || FilterCheckbox;\n\n            return (\n                <div\n                    key={index}\n                    className='FilterList_item'\n                >\n                    <FilterItem\n                        key={index}\n                        name={optionKey}\n                        checked={value}\n                        label={name}\n                        updateOption={this.updateOption}\n                    />\n                </div>\n            );\n        });\n\n        return (\n            <div className='FilterList'>\n                <div className='FilterList_name'>\n                    {option.name}\n                </div>\n\n                {valuesToRender}\n            </div>\n        );\n    }\n}\n\nexport default FilterList;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport FilterList from './filter_list';\nimport './filter.scss';\n\nexport type Filters = {\n    [filterKey: string]: string[];\n};\n\nexport type FilterValue = {\n    name: string | JSX.Element;\n    value: boolean | string | string[];\n};\n\nexport type FilterValues = {\n    [key: string]: FilterValue;\n};\n\nexport type FilterOption = {\n\n    // Display name of the filter option eg. 'Channels', 'Roles' or <FormattedMessage .../>\n    name: string | JSX.Element;\n\n    // List of keys that match the filter values, used to define the order in which the filters appear\n    keys: string[];\n\n    // Key value map of filter values with keys matching the keys above\n    values: FilterValues;\n\n    // Filter Component type, optional parameter defaults to FilterCheckbox\n    type?: React.ElementType;\n}\n\nexport type FilterOptions = {\n    [key: string]: FilterOption;\n}\n\ntype Props = {\n    onFilter: (filters: FilterOptions) => void;\n    options: FilterOptions;\n    keys: string[];\n}\n\ntype State = {\n    show: boolean;\n    options: FilterOptions;\n    keys: string[];\n    optionsModified: boolean;\n    filterCount: number;\n}\n\nclass Filter extends React.PureComponent<Props, State> {\n    private buttonRef: React.RefObject<HTMLButtonElement>;\n    private filterRef: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        let options = {...props.options};\n        let keys = [...props.keys];\n        let valid = true;\n        keys.forEach((key) => {\n            const option = options[key];\n            if (option && valid) {\n                option.keys.forEach((optionKey) => {\n                    if (!option.values[optionKey]) {\n                        valid = false;\n                    }\n                });\n            } else {\n                valid = false;\n            }\n        });\n\n        if (!valid) {\n            options = {};\n            keys = [];\n        }\n\n        this.state = {\n            show: false,\n            options,\n            keys,\n            optionsModified: false,\n            filterCount: 0,\n        };\n\n        this.filterRef = React.createRef();\n        this.buttonRef = React.createRef();\n    }\n\n    componentDidMount = () => {\n        document.addEventListener('mousedown', this.handleClickOutside);\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    handleClickOutside = (event: MouseEvent) => {\n        if (this.filterRef?.current?.contains(event.target as Node)) {\n            return;\n        }\n        this.hidePopover();\n    }\n\n    hidePopover = () => {\n        this.setState({show: false});\n        this.buttonRef?.current?.blur();\n    }\n\n    togglePopover = () => {\n        if (this.state.show) {\n            this.hidePopover();\n            return;\n        }\n\n        this.setState({show: true});\n    }\n\n    updateValues = async (values: FilterValues, optionKey: string) => {\n        const options = {\n            ...this.state.options,\n            [optionKey]: {\n                ...this.state.options[optionKey],\n                values: {\n                    ...values,\n                },\n            },\n        };\n        this.setState({options, optionsModified: true});\n    }\n\n    onFilter = () => {\n        this.props.onFilter(this.state.options);\n        this.setState({optionsModified: false, show: false, filterCount: this.calculateFilterCount()});\n    }\n\n    calculateFilterCount = () => {\n        const options = this.state.options;\n        let filterCount = 0;\n        this.props.keys.forEach((key) => {\n            const {values, keys} = options[key];\n            keys.forEach((filterKey: string) => {\n                if (values[filterKey].value instanceof Array) {\n                    filterCount += (values[filterKey].value as string[]).length;\n                } else if (values[filterKey].value) {\n                    filterCount += 1;\n                }\n            });\n        });\n        return filterCount;\n    }\n\n    resetFilters = () => {\n        this.setState({options: {...this.props.options}}, this.onFilter);\n    }\n\n    renderFilterOptions = () => {\n        const {keys, options} = this.state;\n        return keys.map((key: string) => {\n            const filter = options[key];\n            const FilterListComponent = filter.type || FilterList;\n\n            return (\n                <FilterListComponent\n                    option={filter}\n                    optionKey={key}\n                    updateValues={this.updateValues}\n                    key={key}\n                />\n            );\n        });\n    }\n\n    render() {\n        const filters = this.renderFilterOptions();\n        const {filterCount} = this.state;\n\n        return (\n            <div\n                className='Filter'\n                ref={this.filterRef}\n            >\n                <button\n                    type='button'\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    className={classNames('Filter_button', {Filter__active: this.state.show})}\n                    onClick={this.togglePopover}\n                    ref={this.buttonRef}\n                >\n                    <i className='Icon icon-filter-variant'/>\n\n                    <FormattedMessage\n                        id='admin.filter.filters'\n                        defaultMessage='Filters'\n                    />\n                    {filterCount > 0 && ` (${filterCount})`}\n                </button>\n\n                <div\n                    // eslint-disable-next-line @typescript-eslint/naming-convention\n                    className={classNames('Filter_content', {Filter__show: this.state.show})}\n                >\n                    <div className='Filter_header'>\n                        <div className='Filter_title'>\n                            <FormattedMessage\n                                id='admin.filter.title'\n                                defaultMessage='Filter by'\n                            />\n                        </div>\n\n                        <a\n                            className='Filter_reset'\n                            onClick={this.resetFilters}\n                        >\n                            <FormattedMessage\n                                id='admin.filter.reset'\n                                defaultMessage='Reset filters'\n                            />\n                        </a>\n                    </div>\n\n                    <hr/>\n\n                    <div className='Filter_lists'>\n                        {filters}\n                    </div>\n\n                    <button\n                        type='button'\n                        className='Filter_apply style--none btn btn-primary'\n                        disabled={!this.state.optionsModified}\n                        onClick={this.onFilter}\n                    >\n                        <FormattedMessage\n                            id='admin.filter.apply'\n                            defaultMessage='Apply'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Filter;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport FaSearchIcon from 'components/widgets/icons/fa_search_icon';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Filter, {FilterOptions} from 'components/admin_console/filter/filter';\n\nimport './data_grid.scss';\n\ntype Props = {\n    onSearch: (term: string) => void;\n    placeholder?: string;\n    term: string;\n\n    filterProps?: {\n        options: FilterOptions;\n        keys: string[];\n        onFilter: (options: FilterOptions) => void;\n    };\n}\n\ntype State = {\n    term: string;\n}\n\nclass DataGridSearch extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        placeholder: '',\n        term: '',\n    }\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            term: '',\n        };\n    }\n\n    handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const term = e.target.value;\n        this.setState({term});\n        this.props.onSearch(term);\n    }\n\n    resetSearch = () => {\n        this.props.onSearch('');\n    };\n\n    onFilter = (filters: FilterOptions) => {\n        this.props.filterProps?.onFilter(filters);\n    };\n\n    render() {\n        const {filterProps} = this.props;\n\n        let {placeholder} = this.props;\n        if (!placeholder) {\n            placeholder = Utils.localizeMessage('search_bar.search', 'Search');\n        }\n\n        let filter;\n        if (filterProps) {\n            filter = <Filter {...filterProps}/>;\n        }\n\n        return (\n            <div className='DataGrid_search'>\n                <div className='DataGrid_searchBar'>\n                    <span\n                        className='DataGrid_searchIcon'\n                        aria-hidden='true'\n                    >\n                        <FaSearchIcon/>\n                    </span>\n\n                    <input\n                        type='text'\n                        placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                        onChange={this.handleSearch}\n                        value={this.props.term}\n                        data-testid='searchInput'\n                    />\n                    <i\n                        className={'DataGrid_clearButton fa fa-times-circle ' + (this.props.term.length ? '' : 'hidden')}\n                        onClick={this.resetSearch}\n                        data-testid='clear-search'\n                    />\n                </div>\n\n                {filter}\n            </div>\n        );\n    }\n}\n\nexport default DataGridSearch;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\n\nimport DataGridHeader from './data_grid_header';\nimport DataGridRow from './data_grid_row';\nimport DataGridSearch from './data_grid_search';\n\nimport './data_grid.scss';\n\nexport type Column = {\n    name: string | JSX.Element;\n    field: string;\n    fixed?: boolean;\n\n    // Optional styling overrides\n    className?: string;\n    width?: number;\n    textAlign?: '-moz-initial' | 'inherit' | 'initial' | 'revert' | 'unset' | 'center' | 'end' | 'justify' | 'left' | 'match-parent' | 'right' | 'start' | undefined;\n    overflow?: string;\n}\n\nexport type Row = {\n    cells: {\n        [key: string]: JSX.Element | string;\n    };\n    onClick?: () => void;\n}\n\ntype Props = {\n    rows: Row[];\n    columns: Column[];\n    placeholderEmpty?: JSX.Element;\n    loadingIndicator?: JSX.Element;\n\n    rowsContainerStyles?: CSSProperties;\n\n    minimumColumnWidth?: number;\n\n    page: number;\n    startCount: number;\n    endCount: number;\n    total?: number;\n    loading: boolean;\n\n    nextPage: () => void;\n    previousPage: () => void;\n\n    onSearch?: (term: string) => void;\n    term?: string;\n    searchPlaceholder?: string;\n\n    filterProps?: {\n        options: FilterOptions;\n        keys: string[];\n        onFilter: (options: FilterOptions) => void;\n    };\n\n    className?: string;\n};\n\ntype State = {\n    visibleColumns: Column[];\n    fixedColumns: Column[];\n    hiddenColumns: Column[];\n    minimumColumnWidth: number;\n};\n\nconst MINIMUM_COLUMN_WIDTH = 100;\n\nclass DataGrid extends React.PureComponent<Props, State> {\n    private ref: React.RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        term: '',\n        searchPlaceholder: '',\n    }\n\n    public constructor(props: Props) {\n        super(props);\n\n        const minimumColumnWidth = props.minimumColumnWidth ? props.minimumColumnWidth : MINIMUM_COLUMN_WIDTH;\n\n        this.state = {\n            visibleColumns: this.props.columns,\n            hiddenColumns: [],\n            fixedColumns: this.props.columns.filter((col) => col.fixed),\n            minimumColumnWidth,\n        };\n\n        this.ref = React.createRef();\n    }\n\n    componentDidMount() {\n        this.handleResize();\n        window.addEventListener('resize', this.handleResize);\n    }\n\n    private handleResize = () => {\n        if (!this.ref?.current) {\n            return;\n        }\n\n        const {minimumColumnWidth, fixedColumns} = this.state;\n        const fixedColumnWidth = (fixedColumns.length * minimumColumnWidth);\n\n        let visibleColumns: Column[] = this.props.columns;\n        let availableWidth = this.ref.current.clientWidth - fixedColumnWidth - 50;\n\n        visibleColumns = visibleColumns.filter((column) => {\n            if (availableWidth > minimumColumnWidth) {\n                availableWidth -= minimumColumnWidth;\n                return true;\n            }\n\n            return Boolean(column.fixed);\n        });\n\n        this.setState({visibleColumns});\n    }\n\n    private renderRows(): JSX.Element {\n        const {rows, rowsContainerStyles} = this.props;\n        const {visibleColumns} = this.state;\n        let rowsToRender: JSX.Element | JSX.Element[] | null = null;\n\n        if (this.props.loading) {\n            if (this.props.loadingIndicator) {\n                rowsToRender = (\n                    <div className='DataGrid_loading'>\n                        {this.props.loadingIndicator}\n                    </div>\n                );\n            } else {\n                rowsToRender = (\n                    <div className='DataGrid_loading'>\n                        <LoadingSpinner/>\n                        <FormattedMessage\n                            id='admin.data_grid.loading'\n                            defaultMessage='Loading'\n                        />\n                    </div>\n                );\n            }\n        } else if (rows.length === 0) {\n            const placeholder = this.props.placeholderEmpty || (\n                <FormattedMessage\n                    id='admin.data_grid.empty'\n                    defaultMessage='No items found'\n                />\n            );\n            rowsToRender = (\n                <div className='DataGrid_empty'>\n                    {placeholder}\n                </div>\n            );\n        } else {\n            rowsToRender = rows.map((row, index) => {\n                return (\n                    <DataGridRow\n                        key={index}\n                        row={row}\n                        columns={visibleColumns}\n                    />\n                );\n            });\n        }\n        return (\n            <div\n                className='DataGrid_rows'\n                style={rowsContainerStyles || {}}\n            >\n                {rowsToRender}\n            </div>\n        );\n    }\n\n    private renderHeader(): JSX.Element {\n        return (\n            <DataGridHeader\n                columns={this.state.visibleColumns}\n            />\n        );\n    }\n\n    private renderSearch(): JSX.Element | null {\n        if (this.props.onSearch) {\n            return (\n                <DataGridSearch\n                    onSearch={this.search}\n                    placeholder={this.props.searchPlaceholder}\n                    term={this.props.term}\n                    filterProps={this.props.filterProps}\n                />\n            );\n        }\n        return null;\n    }\n\n    private nextPage = () => {\n        if (!this.props.loading) {\n            this.props.nextPage();\n        }\n    }\n\n    private previousPage = () => {\n        if (!this.props.loading) {\n            this.props.previousPage();\n        }\n    }\n\n    private search = (term: string) => {\n        if (this.props.onSearch) {\n            this.props.onSearch(term);\n        }\n    }\n\n    private renderFooter = (): JSX.Element | null => {\n        const {startCount, endCount, total} = this.props;\n        let footer: JSX.Element | null = null;\n\n        if (total) {\n            const firstPage = startCount <= 1;\n            const lastPage = endCount >= total;\n\n            let prevPageFn: () => void = this.previousPage;\n            if (firstPage) {\n                prevPageFn = () => {};\n            }\n\n            let nextPageFn: () => void = this.nextPage;\n            if (lastPage) {\n                nextPageFn = () => {};\n            }\n\n            footer = (\n                <div className='DataGrid_footer'>\n                    <div className='DataGrid_cell'>\n                        <FormattedMessage\n                            id='admin.data_grid.paginatorCount'\n                            defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                            values={{\n                                startCount,\n                                endCount,\n                                total,\n                            }}\n                        />\n\n                        <button\n                            type='button'\n                            className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                            onClick={prevPageFn}\n                            disabled={firstPage}\n                        >\n                            <PreviousIcon/>\n                        </button>\n                        <button\n                            type='button'\n                            className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                            onClick={nextPageFn}\n                            disabled={lastPage}\n                        >\n                            <NextIcon/>\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n\n        return footer;\n    }\n\n    public render() {\n        return (\n            <div\n                className={classNames('DataGrid', this.props.className)}\n                ref={this.ref}\n            >\n                {this.renderSearch()}\n                {this.renderHeader()}\n                {this.renderRows()}\n                {this.renderFooter()}\n            </div>\n        );\n    }\n}\n\nexport default DataGrid;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport {Role} from 'matterfoss-redux/types/roles';\n\nimport {t} from 'utils/i18n';\nimport {browserHistory} from 'utils/browser_history';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport DataGrid, {Row, Column} from 'components/admin_console/data_grid/data_grid';\n\ntype Props = {\n    roles: Dictionary<Role>;\n}\n\nconst columns: Column[] = [\n    {\n        name: 'Role',\n        field: 'role',\n        width: 2,\n    },\n    {\n        name: 'Description',\n        field: 'description',\n        width: 3,\n    },\n    {\n        name: 'Type',\n        field: 'type',\n        width: 2,\n    },\n    {\n        name: '',\n        field: 'edit',\n        width: 1,\n        textAlign: 'right',\n    },\n];\n\nimport './system_roles.scss';\n\nexport default class SystemRoles extends React.PureComponent<Props> {\n    render() {\n        const {roles} = this.props;\n        const roleNames = ['system_admin', 'system_manager', 'system_user_manager', 'system_read_only_admin'];\n        const rows: Row[] = [];\n        roleNames.forEach((name) => {\n            const role = roles[name];\n            if (role) {\n                rows.push({\n                    cells: {\n                        role: <FormattedMessage id={`admin.permissions.roles.${role.name}.name`}/>,\n                        description: <FormattedMessage id={`admin.permissions.roles.${role.name}.description`}/>,\n                        type: <FormattedMessage id={`admin.permissions.roles.${role.name}.type`}/>,\n                        edit: (\n                            <span\n                                className='SystemRoles_editRow'\n                                data-testid={`${role.name}_edit`}\n                            >\n                                <Link to={`/admin_console/user_management/system_roles/${role.id}`} >\n                                    <FormattedMessage\n                                        id='admin.permissions.roles.edit'\n                                        defaultMessage='Edit'\n                                    />\n                                </Link>\n                            </span>\n                        ),\n                    },\n                    onClick: () => browserHistory.push(`/admin_console/user_management/system_roles/${role.id}`),\n                });\n            }\n        });\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.permissions.systemRoles'\n                    defaultMessage='System Roles (Beta)'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <AdminPanel\n                            id='SystemRoles'\n                            titleId={t('admin.permissions.systemRolesBannerTitle')}\n                            titleDefault='Admin Roles'\n                            subtitleId={t('admin.permissions.systemRolesBannerText')}\n                            subtitleDefault='Manage different levels of access to the system console.'\n                        >\n                            <div className='SystemRoles'>\n                                <DataGrid\n                                    rows={rows}\n                                    columns={columns}\n                                    page={1}\n                                    startCount={0}\n                                    endCount={rows.length}\n                                    loading={false}\n                                    nextPage={() => {}}\n                                    previousPage={() => {}}\n                                />\n                            </div>\n                        </AdminPanel>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nt('admin.permissions.roles.system_admin.name');\nt('admin.permissions.roles.system_admin.description');\nt('admin.permissions.roles.system_admin.type');\nt('admin.permissions.roles.system_user_manager.name');\nt('admin.permissions.roles.system_user_manager.description');\nt('admin.permissions.roles.system_user_manager.type');\nt('admin.permissions.roles.system_manager.name');\nt('admin.permissions.roles.system_manager.description');\nt('admin.permissions.roles.system_manager.type');\nt('admin.permissions.roles.system_read_only_admin.name');\nt('admin.permissions.roles.system_read_only_admin.description');\nt('admin.permissions.roles.system_read_only_admin.type');\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {connect} from 'react-redux';\n\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles_helpers';\n\nimport {GlobalState} from 'types/store';\n\nimport SystemRoles from './system_roles';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        roles: getRoles(state),\n    };\n}\n\nexport default connect(mapStateToProps)(SystemRoles);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport PropTypes from 'prop-types';\n\nimport SaveButton from 'components/save_button';\nimport {localizeMessage} from 'utils/utils';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nexport default function SaveChangesPanel({saveNeeded, onClick, saving, serverError, cancelLink, isDisabled}) {\n    return (\n        <div className='admin-console-save'>\n            <SaveButton\n                saving={saving}\n                disabled={isDisabled || !saveNeeded}\n                onClick={onClick}\n                savingMessage={localizeMessage('admin.team_channel_settings.saving', 'Saving Config...')}\n            />\n            <BlockableLink\n                id='cancelButtonSettings'\n                className='cancel-button'\n                to={cancelLink}\n            >\n                <FormattedMessage\n                    id='admin.team_channel_settings.cancel'\n                    defaultMessage='Cancel'\n                />\n            </BlockableLink>\n\n            <div className='error-message'>\n                {serverError}\n            </div>\n        </div>\n    );\n}\n\nSaveChangesPanel.propTypes = {\n    saving: PropTypes.bool.isRequired,\n    saveNeeded: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n    cancelLink: PropTypes.string.isRequired,\n    serverError: PropTypes.node,\n    isDisabled: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport ProfilePicture from 'components/profile_picture';\n\ntype Props = {\n    user: UserProfile;\n}\n\nexport default class UserGridName extends React.Component<Props> {\n    public render = (): JSX.Element => {\n        const {user} = this.props;\n\n        return (\n            <div className='UserGrid_nameRow'>\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    status={status}\n                    size='md'\n                />\n\n                <div className='UserGrid_name'>\n                    <span>\n                        {`${user.username} - ${user.first_name} ${user.last_name}`}\n                    </span>\n                    <span className='ug-email'>\n                        {user.email}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\ntype Props = {\n    user: UserProfile;\n    removeUser: (user: UserProfile) => void;\n    isDisabled?: boolean;\n}\n\nexport default class UserGridRemove extends React.PureComponent<Props> {\n    private handleClick = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault();\n        if (this.props.isDisabled) {\n            return;\n        }\n        this.props.removeUser(this.props.user);\n    }\n\n    public render = (): JSX.Element => {\n        const {isDisabled} = this.props;\n        return (\n            <div className='UserGrid_removeRow'>\n                <a\n                    onClick={this.handleClick}\n                    href='#'\n                    role='button'\n                    className={isDisabled ? 'disabled' : ''}\n                >\n                    <FormattedMessage\n                        id='admin.user_grid.remove'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Role} from 'matterfoss-redux/types/roles';\n\nimport {filterProfilesStartingWithTerm, profileListToMap} from 'matterfoss-redux/utils/user_utils';\nimport {filterProfiles} from 'matterfoss-redux/selectors/entities/users';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {displayEntireNameForUser, localizeMessage, isGuest} from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport MultiSelect, {Value} from 'components/multiselect/multiselect';\nimport AddIcon from 'components/widgets/icons/fa_add_icon';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 20;\n\ntype UserProfileValue = Value & UserProfile;\n\nexport type Props = {\n    role: Role;\n    users: UserProfile[];\n    excludeUsers: { [userId: string]: UserProfile };\n    includeUsers: { [userId: string]: UserProfile };\n    onAddCallback: (users: UserProfile[]) => void;\n    onHide?: () => void;\n\n    actions: {\n        getProfiles: (page: number, perPage?: number, options?: Record<string, any>) => Promise<{ data: UserProfile[] }>;\n        searchProfiles: (term: string, options?: Record<string, any>) => Promise<{ data: UserProfile[] }>;\n    };\n}\n\ntype State = {\n    searchResults: UserProfile[];\n    values: UserProfileValue[];\n    show: boolean;\n    saving: boolean;\n    addError: null;\n    loading: boolean;\n    term: string;\n}\n\nfunction searchUsersToAdd(users: Dictionary<UserProfile>, term: string): Dictionary<UserProfile> {\n    const profilesList: UserProfile[] = Object.keys(users).map((key) => users[key]);\n    const filteredProfilesList = filterProfilesStartingWithTerm(profilesList, term);\n    return filterProfiles(profileListToMap(filteredProfilesList), {});\n}\n\nexport default class AddUsersToRoleModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            searchResults: [],\n            values: [],\n            show: true,\n            saving: false,\n            addError: null,\n            loading: true,\n            term: '',\n        };\n    }\n\n    componentDidMount = async () => {\n        await this.props.actions.getProfiles(0, USERS_PER_PAGE * 2);\n        this.setUsersLoadingState(false);\n    }\n\n    setUsersLoadingState = (loading: boolean) => {\n        this.setState({loading});\n    }\n\n    search = async (term: string) => {\n        this.setUsersLoadingState(true);\n        let searchResults: UserProfile[] = [];\n        const search = term !== '';\n        if (search) {\n            const {data} = await this.props.actions.searchProfiles(term, {replace: true});\n            searchResults = data;\n        } else {\n            await this.props.actions.getProfiles(0, USERS_PER_PAGE * 2);\n        }\n        this.setState({loading: false, searchResults, term});\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    renderOption = (option: UserProfileValue, isSelected: boolean, onAdd: (user: UserProfileValue) => void, onMouseMove: (user: UserProfileValue) => void) => {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    size='md'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {displayEntireNameForUser(option)}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                        <GuestBadge\n                            show={isGuest(option)}\n                            className='popoverlist'\n                        />\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue = (value: { data: UserProfileValue }): string => {\n        return value.data?.username || '';\n    }\n\n    renderAriaLabel = (option: UserProfileValue): string => {\n        return option?.username || '';\n    }\n\n    handleAdd = (value: UserProfileValue) => {\n        const values: UserProfileValue[] = [...this.state.values];\n        if (!values.includes(value)) {\n            values.push(value);\n        }\n        this.setState({values});\n    }\n\n    handleDelete = (values: UserProfileValue[]) => {\n        this.setState({values});\n    }\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            const needMoreUsers = (this.props.users.length / USERS_PER_PAGE) <= page + 1;\n            this.setUsersLoadingState(needMoreUsers);\n            this.props.actions.getProfiles(page, USERS_PER_PAGE * 2).\n                then(() => this.setUsersLoadingState(false));\n        }\n    };\n\n    handleSubmit = () => {\n        this.props.onAddCallback(this.state.values);\n        this.handleHide();\n    }\n\n    render = (): JSX.Element => {\n        const numRemainingText = (\n            <div id='numPeopleRemaining'>\n                <FormattedMessage\n                    id='multiselect.numPeopleRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n\n        let usersToDisplay: UserProfile[] = [];\n        usersToDisplay = this.state.term ? this.state.searchResults : this.props.users;\n        if (this.props.excludeUsers) {\n            const hasUser = (user: UserProfile) => !this.props.excludeUsers[user.id];\n            usersToDisplay = usersToDisplay.filter(hasUser);\n        }\n\n        if (this.props.includeUsers) {\n            let {includeUsers} = this.props;\n            if (this.state.term) {\n                includeUsers = searchUsersToAdd(includeUsers, this.state.term);\n            }\n            usersToDisplay = [...usersToDisplay, ...Object.values(includeUsers)];\n        }\n\n        const options = usersToDisplay.map((user) => {\n            return {label: user.username, value: user.id, ...user};\n        });\n\n        return (\n            <Modal\n                id='addUsersToRoleModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_users_to_role.title'\n                            defaultMessage='Add users to {roleName}'\n                            values={{\n                                roleName: (\n                                    <strong>\n                                        <FormattedMessage\n                                            id={`admin.permissions.roles.${this.props.role.name}.name`}\n                                            defaultMessage={this.props.role.name}\n                                        />\n                                    </strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addUsersToRoleKey'\n                        options={options}\n                        optionRenderer={this.renderOption}\n                        ariaLabelRenderer={this.renderAriaLabel}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={USERS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.handleAdd}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loading}\n                        placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {getProfiles, searchProfiles} from 'matterfoss-redux/actions/users';\n\nimport {getProfiles as selectProfiles} from 'matterfoss-redux/selectors/entities/users';\n\nimport AddUsersToRoleModal, {Props} from './add_users_to_role_modal';\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const filterOptions: {[key: string]: any} = {active: true, exclude_roles: [props.role.name]};\n    const users: UserProfile[] = selectProfiles(state, filterOptions);\n\n    return {\n        users,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            getProfiles,\n            searchProfiles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUsersToRoleModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Role} from 'matterfoss-redux/types/roles';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {UserProfile, UsersStats, GetFilteredUsersStatsOpts} from 'matterfoss-redux/types/users';\n\nimport Constants from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport Badge from 'components/widgets/badges/badge';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport DataGrid from 'components/admin_console/data_grid/data_grid';\nimport UserGridName from 'components/admin_console/user_grid/user_grid_name';\nimport UserGridRemove from 'components/admin_console/user_grid/user_grid_remove';\nimport AddUsersToRoleModal from '../add_users_to_role_modal';\n\nexport type Props = {\n    users: UserProfile[];\n    role: Role;\n    totalCount: number;\n    term: string;\n    currentUserId: string;\n    usersToRemove: Dictionary<UserProfile>;\n    usersToAdd: Dictionary<UserProfile>;\n    onAddCallback: (users: UserProfile[]) => void;\n    onRemoveCallback: (user: UserProfile) => void;\n    actions: {\n        getFilteredUsersStats: (filters: GetFilteredUsersStatsOpts) => Promise<{\n            data?: UsersStats;\n            error?: ServerError;\n        }>;\n        getProfiles: (page?: number | undefined, perPage?: number | undefined, options?: any) => Promise<any>;\n        searchProfiles: (term: string, options: any) => Promise<any>;\n        setUserGridSearch: (term: string) => Promise<any>;\n    };\n    readOnly?: boolean;\n}\n\ntype State = {\n    loading: boolean;\n    page: number;\n    includeUsers: Dictionary<UserProfile>;\n    excludeUsers: Dictionary<UserProfile>;\n}\n\nconst USERS_PER_PAGE = 10;\n\nexport default class SystemRoleUsers extends React.PureComponent<Props, State> {\n    searchTimeoutId: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n            page: 0,\n            includeUsers: {},\n            excludeUsers: {},\n        };\n    }\n\n    async componentDidMount() {\n        const {getProfiles, getFilteredUsersStats, setUserGridSearch} = this.props.actions;\n        await Promise.all([\n            setUserGridSearch(''),\n            getProfiles(0, USERS_PER_PAGE, {role: this.props.role.name}),\n            getFilteredUsersStats({roles: [this.props.role.name]}),\n        ]);\n        this.setStateLoading(false);\n    }\n\n    async componentDidUpdate(prevProps: Props) {\n        if (prevProps.term !== this.props.term) {\n            this.setStateLoading(true);\n            clearTimeout(this.searchTimeoutId);\n            const {term} = this.props;\n\n            if (term === '') {\n                this.searchTimeoutId = 0;\n                this.setStateLoading(false);\n                return;\n            }\n\n            const searchTimeoutId = window.setTimeout(\n                async () => {\n                    await prevProps.actions.searchProfiles(term, {role: this.props.role.name});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n                    this.setStateLoading(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    setStateLoading = (loading: boolean) => {\n        this.setState({loading});\n    }\n\n    getVisibleTotalCount = (): number => {\n        const {usersToRemove, usersToAdd, totalCount} = this.props;\n        const usersToAddCount = Object.keys(usersToAdd).length;\n        const usersToRemoveCount = Object.keys(usersToRemove).length;\n        return totalCount + (usersToAddCount - usersToRemoveCount);\n    }\n\n    getPaginationProps = (): {startCount: number; endCount: number; total: number} => {\n        const {term, usersToRemove, usersToAdd} = this.props;\n        const {page} = this.state;\n\n        let total: number;\n        let endCount = 0;\n        const startCount = (page * USERS_PER_PAGE) + 1;\n\n        if (term === '') {\n            total = this.getVisibleTotalCount();\n        } else {\n            total = this.props.users.length + Object.keys(usersToAdd).length;\n            this.props.users.forEach((u) => {\n                if (usersToRemove[u.id]) {\n                    total -= 1;\n                }\n            });\n        }\n\n        endCount = (page + 1) * USERS_PER_PAGE;\n        endCount = endCount > total ? total : endCount;\n\n        return {startCount, endCount, total};\n    }\n\n    onSearch = async (term: string) => {\n        this.props.actions.setUserGridSearch(term);\n    }\n\n    nextPage = async () => {\n        if (this.state.loading) {\n            return;\n        }\n        const page = this.state.page + 1;\n        this.setState({loading: true});\n        await this.props.actions.getProfiles(page, USERS_PER_PAGE, {role: this.props.role.name});\n        this.setState({loading: false, page});\n    }\n\n    previousPage = async () => {\n        if (this.state.loading || this.state.page === 0) {\n            return;\n        }\n        this.setState({page: this.state.page - 1});\n    }\n\n    getRows = () => {\n        const {users, readOnly, usersToAdd, usersToRemove, currentUserId} = this.props;\n        const {startCount, endCount} = this.getPaginationProps();\n\n        // Remove users to remove and add users to add\n        let usersToDisplay = users;\n        usersToDisplay = usersToDisplay.filter((user) => !usersToRemove[user.id]);\n        usersToDisplay = [...Object.values(usersToAdd), ...usersToDisplay];\n        usersToDisplay = usersToDisplay.slice(startCount - 1, endCount);\n\n        return usersToDisplay.map((user) => {\n            return {\n                cells: {\n                    id: user.id,\n                    name: (\n                        <UserGridName\n                            user={user}\n                        />\n                    ),\n                    new: (\n                        <Badge\n                            className='NewUserBadge'\n                            show={Boolean(usersToAdd[user.id])}\n                        >\n                            <FormattedMessage\n                                id='admin.user_grid.new'\n                                defaultMessage='New'\n                            />\n                        </Badge>\n                    ),\n                    remove: (\n                        <UserGridRemove\n                            user={user}\n                            removeUser={this.onRemoveCallback}\n                            isDisabled={readOnly || user.id === currentUserId}\n                        />\n                    ),\n                },\n            };\n        });\n    }\n\n    getColumns = () => {\n        const name: JSX.Element = (\n            <FormattedMessage\n                id='admin.user_grid.name'\n                defaultMessage='Name'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                width: 3,\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'new',\n                width: 1,\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'remove',\n                textAlign: 'right' as const,\n                fixed: true,\n            },\n        ];\n    }\n\n    onAddCallback = (users: UserProfile[]) => {\n        this.props.onAddCallback(users);\n    }\n\n    onRemoveCallback = (user: UserProfile) => {\n        this.props.onRemoveCallback(user);\n    }\n\n    render() {\n        const {page, loading} = this.state;\n        const {term, role, usersToAdd, usersToRemove, readOnly} = this.props;\n        const {startCount, endCount, total} = this.getPaginationProps();\n        return (\n\n            <AdminPanel\n                id='SystemRoleUsers'\n                titleId={t('admin.permissions.system_role_users.title')}\n                titleDefault='Assigned People'\n                subtitleId={t('admin.permissions.system_role_users.description')}\n                subtitleDefault='List of people assigned to this system role.'\n                button={\n                    <ToggleModalButton\n                        id='addRoleMembers'\n                        className='btn btn-primary'\n                        dialogType={AddUsersToRoleModal}\n                        isDisabled={readOnly}\n                        dialogProps={{\n                            role,\n                            onAddCallback: this.onAddCallback,\n                            skipCommit: true,\n                            excludeUsers: usersToAdd,\n                            includeUsers: usersToRemove,\n                        }}\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.system_role_users.add_people'\n                            defaultMessage='Add People'\n                        />\n                    </ToggleModalButton>\n                }\n            >\n                <DataGrid\n                    rows={this.getRows()}\n                    columns={this.getColumns()}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={page}\n                    startCount={startCount}\n                    endCount={endCount}\n                    loading={loading}\n                    onSearch={this.onSearch}\n                    term={term}\n                    total={total}\n                />\n            </AdminPanel>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {filterProfilesStartingWithTerm, profileListToMap} from 'matterfoss-redux/utils/user_utils';\n\nimport {getFilteredUsersStats, getProfiles, searchProfiles} from 'matterfoss-redux/actions/users';\n\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles_helpers';\nimport {getProfiles as selectProfiles, getFilteredUsersStats as selectFilteredUserStats, makeSearchProfilesStartingWithTerm, filterProfiles, getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\n\nimport {setUserGridSearch} from 'actions/views/search';\nimport {GlobalState} from 'types/store';\n\nimport SystemRoleUsers, {Props} from './system_role_users';\n\ntype OwnProps = {\n    roleName: string;\n    usersToAdd: Dictionary<UserProfile>;\n    usersToRemove: Dictionary<UserProfile>;\n}\n\nfunction searchUsersToAdd(users: Dictionary<UserProfile>, term: string): Dictionary<UserProfile> {\n    const profiles = filterProfilesStartingWithTerm(Object.keys(users).map((key) => users[key]), term);\n    const filteredProfilesMap = filterProfiles(profileListToMap(profiles), {});\n\n    return filteredProfilesMap;\n}\n\nfunction mapStateToProps(state: GlobalState, props: OwnProps) {\n    const {roleName} = props;\n    const role = getRoles(state)[roleName];\n    const totalCount = selectFilteredUserStats(state)?.total_users_count || 0;\n    const term = state.views.search.userGridSearch?.term || '';\n    const filters = {roles: [role.name]};\n    const searchProfilesStartingWithTerm = makeSearchProfilesStartingWithTerm();\n\n    let users = [];\n    let {usersToAdd} = props;\n    if (term) {\n        users = searchProfilesStartingWithTerm(state, term, false, filters);\n        usersToAdd = searchUsersToAdd(usersToAdd, term);\n    } else {\n        users = selectProfiles(state, filters);\n    }\n\n    return {\n        role,\n        users,\n        totalCount,\n        term,\n        usersToAdd,\n        currentUserId: getCurrentUserId(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Props['actions']>({\n            getProfiles,\n            getFilteredUsersStats,\n            searchProfiles,\n            setUserGridSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemRoleUsers);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nexport type ReadAccess = 'read';\nexport const readAccess: ReadAccess = 'read';\nexport type WriteAccess = 'write';\nexport const writeAccess: WriteAccess = 'write';\nexport type NoAccess = false;\nexport const noAccess: NoAccess = false;\nexport type MixedAccess = 'mixed';\nexport const mixedAccess: MixedAccess = 'mixed';\n\nexport type PermissionAccess = ReadAccess | WriteAccess | NoAccess;\nexport type PermissionsToUpdate = Record<string, ReadAccess | WriteAccess | NoAccess>;\nexport type PermissionToUpdate = {\n    name: string;\n    value: PermissionAccess;\n};\n\nexport type SystemSection = {\n    name: string;\n    hasDescription?: boolean;\n    subsections?: SystemSection[];\n    disabled?: boolean;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\n\nimport {noAccess, PermissionAccess, writeAccess, readAccess, PermissionToUpdate, SystemSection, mixedAccess, WriteAccess, NoAccess, ReadAccess, MixedAccess} from './types';\n\nimport './system_role_permissions.scss';\n\ntype Props = {\n    section: SystemSection;\n    access: MixedAccess | ReadAccess | NoAccess | WriteAccess;\n    updatePermissions: (permissions: PermissionToUpdate[]) => void;\n    isDisabled?: boolean;\n}\n\nexport default class SystemRolePermissionDropdown extends React.PureComponent<Props> {\n    updatePermission = (value: PermissionAccess) => {\n        const {section} = this.props;\n        const permissions: PermissionToUpdate[] = [];\n        if (section.subsections && section.subsections.length > 0) {\n            section.subsections.forEach(({name, disabled}) => {\n                if (!disabled) {\n                    permissions.push({name, value});\n                }\n            });\n        } else {\n            permissions.push({name: section.name, value});\n        }\n        this.props.updatePermissions(permissions);\n    }\n\n    renderOption = (label: JSX.Element, description: JSX.Element) => {\n        return (\n            <div className='PermissionSectionDropdownOptions'>\n                <div className='PermissionSectionDropdownOptions_label'>\n                    {label}\n                </div>\n                <div className='PermissionSectionDropdownOptions_description'>\n                    {description}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const {isDisabled, section} = this.props;\n\n        const canWriteLabel = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.write.title'}\n                defaultMessage='Can edit'\n            />\n        );\n\n        const canWriteDescription = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.write.description'}\n                defaultMessage='Can add, edit and delete anything in this section.'\n            />\n        );\n\n        const canReadLabel = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.read.title'}\n                defaultMessage='Read only'\n            />\n        );\n        const canReadDescription = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.read.description'}\n                defaultMessage={'Can view this section but can\\'t edit anything in it'}\n            />\n        );\n\n        const noAccessLabel = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.no_access.title'}\n                defaultMessage='No access'\n            />\n        );\n\n        const mixedAccessLabel = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.mixed_access.title'}\n                defaultMessage='Mixed access'\n            />\n        );\n\n        const noAccessDescription = (\n            <FormattedMessage\n                id={'admin.permissions.system_role_permissions.no_access.description'}\n                defaultMessage={'No access to this section and it will be hidden in the navigation.'}\n            />\n        );\n\n        let currentAccess = noAccessLabel;\n        switch (this.props.access) {\n        case readAccess:\n            currentAccess = canReadLabel;\n            break;\n        case writeAccess:\n            currentAccess = canWriteLabel;\n            break;\n        case mixedAccess:\n            currentAccess = mixedAccessLabel;\n            break;\n        default:\n            currentAccess = noAccessLabel;\n            break;\n        }\n\n        const ariaLabel = Utils.localizeMessage('admin.permissions.system_role_permissions.change_access', 'Change role access on a system console section');\n        return (\n            <MenuWrapper\n                isDisabled={isDisabled}\n            >\n                <button\n                    id={`systemRolePermissionDropdown${section.name}`}\n                    className='PermissionSectionDropdownButton dropdown-toggle theme'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <div className='PermissionSectionDropdownButton_text'>\n                        {currentAccess}\n                    </div>\n                    <div className='PermissionSectionDropdownButton_icon'>\n                        <DropdownIcon/>\n                    </div>\n                </button>\n                <Menu ariaLabel={ariaLabel}>\n                    <Menu.ItemAction\n                        onClick={() => this.updatePermission(writeAccess)}\n                        text={this.renderOption(canWriteLabel, canWriteDescription)}\n                    />\n                    <Menu.ItemAction\n                        onClick={() => this.updatePermission(readAccess)}\n                        text={this.renderOption(canReadLabel, canReadDescription)}\n                    />\n                    <Menu.ItemAction\n                        onClick={() => this.updatePermission(noAccess)}\n                        text={this.renderOption(noAccessLabel, noAccessDescription)}\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport SystemRolePermissionDropdown from './system_role_permission_dropdown';\nimport {PermissionsToUpdate, PermissionToUpdate, SystemSection, noAccess, PermissionAccess, writeAccess, readAccess, mixedAccess} from './types';\n\nimport './system_role_permissions.scss';\n\ntype Props = {\n    readOnly?: boolean;\n    setSectionVisible: (name: string, visible: boolean) => void;\n    section: SystemSection;\n    permissionsMap: Record<string, boolean>;\n    visibleSections: Record<string, boolean>;\n    permissionsToUpdate: PermissionsToUpdate;\n    updatePermissions: (permissions: PermissionToUpdate[]) => void;\n}\n\nexport default class SystemRolePermission extends React.PureComponent<Props> {\n    isSectionVisible = (section: SystemSection, visibleSections: Record<string, boolean>) => {\n        const {permissionsMap, permissionsToUpdate} = this.props;\n        if (Object.keys(visibleSections).includes(section.name)) {\n            return visibleSections[section.name];\n        }\n        return this.getAccessForSection(section, permissionsMap, permissionsToUpdate) === mixedAccess;\n    }\n\n    renderSubsectionToggle = (section: SystemSection, isSectionVisible: boolean) => {\n        if (!section.subsections || section.subsections.length === 0) {\n            return null;\n        }\n        const chevron = isSectionVisible ? (<i className='Icon icon-chevron-up'/>) : (<i className='Icon icon-chevron-down'/>);\n        const message = isSectionVisible ? (\n            <FormattedMessage\n                id='admin.permissions.system_role_permissions.hide_subsections'\n                defaultMessage='Hide {subsectionsCount} subsections'\n                values={{subsectionsCount: section.subsections.length}}\n            />\n        ) : (\n            <FormattedMessage\n                id='admin.permissions.system_role_permissions.show_subsections'\n                defaultMessage='Show {subsectionsCount} subsections'\n                values={{subsectionsCount: section.subsections.length}}\n            />\n        );\n        return (\n            <div className='PermissionSubsectionsToggle'>\n                <button\n                    onClick={() => this.props.setSectionVisible(section.name, !isSectionVisible)}\n                    className='dropdown-toggle theme color--link style--none'\n                >\n                    {message}\n                    {chevron}\n                </button>\n            </div>\n        );\n    }\n\n    renderSubsections = (section: SystemSection, permissionsMap: Record<string, boolean>, permissionsToUpdate: PermissionsToUpdate, isSectionVisible: boolean) => {\n        if (!section.subsections || section.subsections.length === 0) {\n            return null;\n        }\n        return (\n            <div>\n                {isSectionVisible &&\n                    <div className='PermissionSubsections'>\n                        {section.subsections.map((subsection) => this.renderSectionRow(subsection, permissionsMap, permissionsToUpdate, isSectionVisible))}\n                    </div>\n                }\n            </div>\n        );\n    }\n\n    renderSectionRow = (section: SystemSection, permissionsMap: Record<string, boolean>, permissionsToUpdate: PermissionsToUpdate, isSectionVisible: boolean) => {\n        return (\n            <div\n                key={section.name}\n                className='PermissionSection'\n            >\n                <div className='PermissionSectionText'>\n                    <div className='PermissionSectionText_title'>\n                        <FormattedMessage\n                            id={`admin.permissions.sysconsole_section_${section.name}.name`}\n                            defaultMessage={section.name}\n                        />\n                    </div>\n\n                    {section.hasDescription &&\n                        <div className='PermissionSection_description'>\n                            <FormattedMessage\n                                id={`admin.permissions.sysconsole_section_${section.name}.description`}\n                                defaultMessage={''}\n                            />\n                        </div>\n                    }\n\n                    {this.renderSubsectionToggle(section, isSectionVisible)}\n                </div>\n                <div className='PermissionSectionDropdown'>\n                    <SystemRolePermissionDropdown\n                        section={section}\n                        updatePermissions={this.props.updatePermissions}\n                        access={this.getAccessForSection(section, permissionsMap, permissionsToUpdate)}\n                        isDisabled={this.props.readOnly || Boolean(section.disabled)}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    getAccessForSection = (section: SystemSection, permissions: Record<string, boolean>, permissionsToUpdate: Record<string, PermissionAccess>) => {\n        // If we have subsections then use them to determine access to show.\n        if (section.subsections && section.subsections.length > 0) {\n            let hasNoAccess = false;\n            let canRead = false;\n            let canWrite = false;\n            section.subsections.forEach((subsection) => {\n                switch (this.getAccessForSectionByName(subsection.name, permissions, permissionsToUpdate)) {\n                case readAccess:\n                    canRead = true;\n                    break;\n                case writeAccess:\n                    canWrite = true;\n                    break;\n                default:\n                    hasNoAccess = true;\n                    break;\n                }\n            });\n\n            // If the role has more than one type of access across the subsection then mark it as mixed access.\n            if ([canRead, canWrite, hasNoAccess].filter((val) => val).length > 1) {\n                return mixedAccess;\n            } else if (canRead) {\n                return readAccess;\n            } else if (canWrite) {\n                return writeAccess;\n            } else if (hasNoAccess) {\n                return noAccess;\n            }\n        }\n        return this.getAccessForSectionByName(section.name, permissions, permissionsToUpdate);\n    }\n\n    getAccessForSectionByName = (sectionName: string, permissions: Record<string, boolean>, permissionsToUpdate: Record<string, PermissionAccess>) => {\n        // Assume sysadmin has write access for everything, this is a bit of a hack but it should be left in until `user_management_read|write_system_roles` is actually a permission\n        if (permissions[Permissions.MANAGE_SYSTEM]) {\n            return writeAccess;\n        }\n\n        let access: PermissionAccess = false;\n        if (sectionName in permissionsToUpdate) {\n            access = permissionsToUpdate[sectionName];\n        } else {\n            if (permissions[`sysconsole_read_${sectionName}`] === true) {\n                access = readAccess;\n            }\n\n            if (permissions[`sysconsole_write_${sectionName}`] === true) {\n                access = writeAccess;\n            }\n        }\n\n        return access;\n    }\n\n    render() {\n        const {section, permissionsMap, permissionsToUpdate, visibleSections} = this.props;\n        const isSectionVisible = this.isSectionVisible(section, visibleSections);\n        return (\n            <div className='PermissionRow'>\n                {this.renderSectionRow(section, permissionsMap, permissionsToUpdate, isSectionVisible)}\n                {this.renderSubsections(section, permissionsMap, permissionsToUpdate, isSectionVisible)}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {memoizeResult} from 'matterfoss-redux/utils/helpers';\nimport {Role} from 'matterfoss-redux/types/roles';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport Constants from 'utils/constants';\n\nimport SystemRolePermission from './system_role_permission';\nimport {PermissionsToUpdate, PermissionToUpdate, SystemSection} from './types';\n\nimport './system_role_permissions.scss';\n\ntype Props = {\n    role: Role;\n    permissionsToUpdate: PermissionsToUpdate;\n    updatePermissions: (permissions: PermissionToUpdate[]) => void;\n    readOnly?: boolean;\n    isLicensedForCloud: boolean;\n}\n\ntype State = {\n    visibleSections: Record<string, boolean>;\n}\n\n// the actual permissions correlating to these values are of the format `sysconsole_(read|write)_name(.subsection.name)`\nconst sectionsList: SystemSection[] = [\n    {\n        name: 'about',\n        hasDescription: true,\n        subsections: [\n            {name: 'about_edition_and_license'},\n        ],\n    },\n    {\n        name: 'billing',\n        hasDescription: true,\n        subsections: [],\n    },\n    {\n        name: 'reporting',\n        hasDescription: true,\n        subsections: [\n            {name: 'reporting_site_statistics'},\n            {name: 'reporting_team_statistics'},\n            {name: 'reporting_server_logs'},\n        ],\n    },\n    {\n        name: 'user_management',\n        hasDescription: true,\n        subsections: [\n            {name: 'user_management_users', hasDescription: true},\n            {name: 'user_management_groups'},\n            {name: 'user_management_teams'},\n            {name: 'user_management_channels'},\n            {name: 'user_management_permissions'},\n            {name: 'user_management_system_roles', disabled: true},\n        ],\n    },\n    {\n        name: 'environment',\n        hasDescription: true,\n        subsections: [\n            {name: 'environment_web_server'},\n            {name: 'environment_database'},\n            {name: 'environment_elasticsearch'},\n            {name: 'environment_file_storage'},\n            {name: 'environment_image_proxy'},\n            {name: 'environment_smtp'},\n            {name: 'environment_push_notification_server'},\n            {name: 'environment_high_availability'},\n            {name: 'environment_rate_limiting'},\n            {name: 'environment_logging'},\n            {name: 'environment_session_lengths'},\n            {name: 'environment_performance_monitoring'},\n            {name: 'environment_developer'},\n        ],\n    },\n    {\n        name: 'site',\n        hasDescription: true,\n        subsections: [\n            {name: 'site_customization'},\n            {name: 'site_localization'},\n            {name: 'site_users_and_teams'},\n            {name: 'site_notifications'},\n            {name: 'site_announcement_banner'},\n            {name: 'site_emoji'},\n            {name: 'site_posts'},\n            {name: 'site_file_sharing_and_downloads'},\n            {name: 'site_public_links'},\n            {name: 'site_notices'},\n        ],\n    },\n    {\n        name: 'authentication',\n        hasDescription: true,\n        subsections: [\n            {name: 'authentication_signup'},\n            {name: 'authentication_email'},\n            {name: 'authentication_password'},\n            {name: 'authentication_mfa'},\n            {name: 'authentication_ldap'},\n            {name: 'authentication_saml'},\n            {name: 'authentication_openid'},\n            {name: 'authentication_guest_access'},\n        ],\n    },\n    {\n        name: 'plugins',\n        hasDescription: true,\n        subsections: [],\n    },\n    {\n        name: 'integrations',\n        hasDescription: true,\n        subsections: [\n            {name: 'integrations_integration_management'},\n            {name: 'integrations_bot_accounts'},\n            {name: 'integrations_gif'},\n            {name: 'integrations_cors'},\n        ],\n    },\n    {\n        name: 'compliance',\n        hasDescription: true,\n        subsections: [\n            {name: 'compliance_data_retention_policy'},\n            {name: 'compliance_compliance_export'},\n            {name: 'compliance_compliance_monitoring'},\n            {name: 'compliance_custom_terms_of_service'},\n        ],\n    },\n    {\n        name: 'experimental',\n        hasDescription: true,\n        subsections: [\n            {name: 'experimental_features'},\n            {name: 'experimental_feature_flags'},\n            {name: 'experimental_bleve'},\n        ],\n    },\n];\n\nconst SECTIONS_BY_ROLES: Record<string, Record<string, boolean>> = {\n    [Constants.PERMISSIONS_SYSTEM_USER_MANAGER]: {\n        user_management: true,\n        authentication: true,\n    },\n};\n\nconst getPermissionsMap = memoizeResult((permissions: string[]) => {\n    return permissions.reduce((permissionsMap, permission) => {\n        permissionsMap[permission] = true;\n        return permissionsMap;\n    }, {} as Record<string, boolean>);\n});\n\nconst getSectionsListForRole = memoizeResult((sections: SystemSection[], roleName: string, sectionsByRole: Record<string, Record<string, boolean>>) => {\n    return sections.filter((section) => (!sectionsByRole[roleName] || sectionsByRole[roleName][section.name]));\n});\n\nexport default class SystemRolePermissions extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            visibleSections: {},\n        };\n    }\n\n    updatePermissions = (permissions: PermissionToUpdate[]) => {\n        this.props.updatePermissions(permissions);\n    }\n\n    setSectionVisible = (name: string, visible: boolean) => {\n        const {visibleSections} = this.state;\n        this.setState({\n            visibleSections: {\n                ...visibleSections,\n                [name]: visible,\n            },\n        });\n    }\n\n    getRows = (permissionsMap: Record<string, boolean>, permissionsToUpdate: PermissionsToUpdate, visibleSections: Record<string, boolean>) => {\n        const {isLicensedForCloud} = this.props;\n        let editedSectionsByRole = {\n            ...SECTIONS_BY_ROLES,\n        };\n\n        if (this.props.role.name === Constants.PERMISSIONS_SYSTEM_USER_MANAGER) {\n            let permissionsToShow: Record<string, boolean> = {};\n            Object.keys(permissionsMap).forEach((permission) => {\n                if (permission.startsWith('sysconsole_')) {\n                    const permissionShortName = permission.replace(/sysconsole_(read|write)_/, '');\n                    permissionsToShow = {\n                        ...permissionsToShow,\n                        [permissionShortName]: true,\n                    };\n                }\n            });\n\n            editedSectionsByRole = {\n                [Constants.PERMISSIONS_SYSTEM_USER_MANAGER]: {\n                    ...editedSectionsByRole[Constants.PERMISSIONS_SYSTEM_USER_MANAGER],\n                    ...permissionsToShow,\n                },\n            };\n        }\n\n        if (!isLicensedForCloud) {\n            // Remove the billing section if it's not licensed for cloud\n            const billingSectionIndex = sectionsList.findIndex((section) => section.name === 'billing');\n            if (billingSectionIndex > -1) {\n                sectionsList.splice(billingSectionIndex, 1);\n            }\n        }\n\n        return getSectionsListForRole(sectionsList, this.props.role.name, editedSectionsByRole).map((section: SystemSection) => {\n            return (\n                <SystemRolePermission\n                    key={section.name}\n                    section={section}\n                    permissionsMap={permissionsMap}\n                    permissionsToUpdate={permissionsToUpdate}\n                    visibleSections={visibleSections}\n                    setSectionVisible={this.setSectionVisible}\n                    updatePermissions={this.props.updatePermissions}\n                    readOnly={this.props.readOnly}\n                />\n            );\n        });\n    }\n\n    render() {\n        const {role, permissionsToUpdate} = this.props;\n        const {visibleSections} = this.state;\n        const permissionsMap = getPermissionsMap(role.permissions);\n        return (\n            <AdminPanel\n                id='SystemRolePermissions'\n                titleId={t('admin.permissions.system_role_permissions.title')}\n                titleDefault='Privileges'\n                subtitleId={t('admin.permissions.system_role_permissions.description')}\n                subtitleDefault='Level of access to the system console.'\n            >\n                <div className='SystemRolePermissions'>\n                    {this.getRows(permissionsMap, permissionsToUpdate, visibleSections)}\n                </div>\n            </AdminPanel>\n        );\n    }\n}\n\nt('admin.permissions.sysconsole_section_about.name');\nt('admin.permissions.sysconsole_section_about.description');\nt('admin.permissions.sysconsole_section_about_edition_and_license.name');\nt('admin.permissions.sysconsole_section_billing.name');\nt('admin.permissions.sysconsole_section_billing.description');\nt('admin.permissions.sysconsole_section_reporting.name');\nt('admin.permissions.sysconsole_section_reporting.description');\nt('admin.permissions.sysconsole_section_reporting_site_statistics.name');\nt('admin.permissions.sysconsole_section_reporting_team_statistics.name');\nt('admin.permissions.sysconsole_section_reporting_server_logs.name');\nt('admin.permissions.sysconsole_section_user_management.name');\nt('admin.permissions.sysconsole_section_user_management.description');\nt('admin.permissions.sysconsole_section_user_management_users.name');\nt('admin.permissions.sysconsole_section_user_management_users.description');\nt('admin.permissions.sysconsole_section_user_management_groups.name');\nt('admin.permissions.sysconsole_section_user_management_teams.name');\nt('admin.permissions.sysconsole_section_user_management_channels.name');\nt('admin.permissions.sysconsole_section_user_management_permissions.name');\nt('admin.permissions.sysconsole_section_user_management_system_roles.name');\nt('admin.permissions.sysconsole_section_environment.name');\nt('admin.permissions.sysconsole_section_environment.description');\nt('admin.permissions.sysconsole_section_environment_web_server.name');\nt('admin.permissions.sysconsole_section_environment_database.name');\nt('admin.permissions.sysconsole_section_environment_elasticsearch.name');\nt('admin.permissions.sysconsole_section_environment_file_storage.name');\nt('admin.permissions.sysconsole_section_environment_image_proxy.name');\nt('admin.permissions.sysconsole_section_environment_smtp.name');\nt('admin.permissions.sysconsole_section_environment_push_notification_server.name');\nt('admin.permissions.sysconsole_section_environment_high_availability.name');\nt('admin.permissions.sysconsole_section_environment_rate_limiting.name');\nt('admin.permissions.sysconsole_section_environment_logging.name');\nt('admin.permissions.sysconsole_section_environment_session_lengths.name');\nt('admin.permissions.sysconsole_section_environment_performance_monitoring.name');\nt('admin.permissions.sysconsole_section_environment_developer.name');\nt('admin.permissions.sysconsole_section_site.name');\nt('admin.permissions.sysconsole_section_site.description');\nt('admin.permissions.sysconsole_section_site_customization.name');\nt('admin.permissions.sysconsole_section_site_localization.name');\nt('admin.permissions.sysconsole_section_site_users_and_teams.name');\nt('admin.permissions.sysconsole_section_site_notifications.name');\nt('admin.permissions.sysconsole_section_site_announcement_banner.name');\nt('admin.permissions.sysconsole_section_site_emoji.name');\nt('admin.permissions.sysconsole_section_site_posts.name');\nt('admin.permissions.sysconsole_section_site_file_sharing_and_downloads.name');\nt('admin.permissions.sysconsole_section_site_public_links.name');\nt('admin.permissions.sysconsole_section_site_notices.name');\nt('admin.permissions.sysconsole_section_authentication.name');\nt('admin.permissions.sysconsole_section_authentication.description');\nt('admin.permissions.sysconsole_section_authentication_signup.name');\nt('admin.permissions.sysconsole_section_authentication_email.name');\nt('admin.permissions.sysconsole_section_authentication_password.name');\nt('admin.permissions.sysconsole_section_authentication_mfa.name');\nt('admin.permissions.sysconsole_section_authentication_ldap.name');\nt('admin.permissions.sysconsole_section_authentication_saml.name');\nt('admin.permissions.sysconsole_section_authentication_openid.name');\nt('admin.permissions.sysconsole_section_authentication_guest_access.name');\nt('admin.permissions.sysconsole_section_plugins.name');\nt('admin.permissions.sysconsole_section_plugins.description');\nt('admin.permissions.sysconsole_section_integrations.name');\nt('admin.permissions.sysconsole_section_integrations.description');\nt('admin.permissions.sysconsole_section_integrations_integration_management.name');\nt('admin.permissions.sysconsole_section_integrations_bot_accounts.name');\nt('admin.permissions.sysconsole_section_integrations_gif.name');\nt('admin.permissions.sysconsole_section_integrations_cors.name');\nt('admin.permissions.sysconsole_section_compliance.name');\nt('admin.permissions.sysconsole_section_compliance.description');\nt('admin.permissions.sysconsole_section_compliance_data_retention_policy.name');\nt('admin.permissions.sysconsole_section_compliance_compliance_export.name');\nt('admin.permissions.sysconsole_section_compliance_compliance_monitoring.name');\nt('admin.permissions.sysconsole_section_compliance_custom_terms_of_service.name');\nt('admin.permissions.sysconsole_section_experimental.name');\nt('admin.permissions.sysconsole_section_experimental.description');\nt('admin.permissions.sysconsole_section_experimental_features.name');\nt('admin.permissions.sysconsole_section_experimental_feature_flags.name');\nt('admin.permissions.sysconsole_section_experimental_bleve.name');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {uniq, difference} from 'lodash';\n\nimport {Role} from 'matterfoss-redux/types/roles';\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\nimport Permissions from 'matterfoss-redux/constants/permissions';\n\nimport Constants from 'utils/constants';\nimport {browserHistory} from 'utils/browser_history';\n\nimport FormError from 'components/form_error';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport SaveChangesPanel from 'components/admin_console/team_channel_settings/save_changes_panel';\n\nimport {isError} from 'types/actions';\n\nimport SystemRoleUsers from './system_role_users';\nimport SystemRolePermissions from './system_role_permissions';\nimport {PermissionToUpdate, PermissionsToUpdate, writeAccess} from './types';\n\ntype Props = {\n    role: Role;\n    isDisabled?: boolean;\n    isLicensedForCloud: boolean;\n\n    actions: {\n        editRole(role: Role): Promise<ActionResult>;\n        updateUserRoles(userId: string, roles: string): Promise<ActionResult>;\n        setNavigationBlocked: (blocked: boolean) => void;\n    };\n}\n\ntype State = {\n    usersToAdd: Dictionary<UserProfile>;\n    usersToRemove: Dictionary<UserProfile>;\n    permissionsToUpdate: PermissionsToUpdate;\n    updatedRolePermissions: string[];\n    saving: boolean;\n    saveNeeded: boolean;\n    serverError: JSX.Element | null;\n    saveKey: number;\n}\n\nexport default class SystemRole extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            usersToAdd: {},\n            usersToRemove: {},\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            permissionsToUpdate: {},\n            saveKey: 0,\n            updatedRolePermissions: [],\n        };\n    }\n\n    getSaveStateNeeded = (nextState: Partial<State>): boolean => {\n        const {role} = this.props;\n        const {usersToAdd, usersToRemove, updatedRolePermissions, permissionsToUpdate} = {...this.state, ...nextState};\n        let saveNeeded = false;\n        saveNeeded = Object.keys(usersToAdd).length > 0 || Object.keys(usersToRemove).length > 0;\n        if (Object.keys(permissionsToUpdate).length > 0) {\n            saveNeeded = saveNeeded || difference(updatedRolePermissions, role.permissions).length > 0 || difference(role.permissions, updatedRolePermissions).length > 0;\n        }\n        return saveNeeded;\n    }\n\n    addUsersToRole = (users: UserProfile[]) => {\n        const {actions: {setNavigationBlocked}} = this.props;\n        const usersToAdd = {\n            ...this.state.usersToAdd,\n        };\n        const usersToRemove = {\n            ...this.state.usersToRemove,\n        };\n        users.forEach((user) => {\n            if (usersToRemove[user.id]) {\n                delete usersToRemove[user.id];\n            } else {\n                usersToAdd[user.id] = user;\n            }\n        });\n\n        const saveNeeded = this.getSaveStateNeeded({usersToAdd, usersToRemove});\n        setNavigationBlocked(saveNeeded);\n        this.setState({usersToAdd, usersToRemove, saveNeeded});\n    }\n\n    removeUserFromRole = (user: UserProfile) => {\n        const {actions: {setNavigationBlocked}} = this.props;\n        const usersToAdd = {\n            ...this.state.usersToAdd,\n        };\n        const usersToRemove = {\n            ...this.state.usersToRemove,\n        };\n        if (usersToAdd[user.id]) {\n            delete usersToAdd[user.id];\n        } else {\n            usersToRemove[user.id] = user;\n        }\n\n        const saveNeeded = this.getSaveStateNeeded({usersToAdd, usersToRemove});\n        setNavigationBlocked(saveNeeded);\n        this.setState({usersToRemove, usersToAdd, saveNeeded});\n    }\n\n    handleSubmit = async () => {\n        this.setState({saving: true, saveNeeded: false});\n        const {usersToRemove, usersToAdd, updatedRolePermissions, permissionsToUpdate} = this.state;\n        const {role, actions: {editRole, updateUserRoles, setNavigationBlocked}} = this.props;\n        let serverError = null;\n\n        // Do not update permissions if sysadmin or if roles have not been updated (to prevent overrwiting roles with no permissions)\n        if (role.name !== Constants.PERMISSIONS_SYSTEM_ADMIN && Object.keys(permissionsToUpdate).length > 0) {\n            const rolePermissionsWithAncillaryPermssions = await Client4.getAncillaryPermissions(updatedRolePermissions);\n\n            const newRole: Role = {\n                ...role,\n                permissions: rolePermissionsWithAncillaryPermssions,\n            };\n            const result = await editRole(newRole);\n            if (isError(result)) {\n                serverError = <FormError error={result.error.message}/>;\n            }\n        }\n\n        const userIdsToRemove = Object.keys(usersToRemove);\n        if (userIdsToRemove.length > 0) {\n            const removeUserPromises: Array<Promise<ActionResult>> = [];\n            userIdsToRemove.forEach((userId) => {\n                const user = usersToRemove[userId];\n                const updatedRoles = uniq(user.roles.split(' ').filter((r) => r !== role.name)).join(' ');\n                removeUserPromises.push(updateUserRoles(userId, updatedRoles));\n            });\n\n            const results = await Promise.all(removeUserPromises);\n            const resultWithError = results.find(isError);\n\n            // const count = result.filter(isSuccess).length; // To be used for potential telemetry\n            if (resultWithError && 'error' in resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            }\n        }\n\n        const userIdsToAdd = Object.keys(usersToAdd);\n        if (userIdsToAdd.length > 0 && serverError == null) {\n            const addUserPromises: Array<Promise<ActionResult>> = [];\n            userIdsToAdd.forEach((userId) => {\n                const user = usersToAdd[userId];\n                const updatedRoles = uniq([...user.roles.split(' '), role.name]).join(' ');\n                addUserPromises.push(updateUserRoles(userId, updatedRoles));\n            });\n\n            const results = await Promise.all(addUserPromises);\n            const resultWithError = results.find(isError);\n\n            // const count = result.filter(isSuccess).length; // To be used for potential telemetry\n            if (resultWithError && 'error' in resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            }\n        }\n\n        let {saveKey} = this.state;\n        if (serverError === null) {\n            saveKey += 1;\n        }\n\n        if (serverError === null) {\n            browserHistory.push('/admin_console/user_management/system_roles');\n        }\n        setNavigationBlocked(serverError !== null);\n        this.setState({\n            saveNeeded: (serverError !== null),\n            saving: false,\n            serverError,\n            usersToAdd: {},\n            usersToRemove: {},\n            saveKey,\n        });\n    }\n\n    updatePermissions = (permissions: PermissionToUpdate[]) => {\n        const {role, actions: {setNavigationBlocked}} = this.props;\n        const updatedPermissions: PermissionsToUpdate = {};\n        permissions.forEach((perm) => {\n            updatedPermissions[perm.name] = perm.value;\n        });\n        const permissionsToUpdate = {\n            ...this.state.permissionsToUpdate,\n            ...updatedPermissions,\n        };\n\n        let updatedRolePermissions: string[] = role.permissions.\n            filter((permission) => permission.startsWith('sysconsole_') && !(permission.replace(/sysconsole_(read|write)_/, '') in permissionsToUpdate));\n\n        Object.keys(permissionsToUpdate).forEach((permissionShortName) => {\n            const value = permissionsToUpdate[permissionShortName];\n            if (value) {\n                const readPermission = `sysconsole_read_${permissionShortName}`;\n                const writePermission = `sysconsole_write_${permissionShortName}`;\n\n                if (value === writeAccess) {\n                    updatedRolePermissions.push(readPermission, writePermission);\n                } else {\n                    updatedRolePermissions.push(readPermission);\n                }\n            }\n        });\n\n        // Make sure the sysadmin role always has manage system...\n        if (role.name === Constants.PERMISSIONS_SYSTEM_ADMIN) {\n            updatedRolePermissions.push(Permissions.MANAGE_SYSTEM);\n        }\n\n        updatedRolePermissions = uniq(updatedRolePermissions);\n        const nextState = {\n            permissionsToUpdate,\n            updatedRolePermissions,\n        };\n\n        setNavigationBlocked(this.getSaveStateNeeded(nextState));\n        this.setState({\n            ...nextState,\n            saveNeeded: this.getSaveStateNeeded(nextState),\n        });\n    }\n\n    render() {\n        const {usersToAdd, usersToRemove, saving, saveNeeded, serverError, permissionsToUpdate, saveKey} = this.state;\n        const {role, isDisabled, isLicensedForCloud} = this.props;\n        const defaultName = role.name.split('').map((r) => r.charAt(0).toUpperCase() + r.slice(1)).join(' ');\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/system_roles'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id={`admin.permissions.roles.${role.name}.name`}\n                            defaultMessage={defaultName}\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <SystemRolePermissions\n                            role={role}\n                            isLicensedForCloud={isLicensedForCloud}\n                            permissionsToUpdate={permissionsToUpdate}\n                            updatePermissions={this.updatePermissions}\n                            readOnly={isDisabled || role.name === Constants.PERMISSIONS_SYSTEM_ADMIN}\n                        />\n\n                        <SystemRoleUsers\n                            key={saveKey}\n                            roleName={role.name}\n                            usersToAdd={usersToAdd}\n                            usersToRemove={usersToRemove}\n                            onAddCallback={this.addUsersToRole}\n                            onRemoveCallback={this.removeUserFromRole}\n                            readOnly={isDisabled}\n                        />\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    cancelLink='/admin_console/user_management/system_roles'\n                    saveNeeded={saveNeeded}\n                    onClick={this.handleSubmit}\n                    serverError={serverError}\n                    isDisabled={isDisabled}\n                />\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {GenericAction, ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\nimport {Role} from 'matterfoss-redux/types/roles';\nimport {updateUserRoles} from 'matterfoss-redux/actions/users';\nimport {editRole} from 'matterfoss-redux/actions/roles';\nimport {getRolesById} from 'matterfoss-redux/selectors/entities/roles';\nimport {getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport SystemRole from './system_role';\n\ntype Props = {\n    match: {\n        params: {\n            role_id: string;\n        };\n    };\n}\n\ntype Actions = {\n    editRole(role: Role): Promise<ActionResult>;\n    updateUserRoles(userId: string, roles: string): Promise<ActionResult>;\n    setNavigationBlocked: (blocked: boolean) => void;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const role = getRolesById(state)[props.match.params.role_id];\n    const license = getLicense(state);\n    const isLicensedForCloud = license.Cloud === 'true';\n\n    return {\n        isLicensedForCloud,\n        role,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            editRole,\n            updateUserRoles,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemRole);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {UserSearchOptions, UserListOptions, UserFilters} from 'utils/constants';\n\nexport type FilterOptions = Record<string, string | boolean>\nconst NEVER = 0;\n\n// userSelectorOptionsFromFilter will convert a string UI filter to an options object\n// for selecting users out of redux state\n// Note: this is currently the same as getUserOptionsFromFilter but wrapped to be clear\n// that there are separate purposes (this can be used with both getProfiles and searchProfiles\n// selectors)\nexport function userSelectorOptionsFromFilter(filter: string | undefined): FilterOptions {\n    return getUserOptionsFromFilter(filter);\n}\n\n// getUserOptionsFromFilter will convert a string UI filter to an options objects\n// for an API request to the get users endpoint\nexport function getUserOptionsFromFilter(filter: string | undefined): FilterOptions {\n    const options: FilterOptions = {};\n    if (filter === UserFilters.SYSTEM_ADMIN) {\n        options[UserListOptions.ROLE] = UserFilters.SYSTEM_ADMIN;\n    } else if (filter === UserFilters.SYSTEM_GUEST) {\n        options[UserListOptions.ROLE] = UserFilters.SYSTEM_GUEST;\n    } else if (filter === UserFilters.INACTIVE) {\n        options[UserListOptions.INACTIVE] = true;\n    }\n    return options;\n}\n\n// searchUserOptionsFromFilter will convert a string UI filter to an options objects\n// for an API request to the search users endpoint\nexport function searchUserOptionsFromFilter(filter: string | undefined): FilterOptions {\n    const options: FilterOptions = {};\n    if (filter === UserFilters.SYSTEM_ADMIN) {\n        options[UserSearchOptions.ROLE] = UserFilters.SYSTEM_ADMIN;\n    } else if (filter === UserFilters.SYSTEM_GUEST) {\n        options[UserSearchOptions.ROLE] = UserFilters.SYSTEM_GUEST;\n    } else if (filter === UserFilters.INACTIVE) {\n        options[UserSearchOptions.ALLOW_INACTIVE] = true;\n    }\n    return options;\n}\n\n// isActive returns whether a user is active or not.\nexport function isActive(user: {delete_at: number}): boolean {\n    return user.delete_at === NEVER;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {General} from 'matterfoss-redux/constants';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport * as UserUtils from 'matterfoss-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Avatar from 'components/widgets/users/avatar';\nimport {isSuccess} from 'types/actions';\n\nexport type Props = {\n    show: boolean;\n    user?: UserProfile;\n    userAccessTokensEnabled: boolean;\n\n    // defining custom function type instead of using React.MouseEventHandler\n    // to make the event optional\n    onModalDismissed: (e?: React.MouseEvent<HTMLButtonElement>) => void;\n    actions: { updateUserRoles: (userId: string, roles: string) => Promise<ActionResult>};\n}\n\ntype State = {\n    user?: UserProfile;\n    error: any | null;\n    hasPostAllRole: boolean;\n    hasPostAllPublicRole: boolean;\n    hasUserAccessTokenRole: boolean;\n    isSystemAdmin: boolean;\n}\n\nfunction getStateFromProps(props: Props): State {\n    const roles = props.user && props.user.roles ? props.user.roles : '';\n\n    return {\n        user: props.user,\n        error: null,\n        hasPostAllRole: UserUtils.hasPostAllRole(roles),\n        hasPostAllPublicRole: UserUtils.hasPostAllPublicRole(roles),\n        hasUserAccessTokenRole: UserUtils.hasUserAccessTokenRole(roles),\n        isSystemAdmin: UserUtils.isSystemAdmin(roles),\n    };\n}\n\nexport default class ManageRolesModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = getStateFromProps(props);\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n        if (prevState.user?.id !== nextProps.user?.id) {\n            return getStateFromProps(nextProps);\n        }\n        return null;\n    }\n\n    handleError = (error: any) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleSystemAdminChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (e.target.name === 'systemadmin') {\n            this.setState({isSystemAdmin: true});\n        } else if (e.target.name === 'systemmember') {\n            this.setState({isSystemAdmin: false});\n        }\n    };\n\n    handleUserAccessTokenChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasUserAccessTokenRole: e.target.checked,\n        });\n    };\n\n    handlePostAllChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasPostAllRole: e.target.checked,\n        });\n    };\n\n    handlePostAllPublicChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({\n            hasPostAllPublicRole: e.target.checked,\n        });\n    };\n\n    trackRoleChanges = (roles: string, oldRoles: string) => {\n        if (UserUtils.hasUserAccessTokenRole(roles) && !UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        } else if (!UserUtils.hasUserAccessTokenRole(roles) && UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        }\n\n        if (UserUtils.hasPostAllRole(roles) && !UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        } else if (!UserUtils.hasPostAllRole(roles) && UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        }\n\n        if (UserUtils.hasPostAllPublicRole(roles) && !UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        } else if (!UserUtils.hasPostAllPublicRole(roles) && UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        }\n    }\n\n    handleSave = async () => {\n        this.setState({error: null});\n\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.isSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.hasUserAccessTokenRole) {\n            roles += ' ' + General.SYSTEM_USER_ACCESS_TOKEN_ROLE;\n            if (this.state.hasPostAllRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n            } else if (this.state.hasPostAllPublicRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n            }\n        }\n\n        const result = await this.props.actions.updateUserRoles(this.props.user!.id, roles);\n        this.trackRoleChanges(roles, this.props.user!.roles);\n\n        if (isSuccess(result)) {\n            this.props.onModalDismissed();\n        } else {\n            this.handleError(\n                <FormattedMessage\n                    id='admin.manage_roles.saveError'\n                    defaultMessage='Unable to save roles.'\n                />,\n            );\n        }\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n\n        if (user == null) {\n            return <div/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let additionalRoles;\n        if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin || user.is_bot) {\n            additionalRoles = (\n                <div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='admin.manage_roles.additionalRoles'\n                            defaultMessage='Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions).'\n                        />\n                    </p>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handlePostAllChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllRoleTitle'\n                                    defaultMessage='post:all'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllRole'\n                                defaultMessage='Access to post to all MatterFOSS channels including direct messages.'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postallpublic'\n                                checked={this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                onChange={this.handlePostAllPublicChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllPublicRoleTitle'\n                                    defaultMessage='post:channels'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllPublicRole'\n                                defaultMessage='Access to post to all MatterFOSS public channels.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        }\n\n        let userAccessTokenContent;\n        if (this.props.userAccessTokensEnabled) {\n            if (user.is_bot) {\n                userAccessTokenContent = (\n                    <div>\n                        <div className='member-row--padded member-row-lone-padding'>\n                            {additionalRoles}\n                        </div>\n                    </div>\n                );\n            } else {\n                userAccessTokenContent = (\n                    <div>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    type='checkbox'\n                                    ref='postall'\n                                    checked={this.state.hasUserAccessTokenRole || this.state.isSystemAdmin}\n                                    disabled={this.state.isSystemAdmin}\n                                    onChange={this.handleUserAccessTokenChange}\n                                />\n                                <FormattedMarkdownMessage\n                                    id='admin.manage_roles.allowUserAccessTokens'\n                                    defaultMessage='Allow this account to generate [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                                />\n                                <span className='d-block pt-2 pb-2 light'>\n                                    <FormattedMessage\n                                        id='admin.manage_roles.allowUserAccessTokensDesc'\n                                        defaultMessage=\"Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu.\"\n                                    />\n                                </span>\n                            </label>\n                        </div>\n                        <div className='member-row--padded'>\n                            {additionalRoles}\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        let email = user.email;\n        if (user.is_bot) {\n            email = '';\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        size='lg'\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                            <BotBadge\n                                show={Boolean(user.is_bot)}\n                                className='badge-admin'\n                            />\n                        </div>\n                        <div className='manage-teams__email'>\n                            {email}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='manage-row--inner'>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemadmin'\n                                    type='radio'\n                                    checked={this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemAdmin'\n                                    defaultMessage='System Admin'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemmember'\n                                    type='radio'\n                                    checked={!this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemMember'\n                                    defaultMessage='Member'\n                                />\n                            </label>\n                        </div>\n                    </div>\n                    {userAccessTokenContent}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams'\n                role='dialog'\n                aria-labelledby='manageRolesModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageRolesModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.manageRolesTitle'\n                            defaultMessage='Manage Roles'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {updateUserRoles} from 'matterfoss-redux/actions/users';\n\nimport {GlobalState} from 'types/store';\n\nimport ManageRolesModal, {Props} from './manage_roles_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        userAccessTokensEnabled: state.entities.admin.config.ServiceSettings!.EnableUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRolesModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ManageTeamsDropdown extends React.PureComponent {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        onError: PropTypes.func.isRequired,\n        onMemberChange: PropTypes.func.isRequired,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        handleRemoveUserFromTeam: PropTypes.func.isRequired,\n    };\n\n    makeTeamAdmin = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.props.onMemberChange(this.props.teamMember.team_id);\n        }\n    };\n\n    makeMember = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.props.onMemberChange(this.props.teamMember.team_id);\n        }\n    };\n\n    removeFromTeam = () => {\n        this.props.handleRemoveUserFromTeam(this.props.teamMember.team_id);\n    }\n\n    render() {\n        const isTeamAdmin = Utils.isAdmin(this.props.teamMember.roles) || this.props.teamMember.scheme_admin;\n        const isSysAdmin = Utils.isSystemAdmin(this.props.user.roles);\n        const isGuest = Utils.isGuest(this.props.user);\n\n        const {team} = this.props;\n        let title;\n        if (isSysAdmin) {\n            title = Utils.localizeMessage('admin.user_item.sysAdmin', 'System Admin');\n        } else if (isTeamAdmin) {\n            title = Utils.localizeMessage('admin.user_item.teamAdmin', 'Team Admin');\n        } else if (isGuest) {\n            title = Utils.localizeMessage('admin.user_item.guest', 'Guest');\n        } else {\n            title = Utils.localizeMessage('admin.user_item.teamMember', 'Team Member');\n        }\n\n        return (\n            <MenuWrapper>\n                <a>\n                    <span>{title} </span>\n                    <span className='caret'/>\n                </a>\n                <Menu\n                    openLeft={true}\n                    ariaLabel={Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Change the role of a team member')}\n                >\n                    <Menu.ItemAction\n                        show={!isTeamAdmin && !isGuest}\n                        onClick={this.makeTeamAdmin}\n                        text={Utils.localizeMessage('admin.user_item.makeTeamAdmin', 'Make Team Admin')}\n                    />\n                    <Menu.ItemAction\n                        show={isTeamAdmin}\n                        onClick={this.makeMember}\n                        text={Utils.localizeMessage('admin.user_item.makeMember', 'Make Team Member')}\n                    />\n                    <Menu.ItemAction\n                        show={!team.group_constrained}\n                        onClick={this.removeFromTeam}\n                        text={Utils.localizeMessage('team_members_dropdown.leave_team', 'Remove from Team')}\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemoveFromTeamButton extends React.PureComponent {\n    static propTypes = {\n        teamId: PropTypes.string.isRequired,\n        handleRemoveUserFromTeam: PropTypes.func.isRequired,\n    };\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.handleRemoveUserFromTeam(this.props.teamId);\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='team_members_dropdown.leave_team'\n                    defaultMessage='Remove from Team'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport ManageTeamsDropdown from './manage_teams_dropdown.jsx';\nimport RemoveFromTeamButton from './remove_from_team_button.jsx';\n\nexport default class ManageTeamsModal extends React.PureComponent {\n    static propTypes = {\n        locale: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func.isRequired,\n        show: PropTypes.bool.isRequired,\n        user: PropTypes.object,\n        actions: PropTypes.shape({\n            getTeamMembersForUser: PropTypes.func.isRequired,\n            getTeamsForUser: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n            removeUserFromTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            teams: null,\n            teamMembers: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.user) {\n            this.loadTeamsAndTeamMembers();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : '';\n        const nextUserId = nextProps.user ? nextProps.user.id : '';\n\n        if (userId !== nextUserId) {\n            this.setState({\n                teams: null,\n                teamMembers: null,\n            });\n\n            if (nextProps.user) {\n                this.loadTeamsAndTeamMembers(nextProps.user);\n            }\n        }\n    }\n\n    loadTeamsAndTeamMembers = async (user = this.props.user) => {\n        this.getTeamMembers(user.id);\n        const {data} = await this.props.actions.getTeamsForUser(user.id);\n        this.setState({\n            teams: filterAndSortTeamsByDisplayName(data, this.props.locale),\n        });\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    getTeamMembers = async (userId = this.props.user.id) => {\n        const {data} = await this.props.actions.getTeamMembersForUser(userId);\n        if (data) {\n            this.setState({\n                teamMembers: data,\n            });\n        }\n    }\n\n    handleMemberRemove = (teamId) => {\n        this.setState({\n            teams: this.state.teams.filter((team) => team.id !== teamId),\n            teamMembers: this.state.teamMembers.filter((teamMember) => teamMember.team_id !== teamId),\n        });\n    }\n\n    handleRemoveUserFromTeam = async (teamId) => {\n        const {actions, user} = this.props;\n\n        const {data, error} = await actions.removeUserFromTeam(teamId, user.id);\n        if (data) {\n            this.handleMemberRemove(teamId);\n        } else if (error) {\n            this.handleError(error.message);\n        }\n    }\n\n    handleMemberChange = () => {\n        this.getTeamMembers(this.props.user.id);\n    };\n\n    renderContents = () => {\n        const {user} = this.props;\n        const {teams, teamMembers} = this.state;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        const isSystemAdmin = Utils.isAdmin(user.roles);\n\n        let name = Utils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let teamList;\n        if (teams && teamMembers) {\n            teamList = teams.map((team) => {\n                const teamMember = teamMembers.find((member) => member.team_id === team.id);\n                if (!teamMember) {\n                    return null;\n                }\n\n                let action;\n                if (isSystemAdmin) {\n                    action = (\n                        <RemoveFromTeamButton\n                            teamId={team.id}\n                            handleRemoveUserFromTeam={this.handleRemoveUserFromTeam}\n                        />\n                    );\n                } else {\n                    action = (\n                        <ManageTeamsDropdown\n                            user={user}\n                            team={team}\n                            teamMember={teamMember}\n                            onError={this.handleError}\n                            onMemberChange={this.handleMemberChange}\n                            updateTeamMemberSchemeRoles={this.props.actions.updateTeamMemberSchemeRoles}\n                            handleRemoveUserFromTeam={this.handleRemoveUserFromTeam}\n                        />\n                    );\n                }\n\n                return (\n                    <div\n                        key={team.id}\n                        className='manage-teams__team'\n                    >\n                        <div className='manage-teams__team-name'>\n                            {team.display_name}\n                        </div>\n                        <div className='manage-teams__team-actions'>\n                            {action}\n                        </div>\n                    </div>\n                );\n            });\n        } else {\n            teamList = <LoadingScreen/>;\n        }\n\n        let systemAdminIndicator = null;\n        if (isSystemAdmin) {\n            systemAdminIndicator = (\n                <div className='manage-teams__system-admin'>\n                    <FormattedMessage\n                        id='admin.user_item.sysAdmin'\n                        defaultMessage='System Admin'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        size='lg'\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                    {systemAdminIndicator}\n                </div>\n                <div className='manage-teams__teams'>\n                    {teamList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams modal--overflow-visible'\n                role='dialog'\n                aria-labelledby='manageTeamsModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageTeamsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateTeamMemberSchemeRoles, getTeamMembersForUser, getTeamsForUser, removeUserFromTeam} from 'matterfoss-redux/actions/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ManageTeamsModal from './manage_teams_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeamMembersForUser,\n            getTeamsForUser,\n            updateTeamMemberSchemeRoles,\n            removeUserFromTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTeamsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\ninterface RevokeTokenButtonProps {\n    actions: {\n        revokeUserAccessToken: (tokenId: string) => Promise<ActionFunc | ActionResult> | ActionFunc | ActionResult;\n    };\n    tokenId: string;\n    onError: (errorMessage: string) => void;\n}\n\nexport default class RevokeTokenButton extends React.PureComponent<RevokeTokenButtonProps> {\n    private handleClick = async (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        const response = await this.props.actions.revokeUserAccessToken(this.props.tokenId);\n        trackEvent('system_console', 'revoke_user_access_token');\n\n        if ('error' in response) {\n            this.props.onError(response.error.message);\n        }\n    }\n\n    render() {\n        return (\n            <button\n                type='button'\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='admin.revoke_token_button.delete'\n                    defaultMessage='Delete'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {revokeUserAccessToken} from 'matterfoss-redux/actions/users';\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport RevokeTokenButton from './revoke_token_button';\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            revokeUserAccessToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RevokeTokenButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {UserAccessToken, UserProfile} from 'matterfoss-redux/types/users';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\nimport * as UserUtils from 'matterfoss-redux/utils/user_utils';\n\nimport RevokeTokenButton from 'components/admin_console/revoke_token_button';\nimport LoadingScreen from 'components/loading_screen';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport type Props = {\n\n    /**\n     * Set to render the modal\n     */\n    show: boolean;\n\n    /**\n     * The user the roles are being managed for\n     */\n    user?: UserProfile;\n\n    /**\n     * The personal access tokens for a user, object with token ids as keys\n     */\n    userAccessTokens?: Dictionary<UserAccessToken>;\n\n    /**\n     * Function called when modal is dismissed\n     */\n    onModalDismissed: (e?: React.MouseEvent<HTMLButtonElement>) => void;\n    actions: {\n\n        /**\n         * Function to get a user's access tokens\n         */\n        getUserAccessTokensForUser: (userId: string, page: number, perPage: number) => ActionFunc;\n    };\n};\n\ntype State = {\n    error: string | null;\n}\n\nexport default class ManageTokensModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            error: null,\n        };\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        const userId = this.props.user ? this.props.user.id : null;\n        const prevUserId = prevProps.user ? prevProps.user.id : null;\n        if (userId && prevUserId !== userId) {\n            this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n        }\n    }\n\n    private handleError = (error: string): void => {\n        this.setState({\n            error,\n        });\n    }\n\n    private renderContents = (): JSX.Element => {\n        const {user, userAccessTokens} = this.props;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let tokenList;\n        if (userAccessTokens) {\n            const userAccessTokensList = Object.values(userAccessTokens);\n\n            if (userAccessTokensList.length === 0) {\n                tokenList = (\n                    <div className='manage-row__empty'>\n                        <FormattedMessage\n                            id='admin.manage_tokens.userAccessTokensNone'\n                            defaultMessage='No personal access tokens.'\n                        />\n                    </div>\n                );\n            } else {\n                tokenList = userAccessTokensList.map((token: UserAccessToken) => {\n                    return (\n                        <div\n                            key={token.id}\n                            className='manage-teams__team'\n                        >\n                            <div className='manage-teams__team-name'>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensNameLabel'\n                                        defaultMessage='Token Description: '\n                                    />\n                                    {token.description}\n                                </div>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensIdLabel'\n                                        defaultMessage='Token ID: '\n                                    />\n                                    {token.id}\n                                </div>\n                            </div>\n                            <div className='manage-teams__team-actions'>\n                                <RevokeTokenButton\n                                    tokenId={token.id}\n                                    onError={this.handleError}\n                                />\n                            </div>\n                        </div>\n                    );\n                });\n            }\n        } else {\n            tokenList = <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        size='lg'\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div className='pt-3'>\n                    <FormattedMarkdownMessage\n                        id='admin.manage_tokens.userAccessTokensDescription'\n                        defaultMessage='Personal access tokens function similarly to session tokens and can be used by integrations to [interact with this MatterFOSS server](!https://about.mattermost.com/default-api-authentication). Tokens are disabled if the user is deactivated. Learn more about [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                    />\n                </div>\n                <div className='manage-teams__teams'>\n                    {tokenList}\n                </div>\n            </div>\n        );\n    }\n\n    public render = (): JSX.Element => {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams'\n                role='dialog'\n                aria-labelledby='manageTokensModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageTokensModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.manage_tokens.manageTokensTitle'\n                            defaultMessage='Manage Personal Access Tokens'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getUserAccessTokensForUser} from 'matterfoss-redux/actions/users';\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport ManageTokensModal, {Props} from './manage_tokens_modal';\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const userId = ownProps.user ? ownProps.user.id : '';\n\n    const userAccessTokens = state.entities.admin.userAccessTokensByUser;\n\n    return {\n        userAccessTokens: userAccessTokens === undefined ? undefined : userAccessTokens[userId],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            getUserAccessTokensForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTokensModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\nimport * as Utils from 'utils/utils.jsx';\n\ninterface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n    requireUppercase: boolean;\n}\n\ntype State = {\n    serverErrorNewPass: JSX.Element|null;\n    serverErrorCurrentPass: JSX.Element|string|null;\n}\n\ntype Props = {\n    user?: UserProfile;\n    currentUserId: string;\n    show: boolean;\n    onModalSubmit: (user?: UserProfile) => void;\n    onModalDismissed: () => void;\n    passwordConfig: PasswordConfig;\n    actions: {\n        updateUserPassword: (userId: string, currentPassword: string, password: string) => ActionResult;\n    };\n}\n\nexport default class ResetPasswordModal extends React.PureComponent<Props, State> {\n    private currentPasswordRef: React.RefObject<HTMLInputElement>;\n    private passwordRef: React.RefObject<HTMLInputElement>;\n    public static defaultProps: Partial<Props> = {\n        show: false,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        };\n\n        this.currentPasswordRef = React.createRef();\n        this.passwordRef = React.createRef();\n    }\n\n    public componentWillUnmount(): void {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n    }\n\n    private doSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        if (!this.props.user) {\n            return;\n        }\n\n        let currentPassword = '';\n        if (this.currentPasswordRef.current) {\n            currentPassword = (this.currentPasswordRef.current as HTMLInputElement).value;\n            if (currentPassword === '') {\n                const errorMsg = (\n                    <FormattedMessage\n                        id='admin.reset_password.missing_current'\n                        defaultMessage='Please enter your current password.'\n                    />\n                );\n                this.setState({serverErrorCurrentPass: errorMsg});\n                return;\n            }\n        }\n\n        const password = (this.passwordRef.current as HTMLInputElement).value;\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({serverErrorNewPass: error});\n            return;\n        }\n\n        this.setState({serverErrorNewPass: null});\n\n        const result = await this.props.actions.updateUserPassword(this.props.user.id, currentPassword, password);\n        if ('error' in result) {\n            this.setState({serverErrorCurrentPass: result.error.message});\n            return;\n        }\n        this.props.onModalSubmit(this.props.user);\n    }\n\n    private doCancel = (): void => {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    public render(): JSX.Element {\n        const user = this.props.user;\n        if (user == null) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let serverErrorNewPass = null;\n\n        if (this.state.serverErrorNewPass) {\n            urlClass += ' has-error';\n            serverErrorNewPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorNewPass}</p></div>;\n        }\n\n        let title;\n        if (user.auth_service) {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleSwitch'\n                    defaultMessage='Switch Account to Email/Password'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleReset'\n                    defaultMessage='Reset Password'\n                />\n            );\n        }\n\n        let currentPassword = null;\n        let serverErrorCurrentPass = null;\n        let newPasswordFocus = true;\n        if (this.props.currentUserId === user.id) {\n            newPasswordFocus = false;\n            let urlClassCurrentPass = 'input-group input-group--limit';\n            if (this.state.serverErrorCurrentPass) {\n                urlClassCurrentPass += ' has-error';\n                serverErrorCurrentPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorCurrentPass}</p></div>;\n            }\n            currentPassword = (\n                <div className='col-sm-10 password__group-addon-space'>\n                    <div className={urlClassCurrentPass}>\n                        <span\n                            data-toggle='tooltip'\n                            title='Current Password'\n                            className='input-group-addon password__group-addon'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.curentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </span>\n                        <input\n                            type='password'\n                            ref={this.currentPasswordRef}\n                            className='form-control'\n                            autoFocus={true}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.doCancel}\n                role='dialog'\n                aria-labelledby='resetPasswordModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='resetPasswordModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            {currentPassword}\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Password'\n                                        className='input-group-addon password__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newPassword'\n                                            defaultMessage='New Password'\n                                        />\n                                    </span>\n                                    <input\n                                        type='password'\n                                        ref={this.passwordRef}\n                                        className='form-control'\n                                        autoFocus={newPasswordFocus}\n                                    />\n                                </div>\n                                {serverErrorNewPass}\n                                {serverErrorCurrentPass}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {updateUserPassword} from 'matterfoss-redux/actions/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ResetPasswordModal from './reset_password_modal';\n\ntype Actions = {\n    updateUserPassword: (userId: string, currentPassword: string, password: string) => ActionResult;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateUserPassword,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {isEmail} from 'matterfoss-redux/utils/helpers';\n\ntype State = {\n    error: JSX.Element|string|null;\n}\n\ntype Props = {\n    user?: UserProfile;\n    show: boolean;\n    onModalSubmit: (user?: UserProfile) => void;\n    onModalDismissed: () => void;\n    actions: {\n        patchUser: (user: UserProfile) => ActionResult;\n    };\n}\n\nexport default class ResetEmailModal extends React.PureComponent<Props, State> {\n    private emailRef: React.RefObject<HTMLInputElement>;\n    public static defaultProps: Partial<Props> = {\n        show: false,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n\n        this.emailRef = React.createRef();\n    }\n\n    private doSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        if (!this.props.user) {\n            return;\n        }\n\n        let email = '';\n        if (this.emailRef.current) {\n            email = this.emailRef.current.value;\n\n            // function isEmail aready handle empty / null value\n            if (!isEmail(email)) {\n                const errMsg = (\n                    <FormattedMessage\n                        id='user.settings.general.validEmail'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                );\n                this.setState({error: errMsg});\n                return;\n            }\n            email = email.trim().toLowerCase();\n        }\n\n        const user = {\n            ...this.props.user,\n            email,\n        };\n\n        const result = await this.props.actions.patchUser(user);\n        if ('error' in result) {\n            this.setState({error: result.error.message});\n            return;\n        }\n        this.props.onModalSubmit(this.props.user);\n    }\n\n    private doCancel = (): void => {\n        this.setState({\n            error: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    public render(): JSX.Element {\n        const user = this.props.user;\n        if (!user) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let errorMsg = null;\n\n        if (this.state.error) {\n            urlClass += ' has-error';\n            errorMsg = <div className='has-error'><p className='input__help error'>{this.state.error}</p></div>;\n        }\n\n        const title = (\n            <FormattedMessage\n                id='admin.reset_email.titleReset'\n                defaultMessage='Update Email'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.doCancel}\n                role='dialog'\n                aria-labelledby='resetEmailModalLabel'\n                data-testid='resetEmailModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='resetEmailModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <div className='col-sm-10'>\n                                <div\n                                    className={urlClass}\n                                    data-testid='resetEmailForm'\n                                >\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Email'\n                                        className='input-group-addon email__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_email.newEmail'\n                                            defaultMessage='New Email'\n                                        />\n                                    </span>\n                                    <input\n                                        type='email'\n                                        ref={this.emailRef}\n                                        className='form-control'\n                                        maxLength={128}\n                                        autoFocus={true}\n                                    />\n                                </div>\n                                {errorMsg}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            data-testid='resetEmailButton'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport {patchUser} from 'matterfoss-redux/actions/users';\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\n\nimport ResetEmailModal from './reset_email_modal';\n\ntype Actions = {\n    patchUser: (user: UserProfile) => ActionResult;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            patchUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(ResetEmailModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {ConnectedComponent} from 'react-redux';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Channel, ChannelMembership} from 'matterfoss-redux/types/channels';\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\ntype Props = {\n    user: UserProfile;\n    status?: string;\n    extraInfo?: Array<string | JSX.Element>;\n    actions?: Array<ConnectedComponent<any, any>>;\n    actionProps?: {\n        mfaEnabled: boolean;\n        enableUserAccessTokens: boolean;\n        experimentalEnableAuthenticationTransfer: boolean;\n        doPasswordReset: (user: UserProfile) => void;\n        doEmailReset: (user: UserProfile) => void;\n        doManageTeams: (user: UserProfile) => void;\n        doManageRoles: (user: UserProfile) => void;\n        doManageTokens: (user: UserProfile) => void;\n        isDisabled?: boolean;\n    };\n    actionUserProps?: {\n        [userId: string]: {\n            channel: Channel;\n            teamMember: any;\n            channelMember: ChannelMembership;\n        };\n    };\n    index?: number;\n    userCount?: number;\n    totalUsers?: number;\n    isDisabled?: boolean;\n}\ntype State = {\n    error?: ServerError;\n}\n\nexport default class UserListRowWithError extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {};\n    }\n\n    onError = (errorObj: ServerError) => {\n        this.setState({\n            error: errorObj,\n        });\n    }\n\n    render(): JSX.Element {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        index={this.props.index}\n                        totalUsers={this.props.totalUsers}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                        onError={this.onError}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email: React.ReactNode = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.user.is_bot) {\n            email = null;\n        } else if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else {\n            status = this.props.status;\n        }\n\n        if (this.props.user.is_bot) {\n            status = null;\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount && this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.error.message}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='userListRow'\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status || undefined}\n                    size='md'\n                />\n                <div className='more-modal__right'>\n                    <div className='more-modal__top'>\n                        <div className='more-modal__details'>\n                            <div\n                                id={userCountID || undefined}\n                                className='more-modal__name'\n                            >\n                                <Link to={'/admin_console/user_management/user/' + this.props.user.id}>\n                                    {Utils.displayEntireNameForUser(this.props.user)}\n                                </Link>\n                                <BotBadge\n                                    className='badge-admin'\n                                    show={Boolean(this.props.user.is_bot)}\n                                />\n                            </div>\n                            <div\n                                id={userCountEmail || undefined}\n                                className={emailStyle}\n                            >\n                                {email}\n                            </div>\n                            {this.props.extraInfo}\n                        </div>\n                        <div\n                            className='more-modal__actions'\n                        >\n                            {buttons}\n                        </div>\n                    </div>\n                    <div\n                        className='more-modal__bottom'\n                    >\n                        {error}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getStatusForUserId} from 'matterfoss-redux/selectors/entities/users';\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport {GlobalState} from 'types/store';\n\nimport UserListRow from './user_list_row_with_error';\n\ntype OwnProps = {\n    user: UserProfile;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const user = ownProps.user;\n    return {\n        status: getStatusForUserId(state, user.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as UserUtils from 'matterfoss-redux/utils/user_utils';\nimport {Permissions} from 'matterfoss-redux/constants';\nimport {AdminConfig} from 'matterfoss-redux/types/config';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {Bot} from 'matterfoss-redux/types/bots';\n\nimport {adminResetMfa} from 'actions/admin_actions.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport {getSiteURL} from 'utils/url';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport ConfirmModal from 'components/confirm_modal';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 3;\nconst TOTAL_USERS_TO_OPEN_UP = 5;\n\nexport type Props = {\n    user: UserProfile;\n    currentUser: UserProfile;\n    mfaEnabled: boolean;\n    enableUserAccessTokens: boolean;\n    experimentalEnableAuthenticationTransfer: boolean;\n    index: number;\n    totalUsers: number;\n    config: DeepPartial<AdminConfig>;\n    bots: Dictionary<Bot>;\n    isLicensed: boolean;\n    isDisabled: boolean;\n    actions: {\n        updateUserActive: (id: string, active: boolean) => Promise<{error: ServerError}>;\n        revokeAllSessionsForUser: (id: string) => Promise<{error: ServerError; data: any}>;\n        promoteGuestToUser: (id: string) => Promise<{error: ServerError}>;\n        demoteUserToGuest: (id: string) => Promise<{error: ServerError}>;\n        loadBots: (page?: number, size?: number) => Promise<unknown>;\n    };\n    doPasswordReset: (user: UserProfile) => void;\n    doEmailReset: (user: UserProfile) => void;\n    doManageTeams: (user: UserProfile) => void;\n    doManageRoles: (user: UserProfile) => void;\n    doManageTokens: (user: UserProfile) => void;\n    onError: (error: ServerError | {id: string}) => void;\n}\n\ntype State = {\n    showDeactivateMemberModal: boolean;\n    showRevokeSessionsModal: boolean;\n    showPromoteToUserModal: boolean;\n    showDemoteToGuestModal: boolean;\n    user: UserProfile | null;\n    role: string | null;\n}\n\nexport default class SystemUsersDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showDeactivateMemberModal: false,\n            showRevokeSessionsModal: false,\n            showPromoteToUserModal: false,\n            showDemoteToGuestModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeActive = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        this.props.actions.updateUserActive(this.props.user.id, true).\n            then(this.onUpdateActiveResult);\n    }\n\n    handleManageTeams = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n\n        this.props.doManageTeams(this.props.user);\n    }\n\n    handleManageRoles = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n\n        this.props.doManageRoles(this.props.user);\n    }\n\n    handleManageTokens = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n\n        this.props.doManageTokens(this.props.user);\n    }\n\n    handleResetPassword = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        this.props.doPasswordReset(this.props.user);\n    }\n\n    handleResetEmail = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        this.props.doEmailReset(this.props.user);\n    }\n\n    handleResetMfa = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, this.props.onError);\n    }\n\n    handleShowDeactivateMemberModal = async (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {\n            await this.props.actions.loadBots(\n                Constants.Integrations.START_PAGE_NUM,\n                parseInt(Constants.Integrations.PAGE_SIZE, 10),\n            );\n        }\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        this.props.actions.updateUserActive(this.props.user.id, false).\n            then(this.onUpdateActiveResult);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    onUpdateActiveResult = ({error}: {error: ServerError}) => {\n        if (error) {\n            this.props.onError({id: error.server_error_id, ...error});\n        }\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    renderDeactivateMemberModal = () => {\n        const user = this.props.user;\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const defaultMessage = (\n            <FormattedMarkdownMessage\n                id='deactivate_member_modal.desc'\n                defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system.\\n'\n                values={{\n                    username: user.username,\n                }}\n            />);\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const confirmationMessage = (\n            <FormattedMarkdownMessage\n                id='deactivate_member_modal.desc.confirm'\n                defaultMessage='Are you sure you want to deactivate {username}?'\n                values={{\n                    username: user.username,\n                }}\n            />);\n        let messageForUsersWithBotAccounts;\n        if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {\n            for (const bot of Object.values(this.props.bots)) {\n                if ((bot.owner_id === user.id) && this.state.showDeactivateMemberModal && (bot.delete_at === 0)) {\n                    messageForUsersWithBotAccounts = (\n                        <FormattedMarkdownMessage\n                            id='deactivate_member_modal.desc.for_users_with_bot_accounts'\n                            defaultMessage='This action deactivates {username}.\\n \\n * They will be logged out and not have access to any teams or channels on this system.\\n * Bot accounts they manage will be disabled along with their integrations. To enable them again, go to [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots). [Learn more about bot accounts](!https://mattermost.com/pl/default-bot-accounts).\\n \\n \\n'\n                            values={{\n                                username: user.username,\n                                siteURL: getSiteURL(),\n                            }}\n                        />);\n                    break;\n                }\n            }\n        }\n\n        const message = (\n            <div>\n                {messageForUsersWithBotAccounts || defaultMessage}\n                {confirmationMessage}\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    shouldDisableBotsWhenOwnerIsDeactivated() {\n        return this.props.config &&\n            this.props.config.ServiceSettings &&\n            this.props.config.ServiceSettings.DisableBotsWhenOwnerIsDeactivated;\n    }\n\n    handleShowRevokeSessionsModal = (e: {preventDefault: () => void}) => {\n        e.preventDefault();\n        this.setState({showRevokeSessionsModal: true});\n    }\n\n    handleRevokeSessions = async () => {\n        const me = this.props.currentUser;\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(this.props.user.id);\n        if (data && this.props.user.id === me.id) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.props.onError(error);\n        }\n\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handleRevokeSessionsCancel = () => {\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handlePromoteToUser = () => {\n        this.setState({showPromoteToUserModal: true});\n    }\n\n    handlePromoteToUserConfirm = async () => {\n        const {error} = await this.props.actions.promoteGuestToUser(this.props.user.id);\n        if (error) {\n            this.props.onError(error);\n        }\n\n        this.setState({showPromoteToUserModal: false});\n    }\n\n    handlePromoteToUserCancel = () => {\n        this.setState({showPromoteToUserModal: false});\n    }\n\n    handleDemoteToGuest = () => {\n        this.setState({showDemoteToGuestModal: true});\n    }\n\n    handleDemoteToGuestConfirm = async () => {\n        const {error} = await this.props.actions.demoteUserToGuest(this.props.user.id);\n        if (error) {\n            this.props.onError(error);\n        }\n        this.setState({showDemoteToGuestModal: false});\n    }\n\n    handleDemoteToGuestCancel = () => {\n        this.setState({showDemoteToGuestModal: false});\n    }\n\n    renderPromoteToUserModal = () => {\n        const title = (\n            <FormattedMessage\n                id='promote_to_user_modal.title'\n                defaultMessage='Promote guest {username} to member'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='promote_to_user_modal.desc'\n                defaultMessage='This action promotes the guest {username} to a member. It will allow the user to join public channels and interact with users outside of the channels they are currently members of. Are you sure you want to promote guest {username} to member?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const promoteUserButton = (\n            <FormattedMessage\n                id='promote_to_user_modal.promote'\n                defaultMessage='Promote'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showPromoteToUserModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={promoteUserButton}\n                onConfirm={this.handlePromoteToUserConfirm}\n                onCancel={this.handlePromoteToUserCancel}\n            />\n        );\n    }\n\n    renderDemoteToGuestModal = () => {\n        const title = (\n            <FormattedMessage\n                id='demote_to_user_modal.title'\n                defaultMessage='Demote User {username} to Guest'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='demote_to_user_modal.desc'\n                defaultMessage={'This action demotes the user {username} to a guest. It will restrict the user\\'s ability to join public channels and interact with users outside of the channels they are currently members of. Are you sure you want to demote user {username} to guest?'}\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const demoteGuestButton = (\n            <FormattedMessage\n                id='demote_to_user_modal.demote'\n                defaultMessage='Demote'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDemoteToGuestModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={demoteGuestButton}\n                onConfirm={this.handleDemoteToGuestConfirm}\n                onCancel={this.handleDemoteToGuestCancel}\n            />\n        );\n    }\n\n    renderRevokeSessionsModal = () => {\n        const title = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.title'\n                defaultMessage='Revoke Sessions for {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.desc'\n                defaultMessage='This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const revokeUserButtonButton = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.revoke'\n                defaultMessage='Revoke'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={revokeUserButtonButton}\n                onConfirm={this.handleRevokeSessions}\n                onCancel={this.handleRevokeSessionsCancel}\n            />\n        );\n    }\n\n    renderAccessToken = () => {\n        const userAccessTokensEnabled = this.props.enableUserAccessTokens;\n        if (!userAccessTokensEnabled) {\n            return null;\n        }\n\n        const user = this.props.user;\n        const hasPostAllRole = UserUtils.hasPostAllRole(user.roles);\n        const hasPostAllPublicRole = UserUtils.hasPostAllPublicRole(user.roles);\n        const hasUserAccessTokenRole = UserUtils.hasUserAccessTokenRole(user.roles);\n        const isSystemAdmin = UserUtils.isSystemAdmin(user.roles);\n\n        let messageId = '';\n        if (hasUserAccessTokenRole || isSystemAdmin) {\n            if (hasPostAllRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAll');\n            } else if (hasPostAllPublicRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAllPublic');\n            } else {\n                messageId = t('admin.user_item.userAccessTokenYes');\n            }\n        }\n\n        if (!messageId) {\n            return null;\n        }\n\n        return (\n            <div className='light mt-1'>\n                <FormattedMessage\n                    key='admin.user_item.userAccessToken'\n                    id={messageId}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const {currentUser, user, isLicensed, config} = this.props;\n        const isGuest = Utils.isGuest(user);\n        if (!user) {\n            return <div/>;\n        }\n\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (isGuest) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.guest'\n                    defaultMessage='Guest'\n                />\n            );\n        }\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        let showMakeActive = false;\n        let showMakeNotActive = !Utils.isSystemAdmin(user.roles);\n        let showManageTeams = true;\n        let showRevokeSessions = true;\n        const showMfaReset = this.props.mfaEnabled && Boolean(user.mfa_active);\n        const showManageRoles = Utils.isSystemAdmin(currentUser.roles);\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='admin.user_item.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeActive = true;\n            showMakeNotActive = false;\n            showManageTeams = false;\n            showRevokeSessions = false;\n        }\n\n        let disableActivationToggle = false;\n        if (user.auth_service === Constants.LDAP_SERVICE) {\n            disableActivationToggle = true;\n        }\n\n        const deactivateMemberModal = this.renderDeactivateMemberModal();\n        const revokeSessionsModal = this.renderRevokeSessionsModal();\n        const promoteToUserModal = this.renderPromoteToUserModal();\n        const demoteToGuestModal = this.renderDemoteToGuestModal();\n\n        const {index, totalUsers} = this.props;\n        return (\n            <React.Fragment>\n                {deactivateMemberModal}\n                {revokeSessionsModal}\n                {promoteToUserModal}\n                {demoteToGuestModal}\n                <MenuWrapper\n                    isDisabled={this.props.isDisabled}\n                >\n                    <div className='text-right'>\n                        <a>\n                            <span>{currentRoles} </span>\n                            <span className='caret'/>\n                        </a>\n                        {this.renderAccessToken()}\n                    </div>\n                    <Menu\n                        openLeft={true}\n                        openUp={totalUsers > TOTAL_USERS_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP}\n                        ariaLabel={Utils.localizeMessage('admin.user_item.menuAriaLabel', 'User Actions Menu')}\n                    >\n                        <Menu.ItemAction\n                            show={showMakeActive}\n                            onClick={this.handleMakeActive}\n                            text={Utils.localizeMessage('admin.user_item.makeActive', 'Activate')}\n                            disabled={disableActivationToggle}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeNotActive}\n                            onClick={this.handleShowDeactivateMemberModal}\n                            text={Utils.localizeMessage('admin.user_item.makeInactive', 'Deactivate')}\n                            disabled={disableActivationToggle}\n                        />\n                        <Menu.ItemAction\n                            show={showManageRoles}\n                            onClick={this.handleManageRoles}\n                            text={Utils.localizeMessage('admin.user_item.manageRoles', 'Manage Roles')}\n                        />\n                        <Menu.ItemAction\n                            show={showManageTeams}\n                            onClick={this.handleManageTeams}\n                            text={Utils.localizeMessage('admin.user_item.manageTeams', 'Manage Teams')}\n                        />\n                        <Menu.ItemAction\n                            show={this.props.enableUserAccessTokens}\n                            onClick={this.handleManageTokens}\n                            text={Utils.localizeMessage('admin.user_item.manageTokens', 'Manage Tokens')}\n                        />\n                        <Menu.ItemAction\n                            show={showMfaReset}\n                            onClick={this.handleResetMfa}\n                            text={Utils.localizeMessage('admin.user_item.resetMfa', 'Remove MFA')}\n                        />\n                        <Menu.ItemAction\n                            show={Boolean(user.auth_service) && this.props.experimentalEnableAuthenticationTransfer}\n                            onClick={this.handleResetPassword}\n                            text={Utils.localizeMessage('admin.user_item.switchToEmail', 'Switch to Email/Password')}\n                        />\n                        <Menu.ItemAction\n                            show={!user.auth_service}\n                            onClick={this.handleResetPassword}\n                            text={Utils.localizeMessage('admin.user_item.resetPwd', 'Reset Password')}\n                        />\n                        <Menu.ItemAction\n                            show={!user.auth_service && user.id !== currentUser.id}\n                            onClick={this.handleResetEmail}\n                            text={Utils.localizeMessage('admin.user_item.resetEmail', 'Update Email')}\n                        />\n                        <Menu.ItemAction\n                            show={isGuest}\n                            onClick={this.handlePromoteToUser}\n                            text={Utils.localizeMessage('admin.user_item.promoteToMember', 'Promote to Member')}\n                        />\n                        <Menu.ItemAction\n                            show={!isGuest && user.id !== currentUser.id && isLicensed && config.GuestAccountsSettings?.Enable}\n                            onClick={this.handleDemoteToGuest}\n                            text={Utils.localizeMessage('admin.user_item.demoteToGuest', 'Demote to Guest')}\n                        />\n                        <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                            <Menu.ItemAction\n                                show={showRevokeSessions}\n                                onClick={this.handleShowRevokeSessionsModal}\n                                text={Utils.localizeMessage('admin.user_item.revokeSessions', 'Revoke Sessions')}\n                            />\n                        </SystemPermissionGate>\n                    </Menu>\n                </MenuWrapper>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {updateUserActive, revokeAllSessionsForUser, promoteGuestToUser, demoteUserToGuest} from 'matterfoss-redux/actions/users';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\nimport {getExternalBotAccounts} from 'matterfoss-redux/selectors/entities/bots';\nimport {loadBots} from 'matterfoss-redux/actions/bots';\n\nimport {getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport * as Selectors from 'matterfoss-redux/selectors/entities/admin';\n\nimport {GlobalState} from 'types/store';\n\nimport SystemUsersDropdown, {Props} from './system_users_dropdown';\n\nfunction mapStateToProps(state: GlobalState) {\n    const bots = getExternalBotAccounts(state);\n    const license = getLicense(state);\n    return {\n        isLicensed: license && license.IsLicensed === 'true',\n        config: Selectors.getConfig(state),\n        currentUser: getCurrentUser(state),\n        bots,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Props['actions']>({\n            updateUserActive,\n            revokeAllSessionsForUser,\n            promoteGuestToUser,\n            demoteUserToGuest,\n            loadBots,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {getUserAccessTokensForUser} from 'matterfoss-redux/actions/users';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport ManageRolesModal from 'components/admin_console/manage_roles_modal';\nimport ManageTeamsModal from 'components/admin_console/manage_teams_modal';\nimport ManageTokensModal from 'components/admin_console/manage_tokens_modal';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport ResetEmailModal from 'components/admin_console/reset_email_modal';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list.jsx';\nimport UserListRowWithError from 'components/user_list_row_with_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport SystemUsersDropdown from '../system_users_dropdown';\n\ntype Props = {\n    users: UserProfile[];\n    teams?: Team[];\n    usersPerPage: number;\n    total: number;\n    nextPage: (page: number) => void;\n    search: (term: string) => void;\n    focusOnMount?: boolean;\n    renderFilterRow: (doSearch: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined) => JSX.Element;\n\n    teamId: string;\n    filter: string;\n    term: string;\n    onTermChange: (term: string) => void;\n    isDisabled?: boolean;\n\n    /**\n     * Whether MFA is licensed and enabled.\n     */\n    mfaEnabled: boolean;\n\n    /**\n     * Whether or not user access tokens are enabled.\n     */\n    enableUserAccessTokens: boolean;\n\n    /**\n     * Whether or not the experimental authentication transfer is enabled.\n     */\n    experimentalEnableAuthenticationTransfer: boolean;\n\n    actions: {\n        getUser: (id: string) => UserProfile;\n    };\n};\n\ntype State = {\n    page: number;\n    filter: string;\n    teamId: string;\n    showManageTeamsModal: boolean;\n    showManageRolesModal: boolean;\n    showManageTokensModal: boolean;\n    showPasswordModal: boolean;\n    showEmailModal: boolean;\n    user?: UserProfile;\n};\n\nexport default class SystemUsersList extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n\n            filter: props.filter,\n            teamId: props.teamId,\n            showManageTeamsModal: false,\n            showManageRolesModal: false,\n            showManageTokensModal: false,\n            showPasswordModal: false,\n            showEmailModal: false,\n            user: undefined,\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps: Props, prevState: State): { page: number; teamId: string; filter: string } | null {\n        if (prevState.teamId !== nextProps.teamId || prevState.filter !== nextProps.filter) {\n            return {\n                page: 0,\n                teamId: nextProps.teamId,\n                filter: nextProps.filter,\n            };\n        }\n        return null;\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term: string) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    doManageTeams = (user: UserProfile) => {\n        this.setState({\n            showManageTeamsModal: true,\n            user,\n        });\n    }\n\n    doManageRoles = (user: UserProfile) => {\n        this.setState({\n            showManageRolesModal: true,\n            user,\n        });\n    }\n\n    doManageTokens = (user: UserProfile) => {\n        this.setState({\n            showManageTokensModal: true,\n            user,\n        });\n    }\n\n    doManageTeamsDismiss = () => {\n        this.setState({\n            showManageTeamsModal: false,\n            user: undefined,\n        });\n    }\n\n    doManageRolesDismiss = () => {\n        this.setState({\n            showManageRolesModal: false,\n            user: undefined,\n        });\n    }\n\n    doManageTokensDismiss = () => {\n        this.setState({\n            showManageTokensModal: false,\n            user: undefined,\n        });\n    }\n\n    doPasswordReset = (user: UserProfile) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n            user: undefined,\n        });\n    }\n\n    doPasswordResetSubmit = (user?: UserProfile) => {\n        if (user) {\n            this.props.actions.getUser(user.id);\n        }\n\n        this.setState({\n            showPasswordModal: false,\n            user: undefined,\n        });\n    }\n\n    doEmailReset = (user: UserProfile) => {\n        this.setState({\n            showEmailModal: true,\n            user,\n        });\n    }\n\n    doEmailResetDismiss = () => {\n        this.setState({\n            showEmailModal: false,\n            user: undefined,\n        });\n    }\n\n    doEmailResetSubmit = (user?: UserProfile) => {\n        if (user) {\n            this.props.actions.getUser(user.id);\n        }\n\n        this.setState({\n            showEmailModal: false,\n            user: undefined,\n        });\n    }\n\n    getInfoForUser(user: UserProfile) {\n        const info = [];\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceNotEmail'\n                    id='admin.user_item.authServiceNotEmail'\n                    defaultMessage='**Sign-in Method:** {service}'\n                    values={{\n                        service,\n                    }}\n                />,\n            );\n        } else {\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceEmail'\n                    id='admin.user_item.authServiceEmail'\n                    defaultMessage='**Sign-in Method:** Email'\n                />,\n            );\n        }\n\n        info.push(', ');\n        const userID = user.id;\n        info.push(\n            <FormattedMarkdownMessage\n                key='admin.user_item.user_id'\n                id='admin.user_item.user_id'\n                defaultMessage='**User ID:** {userID}'\n                values={{\n                    userID,\n                }}\n            />,\n        );\n\n        if (this.props.mfaEnabled) {\n            info.push(', ');\n\n            if (user.mfa_active) {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaYes'\n                        id='admin.user_item.mfaYes'\n                        defaultMessage='**MFA**: Yes'\n                    />,\n                );\n            } else {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaNo'\n                        id='admin.user_item.mfaNo'\n                        defaultMessage='**MFA**: No'\n                    />,\n                );\n            }\n        }\n\n        return info;\n    }\n\n    renderCount(count: number, total: number, startCount: number, endCount: number, isSearch: boolean) {\n        if (total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countSearch'\n                        defaultMessage='{count, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            } else if (startCount !== 0 || endCount !== total) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countPage'\n                        defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            startCount: startCount + 1,\n                            endCount,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='system_users_list.count'\n                    defaultMessage='{count, number} {count, plural, one {user} other {users}}'\n                    values={{\n                        count,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const extraInfo: {[key: string]: Array<string | JSX.Element>} = {};\n        if (this.props.users) {\n            for (const user of this.props.users) {\n                extraInfo[user.id] = this.getInfoForUser(user);\n            }\n        }\n\n        return (\n            <div>\n                <SearchableUserList\n                    {...this.props}\n                    renderCount={this.renderCount}\n                    extraInfo={extraInfo}\n                    actions={[SystemUsersDropdown]}\n                    actionProps={{\n                        mfaEnabled: this.props.mfaEnabled,\n                        enableUserAccessTokens: this.props.enableUserAccessTokens,\n                        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,\n                        doPasswordReset: this.doPasswordReset,\n                        doEmailReset: this.doEmailReset,\n                        doManageTeams: this.doManageTeams,\n                        doManageRoles: this.doManageRoles,\n                        doManageTokens: this.doManageTokens,\n                        isDisabled: this.props.isDisabled,\n                    }}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    search={this.search}\n                    page={this.state.page}\n                    term={this.props.term}\n                    onTermChange={this.props.onTermChange}\n                    rowComponentType={UserListRowWithError}\n                />\n                <ManageTeamsModal\n                    user={this.state.user}\n                    show={this.state.showManageTeamsModal}\n                    onModalDismissed={this.doManageTeamsDismiss}\n                />\n                <ManageRolesModal\n                    user={this.state.user}\n                    show={this.state.showManageRolesModal}\n                    onModalDismissed={this.doManageRolesDismiss}\n                />\n                <ManageTokensModal\n                    user={this.state.user}\n                    show={this.state.showManageTokensModal}\n                    onModalDismissed={this.doManageTokensDismiss}\n                    actions={{getUserAccessTokensForUser}}\n                />\n                <ResetPasswordModal\n                    user={this.state.user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                <ResetEmailModal\n                    user={this.state.user}\n                    show={this.state.showEmailModal}\n                    onModalSubmit={this.doEmailResetSubmit}\n                    onModalDismissed={this.doEmailResetDismiss}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getUser} from 'matterfoss-redux/actions/users';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport SystemUsersList from './system_users_list';\nimport {getNonBotUsers} from './selectors';\n\ntype Actions = {\n    getUser: (id: string) => UserProfile;\n};\n\ntype Props = {\n    loading: boolean;\n    teamId: string;\n    term: string;\n    filter: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const users = getNonBotUsers(state, ownProps.loading, ownProps.teamId, ownProps.term, ownProps.filter);\n    return {\n        users,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getUser, getProfiles, getProfilesInTeam, getProfilesWithoutTeam, makeSearchProfilesStartingWithTerm, searchProfilesInTeam} from 'matterfoss-redux/selectors/entities/users';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport {userSelectorOptionsFromFilter} from 'utils/filter_users';\n\nconst ALL_USERS = '';\nconst NO_TEAM = 'no_team';\nconst USER_ID_LENGTH = 26;\n\nexport function getUsers(state: GlobalState, loading: boolean, teamId: string, term: string, filter: string): UserProfile[] {\n    if (loading) {\n        // Show no users while loading.\n        return [];\n    }\n    const searchProfilesStartingWithTerm = makeSearchProfilesStartingWithTerm();\n\n    const filters = userSelectorOptionsFromFilter(filter);\n    if (term) {\n        let users = [];\n        if (teamId) {\n            users = searchProfilesInTeam(state, teamId, term, false, filters);\n        } else {\n            users = searchProfilesStartingWithTerm(state, term, false, filters);\n        }\n\n        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n            const user = getUser(state, term);\n            if (user) {\n                users = [user];\n            }\n        }\n\n        return users;\n    }\n\n    if (teamId === ALL_USERS) {\n        return getProfiles(state, filters);\n    } else if (teamId === NO_TEAM) {\n        return getProfilesWithoutTeam(state, filters);\n    }\n\n    return getProfilesInTeam(state, teamId, filters);\n}\n\nexport function getNonBotUsers(state: GlobalState, loading: boolean, teamId: string, term: string, filter: string): UserProfile[] {\n    return getUsers(state, loading, teamId, term, filter).filter((user) => {\n        return !user.is_bot;\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ChangeEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {debounce} from 'matterfoss-redux/actions/helpers';\nimport {Permissions} from 'matterfoss-redux/constants';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport {getStandardAnalytics} from 'actions/admin_actions';\nimport {Constants, UserSearchOptions, SearchUserTeamFilter, UserFilters} from 'utils/constants';\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n';\nimport {getUserOptionsFromFilter, searchUserOptionsFromFilter} from 'utils/filter_users';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport ConfirmModal from 'components/confirm_modal';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\n\nimport SystemUsersList from './list';\n\nconst USER_ID_LENGTH = 26;\nconst USERS_PER_PAGE = 50;\n\ntype Props = {\n\n    /**\n     * Array of team objects\n     */\n    teams: Team[];\n\n    /**\n     * Title of the app or site.\n     */\n    siteName?: string;\n\n    /**\n     * Whether or not MFA is licensed and enabled.\n     */\n    mfaEnabled: boolean;\n\n    /**\n     * Whether or not user access tokens are enabled.\n     */\n    enableUserAccessTokens: boolean;\n\n    /**\n     * Whether or not the experimental authentication transfer is enabled.\n     */\n    experimentalEnableAuthenticationTransfer: boolean;\n    totalUsers: number;\n    searchTerm: string;\n    teamId: string;\n    filter: string;\n    users: Record<string, UserProfile>;\n    isDisabled?: boolean;\n\n    actions: {\n\n        /**\n         * Function to get teams\n         */\n        getTeams: (startInde: number, endIndex: number) => void;\n\n        /**\n         * Function to get statistics for a team\n         */\n        getTeamStats: (teamId: string) => ActionFunc;\n\n        /**\n         * Function to get a user\n         */\n        getUser: (id: string) => ActionFunc;\n\n        /**\n         * Function to get a user access token\n         */\n        getUserAccessToken: (tokenId: string) => Promise<any> | ActionFunc;\n        loadProfilesAndTeamMembers: (page: number, maxItemsPerPage: number, teamId: string, options: Record<string, string | boolean>) => void;\n        loadProfilesWithoutTeam: (page: number, maxItemsPerPage: number, options: Record<string, string | boolean>) => void;\n        getProfiles: (page: number, maxItemsPerPage: number, options: Record<string, string | boolean>) => void;\n        setSystemUsersSearch: (searchTerm: string, teamId: string, filter: string) => void;\n        searchProfiles: (term: string, options?: any) => Promise<any> | ActionFunc;\n\n        /**\n         * Function to revoke all sessions in the system\n         */\n        revokeSessionsForAllUsers: () => any;\n\n        /**\n         * Function to log errors\n         */\n        logError: (error: {type: string; message: string}) => void;\n    };\n};\n\ntype State = {\n    loading: boolean;\n    searching: boolean;\n    showRevokeAllSessionsModal: boolean;\n    term?: string;\n};\n\nexport default class SystemUsers extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            searching: false,\n            showRevokeAllSessionsModal: false,\n        };\n    }\n\n    componentDidMount() {\n        this.loadDataForTeam(this.props.teamId, this.props.filter);\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setSystemUsersSearch('', '', '');\n    }\n\n    loadDataForTeam = async (teamId: string, filter: string | undefined) => {\n        const {\n            getProfiles,\n            loadProfilesWithoutTeam,\n            loadProfilesAndTeamMembers,\n            getTeamStats,\n        } = this.props.actions;\n\n        if (this.props.searchTerm) {\n            this.doSearch(this.props.searchTerm, teamId, filter);\n            return;\n        }\n\n        const options = getUserOptionsFromFilter(filter);\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            await Promise.all([\n                getProfiles(0, Constants.PROFILE_CHUNK_SIZE, options),\n                getStandardAnalytics(),\n            ]);\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            await loadProfilesWithoutTeam(0, Constants.PROFILE_CHUNK_SIZE, options);\n        } else {\n            await Promise.all([\n                loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, teamId, options),\n                getTeamStats(teamId),\n            ]);\n        }\n\n        this.setState({loading: false});\n    }\n\n    handleTeamChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        const teamId = e.target.value;\n        this.loadDataForTeam(teamId, this.props.filter);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId, this.props.filter);\n    }\n\n    handleFilterChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        const filter = e.target.value;\n        this.loadDataForTeam(this.props.teamId, filter);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, this.props.teamId, filter);\n    }\n\n    handleTermChange = (term: string) => {\n        this.props.actions.setSystemUsersSearch(term, this.props.teamId, this.props.filter);\n    }\n    handleRevokeAllSessions = async () => {\n        const {data} = await this.props.actions.revokeSessionsForAllUsers();\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else {\n            this.props.actions.logError({type: 'critical', message: 'Can\\'t revoke all sessions'});\n        }\n    }\n    handleRevokeAllSessionsCancel = () => {\n        this.setState({showRevokeAllSessionsModal: false});\n    }\n    handleShowRevokeAllSessionsModal = () => {\n        this.setState({showRevokeAllSessionsModal: true});\n    }\n\n    nextPage = async (page: number) => {\n        const {teamId, filter} = this.props;\n\n        // Paging isn't supported while searching\n        const {\n            getProfiles,\n            loadProfilesWithoutTeam,\n            loadProfilesAndTeamMembers,\n        } = this.props.actions;\n\n        const options = getUserOptionsFromFilter(filter);\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            await getProfiles(page + 1, USERS_PER_PAGE, options);\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            await loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE, options);\n        } else {\n            await loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, teamId, options);\n        }\n        this.setState({loading: false});\n    }\n\n    doSearch = debounce(async (term, teamId = this.props.teamId, filter = this.props.filter) => {\n        if (!term) {\n            return;\n        }\n\n        this.setState({loading: true});\n\n        const options = {\n            ...searchUserOptionsFromFilter(filter),\n            ...teamId && {team_id: teamId},\n            ...teamId === SearchUserTeamFilter.NO_TEAM && {\n                [UserSearchOptions.WITHOUT_TEAM]: true,\n            },\n            allow_inactive: true,\n        };\n\n        const {data: profiles} = await this.props.actions.searchProfiles(term, options);\n        if (profiles.length === 0 && term.length === USER_ID_LENGTH) {\n            await this.getUserByTokenOrId(term);\n        }\n\n        this.setState({loading: false});\n    }, Constants.SEARCH_TIMEOUT_MILLISECONDS, false, () => {});\n\n    getUserById = async (id: string) => {\n        if (this.props.users[id]) {\n            this.setState({loading: false});\n            return;\n        }\n\n        await this.props.actions.getUser(id);\n        this.setState({loading: false});\n    }\n\n    getUserByTokenOrId = async (id: string) => {\n        if (this.props.enableUserAccessTokens) {\n            const {data} = await this.props.actions.getUserAccessToken(id);\n\n            if (data) {\n                this.setState({term: data.user_id});\n                this.getUserById(data.user_id);\n                return;\n            }\n        }\n\n        this.getUserById(id);\n    }\n\n    renderRevokeAllUsersModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.system_users.revoke_all_sessions_modal_title'\n                defaultMessage='Revoke all sessions in the system'\n            />\n        );\n\n        const message = (\n            <div>\n                <FormattedMarkdownMessage\n                    id='admin.system_users.revoke_all_sessions_modal_message'\n                    defaultMessage='This action revokes all sessions in the system. All users will be logged out from all devices. Are you sure you want to revoke all sessions?'\n                />\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const revokeAllButton = (\n            <FormattedMessage\n                id='admin.system_users.revoke_all_sessions_button'\n                defaultMessage='Revoke All Sessions'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeAllSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={revokeAllButton}\n                onConfirm={this.handleRevokeAllSessions}\n                onCancel={this.handleRevokeAllSessionsCancel}\n            />\n        );\n    }\n\n    renderFilterRow = (doSearch: ((event: React.FormEvent<HTMLInputElement>) => void) | undefined) => {\n        const teams = this.props.teams.map((team) => (\n            <option\n                key={team.id}\n                value={team.id}\n            >\n                {team.display_name}\n            </option>\n        ));\n\n        return (\n            <div className='system-users__filter-row'>\n                <div className='system-users__filter'>\n                    <LocalizedInput\n                        id='searchUsers'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_user_list.search'), defaultMessage: 'Search users'}}\n                        onInput={doSearch}\n                    />\n                </div>\n                <label>\n                    <span className='system-users__team-filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.team'\n                            defaultMessage='Team:'\n                        />\n                    </span>\n                    <select\n                        className='form-control system-users__team-filter'\n                        onChange={this.handleTeamChange}\n                        value={this.props.teamId}\n                    >\n                        <option value={SearchUserTeamFilter.ALL_USERS}>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={SearchUserTeamFilter.NO_TEAM}>{Utils.localizeMessage('admin.system_users.noTeams', 'No Teams')}</option>\n                        {teams}\n                    </select>\n                </label>\n                <label>\n                    <span className='system-users__filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.userStatus'\n                            defaultMessage='User Status:'\n                        />\n                    </span>\n                    <select\n                        id='selectUserStatus'\n                        className='form-control system-users__filter'\n                        value={this.props.filter}\n                        onChange={this.handleFilterChange}\n                    >\n                        <option value=''>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={UserFilters.SYSTEM_ADMIN}>{Utils.localizeMessage('admin.system_users.system_admin', 'System Admin')}</option>\n                        <option value={UserFilters.SYSTEM_GUEST}>{Utils.localizeMessage('admin.system_users.guest', 'Guest')}</option>\n                        <option value={UserFilters.INACTIVE}>{Utils.localizeMessage('admin.system_users.inactive', 'Inactive')}</option>\n                    </select>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        const revokeAllUsersModal = this.renderRevokeAllUsersModal();\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.system_users.title'\n                    defaultMessage='{siteName} Users'\n                    values={{\n                        siteName: this.props.siteName,\n                    }}\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='more-modal__list member-list-holder'>\n                            <SystemUsersList\n                                loading={this.state.loading}\n                                renderFilterRow={this.renderFilterRow}\n                                search={this.doSearch}\n                                nextPage={this.nextPage}\n                                usersPerPage={USERS_PER_PAGE}\n                                total={this.props.totalUsers}\n                                teams={this.props.teams}\n                                teamId={this.props.teamId}\n                                filter={this.props.filter}\n                                term={this.props.searchTerm}\n                                onTermChange={this.handleTermChange}\n                                mfaEnabled={this.props.mfaEnabled}\n                                enableUserAccessTokens={this.props.enableUserAccessTokens}\n                                experimentalEnableAuthenticationTransfer={this.props.experimentalEnableAuthenticationTransfer}\n                                isDisabled={this.props.isDisabled}\n                            />\n                        </div>\n                        <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                            {revokeAllUsersModal}\n                            <div className='pt-3 pb-3'>\n                                <button\n                                    id='revoke-all-users'\n                                    type='button'\n                                    className='btn btn-default'\n                                    onClick={() => this.handleShowRevokeAllSessionsModal()}\n                                    disabled={this.props.isDisabled}\n                                >\n                                    <FormattedMessage\n                                        id='admin.system_users.revokeAllSessions'\n                                        defaultMessage='Revoke All Sessions'\n                                    />\n                                </button>\n                            </div>\n                        </SystemPermissionGate>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getTeams, getTeamStats} from 'matterfoss-redux/actions/teams';\nimport {\n    getUser,\n    getUserAccessToken,\n    getProfiles,\n    searchProfiles,\n    revokeSessionsForAllUsers,\n} from 'matterfoss-redux/actions/users';\nimport {logError} from 'matterfoss-redux/actions/errors';\nimport {getTeamsList} from 'matterfoss-redux/selectors/entities/teams';\nimport {getUsers} from 'matterfoss-redux/selectors/entities/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {Stats} from 'matterfoss-redux/constants';\n\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport {loadProfilesAndTeamMembers, loadProfilesWithoutTeam} from 'actions/user_actions';\n\nimport {setSystemUsersSearch} from 'actions/views/search';\nimport {SearchUserTeamFilter} from 'utils/constants';\n\nimport SystemUsers from './system_users';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    const search = state.views.search.systemUsersSearch;\n    let totalUsers = 0;\n    let searchTerm = '';\n    let teamId = '';\n    let filter = '';\n    if (search) {\n        searchTerm = search.term || '';\n        teamId = search.team || '';\n        filter = search.filter || '';\n\n        if (!teamId || teamId === SearchUserTeamFilter.ALL_USERS) {\n            const stats = state.entities.admin.analytics || {[Stats.TOTAL_USERS]: 0, [Stats.TOTAL_INACTIVE_USERS]: 0};\n            totalUsers = Number(stats[Stats.TOTAL_USERS]) + Number(stats[Stats.TOTAL_INACTIVE_USERS]);\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            totalUsers = 0;\n        } else {\n            const stats = state.entities.teams.stats[teamId] || {total_member_count: 0};\n            totalUsers = stats.total_member_count;\n        }\n    }\n\n    return {\n        teams: getTeamsList(state),\n        siteName,\n        mfaEnabled,\n        totalUsers,\n        searchTerm,\n        teamId,\n        filter,\n        enableUserAccessTokens,\n        users: getUsers(state),\n        experimentalEnableAuthenticationTransfer,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getTeamStats,\n            getUser,\n            getUserAccessToken,\n            loadProfilesAndTeamMembers,\n            setSystemUsersSearch,\n            loadProfilesWithoutTeam,\n            getProfiles,\n            searchProfiles,\n            revokeSessionsForAllUsers,\n            logError,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport './admin_button_outline.scss';\n\ntype Props = {\n    onClick: any;\n    children?: string;\n    disabled?: boolean;\n    className?: string;\n}\n\nconst AdminButtonOutline: React.FC<Props> = (props: Props) => {\n    return (\n        <button\n            type='button'\n            onClick={props.onClick}\n            className={classNames('AdminButtonOutline', 'btn', props.className)}\n            disabled={props.disabled}\n        >\n            {props.children}\n        </button>\n    );\n};\n\nexport default AdminButtonOutline;\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport ProfilePicture from 'components/profile_picture';\nimport * as Utils from 'utils/utils.jsx';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport './admin_user_card.scss';\n\ntype BulletProps = {\n    user: UserProfile;\n}\n\nexport type Props = {\n    user: UserProfile;\n    body?: React.ReactNode;\n    footer?: React.ReactNode;\n}\n\nconst Bullet: React.FC<BulletProps> = (props: BulletProps) => {\n    if ((props.user.first_name || props.user.last_name) && props.user.nickname) {\n        return (<span>{' • '}</span>);\n    }\n    return null;\n};\n\nconst AdminUserCard: React.FC<Props> = (props: Props) => {\n    return (\n        <div className='AdminUserCard'>\n            <div className='AdminUserCard__header'>\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(props.user.id, props.user.last_picture_update)}\n                    size='xxl'\n                    wrapperClass='admin-user-card'\n                    userId={props.user.id}\n                />\n                <div className='AdminUserCard__user-info'>\n                    <span>{props.user.first_name} {props.user.last_name}</span>\n                    <Bullet user={props.user}/>\n                    <span className='AdminUserCard__user-nickname'>{props.user.nickname}</span>\n                </div>\n                <div className='AdminUserCard__user-id'>\n                    {Utils.localizeMessage('admin.userManagement.userDetail.userId', 'User ID:')} {props.user.id}\n                </div>\n            </div>\n            <div className='AdminUserCard__body'>\n                {props.body}\n            </div>\n            <div className='AdminUserCard__footer'>\n                {props.footer}\n            </div>\n        </div>);\n};\n\nexport default AdminUserCard;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport './abstract_list.scss';\n\nconst PAGE_SIZE = 10;\n\ntype Props = {\n    userId: string;\n    headerLabels: Array<Record<string, any>>;\n    data: Array<Record<string, any>>;\n    onPageChangedCallback?: (paging: Paging) => void;\n    total: number;\n    renderRow: (item: {[x: string]: string}) => JSX.Element;\n    emptyListTextId: string;\n    emptyListTextDefaultMessage: string;\n    actions: {\n        getTeamsData: (userId: string) => ActionFunc & Partial<{then: (func: () => void) => void}> | Promise<Record<string, any>>;\n        removeGroup?: () => void;\n    };\n}\n\ntype State = {\n    loading: boolean;\n    page: number;\n}\n\ntype Paging = {\n    startCount: number;\n    endCount: number;\n    total: number;\n}\n\nexport default class AbstractList extends React.PureComponent<Props, State> {\n    public static defaultProps = {\n        data: [],\n    };\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    public componentDidMount() {\n        this.performSearch();\n    }\n\n    private previousPage = async (e: React.MouseEvent<HTMLButtonElement>): Promise<void> => {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page, loading: true});\n        this.performSearch();\n    }\n\n    private nextPage = async (e: React.MouseEvent<HTMLButtonElement>): Promise<void> => {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({page, loading: true});\n        this.performSearch();\n    }\n\n    private performSearch = (): void => {\n        const userId = this.props.userId;\n\n        this.setState({loading: true});\n\n        this.props.actions.getTeamsData(userId).then!(() => {\n            if (this.props.onPageChangedCallback) {\n                this.props.onPageChangedCallback(this.getPaging());\n            }\n            this.setState({loading: false});\n        });\n    }\n\n    private getPaging(): Paging {\n        const startCount = (this.state.page * PAGE_SIZE) + 1;\n        let endCount = (this.state.page * PAGE_SIZE) + PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        return {startCount, endCount, total};\n    }\n\n    private renderHeaderLabels = () => {\n        if (this.props.data.length > 0) {\n            return (\n                <div className='AbstractList__header'>\n                    {this.props.headerLabels.map((headerLabel, id) => (\n                        <div\n                            key={id}\n                            className='AbstractList__header-label'\n                            style={headerLabel.style}\n                        >{headerLabel.default}</div>\n                    ))}\n                </div>\n            );\n        }\n        return null;\n    }\n\n    private renderRows = (): JSX.Element | JSX.Element[] => {\n        if (this.state.loading) {\n            return (\n                <div className='AbstractList__loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.data.length === 0) {\n            return (\n                <div className='AbstractList__empty'>\n                    <FormattedMessage\n                        id={this.props.emptyListTextId}\n                        defaultMessage={this.props.emptyListTextDefaultMessage}\n                    />\n                </div>\n            );\n        }\n        const pageStart = this.state.page < 1 ? 0 : (this.state.page * PAGE_SIZE); // ie 0, 10, 20, etc.\n        const pageEnd = this.state.page < 1 ? PAGE_SIZE : (this.state.page + 1) * PAGE_SIZE; // ie 10, 20, 30, etc.\n        const pageData = this.props.data.slice(pageStart, pageEnd).map(this.props.renderRow); // ie 0-10, 10-20, etc.\n        return pageData;\n    }\n\n    public render = (): JSX.Element => {\n        const {startCount, endCount, total} = this.getPaging();\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div className='AbstractList'>\n                {this.renderHeaderLabels()}\n                <div className='AbstractList__body'>\n                    {this.renderRows()}\n                </div>\n                {total > 0 &&\n                    <div className='AbstractList__footer'>\n                        <div className='counter'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.list.paginatorCount'\n                                defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                                values={{\n                                    startCount,\n                                    endCount,\n                                    total,\n                                }}\n                            />\n                        </div>\n                        <button\n                            type='button'\n                            className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                            onClick={firstPage ? () => null : this.previousPage}\n                            disabled={firstPage}\n                        >\n                            <PreviousIcon/>\n                        </button>\n                        <button\n                            type='button'\n                            className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                            onClick={lastPage ? () => null : this.nextPage}\n                            disabled={lastPage}\n                        >\n                            <NextIcon/>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function EllipsisHorizontalIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='24px'\n                height='24px'\n                viewBox='0 0 24 24'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.elipsisHorizontalIcon', defaultMessage: 'Ellipsis Horizontal Icon'})}\n            >\n                <path d='M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z'/>\n            </svg>\n        </span>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport EllipsisHorizontalIcon from 'components/widgets/icons/ellipsis_h_icon';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\ntype Props = {\n    team: {[x: string]: string};\n    doRemoveUserFromTeam: (teamId: string) => void;\n    doMakeUserTeamAdmin: (teamId: string) => void;\n    doMakeUserTeamMember: (teamId: string) => void;\n    isDisabled?: boolean;\n}\n\ntype State = {\n    serverError: string | null;\n}\n\nexport default class TeamListDropdown extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    public render(): JSX.Element {\n        const {team} = this.props;\n        const isAdmin = team.scheme_admin;\n        const isMember = team.scheme_user && !team.scheme_admin;\n        const isGuest = team.scheme_guest;\n        const showMakeTeamAdmin = !isAdmin && !isGuest;\n        const showMakeTeamMember = !isMember && !isGuest;\n\n        return (\n            <MenuWrapper\n                isDisabled={this.props.isDisabled}\n            >\n                <button\n                    type='button'\n                    id={`teamListDropdown_${team.id}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    aria-expanded='true'\n                >\n                    <span className='SystemUserDetail__actions-menu-icon'><EllipsisHorizontalIcon/></span>\n                </button>\n                <div>\n                    <Menu\n                        openLeft={true}\n                        openUp={false}\n                        ariaLabel={localizeMessage('team_members_dropdown.menuAriaLabel', 'Change the role of a team member')}\n                    >\n                        <Menu.ItemAction\n                            id='makeTeamAdmin'\n                            show={showMakeTeamAdmin}\n                            onClick={() => this.props.doMakeUserTeamAdmin(team.id)}\n                            text={localizeMessage('team_members_dropdown.makeAdmin', 'Make Team Admin')}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeTeamMember}\n                            onClick={() => this.props.doMakeUserTeamMember(team.id)}\n                            text={localizeMessage('team_members_dropdown.makeMember', 'Make Team Member')}\n                        />\n                        <Menu.ItemAction\n                            id='removeFromTeam'\n                            show={true}\n                            onClick={() => this.props.doRemoveUserFromTeam(team.id)}\n                            text={localizeMessage('team_members_dropdown.leave_team', 'Remove from Team')}\n                            buttonClass='SystemUserDetail__action-remove-team'\n                        />\n                    </Menu>\n                </div>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport './team_row.scss';\nimport TeamListDropdown from './team_list_dropdown';\n\ntype Props = {\n    team: {[x: string]: string};\n    onRowClick?: () => void;\n    doRemoveUserFromTeam: (teamId: string) => Promise<void>;\n    doMakeUserTeamAdmin: (teamId: string) => Promise<void>;\n    doMakeUserTeamMember: (teamId: string) => Promise<void>;\n    readOnly?: boolean;\n}\n\nexport default class TeamRow extends React.PureComponent<Props> {\n    private renderTeamType = (team: {[x: string]: string}) => {\n        if (team.group_constrained) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamType.groupSync'}\n                    defaultMessage={'Group sync'}\n                />\n            );\n        }\n        if (team.allow_open_invite) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamType.anyoneCanJoin'}\n                    defaultMessage={'Anyone can join'}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id={'admin.systemUserDetail.teamList.teamType.inviteOnly'}\n                defaultMessage={'Invite only'}\n            />\n        );\n    }\n    private renderTeamRole = (team: {[x: string]: string}) => {\n        if (team.scheme_guest) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.guest'}\n                    defaultMessage={'Guest'}\n                />\n            );\n        }\n        if (team.scheme_admin && !team.scheme_guest) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.admin'}\n                    defaultMessage={'Team Admin'}\n                />\n            );\n        }\n        if (team.scheme_user && !team.scheme_guest && !team.scheme_admin) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.member'}\n                    defaultMessage={'Team Member'}\n                />\n            );\n        }\n        return null;\n    }\n    public render = (): JSX.Element => {\n        const {team} = this.props;\n        const teamIconUrl = Utils.imageURLForTeam(team);\n        return (\n            <div className={'TeamRow'}>\n                <div className='TeamRow__row'>\n                    <div className='TeamRow__team-name'>\n                        <div className='col-sm-auto'>\n                            <TeamIcon\n                                size='sm'\n                                url={teamIconUrl}\n                                content={team.display_name}\n                            />\n                        </div>\n                        <div className='col-md-auto'>\n                            <b>{team.display_name}</b>\n                            {team.description && (\n                                <div className='overflow--ellipsis text-nowrap TeamRow__team-description'>\n                                    {team.description}\n                                </div>)}\n                        </div>\n\n                    </div>\n\n                    <span className='TeamRow__description'>\n                        {this.renderTeamType(team)}\n                    </span>\n\n                    <span className='TeamRow__description'>\n                        {this.renderTeamRole(team)}\n                    </span>\n\n                    <span className='TeamRow__actions'>\n                        <TeamListDropdown\n                            team={team}\n                            doRemoveUserFromTeam={this.props.doRemoveUserFromTeam}\n                            doMakeUserTeamAdmin={this.props.doMakeUserTeamAdmin}\n                            doMakeUserTeamMember={this.props.doMakeUserTeamMember}\n                            isDisabled={this.props.readOnly}\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {TeamMembership} from 'matterfoss-redux/types/teams';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AbstractList from './abstract_list';\nimport TeamRow from './team_row';\n\nconst headerLabels = [\n    {\n        id: t('admin.systemUserDetail.teamList.header.name'),\n        default: 'Name',\n        style: {\n            flexGrow: 1,\n            minWidth: '284px',\n            marginLeft: '16px',\n        },\n    },\n    {\n        id: t('admin.systemUserDetail.teamList.header.type'),\n        default: 'Type',\n        style: {\n            width: '150px',\n        },\n    },\n    {\n        id: t('admin.systemUserDetail.teamList.header.role'),\n        default: 'Role',\n        style: {\n            width: '150px',\n        },\n    },\n    {\n        style: {\n            width: '150px',\n        },\n    },\n];\n\ntype Props = {\n    userId: string;\n    locale: string;\n    emptyListTextId: string;\n    emptyListTextDefaultMessage: string;\n    actions: {\n        getTeamsData: (userId: string) => ActionFunc;\n        getTeamMembersForUser: (userId: string) => ActionFunc;\n        removeUserFromTeam: (teamId: string, userId: string) => ActionFunc & Partial<{error: Error}>;\n        updateTeamMemberSchemeRoles: (teamId: string, userId: string, isSchemeUser: boolean, isSchemeAdmin: boolean) => ActionFunc & Partial<{error: Error}>;\n    };\n    userDetailCallback: (teamsId: TeamMembership[]) => void;\n    refreshTeams: boolean;\n    readOnly?: boolean;\n}\n\ntype State = {\n    teamsWithMemberships: Array<Record<string, any>>;\n    serverError: string | null;\n}\n\nexport default class TeamList extends React.PureComponent<Props, State> {\n    public static defaultProps = {\n        emptyListTextId: t('admin.team_settings.team_list.no_teams_found'),\n        emptyListTextDefaultMessage: 'No teams found',\n        refreshTeams: false,\n    }\n\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            teamsWithMemberships: [],\n            serverError: null,\n        };\n    }\n\n    public componentDidMount() {\n        this.getTeamsAndMemberships();\n    }\n\n    public componentDidUpdate(prevProps: Props) {\n        if (prevProps.refreshTeams !== this.props.refreshTeams) {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    private getTeamsAndMemberships = async (userId = this.props.userId): Promise<void> => {\n        const teams = await this.props.actions.getTeamsData(userId);\n        const memberships = await this.props.actions.getTeamMembersForUser(userId);\n        return Promise.all([teams, memberships]).\n            then(this.mergeTeamsWithMemberships).\n            then((teamsWithMemberships) => {\n                this.setState({teamsWithMemberships});\n                this.props.userDetailCallback(teamsWithMemberships);\n            });\n    }\n\n    // check this out\n    private mergeTeamsWithMemberships = (data: Array<Record<string, any>>): TeamMembership[] => {\n        const teams = data[0].data;\n        const memberships = data[1].data;\n        let teamsWithMemberships = teams.map((object: {[x: string]: string}) => {\n            const results = memberships.filter((team: {[x: string]: string}) => team.team_id === object.id);\n            const team = {...object, ...results[0]};\n            return team;\n        });\n        teamsWithMemberships = filterAndSortTeamsByDisplayName(teamsWithMemberships, this.props.locale);\n        return teamsWithMemberships;\n    }\n\n    private doRemoveUserFromTeam = async (teamId: string): Promise<void> => {\n        const {error} = await this.props.actions.removeUserFromTeam(teamId, this.props.userId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    private doMakeUserTeamAdmin = async (teamId: string) => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(teamId, this.props.userId, true, true);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    private doMakeUserTeamMember = async (teamId: string) => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(teamId, this.props.userId, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    public render(): JSX.Element {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='SystemUserDetail__error has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div>{serverError}</div>\n                <AbstractList\n                    headerLabels={headerLabels}\n                    renderRow={this.renderRow}\n                    total={this.state.teamsWithMemberships.length}\n                    data={this.state.teamsWithMemberships}\n                    actions={this.props.actions}\n                    emptyListTextId={this.props.emptyListTextId}\n                    emptyListTextDefaultMessage={this.props.emptyListTextDefaultMessage}\n                    userId={this.props.userId}\n                />\n            </React.Fragment>\n        );\n    }\n\n    private renderRow = (item: {[x: string]: string}): JSX.Element => {\n        return (\n            <TeamRow\n                key={item.id}\n                team={item}\n                doRemoveUserFromTeam={this.doRemoveUserFromTeam}\n                doMakeUserTeamAdmin={this.doMakeUserTeamAdmin}\n                doMakeUserTeamMember={this.doMakeUserTeamMember}\n                readOnly={this.props.readOnly}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {\n    getTeamsForUser,\n    getTeamMembersForUser,\n    removeUserFromTeam,\n    updateTeamMemberSchemeRoles,\n} from 'matterfoss-redux/actions/teams';\n\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport {GlobalState} from 'types/store';\n\nimport TeamList from './team_list';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getTeamsData: getTeamsForUser,\n            getTeamMembersForUser,\n            removeUserFromTeam,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class EmailIcon extends React.PureComponent<React.HTMLAttributes<HTMLSpanElement>> {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='0 0 24 24'\n                >\n                    <path\n                        fill='inherit'\n                        d='M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6M20 6L12 11L4 6H20M20 18H4V8L12 13L20 8V18Z'\n                    />\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default function AtIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    return (\n        <span {...props}>\n            <svg\n                width='100%'\n                height='100%'\n                viewBox='0 0 24 24'\n            >\n                <path\n                    fill='inherit'\n                    d='M12,15C12.81,15 13.5,14.7 14.11,14.11C14.7,13.5 15,12.81 15,12C15,11.19 14.7,10.5 14.11,9.89C13.5,9.3 12.81,9 12,9C11.19,9 10.5,9.3 9.89,9.89C9.3,10.5 9,11.19 9,12C9,12.81 9.3,13.5 9.89,14.11C10.5,14.7 11.19,15 12,15M12,2C14.75,2 17.1,3 19.05,4.95C21,6.9 22,9.25 22,12V13.45C22,14.45 21.65,15.3 21,16C20.3,16.67 19.5,17 18.5,17C17.3,17 16.31,16.5 15.56,15.5C14.56,16.5 13.38,17 12,17C10.63,17 9.45,16.5 8.46,15.54C7.5,14.55 7,13.38 7,12C7,10.63 7.5,9.45 8.46,8.46C9.45,7.5 10.63,7 12,7C13.38,7 14.55,7.5 15.54,8.46C16.5,9.45 17,10.63 17,12V13.45C17,13.86 17.16,14.22 17.46,14.53C17.76,14.84 18.11,15 18.5,15C18.92,15 19.27,14.84 19.57,14.53C19.87,14.22 20,13.86 20,13.45V12C20,9.81 19.23,7.93 17.65,6.35C16.07,4.77 14.19,4 12,4C9.81,4 7.93,4.77 6.35,6.35C4.77,7.93 4,9.81 4,12C4,14.19 4.77,16.07 6.35,17.65C7.93,19.23 9.81,20 12,20H17V22H12C9.25,22 6.9,21 4.95,19.05C3,17.1 2,14.75 2,12C2,9.25 3,6.9 4.95,4.95C6.9,3 9.25,2 12,2Z'\n                />\n            </svg>\n        </span>\n    );\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class ShieldOutlineIcon extends React.PureComponent<React.HTMLAttributes<HTMLSpanElement>> {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='0 0 24 24'\n                >\n                    <path\n                        fill='inherit'\n                        d='M21,11C21,16.55 17.16,21.74 12,23C6.84,21.74 3,16.55 3,11V5L12,1L21,5V11M12,21C15.75,20 19,15.54 19,11.22V6.3L12,3.18L5,6.3V11.22C5,15.54 8.25,20 12,21Z'\n                    />\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {Redirect, RouteComponentProps} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {isEmail} from 'matterfoss-redux/utils/helpers';\n\nimport {Team, TeamMembership} from 'matterfoss-redux/types/teams';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport {$ID} from 'matterfoss-redux/types/utilities';\n\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport {adminResetMfa, adminResetEmail} from 'actions/admin_actions.jsx';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport AdminButtonOutline from 'components/admin_console/admin_button_outline/admin_button_outline';\nimport AdminUserCard from 'components/admin_console/admin_user_card/admin_user_card';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport ConfirmModal from 'components/confirm_modal';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\nimport TeamSelectorModal from 'components/team_selector_modal';\n\nimport TeamList from 'components/admin_console/system_user_detail/team_list';\nimport EmailIcon from 'components/widgets/icons/email_icon';\nimport AtIcon from 'components/widgets/icons/at_icon';\nimport SheidOutlineIcon from 'components/widgets/icons/shield_outline_icon';\n\nimport './system_user_detail.scss';\n\nexport type Props = {\n    user: UserProfile;\n    mfaEnabled: boolean;\n    isDisabled?: boolean;\n    actions: {\n        updateUserActive: (userId: string, active: boolean) => Promise<{error: ServerError}>;\n        setNavigationBlocked: (blocked: boolean) => void;\n        addUserToTeam: (teamId: string, userId?: string) => Promise<{data: TeamMembership; error?: any}>;\n    };\n}\n\nexport type State = {\n    teams: TeamMembership[];\n    teamIds: Array<$ID<Team>>;\n    loading: boolean;\n    searching: boolean;\n    showPasswordModal: boolean;\n    showDeactivateMemberModal: boolean;\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: string | null;\n    errorTooltip: boolean;\n    customComponentWrapperClass: string;\n    user: UserProfile;\n    addTeamOpen: boolean;\n    refreshTeams: boolean;\n    error: ServerError | null;\n}\n\nexport default class SystemUserDetail extends React.PureComponent<Props & RouteComponentProps, State> {\n    errorMessageRef: React.RefObject<HTMLDivElement>;\n    errorMessageRefCurrent: React.ReactInstance | undefined;\n\n    public static defaultProps = {\n        user: {\n            email: '',\n        } as UserProfile,\n        mfaEnabled: false,\n    };\n\n    constructor(props: Props & RouteComponentProps) {\n        super(props);\n        this.state = {\n            teams: [],\n            teamIds: [],\n            loading: false,\n            searching: false,\n            showPasswordModal: false,\n            showDeactivateMemberModal: false,\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n            customComponentWrapperClass: '',\n            user: {\n                email: this.props.user.email,\n            } as UserProfile,\n            addTeamOpen: false,\n            refreshTeams: true,\n            error: null,\n        };\n\n        this.errorMessageRef = React.createRef();\n    }\n\n    setTeamsData = (teams: TeamMembership[]): void => {\n        const teamIds = teams.map((team) => team.team_id);\n        this.setState({teams});\n        this.setState({teamIds});\n        this.setState({refreshTeams: false});\n    }\n\n    openAddTeam = (): void => {\n        this.setState({addTeamOpen: true});\n    }\n\n    addTeams = (teams: Team[]): void => {\n        const promises = [];\n        for (const team of teams) {\n            promises.push(this.props.actions.addUserToTeam(team.id, this.props.user.id));\n        }\n        Promise.all(promises).finally(() => this.setState({refreshTeams: true}));\n    }\n\n    closeAddTeam = (): void => {\n        this.setState({addTeamOpen: false});\n    }\n\n    doPasswordReset = (user: UserProfile): void => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = (): void => {\n        this.setState({\n            showPasswordModal: false,\n        });\n    }\n\n    doPasswordResetSubmit = (): void => {\n        this.setState({\n            showPasswordModal: false,\n        });\n    }\n\n    handleMakeActive = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        this.props.actions.updateUserActive(this.props.user.id, true).\n            then((data) => this.onUpdateActiveResult(data.error));\n    }\n\n    handleShowDeactivateMemberModal = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = (): void => {\n        this.props.actions.updateUserActive(this.props.user.id, false).\n            then((data) => this.onUpdateActiveResult(data.error));\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    onUpdateActiveResult = (error: ServerError): void => {\n        if (error) {\n            this.setState({error});\n        }\n    }\n\n    handleDeactivateCancel = (): void => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    // TODO: add error handler function\n    handleResetMfa = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, null);\n    }\n\n    handleEmailChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const emailChanged = e.target.value !== this.props.user.email;\n        this.setState({\n            user: {\n                email: e.target.value,\n            } as UserProfile,\n            saveNeeded: emailChanged,\n        });\n        this.props.actions.setNavigationBlocked(emailChanged);\n    }\n\n    handleSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n        e.preventDefault();\n        if (this.state.user.email !== this.props.user.email) {\n            if (!isEmail(this.state.user.email)) {\n                this.setState({serverError: 'Invalid Email address'});\n                return;\n            }\n            const user = Object.assign({}, this.props.user);\n            const email = this.state.user.email.trim().toLowerCase();\n            user.email = email;\n\n            this.setState({serverError: null});\n\n            adminResetEmail(\n                user,\n                () => {\n                    this.props.history.push('/admin_console/user_management/users');\n                },\n                (err: Error) => {\n                    const serverError = (err.message ? err.message : err) as string;\n                    this.setState({serverError});\n                },\n            );\n\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.actions.setNavigationBlocked(false);\n        }\n    }\n\n    renderDeactivateMemberModal = (user: UserProfile): React.ReactNode => {\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: user.username,\n                }}\n            />\n        );\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const message = (\n            <div>\n                <FormattedMessage\n                    id='deactivate_member_modal.desc'\n                    defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system. Are you sure you want to deactivate {username}?'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    renderActivateDeactivate = (): React.ReactNode => {\n        if (this.props.user.delete_at > 0) {\n            return (\n                <AdminButtonOutline\n                    onClick={this.handleMakeActive}\n                    className='admin-btn-default'\n                    disabled={this.props.isDisabled}\n                >\n                    {Utils.localizeMessage('admin.user_item.makeActive', 'Activate')}\n                </AdminButtonOutline>\n            );\n        }\n        return (\n            <AdminButtonOutline\n                onClick={this.handleShowDeactivateMemberModal}\n                className='admin-btn-default'\n                disabled={this.props.isDisabled}\n            >\n                {Utils.localizeMessage('admin.user_item.makeInactive', 'Deactivate')}\n            </AdminButtonOutline>\n        );\n    }\n\n    renderRemoveMFA = (): React.ReactNode => {\n        if (this.props.user.mfa_active) {\n            return (\n                <AdminButtonOutline\n                    onClick={this.handleResetMfa}\n                    className='admin-btn-default'\n                    disabled={this.props.isDisabled}\n                >\n                    {Utils.localizeMessage('admin.user_item.resetMfa', 'Remove MFA')}\n                </AdminButtonOutline>\n            );\n        }\n        return null;\n    }\n\n    getAuthenticationText(): string {\n        const {user, mfaEnabled} = this.props;\n        let authLine;\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n            authLine = service;\n        } else {\n            authLine = Utils.localizeMessage('admin.userManagement.userDetail.email', 'Email');\n        }\n        if (mfaEnabled) {\n            if (user.mfa_active) {\n                authLine += ', ';\n                authLine += Utils.localizeMessage('admin.userManagement.userDetail.mfa', 'MFA');\n            }\n        }\n        return authLine;\n    }\n\n    componentDidMount(): void {\n        if (this.errorMessageRef.current) {\n            this.errorMessageRefCurrent = this.errorMessageRef.current;\n        }\n    }\n\n    render(): React.ReactNode {\n        const {user} = this.props;\n        let deactivateMemberModal;\n\n        if (!user.id) {\n            return (\n                <Redirect to={{pathname: '/admin_console/user_management/users'}}/>\n            );\n        }\n\n        if (user.id) {\n            deactivateMemberModal = this.renderDeactivateMemberModal(user);\n        }\n\n        return (\n            <div className='SystemUserDetail wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/users'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.systemUserDetail.title'\n                            defaultMessage='User Configuration'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <AdminUserCard\n                            user={user}\n                            body={\n                                <React.Fragment>\n                                    <span className='SystemUserDetail__position'>{user.position}</span>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.email', 'Email')}</span>\n                                    <div>\n                                        <EmailIcon className='SystemUserDetail__field-icon'/>\n                                        <input\n                                            className='SystemUserDetail__input form-control'\n                                            type='text'\n                                            value={this.state.user.email}\n                                            onChange={this.handleEmailChange}\n                                            disabled={this.props.isDisabled}\n                                        />\n                                    </div>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.username', 'Username')}</span>\n                                    <div>\n                                        <AtIcon className='SystemUserDetail__field-icon'/>\n                                        <span className='SystemUserDetail__field-text'>{user.username}</span>\n                                    </div>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.authenticationMethod', 'Authentication Method')}</span>\n                                    <div className='SystemUserDetail__field-text'>\n                                        <SheidOutlineIcon className='SystemUserDetail__field-icon'/>\n                                        <span className='SystemUserDetail__field-text'>{this.getAuthenticationText()}</span>\n                                    </div>\n                                </React.Fragment>\n                            }\n                            footer={\n                                <React.Fragment>\n                                    <AdminButtonOutline\n                                        onClick={this.doPasswordReset}\n                                        className='admin-btn-default'\n                                        disabled={this.props.isDisabled}\n                                    >\n                                        {Utils.localizeMessage('admin.user_item.resetPwd', 'Reset Password')}\n                                    </AdminButtonOutline>\n                                    {this.renderActivateDeactivate()}\n                                    {this.renderRemoveMFA()}\n                                </React.Fragment>\n                            }\n                        />\n                        <AdminPanel\n                            subtitleId={t('admin.userManagement.userDetail.teamsSubtitle')}\n                            subtitleDefault={'Teams to which this user belongs'}\n                            titleId={t('admin.userManagement.userDetail.teamsTitle')}\n                            titleDefault={'Team Membership'}\n                            button={(\n                                <div className='add-team-button'>\n                                    <button\n                                        type='button'\n                                        className='btn btn-primary'\n                                        onClick={this.openAddTeam}\n                                        disabled={this.props.isDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='admin.userManagement.userDetail.addTeam'\n                                            defaultMessage='Add Team'\n                                        />\n                                    </button>\n                                </div>\n                            )}\n                        >\n                            <TeamList\n                                userId={this.props.user.id}\n                                userDetailCallback={this.setTeamsData}\n                                refreshTeams={this.state.refreshTeams}\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanel>\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded}\n                        onClick={this.handleSubmit}\n                        savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <div\n                        className='error-message'\n                        ref={this.errorMessageRef}\n                    >\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                    <Overlay\n                        show={this.state.errorTooltip}\n                        placement='top'\n                        target={this.errorMessageRefCurrent}\n                    >\n                        <Tooltip id='error-tooltip' >\n                            {this.state.serverError}\n                        </Tooltip>\n                    </Overlay>\n                </div>\n                <ResetPasswordModal\n                    user={user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                {deactivateMemberModal}\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        alreadySelected={this.state.teamIds}\n                        excludeGroupConstrained={true}\n                    />\n                }\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getUser} from 'matterfoss-redux/selectors/entities/users';\nimport {updateUserActive} from 'matterfoss-redux/actions/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {addUserToTeam} from 'matterfoss-redux/actions/teams';\n\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport {TeamMembership} from 'matterfoss-redux/types/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport SystemUserDetail from './system_user_detail';\n\ntype OwnProps = {\n    match: any;\n};\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const userId = ownProps.match.params.user_id;\n    const user = getUser(state, userId);\n    return {\n        user,\n        mfaEnabled: config.EnableMultifactorAuthentication === 'true',\n    };\n}\n\ntype Actions = {\n    updateUserActive: (userId: string, active: boolean) => Promise<{error: ServerError}>;\n    setNavigationBlocked: (blocked: boolean) => void;\n    addUserToTeam: (teamId: string, userId?: string) => Promise<{data: TeamMembership; error?: any}>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    const apiActions = bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n        updateUserActive,\n        addUserToTeam,\n    }, dispatch);\n    const uiActions = bindActionCreators({\n        setNavigationBlocked,\n    }, dispatch);\n\n    const props = {\n        actions: Object.assign(apiActions, uiActions),\n    };\n\n    return props;\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUserDetail);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\ntype Props = {\n    logs: string[];\n    page: number;\n    perPage: number;\n    nextPage: () => void;\n    previousPage: () => void;\n};\n\ntype State = {\n    nextDisabled: boolean;\n};\n\nexport default class Logs extends React.PureComponent<Props, State> {\n    private logPanel: React.RefObject<HTMLDivElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.logPanel = React.createRef();\n\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // Scroll Down to get the latest logs\n        const node = this.logPanel.current;\n        if (node) {\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    componentDidUpdate() {\n        // Scroll Down to get the latest logs\n        const node = this.logPanel.current;\n        if (node) {\n            node.scrollTop = node.scrollHeight;\n        }\n    }\n\n    nextPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n    }\n\n    previousPage = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n\n        this.props.previousPage();\n    }\n\n    render() {\n        let content = null;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.logs.length >= this.props.perPage) {\n            nextButton = (\n                <button\n                    type='button'\n                    className='btn btn-default filter-control filter-control__next pull-right'\n                    onClick={this.nextPage}\n                    disabled={this.state.nextDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.logs.next'\n                        defaultMessage='Next'\n                    />\n                    <NextIcon additionalClassName='ml-2'/>\n                </button>\n            );\n        }\n\n        if (this.props.page > 0) {\n            previousButton = (\n                <button\n                    type='button'\n                    className='btn btn-default filter-control filter-control__prev'\n                    onClick={this.previousPage}\n                >\n                    <FormattedMessage\n                        id='generic_icons.previous'\n                        defaultMessage='Previous Icon'\n                    >\n                        {(title: string) => (\n                            <i\n                                className='fa fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='admin.logs.prev'\n                        defaultMessage='Previous'\n                    />\n                </button>\n            );\n        }\n\n        content = [];\n\n        for (let i = 0; i < this.props.logs.length; i++) {\n            const style: React.CSSProperties = {\n                whiteSpace: 'nowrap',\n                fontFamily: 'monospace',\n                color: '',\n            };\n\n            if (this.props.logs[i].indexOf('[EROR]') > 0) {\n                style.color = 'red';\n            }\n\n            content.push(<br key={'br_' + i}/>);\n            content.push(\n                <span\n                    key={'log_' + i}\n                    style={style}\n                >\n                    {this.props.logs[i]}\n                </span>,\n            );\n        }\n\n        return (\n            <div>\n                <div\n                    tabIndex={-1}\n                    ref={this.logPanel}\n                    className='log__panel'\n                >\n                    {content}\n                </div>\n                <div className='pt-3 pb-3 filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport LogList from './log_list';\n\ntype Props = {\n    logs: string[];\n    actions: {\n        getLogs: (page?: number | undefined, perPage?: number | undefined) => ActionFunc;\n    };\n};\n\ntype State = {\n    loadingLogs: boolean;\n    page: number;\n    perPage: number;\n};\n\nexport default class Logs extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loadingLogs: true,\n            page: 0,\n            perPage: 1000,\n        };\n    }\n\n    componentDidMount() {\n        this.reload();\n    }\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        if (this.state.page !== prevState.page) {\n            this.reload();\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    reload = async () => {\n        this.setState({loadingLogs: true});\n        await this.props.actions.getLogs(this.state.page, this.state.perPage);\n        this.setState({loadingLogs: false});\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingLogs || !this.props.logs || this.props.logs.length === 0) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <LogList\n                    {...this.props}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={this.state.page}\n                    perPage={this.state.perPage}\n                />\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <FormattedAdminHeader\n                    id='admin.logs.title'\n                    defaultMessage='Server Logs'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-logs-content admin-console__content'>\n                        <div className='banner'>\n                            <div className='banner__content'>\n                                <FormattedMessage\n                                    id='admin.logs.bannerDesc'\n                                    defaultMessage='To look up users by User ID or Token ID, go to User Management > Users and paste the ID into the search filter.'\n                                />\n                            </div>\n                        </div>\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                            onClick={this.reload}\n                        >\n                            <FormattedMessage\n                                id='admin.logs.reload'\n                                defaultMessage='Reload'\n                            />\n                        </button>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getLogs} from 'matterfoss-redux/actions/admin';\n\nimport * as Selectors from 'matterfoss-redux/selectors/entities/admin';\n\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {GlobalState} from 'types/store';\n\nimport Logs from './logs';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        logs: Selectors.getLogs(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getLogs,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {uploadBrandImage, deleteBrandImage} from 'actions/admin_actions.jsx';\nimport {Constants} from 'utils/constants';\nimport FormError from 'components/form_error';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nconst HTTP_STATUS_OK = 200;\n\nexport default class BrandImageSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set for testing purpose\n         */\n        id: PropTypes.string,\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool.isRequired,\n\n        /*\n        * Set the save needed in the admin schema settings to trigger the save button to turn on\n        */\n        setSaveNeeded: PropTypes.func.isRequired,\n\n        /*\n        * Registers the function suppose to be run when the save button is pressed\n        */\n        registerSaveAction: PropTypes.func.isRequired,\n\n        /*\n        * Unregisters the function on unmount of the component suppose to be run when the save button is pressed\n        */\n        unRegisterSaveAction: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteBrandImage: false,\n            brandImage: null,\n            brandImageExists: false,\n            brandImageTimestamp: Date.now(),\n            error: '',\n        };\n\n        this.imageRef = React.createRef();\n        this.fileInputRef = React.createRef();\n    }\n\n    componentDidMount() {\n        fetch(Client4.getBrandImageUrl(this.state.brandImageTimestamp)).then(\n            (resp) => {\n                if (resp.status === HTTP_STATUS_OK) {\n                    this.setState({brandImageExists: true});\n                } else {\n                    this.setState({brandImageExists: false});\n                }\n            },\n        );\n\n        this.props.registerSaveAction(this.handleSave);\n    }\n\n    componentWillUnmount() {\n        this.props.unRegisterSaveAction(this.handleSave);\n    }\n\n    componentDidUpdate() {\n        if (this.imageRef.current) {\n            const reader = new FileReader();\n\n            const img = this.imageRef.current;\n            reader.onload = (e) => {\n                $(img).attr('src', e.target.result); // eslint-disable-line jquery/no-attr\n            };\n\n            reader.readAsDataURL(this.state.brandImage);\n        }\n    }\n\n    handleImageChange = () => {\n        const element = $(this.fileInputRef.current);\n        if (element.prop('files').length > 0) {\n            this.props.setSaveNeeded();\n            this.setState({\n                brandImage: element.prop('files')[0],\n                deleteBrandImage: false,\n            });\n        }\n    }\n\n    handleDeleteButtonPressed = () => {\n        this.setState({deleteBrandImage: true, brandImage: null, brandImageExists: false});\n        this.props.setSaveNeeded();\n    }\n\n    handleSave = async () => {\n        this.setState({\n            error: '',\n        });\n\n        let error;\n        if (this.state.deleteBrandImage) {\n            await deleteBrandImage(\n                () => {\n                    this.setState({\n                        deleteBrandImage: false,\n                        brandImageExists: false,\n                        brandImage: null,\n                    });\n                },\n                (err) => {\n                    error = err;\n                    this.setState({\n                        error: err.message,\n                    });\n                },\n            );\n        } else if (this.state.brandImage) {\n            await uploadBrandImage(\n                this.state.brandImage,\n                () => {\n                    this.setState({\n                        brandImageExists: true,\n                        brandImage: null,\n                        brandImageTimestamp: Date.now(),\n                    });\n                },\n                (err) => {\n                    error = err;\n                    this.setState({\n                        error: err.message,\n                    });\n                },\n            );\n        }\n        return {error};\n    }\n\n    render() {\n        let letbtnDefaultClass = 'btn';\n        if (!this.props.disabled) {\n            letbtnDefaultClass += ' btn-default';\n        }\n\n        let img = null;\n        if (this.state.brandImage) {\n            img = (\n                <div className='remove-image__img mb-5'>\n                    <img\n                        ref={this.imageRef}\n                        alt='brand image'\n                        src=''\n                    />\n                </div>\n            );\n        } else if (this.state.brandImageExists) {\n            let overlay;\n            if (!this.props.disabled) {\n                overlay = (\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='right'\n                        overlay={(\n                            <Tooltip id='removeIcon'>\n                                <div aria-hidden={true}>\n                                    <FormattedMessage\n                                        id='admin.team.removeBrandImage'\n                                        defaultMessage='Remove brand image'\n                                    />\n                                </div>\n                            </Tooltip>\n                        )}\n                    >\n                        <button\n                            type='button'\n                            className='remove-image__btn'\n                            onClick={this.handleDeleteButtonPressed}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                        </button>\n                    </OverlayTrigger>\n                );\n            }\n            img = (\n                <div className='remove-image__img mb-5'>\n                    <img\n                        alt='brand image'\n                        src={Client4.getBrandImageUrl(this.state.brandImageTimestamp)}\n                    />\n                    {overlay}\n                </div>\n            );\n        } else {\n            img = (\n                <p className='mt-2'>\n                    <FormattedMessage\n                        id='admin.team.noBrandImage'\n                        defaultMessage='No brand image uploaded'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div\n                data-testid={this.props.id}\n                className='form-group'\n            >\n                <label className='control-label col-sm-4'>\n                    <FormattedMessage\n                        id='admin.team.brandImageTitle'\n                        defaultMessage='Custom Brand Image:'\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    <div className='remove-image'>\n                        {img}\n                    </div>\n                </div>\n                <div className='col-sm-4'/>\n                <div className='col-sm-8'>\n                    <div className='file__upload mt-5'>\n                        <button\n                            type='button'\n                            className={letbtnDefaultClass}\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.team.chooseImage'\n                                defaultMessage='Select Image'\n                            />\n                        </button>\n                        <input\n                            ref={this.fileInputRef}\n                            type='file'\n                            accept='.jpg,.png,.bmp'\n                            disabled={this.props.disabled}\n                            onChange={this.handleImageChange}\n                        />\n                    </div>\n                    <br/>\n                    <FormError error={this.state.error}/>\n                    <p className='help-text m-0'>\n                        <FormattedMessage\n                            id='admin.team.uploadDesc'\n                            defaultMessage='Customize your user experience by adding a custom image to your login screen. Recommended maximum image size is less than 2 MB.'\n                        />\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nexport default class GroupRow extends React.PureComponent {\n    static propTypes = {\n        primary_key: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        mattermost_group_id: PropTypes.string,\n        has_syncables: PropTypes.bool,\n        checked: PropTypes.bool,\n        failed: PropTypes.bool,\n        onCheckToggle: PropTypes.func,\n        readOnly: PropTypes.bool,\n        actions: PropTypes.shape({\n            link: PropTypes.func.isRequired,\n            unlink: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n        };\n    }\n\n    onRowClick = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onCheckToggle(this.props.primary_key);\n    }\n\n    linkHandler = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        if (this.props.readOnly) {\n            return;\n        }\n        this.setState({loading: true});\n        await this.props.actions.link(this.props.primary_key);\n        this.setState({loading: false});\n    }\n\n    unlinkHandler = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        if (this.props.readOnly) {\n            return;\n        }\n        this.setState({loading: true});\n        await this.props.actions.unlink(this.props.primary_key);\n        this.setState({loading: false});\n    }\n\n    renderActions = () => {\n        if (!this.props.mattermost_group_id) {\n            return null;\n        }\n        if (this.props.has_syncables) {\n            return (\n                <Link\n                    to={'/admin_console/user_management/groups/' + this.props.mattermost_group_id}\n                    id={`${this.props.name}_edit`}\n                >\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.edit'\n                        defaultMessage='Edit'\n                    />\n                </Link>\n            );\n        }\n        return (\n            <Link\n                to={'/admin_console/user_management/groups/' + this.props.mattermost_group_id}\n                id={`${this.props.name}_configure`}\n            >\n                <FormattedMessage\n                    id='admin.group_settings.group_row.configure'\n                    defaultMessage='Configure'\n                />\n            </Link>\n        );\n    }\n\n    renderLinked = () => {\n        if (this.state.loading) {\n            return (\n                <a href='#'>\n                    {this.props.mattermost_group_id &&\n                        <LoadingSpinner text={localizeMessage('admin.group_settings.group_row.unlinking', 'Unlinking')}/>\n                    }\n                    {!this.props.mattermost_group_id &&\n                        <LoadingSpinner text={localizeMessage('admin.group_settings.group_row.linking', 'Linking')}/>\n                    }\n                </a>\n            );\n        }\n        if (this.props.mattermost_group_id) {\n            if (this.props.failed) {\n                return (\n                    <a\n                        href='#'\n                        onClick={this.unlinkHandler}\n                        className='warning'\n                    >\n                        <i className='icon fa fa-exclamation-triangle'/>\n                        <FormattedMessage\n                            id='admin.group_settings.group_row.unlink_failed'\n                            defaultMessage='Unlink failed'\n                        />\n                    </a>\n                );\n            }\n            return (\n                <a\n                    href='#'\n                    onClick={this.unlinkHandler}\n                    className={this.props.readOnly ? 'disabled' : ''}\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.linked'\n                        defaultMessage='Linked'\n                    />\n                </a>\n            );\n        }\n        if (this.props.failed) {\n            return (\n                <a\n                    href='#'\n                    onClick={this.linkHandler}\n                    className='warning'\n                >\n                    <i className='icon fa fa-exclamation-triangle'/>\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.link_failed'\n                        defaultMessage='Link failed'\n                    />\n                </a>\n            );\n        }\n        return (\n            <a\n                href='#'\n                onClick={this.linkHandler}\n                className={this.props.readOnly ? 'disabled' : ''}\n            >\n                <i className='icon fa fa-unlink'/>\n                <FormattedMessage\n                    id='admin.group_settings.group_row.not_linked'\n                    defaultMessage='Not Linked'\n                />\n            </a>\n        );\n    }\n\n    render = () => {\n        return (\n            <div\n                id={`${this.props.name}_group`}\n                className={'group ' + (this.props.checked ? 'checked' : '')}\n                onClick={this.onRowClick}\n            >\n                <div className='group-row'>\n                    <div className='group-name'>\n                        <div\n                            className={'group-check ' + (this.props.checked ? 'checked' : '')}\n                        >\n                            {this.props.checked && <CheckboxCheckedIcon/>}\n                        </div>\n                        <span>\n                            {this.props.name}\n                        </span>\n                    </div>\n                    <div className='group-content'>\n                        <span className='group-description'>\n                            {this.renderLinked()}\n                        </span>\n                        <span className='group-actions'>\n                            {this.renderActions()}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {GroupSearchOpts, MixedUnlinkedGroupRedux} from 'matterfoss-redux/types/groups';\n\nimport * as Utils from 'utils/utils';\n\nimport GroupRow from 'components/admin_console/group_settings/group_row';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\nimport {Constants} from 'utils/constants';\n\nconst LDAP_GROUPS_PAGE_SIZE = 200;\n\ntype Props = {\n    groups: MixedUnlinkedGroupRedux[];\n    total: number;\n    readOnly?: boolean;\n    actions: {\n        getLdapGroups: (page?: number, perPage?: number, opts?: GroupSearchOpts) => Promise<any>;\n        link: (key: string) => Promise<any>;\n        unlink: (key: string) => Promise<any>;\n    };\n}\n\ntype FilterOption = {\n    is_configured?: boolean;\n    is_linked?: boolean;\n}\n\ntype FilterConfig = {\n    filter: string;\n    option: FilterOption;\n}\n\ntype FilterSearchMap = {\n    filterIsConfigured: FilterConfig;\n    filterIsUnconfigured: FilterConfig;\n    filterIsLinked: FilterConfig;\n    filterIsUnlinked: FilterConfig;\n}\n\ntype State = {\n    checked?: any;\n    loading: boolean;\n    page: number;\n    showFilters: boolean;\n    searchString: string;\n    filterIsConfigured?: boolean;\n    filterIsUnconfigured?: boolean;\n    filterIsLinked?: boolean;\n    filterIsUnlinked?: boolean;\n}\n\ntype FilterUpdates = [string, boolean];\n\nconst FILTER_STATE_SEARCH_KEY_MAPPING: FilterSearchMap = {\n    filterIsConfigured: {filter: 'is:configured', option: {is_configured: true}},\n    filterIsUnconfigured: {filter: 'is:notconfigured', option: {is_configured: false}},\n    filterIsLinked: {filter: 'is:linked', option: {is_linked: true}},\n    filterIsUnlinked: {filter: 'is:notlinked', option: {is_linked: false}},\n};\n\nexport default class GroupsList extends React.PureComponent<Props, State> {\n    public static defaultProps: Partial<Props> = {\n        groups: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            checked: {},\n            loading: true,\n            page: 0,\n            showFilters: false,\n            searchString: '',\n            filterIsConfigured: false,\n            filterIsUnconfigured: false,\n            filterIsLinked: false,\n            filterIsUnlinked: false,\n        };\n    }\n\n    public closeFilters = () => {\n        this.setState({showFilters: false});\n    }\n\n    public componentDidMount() {\n        this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    public async previousPage(e: any): Promise<void> {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({checked: {}, page, loading: true});\n        this.searchGroups(page);\n    }\n\n    public async nextPage(e: any): Promise<void> {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({checked: {}, page, loading: true});\n        this.searchGroups(page);\n    }\n\n    public onCheckToggle(key: string) {\n        const newChecked = {...this.state.checked};\n        newChecked[key] = !newChecked[key];\n        this.setState({checked: newChecked});\n    }\n\n    public linkSelectedGroups() {\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key] && !group.mattermost_group_id) {\n                this.props.actions.link(group.primary_key);\n            }\n        }\n    }\n\n    public unlinkSelectedGroups() {\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key] && group.mattermost_group_id) {\n                this.props.actions.unlink(group.primary_key);\n            }\n        }\n    }\n\n    public selectionActionButtonType(): string {\n        let hasSelectedLinked = false;\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key]) {\n                if (!group.mattermost_group_id) {\n                    return 'link';\n                }\n                hasSelectedLinked = true;\n            }\n        }\n        if (hasSelectedLinked) {\n            return 'unlink';\n        }\n\n        return 'disabled';\n    }\n\n    public renderSelectionActionButton(): JSX.Element {\n        switch (this.selectionActionButtonType()) {\n        case 'link':\n            return (\n                <button\n                    type='button'\n                    className='btn btn-primary'\n                    onClick={() => this.linkSelectedGroups()}\n                    disabled={this.props.readOnly}\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.link_selected'\n                        defaultMessage='Link Selected Groups'\n                    />\n                </button>\n            );\n        case 'unlink':\n            return (\n                <button\n                    type='button'\n                    className='btn btn-primary'\n                    onClick={() => this.unlinkSelectedGroups()}\n                    disabled={this.props.readOnly}\n                >\n                    <i className='icon fa fa-unlink'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.unlink_selected'\n                        defaultMessage='Unlink Selected Groups'\n                    />\n                </button>\n            );\n        default:\n            return (\n                <button\n                    type='button'\n                    className='btn btn-inactive disabled'\n                    disabled={this.props.readOnly}\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.link_selected'\n                        defaultMessage='Link Selected Groups'\n                    />\n                </button>\n            );\n        }\n    }\n    renderHeader = () => {\n        if (this.props.groups.length === 0) {\n            return null;\n        }\n        return (\n            <div className='groups-list--header'>\n                <div className='group-name'>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.nameHeader'\n                        defaultMessage='Name'\n                    />\n                </div>\n                <div className='group-content'>\n                    <div className='group-description'>\n                        <FormattedMessage\n                            id='admin.group_settings.groups_list.mappingHeader'\n                            defaultMessage='MatterFOSS Linking'\n                        />\n                    </div>\n                    <div className='group-actions'/>\n                </div>\n            </div>\n        );\n    }\n\n    public renderRows(): JSX.Element | JSX.Element[] {\n        if (this.state.loading) {\n            return (\n                <div className='groups-list-loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.groups.length === 0) {\n            return (\n                <div className='groups-list-empty'>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.no_groups_found'\n                        defaultMessage='No groups found'\n                    />\n                </div>\n            );\n        }\n        return this.props.groups.map((item) => {\n            return (\n                <GroupRow\n                    key={item.primary_key}\n                    primary_key={item.primary_key}\n                    name={item.name}\n                    mattermost_group_id={item.mattermost_group_id}\n                    has_syncables={item.has_syncables}\n                    failed={item.failed}\n                    checked={Boolean(this.state.checked[item.primary_key])}\n                    onCheckToggle={(key: string) => this.onCheckToggle(key)}\n                    readOnly={this.props.readOnly}\n                    actions={{\n                        link: this.props.actions.link,\n                        unlink: this.props.actions.unlink,\n                    }}\n                />\n            );\n        });\n    }\n\n    public regex(str: string): RegExp {\n        return new RegExp(`(${str})`, 'i');\n    }\n\n    public searchGroups(page?: number) {\n        let {searchString} = this.state;\n\n        const newState = {...this.state};\n\n        let q = searchString;\n        let opts = {q: ''};\n\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key, value]) => {\n            const re = this.regex(value.filter);\n            if (re.test(searchString)) {\n                (newState as any)[key] = true;\n                q = q.replace(re, '');\n                opts = Object.assign(opts, value.option);\n            } else if ((this.state as any)[key]) {\n                searchString += ' ' + value.filter;\n            }\n        });\n\n        opts.q = q.trim();\n\n        newState.searchString = searchString;\n        newState.showFilters = false;\n        newState.loading = true;\n        newState.showFilters = false;\n        this.setState(newState);\n\n        this.props.actions.getLdapGroups(page, LDAP_GROUPS_PAGE_SIZE, opts).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    public handleGroupSearchKeyUp(e: any) {\n        const {key} = e;\n        const {searchString} = this.state;\n        if (key === Constants.KeyCodes.ENTER[0]) {\n            this.setState({page: 0});\n            this.searchGroups();\n        }\n        const newState = {};\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([k, value]) => {\n            if (!this.regex(value.filter).test(searchString)) {\n                (newState as any)[k] = false;\n            }\n        });\n        this.setState(newState);\n    }\n\n    public newSearchString(searchString: string, stateKey: string, checked: boolean): string {\n        let newSearchString = searchString;\n        const {filter} = (FILTER_STATE_SEARCH_KEY_MAPPING as any)[stateKey];\n        const re = this.regex(filter);\n        const stringFilterPresent = re.test(searchString);\n\n        if (stringFilterPresent && !checked) {\n            newSearchString = searchString.replace(re, '').trim();\n        }\n\n        if (!stringFilterPresent && checked) {\n            newSearchString += ' ' + filter;\n        }\n\n        return newSearchString.replace(/\\s{2,}/g, ' ');\n    }\n\n    public handleFilterCheck(updates: FilterUpdates[]) {\n        let {searchString} = this.state;\n        updates.forEach((item: FilterUpdates) => {\n            searchString = this.newSearchString(searchString, item[0], item[1]);\n            this.setState({[item[0]]: item[1]} as any);\n        });\n        this.setState({searchString});\n    }\n\n    public renderSearchFilters(): JSX.Element {\n        return (\n            <div\n                id='group-filters'\n                className='group-search-filters'\n                onClick={(e) => {\n                    e.nativeEvent.stopImmediatePropagation();\n                }}\n            >\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsLinked ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsLinked', !this.state.filterIsLinked], ['filterIsUnlinked', false]])}\n                    >\n                        {this.state.filterIsLinked && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isLinked'\n                            defaultMessage='Is Linked'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsUnlinked ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsUnlinked', !this.state.filterIsUnlinked], ['filterIsLinked', false]])}\n                    >\n                        {this.state.filterIsUnlinked && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isUnlinked'\n                            defaultMessage='Is Not Linked'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsConfigured ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsConfigured', !this.state.filterIsConfigured], ['filterIsUnconfigured', false]])}\n                    >\n                        {this.state.filterIsConfigured && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isConfigured'\n                            defaultMessage='Is Configured'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsUnconfigured ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsUnconfigured', !this.state.filterIsUnconfigured], ['filterIsConfigured', false]])}\n                    >\n                        {this.state.filterIsUnconfigured && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isUnconfigured'\n                            defaultMessage='Is Not Configured'\n                        />\n                    </span>\n                </div>\n                <a\n                    onClick={() => {\n                        this.setState({page: 0});\n                        this.searchGroups(0);\n                    }}\n                    className='btn btn-primary search-groups-btn'\n                >\n                    <FormattedMessage\n                        id='search_bar.search'\n                        defaultMessage='Search'\n                    />\n                </a>\n            </div>\n        );\n    }\n\n    resetFiltersAndSearch = () => {\n        const newState: Partial<State> = {\n            showFilters: false,\n            searchString: '',\n            loading: true,\n            page: 0,\n            filterIsConfigured: false,\n            filterIsUnconfigured: false,\n            filterIsLinked: false,\n            filterIsUnlinked: false,\n        };\n        this.setState(newState as any);\n        this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE, {q: ''}).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    public render(): JSX.Element {\n        const startCount = (this.state.page * LDAP_GROUPS_PAGE_SIZE) + 1;\n        let endCount = (this.state.page * LDAP_GROUPS_PAGE_SIZE) + LDAP_GROUPS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div className='groups-list'>\n                <div className='groups-list--global-actions'>\n                    <div className='group-list-search'>\n                        <input\n                            type='text'\n                            placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                            onKeyUp={(e: any) => this.handleGroupSearchKeyUp(e)}\n                            onChange={(e) => this.setState({searchString: e.target.value})}\n                            value={this.state.searchString}\n                        />\n                        <SearchIcon\n                            className='search__icon'\n                            aria-hidden='true'\n                        />\n                        <i\n                            className={'fa fa-times-circle group-filter-action ' + (this.state.searchString.length ? '' : 'hidden')}\n                            onClick={() => this.resetFiltersAndSearch()}\n                        />\n                        <i\n                            className={'fa fa-caret-down group-filter-action ' + (this.state.showFilters ? 'hidden' : '')}\n                            onClick={() => {\n                                document.addEventListener('click', this.closeFilters, {once: true});\n                                this.setState({showFilters: true});\n                            }}\n                        />\n                    </div>\n                    {this.state.showFilters && this.renderSearchFilters()}\n                    <div className='group-list-link-unlink'>\n                        {this.renderSelectionActionButton()}\n                    </div>\n                </div>\n                {this.renderHeader()}\n                <div\n                    id='groups-list--body'\n                    className='groups-list--body'\n                >\n                    {this.renderRows()}\n                </div>\n                {total > 0 &&\n                    <div className='groups-list--footer'>\n                        <div className='counter'>\n                            <FormattedMessage\n                                id='admin.group_settings.groups_list.paginatorCount'\n                                defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                                values={{\n                                    startCount,\n                                    endCount,\n                                    total,\n                                }}\n                            />\n                        </div>\n                        <button\n                            type='button'\n                            className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                            onClick={(e: any) => this.previousPage(e)}\n                            disabled={firstPage}\n                        >\n                            <PreviousIcon/>\n                        </button>\n                        <button\n                            type='button'\n                            className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                            onClick={(e: any) => this.nextPage(e)}\n                            disabled={lastPage}\n                        >\n                            <NextIcon/>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {linkLdapGroup, unlinkLdapGroup, getLdapGroups as fetchLdapGroups} from 'matterfoss-redux/actions/admin';\nimport {getLdapGroups, getLdapGroupsCount} from 'matterfoss-redux/selectors/entities/admin';\n\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport GroupsList from './groups_list';\n\nconst getSortedListOfLdapGroups = createSelector(\n    getLdapGroups,\n    (ldapGroups) => {\n        const groups = Object.values(ldapGroups);\n        groups.sort((a, b) => a.name.localeCompare(b.name));\n        return groups;\n    },\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        groups: getSortedListOfLdapGroups(state),\n        total: getLdapGroupsCount(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, any>({\n            getLdapGroups: fetchLdapGroups,\n            link: linkLdapGroup,\n            unlink: unlinkLdapGroup,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupsList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'utils/i18n';\nimport GroupsList from 'components/admin_console/group_settings/groups_list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {getSiteURL} from 'utils/url';\n\nexport default class GroupSettings extends React.PureComponent {\n    static propTypes = {\n        isDisabled: PropTypes.oneOfType([\n            PropTypes.func,\n            PropTypes.bool,\n        ]),\n    }\n\n    render = () => {\n        const siteURL = getSiteURL();\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header'>\n                    <FormattedMessage\n                        id='admin.group_settings.groupsPageTitle'\n                        defaultMessage='Groups'\n                    />\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <FormattedMarkdownMessage\n                                    id='admin.group_settings.introBanner'\n                                    defaultMessage={'Groups are a way to organize users and apply actions to all users within that group.\\nFor more information on Groups, please see [documentation](!https://www.example.com/default-ad-ldap-groups).'}\n                                />\n                            </div>\n                        </div>\n\n                        <AdminPanel\n                            id='ldap_groups'\n                            titleId={t('admin.group_settings.ldapGroupsTitle')}\n                            titleDefault='AD/LDAP Groups'\n                            subtitleId={t('admin.group_settings.ldapGroupsDescription')}\n                            subtitleDefault={`Connect AD/LDAP and create groups in MatterFOSS. To get started, configure group attributes on the [AD/LDAP] (${siteURL}/admin_console/authentication/ldap) configuration page.`}\n                            subtitleValues={{siteURL}}\n                        >\n                            <GroupsList\n                                readOnly={this.props.isDisabled}\n                            />\n                        </AdminPanel>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport MentionsIcon from 'components/widgets/icons/mentions_icon';\n\nexport default class GroupProfile extends React.PureComponent {\n    static propTypes = {\n        name: PropTypes.string,\n        title: PropTypes.string.isRequired,\n        titleDefault: PropTypes.string.isRequired,\n        customID: PropTypes.string,\n        isDisabled: PropTypes.bool,\n        showAtMention: PropTypes.bool.isRequired,\n        onChange: PropTypes.func,\n    };\n\n    render = () => {\n        const {name, title, titleDefault, customID, isDisabled, showAtMention, onChange} = this.props;\n\n        return (\n            <div\n                className='group-profile form-horizontal'\n                id={customID}\n            >\n                <div className='group-profile-field form-group mb-0'>\n                    <label className='control-label col-sm-4'>\n                        <FormattedMessage\n                            id={title}\n                            defaultMessage={titleDefault}\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='icon-over-input'>\n                            {showAtMention &&\n                                <MentionsIcon\n                                    className='icon icon__mentions'\n                                    aria-hidden='true'\n                                />\n                            }\n                        </div>\n                        <input\n                            type='text'\n                            className='form-control group-at-mention-input'\n                            value={name}\n                            disabled={isDisabled}\n                            onChange={onChange}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    onToggle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    toggled?: boolean;\n    disabled?: boolean;\n    onText?: React.ReactNode;\n    offText?: React.ReactNode;\n    id?: string;\n}\n\nconst Toggle: React.FC<Props> = (props: Props) => {\n    const {onToggle, toggled, disabled, onText, offText, id} = props;\n    return (\n        <button\n            data-testid={`${id}-button`}\n            type='button'\n            onClick={onToggle}\n            className={`btn btn-lg btn-toggle ${toggled && 'active'} ${disabled && 'disabled'}`}\n            aria-pressed={toggled ? 'true' : 'false'}\n            disabled={disabled}\n        >\n            <div className='handle'/>\n            {text(toggled, onText, offText)}\n        </button>\n    );\n};\n\nfunction text(toggled?: boolean, onText?: React.ReactNode, offText?: React.ReactNode): React.ReactNode | null {\n    if ((toggled && !onText) || (!toggled && !offText)) {\n        return null;\n    }\n    return (<div className={`bg-text ${toggled ? 'on' : 'off'}`}>{toggled ? onText : offText}</div>);\n}\n\nexport default Toggle;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Toggle from 'components/toggle';\n\nexport default class LineSwitch extends React.PureComponent {\n    static propTypes = {\n        title: PropTypes.node.isRequired,\n        last: PropTypes.bool,\n        toggled: PropTypes.bool.isRequired,\n        disabled: PropTypes.bool,\n        singleLine: PropTypes.bool,\n        subTitle: PropTypes.node.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        children: PropTypes.node,\n        offText: PropTypes.node,\n        onText: PropTypes.node,\n        id: PropTypes.string,\n    };\n\n    render() {\n        const {title, subTitle, singleLine, toggled, onToggle, children, offText, onText, disabled, last, id} = this.props;\n        return (<div>\n            <div className='line-switch d-flex flex-sm-column flex-md-row align-items-sm-start align-items-center justify-content-md-between'>\n                <label className='line-switch__label'>{title}</label>\n                <div\n                    data-testid={id}\n                    className='line-switch__toggle'\n                >\n                    <Toggle\n                        id={id}\n                        disabled={disabled}\n                        onToggle={onToggle}\n                        toggled={toggled}\n                        onText={onText}\n                        offText={offText}\n                    />\n                </div>\n            </div>\n            <div className='row'>\n                <div className='col-sm-10'>\n                    <div className={`help-text-small help-text-no-padding ${singleLine ? 'help-text-single-line' : ''}`}>{subTitle}</div>\n                </div>\n            </div>\n            {children}\n            {!last && <div className='section-separator'><hr className='separator__hr'/></div>}\n        </div>);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport GroupProfile from 'components/admin_console/group_settings/group_details/group_profile';\n\nimport {t} from 'utils/i18n';\n\nimport LineSwitch from 'components/admin_console/team_channel_settings/line_switch.jsx';\n\nconst GroupSettingsToggle = ({isDefault, allowReference, onToggle, isDisabled}) => (\n    <LineSwitch\n        id={'allowReferenceSwitch'}\n        disabled={isDisabled || isDefault}\n        toggled={allowReference}\n        last={true}\n        onToggle={() => {\n            if (isDefault) {\n                return;\n            }\n            onToggle(!allowReference);\n        }}\n        singleLine={false}\n        title={(\n            <FormattedMessage\n                id='admin.team_settings.team_details.groupDetailsToggle'\n                defaultMessage='Enable Group Mention (Beta)'\n            />\n        )}\n        subTitle={(\n            <FormattedMarkdownMessage\n                id='admin.team_settings.team_details.groupDetailsToggleDescr'\n                defaultMessage='When enabled, this group can be mentioned in other channels and teams. This may result in the group member list being visible to all users.'\n            />\n        )}\n    />);\n\nGroupSettingsToggle.propTypes = {\n    isDefault: PropTypes.bool.isRequired,\n    allowReference: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    isDisabled: PropTypes.bool,\n};\n\nexport const GroupProfileAndSettings = ({displayname, mentionname, allowReference, onToggle, onChange, readOnly}) => (\n    <AdminPanel\n        id='group_profile'\n        titleId={t('admin.group_settings.group_detail.groupProfileTitle')}\n        titleDefault='Group Profile'\n        subtitleId={t('admin.group_settings.group_detail.groupProfileDescription')}\n        subtitleDefault='The name for this group.'\n    >\n        <GroupProfile\n            name={displayname}\n            title={t('admin.group_settings.group_details.group_profile.name')}\n            titleDefault={'Name:'}\n            customID={'groupDisplayName'}\n            isDisabled={true}\n            showAtMention={false}\n        />\n        <div className='group-settings'>\n            <div className='group-settings--body'>\n                <div className='section-separator'><hr className='separator__hr'/></div>\n                <GroupSettingsToggle\n                    isDefault={false}\n                    allowReference={allowReference}\n                    onToggle={onToggle}\n                    isDisabled={readOnly}\n                />\n            </div>\n        </div>\n        {allowReference &&\n            <GroupProfile\n                name={mentionname}\n                title={t('admin.group_settings.group_details.group_mention.name')}\n                titleDefault={'Group Mention:'}\n                customID={'groupMention'}\n                isDisabled={readOnly}\n                showAtMention={true}\n                onChange={onChange}\n            />\n        }\n    </AdminPanel>);\n\nGroupProfileAndSettings.propTypes = {\n    displayname: PropTypes.string.isRequired,\n    mentionname: PropTypes.string,\n    allowReference: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    readOnly: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {isNil} from 'lodash';\nimport classNames from 'classnames';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\n\nexport default class GroupTeamsAndChannelsRow extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        hasChildren: PropTypes.bool,\n        collapsed: PropTypes.bool,\n        onRemoveItem: PropTypes.func.isRequired,\n        onToggleCollapse: PropTypes.func.isRequired,\n        onChangeRoles: PropTypes.func.isRequired,\n        schemeAdmin: PropTypes.bool,\n        isDisabled: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmationModal: false,\n        };\n    }\n\n    removeItem = () => {\n        this.props.onRemoveItem(this.props.id, this.props.type);\n        this.setState({showConfirmationModal: false});\n    }\n\n    changeRoles = () => {\n        this.props.onChangeRoles(this.props.id, this.props.type, !this.props.schemeAdmin);\n    }\n\n    toggleCollapse = () => {\n        this.props.onToggleCollapse(this.props.id);\n    }\n\n    displayAssignedRolesDropdown = () => {\n        const {schemeAdmin, name, isDisabled} = this.props;\n        const channelAdmin = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.channelAdmin'\n                defaultMessage='Channel Admin'\n            />\n        );\n        const teamAdmin = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.teamAdmin'\n                defaultMessage='Team Admin'\n            />\n        );\n        const member = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.member'\n                defaultMessage='Member'\n            />\n        );\n        let dropDown = null;\n        if (!isNil(schemeAdmin)) {\n            let currentRole = member;\n            let roleToBe = (this.props.type.includes('team')) ? teamAdmin : channelAdmin;\n            if (schemeAdmin) {\n                currentRole = (this.props.type.includes('team')) ? teamAdmin : channelAdmin;\n                roleToBe = member;\n            }\n            dropDown = (\n                <div >\n                    <MenuWrapper\n                        isDisabled={isDisabled}\n                    >\n                        <div data-testid={`${name}_current_role`}>\n                            <a>\n                                <span>{currentRole} </span>\n                                <span className='caret'/>\n                            </a>\n                        </div>\n                        <Menu\n                            openLeft={true}\n                            openUp={true}\n                            ariaLabel={localizeMessage('admin.team_channel_settings.group_row.memberRole', 'Member Role')}\n                            id={`${name}_change_role_options`}\n                        >\n                            <Menu.ItemAction\n                                testid={`${name}_role_to_be`}\n                                onClick={this.changeRoles}\n                                text={roleToBe}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            );\n        }\n\n        return dropDown;\n    }\n\n    render = () => {\n        let extraClasses = '';\n        let arrowIcon = null;\n        if (this.props.hasChildren) {\n            arrowIcon = (\n                <i\n                    className={'fa ' + (this.props.collapsed ? 'fa-caret-right' : 'fa-caret-down')}\n                    onClick={this.toggleCollapse}\n                />\n            );\n            extraClasses += ' has-clidren';\n        }\n\n        if (this.props.collapsed) {\n            extraClasses += ' collapsed';\n        }\n\n        let channelIcon = null;\n        let typeText = null;\n        switch (this.props.type) {\n        case 'public-team':\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.publicTeam'\n                    defaultMessage='Team'\n                />\n            );\n            break;\n        case 'private-team':\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.privateTeam'\n                    defaultMessage='Team (Private)'\n                />\n            );\n            break;\n        }\n\n        switch (this.props.type) {\n        case 'public-channel':\n            channelIcon = (\n                <span className='channel-icon'>\n                    <GlobeIcon className='icon icon__globe'/>\n                </span>\n            );\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.publicChannel'\n                    defaultMessage='Channel'\n                />\n            );\n            break;\n        case 'private-channel':\n            channelIcon = (\n                <span className='channel-icon'>\n                    <LockIcon className='icon icon__lock'/>\n                </span>\n            );\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.privateChannel'\n                    defaultMessage='Channel (Private)'\n                />\n            );\n            break;\n        }\n\n        const displayType = this.props.type.split('-')[1];\n\n        return (\n            <tr className={'group-teams-and-channels-row' + extraClasses}>\n                <ConfirmModal\n                    show={this.state.showConfirmationModal}\n                    title={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_header'\n                            defaultMessage='Remove Membership from the {name} {displayType}?'\n                            values={{name: this.props.name, displayType}}\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_body'\n                            defaultMessage='Removing this membership will prevent future users in this group from being added to the {name} {displayType}.'\n                            values={{name: this.props.name, displayType}}\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_button'\n                            defaultMessage='Yes, Remove'\n                        />\n                    }\n                    onConfirm={this.removeItem}\n                    onCancel={() => this.setState({showConfirmationModal: false})}\n                />\n                <td>\n                    <span className='arrow-icon'>\n                        {arrowIcon}\n                    </span>\n                    {channelIcon}\n                    <span className={classNames({'name-no-arrow': isNil(arrowIcon) && isNil(channelIcon)})}>\n                        {this.props.name}\n                    </span>\n                </td>\n                <td className='type'>\n                    {typeText}\n                </td>\n                <td>\n                    {this.displayAssignedRolesDropdown()}\n                </td>\n                <td className='text-right'>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={() => this.setState({showConfirmationModal: true})}\n                        data-testid={`${this.props.name}_groupsyncable_remove`}\n                        disabled={this.props.isDisabled}\n                    >\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove'\n                            defaultMessage='Remove'\n                        />\n                    </button>\n                </td>\n            </tr>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport GroupTeamsAndChannelsRow from 'components/admin_console/group_settings/group_details/group_teams_and_channels_row.jsx';\n\nexport default class GroupTeamsAndChannels extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        teams: PropTypes.arrayOf(PropTypes.object),\n        channels: PropTypes.arrayOf(PropTypes.object),\n        loading: PropTypes.bool.isRequired,\n        onChangeRoles: PropTypes.func.isRequired,\n        onRemoveItem: PropTypes.func.isRequired,\n        isDisabled: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: {},\n        };\n    }\n\n    onToggleCollapse = (id) => {\n        const collapsed = {...this.state.collapsed};\n        collapsed[id] = !collapsed[id];\n        this.setState({collapsed});\n    }\n\n    onRemoveItem = (id, type) => {\n        this.props.onRemoveItem(id, type);\n    }\n\n    onChangeRoles = async (id, type, roleToBe) => {\n        this.props.onChangeRoles(id, type, roleToBe);\n    }\n\n    teamsAndChannelsToEntries = (teams, channels) => {\n        const entries = [];\n\n        const existingTeams = new Set();\n        const teamEntries = [];\n        teams.forEach((team) => {\n            existingTeams.add(team.team_id);\n            teamEntries.push({\n                type: team.team_type === 'O' ? 'public-team' : 'private-team',\n                hasChildren: channels.some((channel) => channel.team_id === team.team_id),\n                name: team.team_display_name,\n                collapsed: this.state.collapsed[team.team_id],\n                id: team.team_id,\n                schemeAdmin: team.scheme_admin,\n            });\n        });\n\n        const channelEntriesByTeam = {};\n        channels.forEach((channel) => {\n            channelEntriesByTeam[channel.team_id] = channelEntriesByTeam[channel.team_id] || [];\n            channelEntriesByTeam[channel.team_id].push({\n                type: channel.channel_type === 'O' ? 'public-channel' : 'private-channel',\n                name: channel.channel_display_name,\n                id: channel.channel_id,\n                schemeAdmin: channel.scheme_admin,\n            });\n\n            if (!existingTeams.has(channel.team_id)) {\n                existingTeams.add(channel.team_id);\n                teamEntries.push({\n                    type: channel.team_type === 'O' ? 'public-team' : 'private-team',\n                    hasChildren: true,\n                    name: channel.team_display_name,\n                    collapsed: this.state.collapsed[channel.team_id],\n                    id: channel.team_id,\n                });\n            }\n        });\n        teamEntries.sort((a, b) => ((a.name && b.name) ? a.name.localeCompare(b.name) : 0));\n        teamEntries.forEach((team) => {\n            entries.push(team);\n            if (team.hasChildren && !team.collapsed) {\n                const teamChannels = channelEntriesByTeam[team.id];\n                teamChannels.sort((a, b) => a.name.localeCompare(b.name));\n                entries.push(...teamChannels);\n            }\n        });\n\n        return entries;\n    }\n\n    render = () => {\n        const entries = this.teamsAndChannelsToEntries(this.props.teams, this.props.channels);\n\n        if (this.props.loading) {\n            return (\n                <div className='group-teams-and-channels'>\n                    <div className='group-teams-and-channels-loading'>\n                        <i className='fa fa-spinner fa-pulse fa-2x'/>\n                    </div>\n                </div>\n            );\n        }\n\n        if (entries.length === 0) {\n            return (\n                <div className='group-teams-and-channels'>\n                    <div className='group-teams-and-channels-empty'>\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels.no-teams-or-channels-speicified'\n                            defaultMessage='No teams or channels specified yet'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='AdminPanel__content'>\n                <table\n                    id='team_and_channel_membership_table'\n                    className='AdminPanel__table group-teams-and-channels'\n                >\n                    <thead className='group-teams-and-channels--header'>\n                        <tr>\n                            <th width='30%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.name'\n                                    defaultMessage='Name'\n                                />\n                            </th>\n                            <th width='25%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.type'\n                                    defaultMessage='Type'\n                                />\n                            </th>\n                            <th width='25%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.assignedRoles'\n                                    defaultMessage='Assigned Roles'\n                                />\n                            </th>\n                            <th width='20%'/>\n                        </tr>\n                    </thead>\n                    <tbody className='group-teams-and-channels--body'>\n                        {entries.map((entry) => (\n                            <GroupTeamsAndChannelsRow\n                                key={entry.id}\n                                onRemoveItem={this.onRemoveItem}\n                                onChangeRoles={this.onChangeRoles}\n                                onToggleCollapse={this.onToggleCollapse}\n                                isDisabled={this.props.isDisabled}\n                                {...entry}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport Avatar from 'components/widgets/users/avatar';\n\nexport default class GroupUsersRow extends React.PureComponent {\n    static propTypes = {\n        username: PropTypes.string.isRequired,\n        displayName: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        userId: PropTypes.string.isRequired,\n        lastPictureUpdate: PropTypes.number.isRequired,\n    };\n\n    render = () => {\n        return (\n            <div className='group-users-row'>\n                <Avatar\n                    username={this.props.username}\n                    url={Client4.getProfilePictureUrl(this.props.userId, this.props.lastPictureUpdate)}\n                    size='lg'\n                />\n                <div className='user-data'>\n                    <div className='name-row'>\n                        <span className='username'>{'@' + this.props.username}</span>\n                        {'-'}\n                        <span className='display-name'>{this.props.displayName}</span>\n                    </div>\n                    <div>\n                        <span className='email-label'>\n                            <FormattedMessage\n                                id='admin.group_settings.group_details.group_users.email'\n                                defaultMessage='Email:'\n                            />\n                        </span>\n                        <span className='email'>{this.props.email}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport GroupUsersRow from 'components/admin_console/group_settings/group_details/group_users_row';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport {getSiteURL} from 'utils/url';\n\nconst GROUP_MEMBERS_PAGE_SIZE = 20;\n\nexport default class GroupUsers extends React.PureComponent {\n    static propTypes = {\n        groupID: PropTypes.string.isRequired,\n        members: PropTypes.arrayOf(PropTypes.object),\n        total: PropTypes.number.isRequired,\n        getMembers: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.props.getMembers(this.props.groupID, 0, GROUP_MEMBERS_PAGE_SIZE).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    previousPage = () => {\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page});\n    }\n\n    nextPage = async () => {\n        const {total, members, groupID, getMembers} = this.props;\n        const page = (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= total ? this.state.page : this.state.page + 1;\n        if (page === this.state.page) {\n            return;\n        }\n\n        const numberOfMembersToLoad = (page + 1) * GROUP_MEMBERS_PAGE_SIZE >= total ? total : (page + 1) * GROUP_MEMBERS_PAGE_SIZE;\n        if (members.length >= numberOfMembersToLoad) {\n            this.setState({page});\n            return;\n        }\n\n        this.setState({page, loading: true});\n        await getMembers(groupID, page, GROUP_MEMBERS_PAGE_SIZE);\n        this.setState({loading: false});\n    }\n\n    renderRows = () => {\n        if (this.props.members.length === 0) {\n            return (\n                <div className='group-users-empty'>\n                    <FormattedMessage\n                        id='admin.group_settings.group_details.group_users.no-users-found'\n                        defaultMessage='No users found'\n                    />\n                </div>\n            );\n        }\n\n        const usersToDisplay = this.props.members.slice((this.state.page * GROUP_MEMBERS_PAGE_SIZE), ((this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE));\n        return usersToDisplay.map((member) => {\n            return (\n                <GroupUsersRow\n                    key={member.id}\n                    username={member.username}\n                    displayName={member.first_name + ' ' + member.last_name}\n                    email={member.email}\n                    userId={member.id}\n                    lastPictureUpdate={member.last_picture_update}\n                />\n            );\n        });\n    }\n\n    renderPagination = () => {\n        if (this.props.members.length === 0) {\n            return (<div className='group-users--footer empty'/>);\n        }\n\n        const startCount = (this.state.page * GROUP_MEMBERS_PAGE_SIZE) + 1;\n        let endCount = (this.state.page * GROUP_MEMBERS_PAGE_SIZE) + GROUP_MEMBERS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n\n        return (\n            <div className='group-users--footer'>\n                <div className='counter'>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.paginatorCount'\n                        defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                        values={{\n                            startCount,\n                            endCount,\n                            total,\n                        }}\n                    />\n                </div>\n                <button\n                    type='button'\n                    className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                    onClick={this.previousPage}\n                    disabled={firstPage}\n                >\n                    <PreviousIcon/>\n                </button>\n                <button\n                    type='button'\n                    className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                    onClick={this.nextPage}\n                    disabled={lastPage}\n                >\n                    <NextIcon/>\n                </button>\n            </div>\n        );\n    }\n\n    render = () => {\n        return (\n            <div className='group-users'>\n                <div className='group-users--header'>\n                    <FormattedMarkdownMessage\n                        id='admin.group_settings.group_profile.group_users.ldapConnector'\n                        defaultMessage={'AD/LDAP Connector is configured to sync and manage this group and its users. [Click here to view]({siteURL}/admin_console/authentication/ldap)'}\n                        values={{siteURL: getSiteURL()}}\n                    />\n                </div>\n                <div className='group-users--body'>\n                    <div className={'group-users-loading ' + (this.state.loading ? 'active' : '')}>\n                        <i className='fa fa-spinner fa-pulse fa-2x'/>\n                    </div>\n                    {this.renderRows()}\n                </div>\n                {this.renderPagination()}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ChannelSearchOpts, ChannelWithTeamData} from 'matterfoss-redux/types/channels';\n\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\nimport Constants from 'utils/constants';\nimport {localizeMessage, compareChannels} from 'utils/utils.jsx';\n\nimport MultiSelect, {Value} from 'components/multiselect/multiselect';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\ntype ChannelWithTeamDataValue = ChannelWithTeamData & Value;\n\ntype Props = {\n    searchTerm: string;\n    onModalDismissed?: () => void;\n    onChannelsSelected?: (channels: ChannelWithTeamData[]) => void;\n    groupID: string;\n    actions: {\n        loadChannels: (page?: number, perPage?: number, notAssociatedToGroup?: string, excludeDefaultChannels?: boolean, excludePolicyConstrained?: boolean) => Promise<{data: ChannelWithTeamData[]}>;\n        setModalSearchTerm: (term: string) => ActionResult;\n        searchAllChannels: (term: string, opts?: ChannelSearchOpts) => Promise<{data: ChannelWithTeamData[]}>;\n    };\n    alreadySelected?: string[];\n    excludePolicyConstrained?: boolean;\n    excludeTeamIds?: string[];\n}\n\ntype State = {\n    values: ChannelWithTeamDataValue[];\n    show: boolean;\n    search: boolean;\n    loadingChannels: boolean;\n    channels: ChannelWithTeamData[];\n}\n\nconst CHANNELS_PER_PAGE = 50;\n\nexport default class ChannelSelectorModal extends React.PureComponent<Props, State> {\n    searchTimeoutId = 0\n    selectedItemRef = React.createRef<HTMLDivElement>()\n\n    state: State = {\n        values: [],\n        show: true,\n        search: false,\n        loadingChannels: true,\n        channels: [],\n    };\n\n    componentDidMount() {\n        this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, false, this.props.excludePolicyConstrained).then((response) => {\n            this.setState({channels: response.data.sort(compareChannels)});\n            this.setChannelsLoadingState(false);\n        });\n    }\n\n    componentDidUpdate(prevProps: Props) { // eslint-disable-line camelcase\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, false, this.props.excludePolicyConstrained).then((response) => {\n                    this.setState({channels: response.data.sort(compareChannels)});\n                    this.setChannelsLoadingState(false);\n                });\n            } else {\n                this.searchTimeoutId = window.setTimeout(\n                    async () => {\n                        this.setChannelsLoadingState(true);\n                        const response = await this.props.actions.searchAllChannels(searchTerm, {not_associated_to_group: this.props.groupID});\n                        this.setState({channels: response.data});\n                        this.setChannelsLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS,\n                );\n            }\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e: any) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        if (this.props.onChannelsSelected) {\n            this.props.onChannelsSelected(this.state.values);\n        }\n        this.handleHide();\n    }\n\n    addValue = (value: ChannelWithTeamDataValue) => {\n        const values = [...this.state.values];\n        if (value?.id && !values.some((v) => v.id === value.id)) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setChannelsLoadingState = (loadingState: boolean) => {\n        this.setState({\n            loadingChannels: loadingState,\n        });\n    }\n\n    handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            this.setChannelsLoadingState(true);\n            this.props.actions.loadChannels(page, CHANNELS_PER_PAGE + 1, this.props.groupID, false, this.props.excludePolicyConstrained).then((response) => {\n                const newState = [...this.state.channels];\n                const stateChannelIDs = this.state.channels.map((stateChannel) => stateChannel.id);\n                response.data.forEach((serverChannel) => {\n                    if (!stateChannelIDs.includes(serverChannel.id)) {\n                        newState.push(serverChannel);\n                    }\n                });\n                this.setState({channels: newState.sort(compareChannels)});\n                this.setChannelsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values: ChannelWithTeamDataValue[]) => {\n        this.setState({values});\n    }\n\n    search = (term: string, multiselectComponent: MultiSelect<ChannelWithTeamDataValue>) => {\n        if (multiselectComponent.state.page !== 0) {\n            multiselectComponent.setState({page: 0});\n        }\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption = (\n        option: ChannelWithTeamDataValue,\n        isSelected: boolean,\n        onAdd: (value: ChannelWithTeamDataValue) => void,\n        onMouseMove: (value: ChannelWithTeamDataValue) => void) => {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    {option.type === Constants.PRIVATE_CHANNEL &&\n                        <i className='icon icon-lock-outline'/>}\n                    {option.type === Constants.OPEN_CHANNEL &&\n                        <i className='icon icon-globe'/>}\n                    <span className='channel-name'>{option.display_name}</span>\n                    <span className='team-name'>{'(' + option.team_display_name + ')'}</span>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props: {data: ChannelWithTeamDataValue}) {\n        return props.data.display_name + ' (' + props.data.team_display_name + ')';\n    }\n\n    render() {\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectChannels'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let options = this.state.channels.map((i): ChannelWithTeamDataValue => ({...i, label: i.display_name, value: i.id}));\n        if (this.props.alreadySelected) {\n            options = options.filter((channel) => this.props.alreadySelected?.indexOf(channel.id) === -1);\n        }\n        if (this.props.excludePolicyConstrained) {\n            options = options.filter((channel) => channel.policy_id === null);\n        }\n        if (this.props.excludeTeamIds) {\n            options = options.filter((channel) => this.props.excludeTeamIds?.indexOf(channel.team_id) === -1);\n        }\n        const values = this.state.values.map((i): ChannelWithTeamDataValue => ({...i, label: i.display_name, value: i.id}));\n\n        return (\n            <Modal\n                dialogClassName={'a11y__modal more-modal more-direct-channels channel-selector-modal'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='channelSelectorModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelSelectorModalLabel'\n                    >\n                        <FormattedMarkdownMessage\n                            id='add_channels_to_scheme.title'\n                            defaultMessage='Add Channels to **Channel Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MultiSelect<ChannelWithTeamDataValue>\n                        key='addChannelsToSchemeKey'\n                        options={options}\n                        optionRenderer={this.renderOption}\n                        selectedItemRef={this.selectedItemRef}\n                        values={values}\n                        valueRenderer={this.renderValue}\n                        perPage={CHANNELS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingChannels}\n                        placeholderText={localizeMessage('multiselect.addChannelsPlaceholder', 'Search and add channels')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getAllChannels as loadChannels, searchAllChannels} from 'matterfoss-redux/actions/channels';\n\nimport {ChannelWithTeamData, ChannelSearchOpts} from 'matterfoss-redux/types/channels';\n\nimport {ActionFunc, ActionResult, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport {GlobalState} from '../../types/store';\n\nimport ChannelSelectorModal from './channel_selector_modal';\n\ntype Actions = {\n    loadChannels: (page?: number, perPage?: number, notAssociatedToGroup?: string, excludeDefaultChannels?: boolean) => Promise<{data: ChannelWithTeamData[]}>;\n    setModalSearchTerm: (term: string) => ActionResult;\n    searchAllChannels: (term: string, opts?: ChannelSearchOpts) => Promise<{data: ChannelWithTeamData[]}>;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        searchTerm: state.views.search.modalSearch,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc|GenericAction>, Actions>({\n            loadChannels,\n            setModalSearchTerm,\n            searchAllChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Groups} from 'matterfoss-redux/constants';\n\nimport {t} from 'utils/i18n';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport FormError from 'components/form_error';\nimport {GroupProfileAndSettings} from 'components/admin_console/group_settings/group_details/group_profile_and_settings';\nimport GroupTeamsAndChannels from 'components/admin_console/group_settings/group_details/group_teams_and_channels';\nimport GroupUsers from 'components/admin_console/group_settings/group_details/group_users';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport SaveChangesPanel from 'components/admin_console/team_channel_settings/save_changes_panel';\n\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport ChannelSelectorModal from 'components/channel_selector_modal';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nexport default class GroupDetails extends React.PureComponent {\n    static propTypes = {\n        groupID: PropTypes.string.isRequired,\n        group: PropTypes.object,\n        groupTeams: PropTypes.arrayOf(PropTypes.object),\n        groupChannels: PropTypes.arrayOf(PropTypes.object),\n        members: PropTypes.arrayOf(PropTypes.object),\n        memberCount: PropTypes.number.isRequired,\n        isDisabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            getGroup: PropTypes.func.isRequired,\n            getMembers: PropTypes.func.isRequired,\n            getGroupStats: PropTypes.func.isRequired,\n            getGroupSyncables: PropTypes.func.isRequired,\n            link: PropTypes.func.isRequired,\n            unlink: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n            patchGroup: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        members: [],\n        groupTeams: [],\n        groupChannels: [],\n        group: {name: '', allow_reference: false},\n        memberCount: 0,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingTeamsAndChannels: true,\n            addTeamOpen: false,\n            addChannelOpen: false,\n            allowReference: Boolean(props.group.allow_reference),\n            groupMentionName: props.group.name,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            hasAllowReferenceChanged: false,\n            hasGroupMentionNameChanged: false,\n            teamsToAdd: [],\n            channelsToAdd: [],\n            itemsToRemove: [],\n            rolesToChange: {},\n            groupTeams: [],\n            groupChannels: [],\n        };\n    }\n\n    componentDidMount() {\n        const {groupID, actions, group} = this.props;\n        actions.getGroup(groupID);\n\n        Promise.all([\n            actions.getGroupSyncables(groupID, Groups.SYNCABLE_TYPE_TEAM),\n            actions.getGroupSyncables(groupID, Groups.SYNCABLE_TYPE_CHANNEL),\n            actions.getGroupStats(groupID),\n        ]).then(() => {\n            this.setState({\n                loadingTeamsAndChannels: false,\n                group,\n                allowReference: Boolean(this.props.group.allow_reference),\n                groupMentionName: this.props.group.name,\n            });\n        });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        /* eslint-disable react/no-did-update-set-state */\n\n        // groupchannels\n        if (prevState.saveNeeded !== this.state.saveNeeded && !this.state.saveNeeded && prevProps.groupChannels === this.props.groupChannels) {\n            this.setState({groupChannels: this.props.groupChannels});\n        }\n        if (prevProps.groupChannels !== this.props.groupChannels) {\n            let gcs;\n            if (this.state.saveNeeded) {\n                const stateIDs = this.state.groupChannels.map((gc) => gc.channel_id);\n                gcs = this.props.groupChannels.filter((gc) => !stateIDs.includes(gc.channel_id)).concat(this.state.groupChannels);\n            } else {\n                gcs = this.props.groupChannels;\n            }\n            this.setState({groupChannels: gcs});\n        }\n\n        // groupteams\n        if (prevState.saveNeeded !== this.state.saveNeeded && !this.state.saveNeeded && prevProps.groupTeams === this.props.groupTeams) {\n            this.setState({groupTeams: this.props.groupTeams});\n        }\n        if (prevProps.groupTeams !== this.props.groupTeams) {\n            let gcs;\n            if (this.state.saveNeeded) {\n                const stateIDs = this.state.groupTeams.map((gc) => gc.team_id);\n                gcs = this.props.groupTeams.filter((gc) => !stateIDs.includes(gc.team_id)).concat(this.state.groupTeams);\n            } else {\n                gcs = this.props.groupTeams;\n            }\n            this.setState({groupTeams: gcs});\n        }\n    }\n\n    openAddChannel = () => {\n        this.setState({addChannelOpen: true});\n    }\n\n    closeAddChannel = () => {\n        this.setState({addChannelOpen: false});\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    addTeams = (teams) => {\n        const {groupID} = this.props;\n        const {groupTeams} = this.state;\n        const teamsToAdd = teams.map((team) => ({\n            group_id: groupID,\n            scheme_admin: false,\n            team_display_name: team.display_name,\n            team_id: team.id,\n            team_type: team.type,\n        }));\n        this.setState({\n            saveNeeded: true,\n            groupTeams: groupTeams.concat(teamsToAdd),\n            teamsToAdd,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addChannels = (channels) => {\n        const {groupID} = this.props;\n        const {groupChannels} = this.state;\n        const channelsToAdd = channels.map((channel) => ({\n            channel_display_name: channel.display_name,\n            channel_id: channel.id,\n            channel_type: channel.type,\n            group_id: groupID,\n            scheme_admin: false,\n            team_display_name: channel.team_display_name,\n            team_id: channel.team_id,\n        }));\n        this.setState({\n            saveNeeded: true,\n            groupChannels: groupChannels.concat(channelsToAdd),\n            channelsToAdd,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    onRemoveTeamOrChannel = (id, type) => {\n        const {groupTeams, groupChannels, itemsToRemove, channelsToAdd, teamsToAdd} = this.state;\n        const newState = {saveNeeded: true, itemsToRemove, serverError: null};\n        const syncableType = this.syncableTypeFromEntryType(type);\n\n        let makeAPIRequest = true;\n        if (syncableType === Groups.SYNCABLE_TYPE_CHANNEL) {\n            newState.channelsToAdd = channelsToAdd.filter((item) => item.channel_id !== id);\n            if (!this.props.groupChannels.some((item) => item.channel_id === id)) {\n                makeAPIRequest = false;\n            }\n        } else if (syncableType === Groups.SYNCABLE_TYPE_TEAM) {\n            newState.teamsToAdd = teamsToAdd.filter((item) => item.team_id !== id);\n            if (!this.props.groupTeams.some((item) => item.team_id === id)) {\n                makeAPIRequest = false;\n            }\n        }\n        if (makeAPIRequest) {\n            itemsToRemove.push({id, type});\n        }\n\n        if (this.syncableTypeFromEntryType(type) === Groups.SYNCABLE_TYPE_TEAM) {\n            newState.groupTeams = groupTeams.filter((gt) => gt.team_id !== id);\n        } else {\n            newState.groupChannels = groupChannels.filter((gc) => gc.channel_id !== id);\n        }\n        this.setState(newState);\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    syncableTypeFromEntryType = (entryType) => {\n        switch (entryType) {\n        case 'public-team':\n        case 'private-team':\n            return Groups.SYNCABLE_TYPE_TEAM;\n        case 'public-channel':\n        case 'private-channel':\n            return Groups.SYNCABLE_TYPE_CHANNEL;\n        default:\n            return null;\n        }\n    }\n\n    onChangeRoles = (id, type, schemeAdmin) => {\n        const {rolesToChange, groupTeams, groupChannels} = this.state;\n        let listToUpdate;\n        let keyName;\n        let stateKey;\n\n        const key = `${id}/${type}`;\n        rolesToChange[key] = schemeAdmin;\n\n        if (this.syncableTypeFromEntryType(type) === Groups.SYNCABLE_TYPE_TEAM) {\n            listToUpdate = groupTeams;\n            keyName = 'team_id';\n            stateKey = 'groupTeams';\n        } else {\n            listToUpdate = groupChannels;\n            keyName = 'channel_id';\n            stateKey = 'groupChannels';\n        }\n\n        const updatedItems = listToUpdate.map((item) => ({...item})); // clone list of objects\n        updatedItems.find((item) => item[keyName] === id).scheme_admin = schemeAdmin;\n\n        this.setState({saveNeeded: true, rolesToChange, [stateKey]: updatedItems});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    onMentionToggle = (allowReference) => {\n        const {group} = this.props;\n        const originalAllowReference = group.allow_reference;\n        const saveNeeded = true;\n        let {groupMentionName} = this.state;\n\n        if (!originalAllowReference && allowReference && !groupMentionName) {\n            groupMentionName = group.display_name.toLowerCase().replace(/\\s/g, '-');\n        }\n\n        this.setState({\n            saveNeeded,\n            allowReference,\n            groupMentionName,\n            hasAllowReferenceChanged: allowReference !== originalAllowReference},\n        );\n        this.props.actions.setNavigationBlocked(saveNeeded);\n    }\n\n    onMentionChange = (e) => {\n        const {group} = this.props;\n        const originalGroupMentionName = group.name;\n        const groupMentionName = e.target.value;\n        const saveNeeded = true;\n\n        this.setState({\n            saveNeeded,\n            groupMentionName,\n            hasGroupMentionNameChanged: groupMentionName !== originalGroupMentionName,\n        });\n        this.props.actions.setNavigationBlocked(saveNeeded);\n    }\n\n    handleSubmit = async () => {\n        this.setState({saving: true});\n\n        const patchGroupSuccessful = await this.handlePatchGroup();\n        const addsSuccessful = await this.handleAddedTeamsAndChannels();\n        const removesSuccessful = await this.handleRemovedTeamsAndChannels();\n        const rolesSuccessful = await this.handleRolesToUpdate();\n\n        await Promise.all([\n            this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_CHANNEL),\n            this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_TEAM),\n        ]);\n\n        const allSuccuessful = patchGroupSuccessful && addsSuccessful && removesSuccessful && rolesSuccessful;\n\n        this.setState({saveNeeded: !allSuccuessful, saving: false});\n\n        this.props.actions.setNavigationBlocked(!allSuccuessful);\n    }\n\n    roleChangeKey = (groupTeamOrChannel) => {\n        let fieldKey;\n        if (this.syncableTypeFromEntryType(groupTeamOrChannel.type) === Groups.SYNCABLE_TYPE_TEAM) {\n            fieldKey = 'team_id';\n        } else {\n            fieldKey = 'channel_id';\n        }\n        return `${groupTeamOrChannel[fieldKey]}/${groupTeamOrChannel.type}`;\n    };\n\n    handlePatchGroup = async () => {\n        const {allowReference, groupMentionName, hasAllowReferenceChanged, hasGroupMentionNameChanged} = this.state;\n        let serverError = null;\n\n        const GroupNameIsTakenError = (\n            <FormattedMessage\n                id='admin.group_settings.group_detail.duplicateMentionNameError'\n                defaultMessage='Group mention is already taken.'\n            />\n        );\n\n        if (!groupMentionName && allowReference) {\n            serverError = (\n                <FormattedMessage\n                    id='admin.group_settings.need_groupname'\n                    defaultMessage='You must specify a group mention.'\n                />\n            );\n            this.setState({allowReference, serverError});\n            return false;\n        } else if (hasAllowReferenceChanged || hasGroupMentionNameChanged) {\n            let lcGroupMentionName;\n            if (allowReference) {\n                lcGroupMentionName = groupMentionName.toLowerCase();\n            }\n            const result = await this.props.actions.patchGroup(this.props.groupID, {allow_reference: allowReference, name: lcGroupMentionName});\n            if (result.error) {\n                if (result.error.server_error_id === 'store.sql_group.unique_constraint') {\n                    serverError = GroupNameIsTakenError;\n                } else if (result.error.server_error_id === 'model.group.name.invalid_chars.app_error') {\n                    serverError = (\n                        <FormattedMessage\n                            id='admin.group_settings.group_detail.invalidOrReservedMentionNameError'\n                            defaultMessage='Only letters (a-z), numbers(0-9), periods, dashes and underscores are allowed.'\n                        />\n                    );\n                } else if (result.error.server_error_id === 'api.ldap_groups.existing_reserved_name_error' ||\n                    result.error.server_error_id === 'api.ldap_groups.existing_user_name_error' ||\n                    result.error.server_error_id === 'api.ldap_groups.existing_group_name_error') {\n                    serverError = GroupNameIsTakenError;\n                } else if (result.error.server_error_id === 'model.group.name.invalid_length.app_error') {\n                    serverError = (\n                        <FormattedMessage\n                            id='admin.group_settings.group_detail.invalid_length'\n                            defaultMessage='Name must be 1 to 64 lowercase alphanumeric characters.'\n                        />\n                    );\n                } else {\n                    serverError = result.error?.message;\n                }\n            }\n            this.setState({\n                allowReference,\n                groupMentionName: lcGroupMentionName,\n                serverError,\n                hasAllowReferenceChanged: result.error ? hasAllowReferenceChanged : false,\n                hasGroupMentionNameChanged: result.error ? hasGroupMentionNameChanged : false,\n            });\n        }\n\n        return !serverError;\n    };\n\n    handleRolesToUpdate = async () => {\n        const {rolesToChange} = this.state;\n        const promises = Object.entries(rolesToChange).map(([key, value]) => {\n            const [syncableID, type] = key.split('/');\n            return this.props.actions.patchGroupSyncable(this.props.groupID, syncableID, this.syncableTypeFromEntryType(type), {scheme_admin: value});\n        });\n        const results = await Promise.all(promises);\n        const errors = results.map((r) => r.error?.message).filter((item) => item);\n        if (errors.length) {\n            this.setState({serverError: <>{errors[0]}</>});\n            return false;\n        }\n        this.setState({rolesToChange: {}});\n        return true;\n    }\n\n    handleAddedTeamsAndChannels = async () => {\n        const {teamsToAdd, channelsToAdd, rolesToChange} = this.state;\n        const promises = [];\n        if (teamsToAdd.length) {\n            teamsToAdd.forEach((groupTeam) => {\n                const roleChangeKey = this.roleChangeKey(groupTeam);\n                groupTeam.scheme_admin = rolesToChange[roleChangeKey];\n                delete rolesToChange[roleChangeKey]; // delete the key because it won't need a patch, it's being handled by the link request.\n                promises.push(this.props.actions.link(this.props.groupID, groupTeam.team_id, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true, scheme_admin: groupTeam.scheme_admin}));\n            });\n        }\n        if (channelsToAdd.length) {\n            channelsToAdd.forEach((groupChannel) => {\n                const roleChangeKey = this.roleChangeKey(groupChannel);\n                groupChannel.scheme_admin = rolesToChange[roleChangeKey];\n                delete rolesToChange[roleChangeKey]; // delete the key because it won't need a patch, it's being handled by the link request.\n                promises.push(this.props.actions.link(this.props.groupID, groupChannel.channel_id, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true, scheme_admin: groupChannel.scheme_admin}));\n            });\n        }\n        const results = await Promise.all(promises);\n        const errors = results.map((r) => r.error?.message).filter((item) => item);\n        if (errors.length) {\n            this.setState({serverError: <>{errors[0]}</>});\n            return false;\n        }\n        this.setState({teamsToAdd: [], channelsToAdd: []});\n        return true;\n    }\n\n    handleRemovedTeamsAndChannels = async () => {\n        const {itemsToRemove, rolesToChange} = this.state;\n        const promises = [];\n        if (itemsToRemove.length) {\n            itemsToRemove.forEach((item) => {\n                delete rolesToChange[this.roleChangeKey(item)]; // no need to update the roles of group-teams that were unlinked.\n                promises.push(this.props.actions.unlink(this.props.groupID, item.id, this.syncableTypeFromEntryType(item.type)));\n            });\n        }\n        const results = await Promise.all(promises);\n        const errors = results.map((r) => r.error?.message).filter((item) => item);\n        if (errors.length) {\n            this.setState({serverError: <>{errors[0]}</>});\n            return false;\n        }\n        this.setState({itemsToRemove: []});\n        return true;\n    }\n\n    render = () => {\n        const {group, members, memberCount, isDisabled} = this.props;\n        const {groupTeams, groupChannels} = this.state;\n        const {allowReference, groupMentionName, saving, saveNeeded, serverError} = this.state;\n\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/groups'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.group_settings.group_detail.group_configuration'\n                            defaultMessage='Group Configuration'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='banner info'>\n                            <div className='banner__content'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_detail.introBanner'\n                                    defaultMessage='Configure default teams and channels and view users belonging to this group.'\n                                />\n                            </div>\n                        </div>\n\n                        <GroupProfileAndSettings\n                            displayname={group.display_name || ''}\n                            mentionname={groupMentionName}\n                            allowReference={allowReference}\n                            onToggle={this.onMentionToggle}\n                            onChange={this.onMentionChange}\n                            readOnly={isDisabled}\n                        />\n\n                        <AdminPanel\n                            id='group_teams_and_channels'\n                            titleId={t('admin.group_settings.group_detail.groupTeamsAndChannelsTitle')}\n                            titleDefault='Team and Channel Membership'\n                            subtitleId={t('admin.group_settings.group_detail.groupTeamsAndChannelsDescription')}\n                            subtitleDefault='Set default teams and channels for group members. Teams added will include default channels, town-square, and off-topic. Adding a channel without setting the team will add the implied team to the listing below.'\n                            button={(\n                                <div className='group-profile-add-menu'>\n                                    <MenuWrapper\n                                        isDisabled={isDisabled}\n                                    >\n                                        <button\n                                            type='button'\n                                            id='add_team_or_channel'\n                                            className='btn btn-primary'\n                                        >\n                                            <FormattedMessage\n                                                id='admin.group_settings.group_details.add_team_or_channel'\n                                                defaultMessage='Add Team or Channel'\n                                            />\n                                            <i className={'fa fa-caret-down'}/>\n                                        </button>\n                                        <Menu ariaLabel={localizeMessage('admin.group_settings.group_details.menuAriaLabel', 'Add Team or Channel Menu')}>\n                                            <Menu.ItemAction\n                                                id='add_team'\n                                                onClick={this.openAddTeam}\n                                                text={localizeMessage('admin.group_settings.group_details.add_team', 'Add Team')}\n                                            />\n                                            <Menu.ItemAction\n                                                id='add_channel'\n                                                onClick={this.openAddChannel}\n                                                text={localizeMessage('admin.group_settings.group_details.add_channel', 'Add Channel')}\n                                            />\n                                        </Menu>\n                                    </MenuWrapper>\n                                </div>\n                            )}\n                        >\n                            <GroupTeamsAndChannels\n                                id={this.props.groupID}\n                                teams={groupTeams}\n                                channels={groupChannels}\n                                loading={this.state.loadingTeamsAndChannels}\n                                getGroupSyncables={this.props.actions.getGroupSyncables}\n                                unlink={this.props.actions.unlink}\n                                onChangeRoles={this.onChangeRoles}\n                                onRemoveItem={this.onRemoveTeamOrChannel}\n                                isDisabled={isDisabled}\n                            />\n                        </AdminPanel>\n                        {this.state.addTeamOpen &&\n                            <TeamSelectorModal\n                                onModalDismissed={this.closeAddTeam}\n                                onTeamsSelected={this.addTeams}\n                                alreadySelected={this.props.groupTeams.map((team) => team.team_id)}\n                            />\n                        }\n                        {this.state.addChannelOpen &&\n                            <ChannelSelectorModal\n                                onModalDismissed={this.closeAddChannel}\n                                onChannelsSelected={this.addChannels}\n                                alreadySelected={this.props.groupChannels.map((channel) => channel.channel_id)}\n                                groupID={this.props.groupID}\n                            />\n                        }\n\n                        <AdminPanel\n                            id='group_users'\n                            titleId={t('admin.group_settings.group_detail.groupUsersTitle')}\n                            titleDefault='Users'\n                            subtitleId={t('admin.group_settings.group_detail.groupUsersDescription')}\n                            subtitleDefault='Listing of users in MatterFOSS associated with this group.'\n                        >\n                            <GroupUsers\n                                members={members}\n                                total={memberCount}\n                                groupID={this.props.groupID}\n                                getMembers={this.props.actions.getMembers}\n                            />\n                        </AdminPanel>\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    cancelLink='/admin_console/user_management/groups'\n                    saveNeeded={saveNeeded}\n                    onClick={this.handleSubmit}\n                    serverError={serverError &&\n                        <FormError\n                            iconClassName={'fa-exclamation-triangle'}\n                            textClassName={'has-error'}\n                            error={serverError}\n                        />\n                    }\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    linkGroupSyncable,\n    unlinkGroupSyncable,\n    getGroup as fetchGroup,\n    getGroupStats,\n    getGroupSyncables as fetchGroupSyncables,\n    patchGroupSyncable,\n    patchGroup,\n} from 'matterfoss-redux/actions/groups';\nimport {getProfilesInGroup} from 'matterfoss-redux/actions/users';\nimport {getGroup, getGroupTeams, getGroupChannels, getGroupMemberCount} from 'matterfoss-redux/selectors/entities/groups';\nimport {getProfilesInGroup as selectProfilesInGroup} from 'matterfoss-redux/selectors/entities/users';\n\nimport {setNavigationBlocked} from 'actions/admin_actions';\n\nimport GroupDetails from './group_details.jsx';\n\nfunction mapStateToProps(state, props) {\n    const groupID = props.match.params.group_id;\n    const group = getGroup(state, groupID);\n    const groupTeams = getGroupTeams(state, groupID);\n    const groupChannels = getGroupChannels(state, groupID);\n    const members = selectProfilesInGroup(state, groupID);\n    const memberCount = getGroupMemberCount(state, groupID);\n\n    return {\n        groupID,\n        group,\n        groupTeams,\n        groupChannels,\n        members,\n        memberCount,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            setNavigationBlocked,\n            getGroup: fetchGroup,\n            getMembers: getProfilesInGroup,\n            getGroupStats,\n            getGroupSyncables: fetchGroupSyncables,\n            link: linkGroupSyncable,\n            unlink: unlinkGroupSyncable,\n            patchGroupSyncable,\n            patchGroup,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nexport const PAGE_SIZE = 10;\n\nexport default class AbstractList extends React.PureComponent {\n    static propTypes = {\n        data: PropTypes.arrayOf(PropTypes.object),\n        onPageChangedCallback: PropTypes.func,\n        total: PropTypes.number.isRequired,\n        header: PropTypes.node.isRequired,\n        renderRow: PropTypes.func.isRequired,\n        emptyListTextId: PropTypes.string.isRequired,\n        emptyListTextDefaultMessage: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getData: PropTypes.func.isRequired,\n            removeGroup: PropTypes.func,\n        }).isRequired,\n        noPadding: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        data: [],\n        noPadding: false,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.performSearch(this.state.page);\n    }\n\n    previousPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    nextPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    renderHeader = () => {\n        if (this.props.data.length > 0) {\n            return this.props.header;\n        }\n        return null;\n    }\n\n    renderRows = () => {\n        if (this.state.loading) {\n            return (\n                <div className='groups-list-loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.data.length === 0) {\n            return (\n                <div className='groups-list-empty'>\n                    <FormattedMessage\n                        id={this.props.emptyListTextId}\n                        defaultMessage={this.props.emptyListTextDefaultMessage}\n                    />\n                </div>\n            );\n        }\n        const offset = this.state.page * PAGE_SIZE;\n        return this.props.data.slice(offset, offset + PAGE_SIZE).map(this.props.renderRow);\n    }\n\n    performSearch = (page) => {\n        this.setState({loading: true});\n\n        this.props.actions.getData(page, PAGE_SIZE, '', false, true).then((response) => {\n            if (this.props.onPageChangedCallback) {\n                this.props.onPageChangedCallback(this.getPaging(), response);\n            }\n            this.setState({loading: false});\n        });\n    }\n\n    getPaging() {\n        const startCount = (this.state.page * PAGE_SIZE) + 1;\n        let endCount = (this.state.page * PAGE_SIZE) + PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        return {startCount, endCount, total};\n    }\n\n    render = () => {\n        const {startCount, endCount, total} = this.getPaging();\n        const {noPadding} = this.props;\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div\n                className={classNames(\n                    'groups-list',\n                    'groups-list-no-padding',\n                    {\n                        'groups-list-less-padding': noPadding,\n                    },\n                )}\n            >\n                {this.renderHeader()}\n                <div\n                    id='groups-list--body'\n                    className='groups-list--body'\n                >\n                    {this.renderRows()}\n                </div>\n                {total > 0 && <div className='groups-list--footer'>\n                    <div className='counter'>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.list.paginatorCount'\n                            defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                            values={{\n                                startCount,\n                                endCount,\n                                total,\n                            }}\n                        />\n                    </div>\n                    <button\n                        type='button'\n                        className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                        onClick={firstPage ? null : this.previousPage}\n                        disabled={firstPage}\n                    >\n                        <PreviousIcon/>\n                    </button>\n                    <button\n                        type='button'\n                        className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                        onClick={lastPage ? null : this.nextPage}\n                        disabled={lastPage}\n                        data-testid='page-link-next'\n                    >\n                        <NextIcon/>\n                    </button>\n                </div>}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {debounce} from 'matterfoss-redux/actions/helpers';\n\nimport {Team, TeamSearchOpts, TeamsWithCount} from 'matterfoss-redux/types/teams';\n\nimport {browserHistory} from 'utils/browser_history';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport DataGrid, {Column} from 'components/admin_console/data_grid/data_grid';\nimport {PAGE_SIZE} from 'components/admin_console/team_channel_settings/abstract_list.jsx';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport './team_list.scss';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\n\nconst ROW_HEIGHT = 80;\n\ntype Props = {\n    data: Team[];\n    total: number;\n    actions: {\n        searchTeams(term: string, opts: TeamSearchOpts): Promise<{data: TeamsWithCount}>;\n        getData(page: number, size: number): void;\n    };\n}\n\ntype State = {\n    loading: boolean;\n    term: string;\n    teams: Team[];\n    page: number;\n    total: number;\n    searchErrored: boolean;\n    filters: TeamSearchOpts;\n}\nexport default class TeamList extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false,\n            term: '',\n            teams: [],\n            page: 0,\n            total: 0,\n            searchErrored: false,\n            filters: {},\n        };\n    }\n\n    componentDidMount() {\n        this.loadPage();\n    }\n\n    isSearching = (term: string, filters: TeamSearchOpts) => {\n        return (term.length + Object.keys(filters).length) > 0;\n    }\n\n    getPaginationProps = () => {\n        const {page, term, filters} = this.state;\n        const total = this.isSearching(term, filters) ? this.state.total : this.props.total;\n        const startCount = (page * PAGE_SIZE) + 1;\n        let endCount = (page + 1) * PAGE_SIZE;\n        endCount = endCount > total ? total : endCount;\n        return {startCount, endCount, total};\n    }\n\n    loadPage = async (page = 0, term = '', filters = {}) => {\n        this.setState({loading: true, term, filters});\n\n        if (this.isSearching(term, filters)) {\n            if (page > 0) {\n                this.searchTeams(page, term, filters);\n            } else {\n                this.searchTeamsDebounced(page, term, filters);\n            }\n            return;\n        }\n\n        await this.props.actions.getData(page, PAGE_SIZE);\n        this.setState({page, loading: false});\n    }\n\n    searchTeams = async (page = 0, term = '', filters = {}) => {\n        let teams: Team[] = [];\n        let total = 0;\n        let searchErrored = true;\n        const response = await this.props.actions.searchTeams(term, {page, per_page: PAGE_SIZE, ...filters});\n        if (response?.data) {\n            teams = page > 0 ? this.state.teams.concat(response.data.teams) : response.data.teams;\n            total = response.data.total_count;\n            searchErrored = false;\n        }\n        this.setState({page, loading: false, teams, total, searchErrored});\n    }\n\n    searchTeamsDebounced = debounce((page, term, filters = {}) => this.searchTeams(page, term, filters), 300, false, () => {});\n\n    nextPage = () => {\n        this.loadPage(this.state.page + 1, this.state.term, this.state.filters);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    onSearch = (term = '') => {\n        this.loadPage(0, term, this.state.filters);\n    };\n\n    onFilter = ({management}: FilterOptions) => {\n        const filters: TeamSearchOpts = {};\n\n        const {\n            group_constrained: {value: groupConstrained},\n            allow_open_invite: {value: allowOpenInvite},\n            invite_only: {value: inviteOnly},\n        } = management.values;\n\n        const filtersList = [allowOpenInvite, inviteOnly, groupConstrained];\n\n        // If all filters or no filters do nothing\n        if (filtersList.includes(false) && filtersList.includes(true)) {\n            // If requesting private and public teams then just exclude all group constrained teams in the results\n            if (allowOpenInvite && inviteOnly) {\n                filters.group_constrained = false;\n            } else {\n                // Since the API returns different results if a filter is set to false vs not set at all\n                // we only set filters when needed and if not leave the filter option blank\n                if (groupConstrained) {\n                    filters.group_constrained = true;\n                }\n\n                if (allowOpenInvite || inviteOnly) {\n                    filters.allow_open_invite = Boolean(allowOpenInvite);\n                }\n            }\n        }\n\n        this.loadPage(0, this.state.term, filters);\n    }\n\n    getColumns = (): Column[] => {\n        const name = (\n            <FormattedMessage\n                id='admin.team_settings.team_list.nameHeader'\n                defaultMessage='Name'\n            />\n        );\n        const management = (\n            <FormattedMessage\n                id='admin.team_settings.team_list.mappingHeader'\n                defaultMessage='Management'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                width: 4,\n                fixed: true,\n            },\n            {\n                name: management,\n                field: 'management',\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'edit',\n                textAlign: 'right',\n                fixed: true,\n            },\n        ];\n    }\n\n    renderManagementMethodText = (team: Team) => {\n        if (team.group_constrained) {\n            return (\n                <FormattedMessage\n                    id='admin.team_settings.team_row.managementMethod.groupSync'\n                    defaultMessage='Group Sync'\n                />\n            );\n        } else if (team.allow_open_invite) {\n            return (\n                <FormattedMessage\n                    id='admin.team_settings.team_row.managementMethod.anyoneCanJoin'\n                    defaultMessage='Anyone Can Join'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='admin.team_settings.team_row.managementMethod.inviteOnly'\n                defaultMessage='Invite Only'\n            />\n        );\n    }\n\n    getRows = () => {\n        const {data} = this.props;\n        const {term, teams, filters} = this.state;\n        const {startCount, endCount} = this.getPaginationProps();\n        let teamsToDisplay = this.isSearching(term, filters) ? teams : data;\n        teamsToDisplay = teamsToDisplay.slice(startCount - 1, endCount);\n\n        return teamsToDisplay.map((team) => {\n            return {\n                cells: {\n                    id: team.id,\n                    name: (\n                        <div className='TeamList_nameColumn'>\n                            <div className='TeamList__lowerOpacity'>\n                                <TeamIcon\n                                    size='sm'\n                                    url={Utils.imageURLForTeam(team)}\n                                    content={team.display_name}\n                                />\n                            </div>\n                            <div className='TeamList_nameText'>\n                                <b data-testid='team-display-name'>\n                                    {team.display_name}\n                                </b>\n                                {team.description && (\n                                    <div className='TeamList_descriptionText'>\n                                        {team.description}\n                                    </div>\n                                )}\n                            </div>\n                        </div>\n                    ),\n                    management: (\n                        <span\n                            data-testid={`${team.name}Management`}\n                            className='TeamList_managementText'\n                        >\n                            {this.renderManagementMethodText(team)}\n                        </span>\n                    ),\n                    edit: (\n                        <span\n                            data-testid={`${team.display_name}edit`}\n                            className='group-actions TeamList_editText'\n                        >\n                            <Link to={`/admin_console/user_management/teams/${team.id}`}>\n                                <FormattedMessage\n                                    id='admin.team_settings.team_row.configure'\n                                    defaultMessage='Edit'\n                                />\n                            </Link>\n                        </span>\n                    ),\n                },\n                onClick: () => browserHistory.push(`/admin_console/user_management/teams/${team.id}`),\n            };\n        });\n    }\n\n    render() {\n        const {term, searchErrored} = this.state;\n        const rows = this.getRows();\n        const columns = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n\n        let placeholderEmpty = (\n            <FormattedMessage\n                id='admin.team_settings.team_list.no_teams_found'\n                defaultMessage='No teams found'\n            />\n        );\n\n        if (searchErrored) {\n            placeholderEmpty = (\n                <FormattedMessage\n                    id='admin.team_settings.team_list.search_teams_errored'\n                    defaultMessage='Something went wrong. Try again'\n                />\n            );\n        }\n\n        const filterOptions = {\n            management: {\n                name: (\n                    <FormattedMessage\n                        id='admin.team_settings.team_list.mappingHeader'\n                        defaultMessage='Management'\n                    />\n                ),\n                values: {\n                    allow_open_invite: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.team_settings.team_row.managementMethod.anyoneCanJoin'\n                                defaultMessage='Anyone Can Join'\n                            />\n                        ),\n                        value: false,\n                    },\n                    invite_only: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.team_settings.team_row.managementMethod.inviteOnly'\n                                defaultMessage='Invite Only'\n                            />\n                        ),\n                        value: false,\n                    },\n                    group_constrained: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.team_settings.team_row.managementMethod.groupSync'\n                                defaultMessage='Group Sync'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: ['allow_open_invite', 'invite_only', 'group_constrained'],\n            },\n        };\n\n        const filterProps = {\n            options: filterOptions,\n            keys: ['management'],\n            onFilter: this.onFilter,\n        };\n\n        const rowsContainerStyles = {\n            minHeight: `${rows.length * ROW_HEIGHT}px`,\n        };\n\n        return (\n            <div className='TeamsList'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    loading={this.state.loading}\n                    page={this.state.page}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    startCount={startCount}\n                    endCount={endCount}\n                    total={total}\n                    onSearch={this.onSearch}\n                    term={term}\n                    placeholderEmpty={placeholderEmpty}\n                    rowsContainerStyles={rowsContainerStyles}\n                    filterProps={filterProps}\n                />\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getTeams as fetchTeams, searchTeams} from 'matterfoss-redux/actions/teams';\nimport {getTeams} from 'matterfoss-redux/selectors/entities/teams';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {TeamSearchOpts, TeamsWithCount} from 'matterfoss-redux/types/teams';\n\nimport {GlobalState} from 'types/store';\n\nimport TeamList from './team_list';\n\ntype Actions = {\n    searchTeams(term: string, opts: TeamSearchOpts): Promise<{data: TeamsWithCount}>;\n    getData(page: number, size: number): void;\n}\nconst getSortedListOfTeams = createSelector(\n    getTeams,\n    (teams) => Object.values(teams).sort((a, b) => a.display_name.localeCompare(b.display_name)),\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        data: getSortedListOfTeams(state),\n        total: state.entities.teams.totalCount || 0,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getData: (page: number, pageSize: number) => fetchTeams(page, pageSize, true),\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport TeamList from 'components/admin_console/team_channel_settings/team/list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\ntype Props = {\n    siteName: string;\n};\n\nexport function TeamsSettings(props: Props) {\n    return (\n        <div className='wrapper--fixed'>\n            <div className='admin-console__header'>\n                <FormattedMessage\n                    id='admin.team_settings.groupsPageTitle'\n                    defaultMessage='{siteName} Teams'\n                    values={{siteName: props.siteName}}\n                />\n            </div>\n\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <AdminPanel\n                        id='teams'\n                        titleId={t('admin.team_settings.title')}\n                        titleDefault='Teams'\n                        subtitleId={t('admin.team_settings.description')}\n                        subtitleDefault='Manage team settings.'\n                    >\n                        <TeamList/>\n                    </AdminPanel>\n                </div>\n            </div>\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport {TeamsSettings} from './team_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName as string;\n\n    return {\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(TeamsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport ConfirmModal from 'components/confirm_modal';\n\nexport default class RemoveConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Indicates if the message is for removal from channel or team\n         */\n        inChannel: PropTypes.bool.isRequired,\n\n        /*\n         * Number of users to be removed\n         */\n        amount: PropTypes.number.isRequired,\n\n    }\n\n    render() {\n        const {amount, inChannel} = this.props;\n        const title = (\n            <FormattedMessage\n                id='admin.team_channel_settings.removeConfirmModal.title'\n                defaultMessage='Save and remove {amount, number} {amount, plural, one {user} other {users}}?'\n                values={{amount}}\n            />\n        );\n\n        const messageId = inChannel ? t('admin.team_channel_settings.removeConfirmModal.messageChannel') : t('admin.team_channel_settings.removeConfirmModal.messageTeam');\n        const messageChannel = '{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this channel. Are you sure you wish to remove {amount, plural, one {this user} other {these users}}?';\n        const messageTeam = '{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this team. Are you sure you wish to remove {amount, plural, one {this user} other {these users}}?';\n\n        const message = (\n            <FormattedMessage\n                id={messageId}\n                defaultMessage={inChannel ? messageChannel : messageTeam}\n                values={{amount}}\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button = (\n            <FormattedMessage\n                id='admin.team_channel_settings.removeConfirmModal.remove'\n                defaultMessage='Save and remove {amount, plural, one {user} other {users}}'\n                values={{amount}}\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Group} from 'matterfoss-redux/types/groups';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Avatar from 'components/widgets/users/avatar';\n\ntype ProfileWithGroups = Partial<UserProfile & {\n    groups: Partial<Group>[];\n}>;\n\ninterface AdminGroupUsersRowProps {\n    displayName: string;\n    user: ProfileWithGroups;\n    lastPictureUpdate: number;\n}\nexport default class AdminGroupUsersRow extends React.PureComponent<AdminGroupUsersRowProps, {}> {\n    renderRolesColumn = (member: ProfileWithGroups) => {\n        return member.roles!.split(' ').map((role) =>\n            Utils.localizeMessage('admin.permissions.roles.' + role + '.name', role),\n        ).join(', ');\n    };\n\n    renderGroupsColumn = (member: ProfileWithGroups) => {\n        const groups = member.groups || [];\n        if ((groups).length === 1) {\n            return groups[0].display_name;\n        }\n        return (\n            <OverlayTrigger\n                placement='top'\n                overlay={<Tooltip id='groupsTooltip'>{groups.map((g) => g.display_name).join(', ')}</Tooltip>}\n            >\n                <a href='#'>\n                    <FormattedMessage\n                        id={t('team_channel_settings.group.group_user_row.numberOfGroups')}\n                        defaultMessage={'{amount, number} {amount, plural, one {Group} other {Groups}}'}\n                        values={{amount: groups.length}}\n                    />\n                </a>\n            </OverlayTrigger>\n        );\n    };\n\n    render = () => {\n        const {user, lastPictureUpdate, displayName} = this.props;\n        return (\n            <div className='group'>\n                <div\n                    className='group-row roc'\n                    style={{padding: '30px 0px'}}\n                >\n                    <div className='group-name col-sm-8'>\n                        <div className='col-sm-2'>\n                            <Avatar\n                                username={user.username}\n                                url={Client4.getProfilePictureUrl(user.id!, lastPictureUpdate)}\n                                size='lg'\n                            />\n                        </div>\n                        <div className='col-sm-10'>\n                            <div className='row'>\n                                {/* eslint-disable react/jsx-no-literals */}\n                                <b>{'@' + user.username}&nbsp;</b>\n                                {'-'}&nbsp;{displayName}\n                            </div>\n                            <div className='row email-group-row'>{user.email}</div>\n                        </div>\n                    </div>\n                    <span className='col-sm-2 group-user-removal-column group-description'>{this.renderRolesColumn(user)}</span>\n                    <span className='col-sm-2 group-user-removal-column group-description group-description-link'>\n                        {this.renderGroupsColumn(user)}\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport GroupUsersRow from './group_users_row';\n\nconst GROUP_MEMBERS_PAGE_SIZE = 10;\n\ninterface AdminGroupUsersProps {\n    members: Partial<UserProfile>[];\n    total: number;\n}\n\ninterface AdminGroupUsersState {\n    page: number;\n}\n\nexport default class AdminGroupUsers extends React.PureComponent<AdminGroupUsersProps, AdminGroupUsersState> {\n    state: AdminGroupUsersState = {\n        page: 0,\n    }\n\n    previousPage = async () => {\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page});\n    };\n\n    nextPage = async () => {\n        const page = (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= this.props.total ? this.state.page : this.state.page + 1;\n        this.setState({page});\n    };\n\n    renderRow = (member: Partial<UserProfile>) => (\n        <GroupUsersRow\n            key={member.id}\n            user={member}\n            displayName={member.first_name + ' ' + member.last_name}\n            lastPictureUpdate={member.last_picture_update || 0}\n        />\n    );\n    renderRows = () => {\n        const offset = this.state.page * GROUP_MEMBERS_PAGE_SIZE;\n        return this.props.members.slice(offset, offset + GROUP_MEMBERS_PAGE_SIZE).map(this.renderRow);\n    };\n    renderPagination = () => {\n        const {page} = this.state;\n        const startCount = (page * GROUP_MEMBERS_PAGE_SIZE) + 1;\n        let endCount = (page * GROUP_MEMBERS_PAGE_SIZE) + GROUP_MEMBERS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = page === 0;\n        return (\n            <div className='groups-list--footer'>\n                <div className='counter'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.list.paginatorCount'\n                        defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                        values={{\n                            startCount,\n                            endCount,\n                            total,\n                        }}\n                    />\n                </div>\n                <button\n                    className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                    onClick={this.previousPage}\n                    disabled={firstPage}\n                >\n                    <PreviousIcon/>\n                </button>\n                <button\n                    className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                    onClick={this.nextPage}\n                    disabled={lastPage}\n                >\n                    <NextIcon/>\n                </button>\n            </div>\n        );\n    };\n    render = () => {\n        return (\n            <div className='groups-list groups-list-less-padding'>\n                <div className='groups-list--header'>\n                    <div className='group-name'>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.user_list.nameHeader'\n                            defaultMessage='Name'\n                        />\n                    </div>\n                    <div className='group-content'>\n                        <div className='group-description group-users--header-padded'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.user_list.roleHeader'\n                                defaultMessage='Role'\n                            />\n                        </div>\n                        <div className='group-description group-users--header-padded'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.user_list.groupsHeader'\n                                defaultMessage='Groups'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='groups-list--body'>\n                    {this.renderRows()}\n                </div>\n\n                {this.renderPagination()}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport GroupsUsers from './group/group_users';\n\nexport default class UsersToBeRemovedModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Number of users to be removed\n         */\n        total: PropTypes.number.isRequired,\n\n        /*\n         * Scope that the users are to be removed from\n         * can be either 'team' or 'channel'\n         *\n         */\n        scope: PropTypes.string.isRequired,\n\n        /*\n         * Id of the scope that the users are to be removed from\n         * can be either a Team ID or a Channel ID\n         *\n         */\n        scopeId: PropTypes.string.isRequired,\n\n        /*\n         * users to be removed\n         */\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        onHide: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            values: [],\n            show: true,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    render() {\n        const {users, total, scope, scopeId} = this.props;\n        const title = (\n            <FormattedMarkdownMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.title'\n                defaultMessage='**{total, number} {total, plural, one {User} other {Users}}** To Be Removed'\n                values={{total}}\n            />\n        );\n\n        let message = (\n            <FormattedMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.message'\n                defaultMessage='The members listed below are not in any of the groups currently linked to this team. Because this team is set to be managed by group sync they will all be removed once saved.'\n            />\n        );\n\n        if (scope === 'channel') {\n            message = (\n                <FormattedMessage\n                    id='admin.team_channel_settings.usersToBeRemovedModal.channel_message'\n                    defaultMessage='The members listed below are not in any of the groups currently linked to this channel. Because this channel is set to be managed by group sync they will all be removed once saved.'\n                />\n            );\n        }\n\n        const button = (\n            <FormattedMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.close'\n                defaultMessage='Close'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                id='confirmModal'\n                role='dialog'\n                aria-labelledby='confirmModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='confirmModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='group-users-to-remove-modal-description'>{message}</div>\n                    <GroupsUsers\n                        members={users}\n                        total={total}\n                        scope={scope}\n                        scopeId={scopeId}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        autoFocus={true}\n                        className='btn btn-primary'\n                        onClick={this.handleHide}\n                        id='closeModalButton'\n                    >\n                        {button}\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as PropTypes from 'prop-types';\n\nimport FormError from 'components/form_error';\n\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport UsersToBeRemovedModal from './users_to_be_removed_modal';\n\nexport const NeedGroupsError = ({warning, isChannel = false}) => {\n    let error = (\n        <FormattedMessage\n            id='admin.team_channel_settings.need_groups'\n            defaultMessage='You must add at least one group to manage this team by sync group members.'\n        />\n    );\n\n    if (isChannel) {\n        error = (\n            <FormattedMessage\n                id='admin.team_channel_settings.need_groups_channel'\n                defaultMessage='You must add at least one group to manage this channel by sync group members.'\n            />\n        );\n    }\n\n    return (\n        <FormError\n            iconClassName={`fa-exclamation-${warning ? 'circle' : 'triangle'}`}\n            textClassName={`has-${warning ? 'warning' : 'error'}`}\n            error={error}\n        />\n    );\n};\n\nexport const NeedDomainsError = () => (\n    <FormError\n        error={(\n            <FormattedMessage\n                id='admin.team_channel_settings.need_domains'\n                defaultMessage='Please specify allowed email domains.'\n            />)}\n    />\n);\n\nNeedGroupsError.propTypes = {\n    warning: PropTypes.bool,\n    isChannel: PropTypes.bool,\n};\n\nexport class UsersWillBeRemovedError extends React.PureComponent {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        total: PropTypes.number.isRequired,\n        scope: PropTypes.string.isRequired,\n        scopeId: PropTypes.string.isRequired,\n    }\n\n    render() {\n        const {total, users, scope, scopeId} = this.props;\n        let error = (\n            <FormattedMessage\n                id='admin.team_channel_settings.users_will_be_removed'\n                defaultMessage='{amount, number} {amount, plural, one {User} other {Users}} will be removed from this team. They are not in groups linked to this team.'\n                values={{amount: total}}\n            />\n        );\n\n        if (scope === 'channel') {\n            error = (\n                <FormattedMessage\n                    id='admin.team_channel_settings.channel_users_will_be_removed'\n                    defaultMessage='{amount, number} {amount, plural, one {User} other {Users}} will be removed from this channel. They are not in groups linked to this channel.'\n                    values={{amount: total}}\n                />\n            );\n        }\n\n        return (\n            <FormError\n                iconClassName='fa-exclamation-triangle'\n                textClassName='has-warning'\n                error={(\n                    <span>\n                        {error}\n                        <ToggleModalButton\n                            className='btn btn-link'\n                            dialogType={UsersToBeRemovedModal}\n                            dialogProps={{total, users, scope, scopeId}}\n                        >\n                            <FormattedMessage\n                                id='admin.team_channel_settings.view_removed_users'\n                                defaultMessage='View These Users'\n                            />\n                        </ToggleModalButton>\n                    </span>\n                )}\n            />\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport * as Utils from 'utils/utils';\n\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nexport function TeamProfile({team}) {\n    const teamIconUrl = Utils.imageURLForTeam(team);\n\n    return (\n        <AdminPanel\n            id='team_profile'\n            titleId={t('admin.team_settings.team_detail.profileTitle')}\n            titleDefault='Team Profile'\n            subtitleId={t('admin.team_settings.team_detail.profileDescription')}\n            subtitleDefault='Summary of the team, including team name and description.'\n        >\n\n            <div className='group-teams-and-channels'>\n\n                <div className='group-teams-and-channels--body'>\n                    <div className='d-flex'>\n                        <div className='large-team-image-col'>\n                            <TeamIcon\n                                content={team.display_name}\n                                size='lg'\n                                url={teamIconUrl}\n                            />\n                        </div>\n                        <div className='team-desc-col'>\n                            <div className='row row-bottom-padding'>\n                                <FormattedMarkdownMessage\n                                    id='admin.team_settings.team_detail.teamName'\n                                    defaultMessage='**Team Name**:'\n                                />\n                                <br/>\n                                {team.display_name}\n                            </div>\n                            <div className='row'>\n                                <FormattedMarkdownMessage\n                                    id='admin.team_settings.team_detail.teamDescription'\n                                    defaultMessage='**Team Description**:'\n                                />\n                                <br/>\n                                {team.description || <span className='greyed-out'>{Utils.localizeMessage('admin.team_settings.team_detail.profileNoDescription', 'No team description added.')}</span>}\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </AdminPanel>\n    );\n}\n\nTeamProfile.propTypes = {\n    team: PropTypes.object.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport LineSwitch from '../../line_switch.jsx';\n\nconst SyncGroupsToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle, isDisabled}) => (\n    <LineSwitch\n        id='syncGroupSwitch'\n        disabled={isDisabled}\n        toggled={syncChecked}\n        last={syncChecked}\n        onToggle={() => onToggle(!syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains)}\n        title={(\n            <FormattedMessage\n                id='admin.team_settings.team_details.syncGroupMembers'\n                defaultMessage='Sync Group Members'\n            />\n        )}\n        subTitle={(\n            <FormattedMarkdownMessage\n                id='admin.team_settings.team_details.syncGroupMembersDescr'\n                defaultMessage='When enabled, adding and removing users from groups will add or remove them from this team. The only way of inviting members to this team is by adding the groups they belong to. [Learn More](!https://www.example.com/pl/default-ldap-group-constrained-team-channel.html)'\n            />\n        )}\n    />);\n\nSyncGroupsToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    isDisabled: PropTypes.bool,\n};\n\nconst AllowAllToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle, isDisabled}) =>\n    !syncChecked && (\n        <LineSwitch\n            id='allowAllToggleSwitch'\n            disabled={isDisabled}\n            toggled={allAllowedChecked}\n            singleLine={true}\n            onToggle={() => onToggle(syncChecked, !allAllowedChecked, allowedDomainsChecked, allowedDomains)}\n            title={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.anyoneCanJoin'\n                    defaultMessage='Anyone can join this team'\n                />\n            )}\n            subTitle={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.anyoneCanJoinDescr'\n                    defaultMessage='This team can be discovered allowing anyone with an account to join this team.'\n                />\n            )}\n        />);\n\nAllowAllToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    isDisabled: PropTypes.bool,\n};\n\nconst AllowedDomainsToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle, isDisabled}) =>\n    !syncChecked && (\n        <LineSwitch\n            disabled={isDisabled}\n            toggled={allowedDomainsChecked}\n            last={true}\n            onToggle={() => onToggle(syncChecked, allAllowedChecked, !allowedDomainsChecked, allowedDomains)}\n            singleLine={true}\n            title={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.specificDomains'\n                    defaultMessage='Only specific email domains can join this team'\n                />\n            )}\n            subTitle={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.specificDomainsDescr'\n                    defaultMessage='Users can only join the team if their email matches one of the specified domains'\n                />\n            )}\n        >\n            <div className='help-text csvDomains'>\n                <FormattedMessage\n                    id='admin.team_settings.team_details.csvDomains'\n                    defaultMessage='Comma Separated Email Domain List'\n                />\n            </div>\n            <input\n                type='text'\n                value={allowedDomains}\n                placeholder='matterfoss.org'\n                className='form-control'\n                onChange={(e) => onToggle(syncChecked, allAllowedChecked, allowedDomainsChecked, e.currentTarget.value)}\n                disabled={isDisabled}\n            />\n        </LineSwitch>);\n\nAllowedDomainsToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    isDisabled: PropTypes.bool,\n};\n\nexport const TeamModes = ({allAllowedChecked, syncChecked, allowedDomains, allowedDomainsChecked, onToggle, isDisabled}) => (\n    <AdminPanel\n        id='team_manage'\n        titleId={t('admin.team_settings.team_detail.manageTitle')}\n        titleDefault='Team Management'\n        subtitleId={t('admin.team_settings.team_detail.manageDescription')}\n        subtitleDefault='Choose between inviting members manually or syncing members automatically from groups.'\n    >\n        <div className='group-teams-and-channels'>\n            <div className='group-teams-and-channels--body'>\n                <SyncGroupsToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                    isDisabled={isDisabled}\n                />\n                <AllowAllToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                    isDisabled={isDisabled}\n                />\n                <AllowedDomainsToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                    isDisabled={isDisabled}\n                />\n            </div>\n        </div>\n    </AdminPanel>);\n\nTeamModes.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    isDisabled: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {GroupStats} from 'matterfoss-redux/types/groups';\n\nimport Constants from 'utils/constants';\nimport UserGridName from 'components/admin_console/user_grid/user_grid_name';\nimport DataGrid, {Row, Column} from 'components/admin_console/data_grid/data_grid';\n\nconst USERS_PER_PAGE = 10;\n\nimport './member_list_group.scss';\n\nexport type Props = {\n    searchTerm: string;\n    users: UserProfile[];\n    groupID: string;\n    total: number;\n    actions: {\n        getProfilesInGroup: (groupID: string, page: number, perPage: number) => Promise<{data: UserProfile[]}>;\n        getGroupStats: (groupID: string) => Promise<{data: GroupStats}>;\n        searchProfiles: (term: string, options?: Record<string, unknown>) => Promise<{data: UserProfile[]}>;\n        setModalSearchTerm: (term: string) => Promise<{data: boolean}>;\n    };\n}\n\ntype State = {\n    loading: boolean;\n    page: number;\n}\n\nexport default class MemberListGroup extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    async componentDidMount() {\n        const {actions, groupID} = this.props;\n        await Promise.all([\n            actions.getProfilesInGroup(groupID, 0, USERS_PER_PAGE * 2),\n            actions.getGroupStats(groupID),\n        ]);\n        this.loadComplete();\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setModalSearchTerm('');\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.loadComplete();\n                this.searchTimeoutId = 0;\n                return;\n            }\n\n            const searchTimeoutId = window.setTimeout(\n                async () => {\n                    const {\n                        searchProfiles,\n                    } = this.props.actions;\n\n                    this.setState({loading: true});\n\n                    await searchProfiles(searchTerm, {in_group_id: this.props.groupID});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n\n                    this.loadComplete();\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    loadComplete = () => {\n        this.setState({loading: false});\n    }\n\n    private nextPage = async () => {\n        const {actions, groupID} = this.props;\n        const page = this.state.page + 1;\n        this.setState({loading: true, page});\n        await actions.getProfilesInGroup(groupID, page, USERS_PER_PAGE * 2);\n        this.setState({loading: false});\n    }\n\n    private previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    private getRows = (): Row[] => {\n        const {users} = this.props;\n        const {startCount, endCount} = this.getPaginationProps();\n\n        let usersToDisplay = users;\n        usersToDisplay = usersToDisplay.slice(startCount - 1, endCount);\n\n        return usersToDisplay.map((user) => {\n            return {\n                cells: {\n                    id: user.id,\n                    name: (\n                        <UserGridName\n                            user={user}\n                        />\n                    ),\n                },\n            };\n        });\n    }\n\n    private getColumns = (): Column[] => {\n        return [\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.member_list_group.name'\n                        defaultMessage='Name'\n                    />\n                ),\n                field: 'name',\n            },\n        ];\n    }\n\n    private getPaginationProps = () => {\n        let {total} = this.props;\n        const {page} = this.state;\n        const startCount = (this.state.page * USERS_PER_PAGE) + 1;\n        let endCount = (page + 1) * USERS_PER_PAGE;\n\n        if (this.props.searchTerm !== '') {\n            total = this.props.users.length;\n        }\n        if (endCount > total) {\n            endCount = total;\n        }\n        return {startCount, endCount, total};\n    }\n\n    public render = (): JSX.Element => {\n        const rows: Row[] = this.getRows();\n        const columns: Column[] = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n\n        const placeholderEmpty: JSX.Element = (\n            <FormattedMessage\n                id='admin.member_list_group.notFound'\n                defaultMessage='No users found'\n            />\n        );\n\n        return (\n            <div className='MemberListGroup'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    loading={this.state.loading}\n                    page={this.state.page}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    startCount={startCount}\n                    endCount={endCount}\n                    total={total}\n                    onSearch={this.props.actions.setModalSearchTerm}\n                    term={this.props.searchTerm || ''}\n                    placeholderEmpty={placeholderEmpty}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getGroupStats} from 'matterfoss-redux/actions/groups';\nimport {searchProfiles, getProfilesInGroup} from 'matterfoss-redux/actions/users';\n\nimport {getGroupMemberCount} from 'matterfoss-redux/selectors/entities/groups';\nimport {getProfilesInGroup as selectProfiles, searchProfilesInGroup} from 'matterfoss-redux/selectors/entities/users';\n\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport {GlobalState} from 'types/store';\n\nimport MemberListGroup, {Props as MemberListGroupProps} from './member_list_group';\n\ntype Props = {\n    groupID: string;\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: Props) {\n    const {groupID} = ownProps;\n    const searchTerm = state.views.search.modalSearch;\n    let users;\n    if (searchTerm) {\n        users = searchProfilesInGroup(state, groupID, searchTerm);\n    } else {\n        users = selectProfiles(state, groupID);\n    }\n\n    return {\n        searchTerm,\n        users,\n        total: getGroupMemberCount(state, groupID) || 0,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, MemberListGroupProps['actions']>({\n            getProfilesInGroup,\n            searchProfiles,\n            setModalSearchTerm,\n            getGroupStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MemberListGroup);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'matterfoss-redux/types/groups';\n\nimport MemberListGroup from 'components/admin_console/member_list_group';\n\ntype Props = {\n    group: Group;\n    onHide: () => void;\n    onLoad?: () => void;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class GroupMembersModal extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.onLoad) {\n            this.props.onLoad();\n        }\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        this.props.onHide();\n    }\n\n    render() {\n        const {group} = this.props;\n\n        const button = (\n            <FormattedMessage\n                id='admin.team_channel_settings.groupMembers.close'\n                defaultMessage='Close'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='groupMemberModalLabel'\n                id='groupMembersModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='groupMemberModalLabel'\n                    >\n                        {group.display_name}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MemberListGroup\n                        groupID={group.id}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        autoFocus={true}\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleHide}\n                        id='closeModalButton'\n                    >\n                        {button}\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'matterfoss-redux/types/groups';\n\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\nimport GroupMembersModal from 'components/admin_console/team_channel_settings/group/group_members_modal';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\ninterface GroupRowProps {\n    group: Partial<Group>;\n    removeGroup: (gid: string) => void;\n    key?: string;\n    setNewGroupRole: (gid: string) => void;\n    type: string;\n    isDisabled?: boolean;\n}\n\nexport default class GroupRow extends React.PureComponent<GroupRowProps> {\n    removeGroup = (e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n        e.preventDefault();\n        if (this.props.isDisabled) {\n            return;\n        }\n        this.props.removeGroup(this.props.group.id!);\n    };\n\n    setNewGroupRole = () => {\n        this.props.setNewGroupRole(this.props.group.id!);\n    };\n\n    displayCurrentRole = () => {\n        const {group, type} = this.props;\n        const channelAdmin = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.channelAdmin'\n                defaultMessage='Channel Admin'\n            />\n        );\n        const teamAdmin = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.teamAdmin'\n                defaultMessage='Team Admin'\n            />\n        );\n        const member = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (group.scheme_admin && type === 'channel') {\n            return channelAdmin;\n        } else if (group.scheme_admin && type === 'team') {\n            return teamAdmin;\n        }\n        return member;\n    }\n\n    displayRoleToBe = () => {\n        const {group, type} = this.props;\n        if (!group.scheme_admin && type === 'channel') {\n            return localizeMessage('admin.team_channel_settings.group_row.channelAdmin', 'Channel Admin');\n        } else if (!group.scheme_admin && type === 'team') {\n            return localizeMessage('admin.team_channel_settings.group_row.teamAdmin', 'Team Admin');\n        }\n        return localizeMessage('admin.team_channel_settings.group_row.member', 'Member');\n    }\n\n    render = () => {\n        const {group} = this.props;\n        return (\n            <div\n                id='group'\n                className='group'\n            >\n                <div\n                    id='group-row'\n                    className='group-row'\n                >\n                    <span className='group-name row-content'>\n                        {group.display_name || group.name}\n                    </span>\n                    <span className='group-description row-content'>\n                        <ToggleModalButton\n                            id={`${group.display_name}MembersToggle`}\n                            className='color--link'\n                            dialogType={GroupMembersModal}\n                            dialogProps={{\n                                group,\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.team_channel_settings.group_row.members'\n                                defaultMessage='{memberCount, number} {memberCount, plural, one {member} other {members}}'\n                                values={{memberCount: group.member_count}}\n                            />\n                        </ToggleModalButton>\n                    </span>\n                    <div className='group-description row-content roles'>\n                        <MenuWrapper\n                            isDisabled={this.props.isDisabled}\n                        >\n                            <div>\n                                <a data-testid='current-role'>\n                                    <span>{this.displayCurrentRole()}</span>\n                                    <span className='caret'/>\n                                </a>\n                            </div>\n                            <Menu\n                                id='role-to-be-menu'\n                                openLeft={true}\n                                openUp={false}\n                                ariaLabel={localizeMessage('admin.team_channel_settings.group_row.memberRole', 'Member Role')}\n                            >\n                                <Menu.ItemAction\n                                    id='role-to-be'\n                                    onClick={this.setNewGroupRole}\n                                    text={this.displayRoleToBe()}\n                                />\n                            </Menu>\n                        </MenuWrapper>\n                    </div>\n                    <span\n                        id='group-actions'\n                        className='group-actions'\n                    >\n                        <a\n                            href='#'\n                            onClick={this.removeGroup}\n                            className={this.props.isDisabled ? 'disabled' : ''}\n                        >\n                            <FormattedMessage\n                                id='admin.team_channel_settings.group_row.remove'\n                                defaultMessage='Remove'\n                            />\n                        </a>\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'matterfoss-redux/types/groups';\nimport {Channel} from 'matterfoss-redux/types/channels';\n\nimport AbstractList from 'components/admin_console/team_channel_settings/abstract_list.jsx';\n\nimport GroupRow from './group_row';\n\nconst Header = () => {\n    return (\n        <div className='groups-list--header'>\n            <div className='group-name group-name-adjusted'>\n                <FormattedMessage\n                    id='admin.team_channel_settings.group_list.nameHeader'\n                    defaultMessage='Group Name'\n                />\n            </div>\n            <div className='group-content'>\n                <div className='group-description group-description-adjusted'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.group_list.membersHeader'\n                        defaultMessage='Member Count'\n                    />\n                </div>\n                <div className='group-description group-description-adjusted'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.group_list.rolesHeader'\n                        defaultMessage='Roles'\n                    />\n                </div>\n                <div className='group-actions'/>\n            </div>\n        </div>\n    );\n};\n\ninterface Props {\n    data?: Array<Partial<Group>>;\n    onPageChangedCallback?: () => void;\n    total: number;\n    emptyListTextId: string;\n    emptyListTextDefaultMessage: string;\n    actions: {\n        getData: () => void;\n    };\n    removeGroup: (gid: string) => void;\n    setNewGroupRole: (gid: string) => void;\n    type: string;\n    channel?: Partial<Channel>;\n    isDisabled?: boolean;\n}\n\nexport default class GroupList extends React.PureComponent<Props> {\n    renderRow = (item: Group) => {\n        return (\n            <GroupRow\n                key={item.id}\n                group={item}\n                removeGroup={this.props.removeGroup}\n                setNewGroupRole={this.props.setNewGroupRole}\n                type={this.props.type}\n                isDisabled={this.props.isDisabled}\n            />\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <AbstractList\n                header={<Header/>}\n                renderRow={this.renderRow}\n                {...this.props}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {t} from 'utils/i18n';\n\nimport List from './group_list';\n\nfunction mapStateToProps(state, {groups, totalGroups, isModeSync, onGroupRemoved, setNewGroupRole}) {\n    return {\n        data: groups,\n        removeGroup: onGroupRemoved,\n        setNewGroupRole,\n        emptyListTextId: isModeSync ? t('admin.team_channel_settings.group_list.no-synced-groups') : t('admin.team_channel_settings.group_list.no-groups'),\n        emptyListTextDefaultMessage: isModeSync ? 'At least one group must be specified' : 'No groups specified yet',\n        total: totalGroups,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        actions: {\n            getData: () => Promise.resolve(),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport GroupList from '../../group';\n\nexport const TeamGroups = ({onGroupRemoved, syncChecked, team, onAddCallback, totalGroups, groups, removedGroups, setNewGroupRole, isDisabled}) => (\n    <AdminPanel\n        id='team_groups'\n        titleId={syncChecked ? t('admin.team_settings.team_detail.syncedGroupsTitle') : t('admin.team_settings.team_detail.groupsTitle')}\n        titleDefault={syncChecked ? 'Synced Groups' : 'Groups'}\n        subtitleId={syncChecked ? t('admin.team_settings.team_detail.syncedGroupsDescription') : t('admin.team_settings.team_detail.groupsDescription')}\n        subtitleDefault={syncChecked ? 'Add and remove team members based on their group membership.' : 'Group members will be added to the team.'}\n        button={\n            <ToggleModalButton\n                id='addGroupsToTeamToggle'\n                className='btn btn-primary'\n                dialogType={AddGroupsToTeamModal}\n                dialogProps={{\n                    team,\n                    onAddCallback,\n                    skipCommit: true,\n                    excludeGroups: groups,\n                    includeGroups: removedGroups,\n                }}\n                isDisabled={isDisabled}\n            >\n                <FormattedMessage\n                    id='admin.team_settings.team_details.add_group'\n                    defaultMessage='Add Group'\n                />\n            </ToggleModalButton>}\n    >\n        <GroupList\n            team={team}\n            isModeSync={syncChecked}\n            groups={groups}\n            totalGroups={totalGroups}\n            onGroupRemoved={onGroupRemoved}\n            setNewGroupRole={setNewGroupRole}\n            type='team'\n            isDisabled={isDisabled}\n        />\n    </AdminPanel>);\n\nTeamGroups.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    team: PropTypes.object.isRequired,\n    totalGroups: PropTypes.number.isRequired,\n    groups: PropTypes.arrayOf(PropTypes.object).isRequired,\n    removedGroups: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onAddCallback: PropTypes.func.isRequired,\n    onGroupRemoved: PropTypes.func.isRequired,\n    setNewGroupRole: PropTypes.func.isRequired,\n    isDisabled: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {TeamMembership} from 'matterfoss-redux/types/teams';\nimport {ChannelMembership} from 'matterfoss-redux/types/channels';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport DropdownIcon from 'components/widgets/icons/fa_dropdown_icon';\n\nexport type BaseMembership = {\n    user_id: string;\n    scheme_user: boolean;\n    scheme_admin: boolean;\n}\n\ntype Props = {\n    user: UserProfile;\n    membership?: BaseMembership | TeamMembership | ChannelMembership;\n    scope: 'team' | 'channel';\n    handleUpdateMembership: (membership: BaseMembership) => void;\n    isDisabled?: boolean;\n}\n\nexport type Role = 'system_admin' | 'team_admin' | 'team_user' | 'channel_admin' | 'channel_user' | 'shared_member' | 'guest';\n\nexport default class UserGridRoleDropdown extends React.PureComponent<Props> {\n    private getDropDownOptions = () => {\n        if (this.props.scope === 'team') {\n            return {\n                makeAdmin: Utils.localizeMessage('team_members_dropdown.makeAdmin', 'Make Team Admin'),\n                makeMember: Utils.localizeMessage('team_members_dropdown.makeMember', 'Make Team Member'),\n            };\n        }\n\n        return {\n            makeAdmin: Utils.localizeMessage('channel_members_dropdown.make_channel_admin', 'Make Channel Admin'),\n            makeMember: Utils.localizeMessage('channel_members_dropdown.make_channel_member', 'Make Channel Member'),\n        };\n    }\n\n    private getCurrentRole = (): Role => {\n        const {user, membership, scope} = this.props;\n\n        if (user.roles.includes('system_admin')) {\n            return 'system_admin';\n        } else if (membership) {\n            if (scope === 'team') {\n                if (user.remote_id) {\n                    return 'shared_member';\n                } else if (membership.scheme_admin) {\n                    return 'team_admin';\n                } else if (membership.scheme_user) {\n                    return 'team_user';\n                }\n            }\n\n            if (scope === 'channel') {\n                if (user.remote_id) {\n                    return 'shared_member';\n                } else if (membership.scheme_admin) {\n                    return 'channel_admin';\n                } else if (membership.scheme_user) {\n                    return 'channel_user';\n                }\n            }\n        }\n\n        return 'guest';\n    }\n\n    private getLocalizedRole = (role: Role) => {\n        switch (role) {\n        case 'system_admin':\n            return Utils.localizeMessage('admin.user_grid.system_admin', 'System Admin');\n        case 'team_admin':\n            return Utils.localizeMessage('admin.user_grid.team_admin', 'Team Admin');\n        case 'channel_admin':\n            return Utils.localizeMessage('admin.user_grid.channel_admin', 'Channel Admin');\n        case 'shared_member':\n            return Utils.localizeMessage('admin.user_grid.shared_member', 'Shared Member');\n        case 'team_user':\n        case 'channel_user':\n            return Utils.localizeMessage('admin.group_teams_and_channels_row.member', 'Member');\n        default:\n            return Utils.localizeMessage('admin.user_grid.guest', 'Guest');\n        }\n    }\n\n    private handleMakeAdmin = () => {\n        this.props.handleUpdateMembership({\n            user_id: this.props.user.id,\n            scheme_admin: true,\n            scheme_user: true,\n        });\n    }\n\n    private handleMakeUser = () => {\n        this.props.handleUpdateMembership({\n            user_id: this.props.user.id,\n            scheme_admin: false,\n            scheme_user: true,\n        });\n    }\n\n    private getAriaLabel = () => {\n        const {scope} = this.props;\n        if (scope === 'team') {\n            return Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Change the role of a team member');\n        }\n        return Utils.localizeMessage('channel_members_dropdown.menuAriaLabel', 'Change the role of channel member');\n    }\n\n    public render = (): JSX.Element | null => {\n        if (!this.props.membership) {\n            return null;\n        }\n\n        const {user, isDisabled} = this.props;\n\n        const {makeAdmin, makeMember} = this.getDropDownOptions();\n        const currentRole = this.getCurrentRole();\n        const localizedRole = this.getLocalizedRole(currentRole);\n        const ariaLabel = this.getAriaLabel();\n\n        if (currentRole === 'shared_member') {\n            const sharedTooltip = (\n                <Tooltip id='sharedTooltip'>\n                    <FormattedMessage\n                        id='shared_user_indicator.tooltip'\n                        defaultMessage='From trusted organizations'\n                    />\n                </Tooltip>\n            );\n\n            return (\n                <div className='more-modal__shared-actions'>\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='bottom'\n                        overlay={sharedTooltip}\n                    >\n                        <span>\n                            {localizedRole}\n                            <i className='shared-user-icon icon-circle-multiple-outline'/>\n                        </span>\n                    </OverlayTrigger>\n                </div>\n            );\n        }\n\n        const dropdownEnabled = !['system_admin', 'guest'].includes(currentRole);\n        const showMakeAdmin = ['channel_user', 'team_user'].includes(currentRole);\n        const showMakeMember = ['channel_admin', 'team_admin'].includes(currentRole);\n\n        if (!dropdownEnabled) {\n            return localizedRole;\n        }\n\n        return (\n            <MenuWrapper\n                isDisabled={isDisabled}\n            >\n                <button\n                    id={`userGridRoleDropdown_${user.username}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <span>{localizedRole} </span>\n                    <DropdownIcon/>\n                </button>\n                <Menu ariaLabel={ariaLabel}>\n                    <Menu.ItemAction\n                        show={showMakeAdmin}\n                        onClick={this.handleMakeAdmin}\n                        text={makeAdmin}\n                    />\n                    <Menu.ItemAction\n                        show={showMakeMember}\n                        onClick={this.handleMakeUser}\n                        text={makeMember}\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {TeamMembership} from 'matterfoss-redux/types/teams';\nimport {ChannelMembership} from 'matterfoss-redux/types/channels';\n\nimport Badge from 'components/widgets/badges/badge';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\nimport DataGrid, {Row, Column} from 'components/admin_console/data_grid/data_grid';\n\nimport UserGridName from './user_grid_name';\nimport UserGridRemove from './user_grid_remove';\nimport UserGridRoleDropdown, {BaseMembership} from './user_grid_role_dropdown';\n\nimport './user_grid.scss';\n\ntype Props = {\n    users: UserProfile[];\n    scope: 'team' | 'channel';\n    memberships: { [userId: string]: BaseMembership | TeamMembership | ChannelMembership };\n\n    excludeUsers: { [userId: string]: UserProfile };\n    includeUsers: { [userId: string]: UserProfile };\n\n    loadPage: (page: number) => void;\n    onSearch: (term: string) => void;\n    removeUser: (user: UserProfile) => void;\n    updateMembership: (membership: BaseMembership) => void;\n\n    totalCount: number;\n    loading: boolean;\n    term: string;\n    readOnly?: boolean;\n\n    filterProps: {\n        options: FilterOptions;\n        keys: string[];\n        onFilter: (options: FilterOptions) => void;\n    };\n};\n\ntype State = {\n    loading: boolean;\n    page: number;\n    membershipsToUpdate: { [userId: string]: BaseMembership | TeamMembership | ChannelMembership };\n};\n\nconst USERS_PER_PAGE = 10;\nconst ROW_HEIGHT = 80;\n\nexport default class UserGrid extends React.PureComponent<Props, State> {\n    private pageLoaded = 0;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loading: false,\n            page: 0,\n            membershipsToUpdate: {},\n        };\n    }\n\n    private loadPage = (page: number) => {\n        this.setState({loading: true});\n        this.props.loadPage(page);\n        this.setState({page, loading: false});\n    }\n\n    private nextPage = () => {\n        this.loadPage(this.state.page + 1);\n    }\n\n    private previousPage = () => {\n        this.loadPage(this.state.page - 1);\n    }\n\n    private onSearch = async (term: string) => {\n        this.props.onSearch(term);\n        this.setState({page: 0});\n    }\n\n    private onFilter = async (filters: FilterOptions) => {\n        this.props.filterProps?.onFilter(filters);\n        this.setState({page: 0});\n    }\n\n    private getVisibleTotalCount = (): number => {\n        const {includeUsers, excludeUsers, totalCount} = this.props;\n        const includeUsersCount = Object.keys(includeUsers).length;\n        const excludeUsersCount = Object.keys(excludeUsers).length;\n        return totalCount + (includeUsersCount - excludeUsersCount);\n    }\n\n    public getPaginationProps = (): {startCount: number; endCount: number; total: number} => {\n        const {includeUsers, excludeUsers, term} = this.props;\n        const {page} = this.state;\n\n        let total: number;\n        let endCount = 0;\n        const startCount = (page * USERS_PER_PAGE) + 1;\n\n        if (term === '') {\n            total = this.getVisibleTotalCount();\n        } else {\n            total = this.props.users.length + Object.keys(includeUsers).length;\n            this.props.users.forEach((u) => {\n                if (excludeUsers[u.id]) {\n                    total -= 1;\n                }\n            });\n        }\n\n        endCount = (page + 1) * USERS_PER_PAGE;\n        endCount = endCount > total ? total : endCount;\n\n        return {startCount, endCount, total};\n    }\n\n    private removeUser = (user: UserProfile) => {\n        const {excludeUsers} = this.props;\n        if (excludeUsers[user.id] === user) {\n            return;\n        }\n\n        let {page} = this.state;\n        const {endCount} = this.getPaginationProps();\n\n        this.props.removeUser(user);\n        if (endCount > this.getVisibleTotalCount() && (endCount % USERS_PER_PAGE) === 1 && page > 0) {\n            page--;\n        }\n\n        this.setState({page});\n    }\n\n    private updateMembership = (membership: BaseMembership) => {\n        const {membershipsToUpdate} = this.state;\n        const {memberships} = this.props;\n        const userId = membership.user_id;\n        membershipsToUpdate[userId] = {\n            ...memberships[userId],\n            ...membership,\n        };\n\n        this.props.updateMembership(membership);\n        this.setState({membershipsToUpdate}, this.forceUpdate);\n    }\n\n    private newMembership = (user: UserProfile): BaseMembership => {\n        return {\n            user_id: user.id,\n            scheme_admin: false,\n            scheme_user: !user.roles.includes('guest'),\n        };\n    }\n\n    private getRows = (): Row[] => {\n        const {page, membershipsToUpdate} = this.state;\n        const {memberships, users, excludeUsers, includeUsers, totalCount, term, scope, readOnly} = this.props;\n        const {startCount, endCount} = this.getPaginationProps();\n\n        let usersToDisplay = users;\n        const includeUsersList = Object.values(includeUsers);\n\n        // Remove users to remove and add users to add\n        usersToDisplay = usersToDisplay.filter((user) => !excludeUsers[user.id]);\n        usersToDisplay = [...includeUsersList, ...usersToDisplay];\n        usersToDisplay = usersToDisplay.slice(startCount - 1, endCount);\n\n        // Dont load more elements if searching\n        if (term === '' && usersToDisplay.length < USERS_PER_PAGE && users.length < totalCount) {\n            const numberOfUsersRemoved = Object.keys(excludeUsers).length;\n            const pagesOfUsersRemoved = Math.floor(numberOfUsersRemoved / USERS_PER_PAGE);\n            const pageToLoad = page + pagesOfUsersRemoved + 1;\n\n            // Directly call action to load more users from parent component to load more users into the state\n            if (pageToLoad > this.pageLoaded) {\n                this.props.loadPage(pageToLoad);\n                this.pageLoaded = pageToLoad;\n            }\n        }\n\n        return usersToDisplay.map((user) => {\n            const membership = membershipsToUpdate[user.id] || memberships[user.id] || this.newMembership(user);\n            return {\n                cells: {\n                    id: user.id,\n                    name: (\n                        <UserGridName\n                            user={user}\n                        />\n                    ),\n                    new: (\n                        <Badge\n                            className='NewUserBadge'\n                            show={Boolean(includeUsers[user.id])}\n                        >\n                            <FormattedMessage\n                                id='admin.user_grid.new'\n                                defaultMessage='New'\n                            />\n                        </Badge>\n                    ),\n                    role: (\n                        <UserGridRoleDropdown\n                            user={user}\n                            membership={membership}\n                            handleUpdateMembership={this.updateMembership}\n                            scope={scope}\n                            isDisabled={readOnly}\n                        />\n                    ),\n                    remove: (\n                        <UserGridRemove\n                            user={user}\n                            removeUser={this.removeUser}\n                            isDisabled={readOnly}\n                        />\n                    ),\n                },\n            };\n        });\n    }\n\n    private getColumns = (): Column[] => {\n        const name: JSX.Element = (\n            <FormattedMessage\n                id='admin.user_grid.name'\n                defaultMessage='Name'\n            />\n        );\n        const role: JSX.Element = (\n            <FormattedMessage\n                id='admin.user_grid.role'\n                defaultMessage='Role'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                width: 3,\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'new',\n                fixed: true,\n            },\n            {\n                name: role,\n                field: 'role',\n\n                // Requires overflow visible in order to render dropdown\n                overflow: 'visible',\n            },\n            {\n                name: '',\n                field: 'remove',\n                textAlign: 'right',\n                fixed: true,\n            },\n        ];\n    }\n\n    public render = (): JSX.Element => {\n        const rows: Row[] = this.getRows();\n        const columns: Column[] = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n\n        const placeholderEmpty: JSX.Element = (\n            <FormattedMessage\n                id='admin.user_grid.notFound'\n                defaultMessage='No users found'\n            />\n        );\n\n        const rowsContainerStyles = {\n            minHeight: `${rows.length * ROW_HEIGHT}px`,\n        };\n\n        return (\n            <DataGrid\n                columns={columns}\n                rows={rows}\n                loading={this.state.loading || this.props.loading}\n                page={this.state.page}\n                nextPage={this.nextPage}\n                previousPage={this.previousPage}\n                startCount={startCount}\n                endCount={endCount}\n                total={total}\n                onSearch={this.onSearch}\n                term={this.props.term || ''}\n                placeholderEmpty={placeholderEmpty}\n                rowsContainerStyles={rowsContainerStyles}\n                filterProps={{...this.props.filterProps, onFilter: this.onFilter}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport {displayEntireNameForUser, localizeMessage, isGuest} from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport GuestBadge from 'components/widgets/badges/guest_badge';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport MultiSelect, {Value} from 'components/multiselect/multiselect';\nimport AddIcon from 'components/widgets/icons/fa_add_icon';\n\nconst USERS_PER_PAGE = 50;\nconst MAX_SELECTABLE_VALUES = 20;\n\ntype UserProfileValue = Value & UserProfile;\n\ntype Props = {\n    team: Team;\n    users: UserProfile[];\n    filterExcludeGuests?: boolean;\n    excludeUsers: { [userId: string]: UserProfile };\n    includeUsers: { [userId: string]: UserProfile };\n    onAddCallback: (users: UserProfile[]) => void;\n    onHide?: () => void;\n\n    actions: {\n        getProfilesNotInTeam: (teamId: string, groupConstrained: boolean, page: number, perPage?: number, options?: Record<string, any>) => Promise<{ data: UserProfile[] }>;\n        searchProfiles: (term: string, options?: Record<string, any>) => Promise<{ data: UserProfile[] }>;\n    };\n}\n\ntype State = {\n    searchResults: UserProfile[];\n    values: UserProfileValue[];\n    show: boolean;\n    search: boolean;\n    saving: boolean;\n    addError: null;\n    loading: boolean;\n    filterOptions: {[key: string]: any};\n}\n\nexport default class AddUsersToTeamModal extends React.PureComponent<Props, State> {\n    selectedItemRef: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n\n        let filterOptions = {};\n        if (props.filterExcludeGuests) {\n            filterOptions = {role: 'system_user'};\n        }\n\n        this.state = {\n            searchResults: [],\n            values: [],\n            show: true,\n            search: false,\n            saving: false,\n            addError: null,\n            loading: true,\n            filterOptions,\n        };\n\n        this.selectedItemRef = React.createRef();\n    }\n    public componentDidMount = async () => {\n        await this.props.actions.getProfilesNotInTeam(this.props.team.id, false, 0, USERS_PER_PAGE * 2);\n        this.setUsersLoadingState(false);\n    }\n\n    private setUsersLoadingState = (loading: boolean) => {\n        this.setState({loading});\n    }\n\n    public search = async (term: string) => {\n        this.setUsersLoadingState(true);\n        let searchResults: UserProfile[] = [];\n        const search = term !== '';\n        if (search) {\n            const {data} = await this.props.actions.searchProfiles(term, {not_in_team_id: this.props.team.id, replace: true, ...this.state.filterOptions});\n            searchResults = data;\n        } else {\n            await this.props.actions.getProfilesNotInTeam(this.props.team.id, false, 0, USERS_PER_PAGE * 2);\n        }\n        this.setState({loading: false, searchResults, search});\n    }\n\n    public handleHide = () => {\n        this.setState({show: false});\n    }\n\n    private handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    private renderOption = (option: UserProfileValue, isSelected: boolean, onAdd: (user: UserProfileValue) => void, onMouseMove: (user: UserProfileValue) => void) => {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? this.selectedItemRef : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(option.id, option.last_picture_update)}\n                    size='md'\n                />\n                <div className='more-modal__details'>\n                    <div className='more-modal__name'>\n                        {displayEntireNameForUser(option)}\n                        <BotBadge\n                            show={Boolean(option.is_bot)}\n                            className='badge-popoverlist'\n                        />\n                        <GuestBadge\n                            show={isGuest(option)}\n                            className='popoverlist'\n                        />\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <AddIcon/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    private renderValue = (value: { data: UserProfileValue }): string => {\n        return value.data?.username || '';\n    }\n\n    private renderAriaLabel = (option: UserProfileValue): string => {\n        return option?.username || '';\n    }\n\n    private handleAdd = (value: UserProfileValue) => {\n        const values: UserProfileValue[] = [...this.state.values];\n        if (!values.includes(value)) {\n            values.push(value);\n        }\n        this.setState({values});\n    }\n\n    private handleDelete = (values: UserProfileValue[]) => {\n        this.setState({values});\n    }\n\n    private handlePageChange = (page: number, prevPage: number) => {\n        if (page > prevPage) {\n            const needMoreUsers = (this.props.users.length / USERS_PER_PAGE) <= page + 1;\n            this.setUsersLoadingState(needMoreUsers);\n            this.props.actions.getProfilesNotInTeam(this.props.team.id, false, page, USERS_PER_PAGE * 2).\n                then(() => this.setUsersLoadingState(false));\n        }\n    };\n\n    private handleSubmit = () => {\n        this.props.onAddCallback(this.state.values);\n        this.handleHide();\n    }\n\n    public render = (): JSX.Element => {\n        const numRemainingText = (\n            <div id='numPeopleRemaining'>\n                <FormattedMessage\n                    id='multiselect.numPeopleRemaining'\n                    defaultMessage='Use ↑↓ to browse, ↵ to select. You can add {num, number} more {num, plural, one {person} other {people}}. '\n                    values={{\n                        num: MAX_SELECTABLE_VALUES - this.state.values.length,\n                    }}\n                />\n            </div>\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n        const buttonSubmitLoadingText = localizeMessage('multiselect.adding', 'Adding...');\n\n        let addError = null;\n        if (this.state.addError) {\n            addError = (<div className='has-error col-sm-12'><label className='control-label font-weight--normal'>{this.state.addError}</label></div>);\n        }\n\n        let usersToDisplay: UserProfile[] = [];\n        usersToDisplay = this.state.search ? this.state.searchResults : this.props.users;\n        if (this.props.excludeUsers) {\n            const hasUser = (user: UserProfile) => !this.props.excludeUsers[user.id];\n            usersToDisplay = usersToDisplay.filter(hasUser);\n        }\n        if (this.props.includeUsers) {\n            const includeUsers = Object.values(this.props.includeUsers);\n            usersToDisplay = [...usersToDisplay, ...includeUsers];\n        }\n\n        const options = usersToDisplay.map((user) => {\n            return {label: user.username, value: user.id, ...user};\n        });\n\n        return (\n            <Modal\n                id='addUsersToTeamModal'\n                dialogClassName={'a11y__modal more-modal more-direct-channels'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title componentClass='h1'>\n                        <FormattedMessage\n                            id='add_users_to_team.title'\n                            defaultMessage='Add New Members to {teamName} Team'\n                            values={{\n                                teamName: (\n                                    <strong>{this.props.team.name}</strong>\n                                ),\n                            }}\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {addError}\n                    <MultiSelect\n                        key='addUsersToTeamKey'\n                        options={options}\n                        optionRenderer={this.renderOption}\n                        selectedItemRef={this.selectedItemRef}\n                        ariaLabelRenderer={this.renderAriaLabel}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={USERS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.handleAdd}\n                        handleSubmit={this.handleSubmit}\n                        maxValues={MAX_SELECTABLE_VALUES}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        buttonSubmitLoadingText={buttonSubmitLoadingText}\n                        saving={this.state.saving}\n                        loading={this.state.loading}\n                        placeholderText={localizeMessage('multiselect.placeholder', 'Search and add members')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Team} from 'matterfoss-redux/types/teams';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {getProfilesNotInTeam, searchProfiles} from 'matterfoss-redux/actions/users';\n\nimport {getProfilesNotInTeam as selectProfilesNotInTeam} from 'matterfoss-redux/selectors/entities/users';\n\nimport AddUsersToTeamModal from './add_users_to_team_modal';\n\ntype Props = {\n    team: Team;\n    filterExcludeGuests?: boolean;\n};\n\ntype Actions = {\n    getProfilesNotInTeam: (teamId: string, groupConstrained: boolean, page: number, perPage?: number, options?: {[key: string]: any}) => Promise<{ data: UserProfile[] }>;\n    searchProfiles: (term: string, options?: any) => Promise<{ data: UserProfile[] }>;\n};\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const {id: teamId} = props.team;\n\n    let filterOptions: {[key: string]: any} = {active: true};\n    if (props.filterExcludeGuests) {\n        filterOptions = {role: 'system_user', ...filterOptions};\n    }\n\n    const users: UserProfile[] = selectProfilesNotInTeam(state, teamId, filterOptions);\n\n    return {\n        users,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getProfilesNotInTeam,\n            searchProfiles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddUsersToTeamModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\nimport {UserProfile, UsersStats, GetFilteredUsersStatsOpts} from 'matterfoss-redux/types/users';\nimport {TeamMembership, Team} from 'matterfoss-redux/types/teams';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport GeneralConstants from 'matterfoss-redux/constants/general';\n\nimport {t} from 'utils/i18n';\nimport Constants from 'utils/constants';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport UserGrid from 'components/admin_console/user_grid/user_grid';\nimport {BaseMembership} from 'components/admin_console/user_grid/user_grid_role_dropdown';\nimport AddUsersToTeamModal from 'components/add_users_to_team_modal';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\n\ntype Props = {\n    teamId: string;\n    team: Team;\n    filters: GetFilteredUsersStatsOpts;\n\n    users: UserProfile[];\n    usersToRemove: Dictionary<UserProfile>;\n    usersToAdd: Dictionary<UserProfile>;\n    teamMembers: Dictionary<TeamMembership>;\n\n    totalCount: number;\n    searchTerm: string;\n    loading?: boolean;\n    isDisabled?: boolean;\n    enableGuestAccounts: boolean;\n\n    onAddCallback: (users: UserProfile[]) => void;\n    onRemoveCallback: (user: UserProfile) => void;\n    updateRole: (userId: string, schemeUser: boolean, schemeAdmin: boolean) => void;\n\n    actions: {\n        getTeamStats: (teamId: string) => Promise<{\n            data: boolean;\n        }>;\n        loadProfilesAndReloadTeamMembers: (page: number, perPage: number, teamId?: string, options?: {[key: string]: any}) => Promise<{\n            data: boolean;\n        }>;\n        searchProfilesAndTeamMembers: (term: string, options?: {[key: string]: any}) => Promise<{\n            data: boolean;\n        }>;\n        getFilteredUsersStats: (filters: GetFilteredUsersStatsOpts) => Promise<{\n            data?: UsersStats;\n            error?: ServerError;\n        }>;\n        setUserGridSearch: (term: string) => ActionResult;\n        setUserGridFilters: (filters: GetFilteredUsersStatsOpts) => ActionResult;\n    };\n}\n\ntype State = {\n    loading: boolean;\n}\n\nconst PROFILE_CHUNK_SIZE = 10;\n\nexport default class TeamMembers extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    public componentDidMount() {\n        const {teamId} = this.props;\n        const {loadProfilesAndReloadTeamMembers, getTeamStats, setUserGridSearch, setUserGridFilters} = this.props.actions;\n        Promise.all([\n            setUserGridSearch(''),\n            setUserGridFilters({}),\n            getTeamStats(teamId),\n            loadProfilesAndReloadTeamMembers(0, PROFILE_CHUNK_SIZE * 2, teamId, {active: true}),\n        ]).then(() => this.setStateLoading(false));\n    }\n\n    public async componentDidUpdate(prevProps: Props) {\n        const filtersModified = JSON.stringify(prevProps.filters) !== JSON.stringify(this.props.filters);\n        const searchTermModified = prevProps.searchTerm !== this.props.searchTerm;\n        if (filtersModified || searchTermModified) {\n            this.setStateLoading(true);\n            clearTimeout(this.searchTimeoutId);\n            const searchTerm = this.props.searchTerm;\n            const filters = this.props.filters;\n\n            if (searchTerm === '') {\n                this.searchTimeoutId = 0;\n                if (filtersModified) {\n                    await prevProps.actions.loadProfilesAndReloadTeamMembers(0, PROFILE_CHUNK_SIZE * 2, prevProps.teamId, {active: true, ...filters});\n                }\n                this.setStateLoading(false);\n                return;\n            }\n\n            const searchTimeoutId = window.setTimeout(\n                async () => {\n                    await prevProps.actions.searchProfilesAndTeamMembers(searchTerm, {...filters, team_id: this.props.teamId, allow_inactive: false});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n                    this.setStateLoading(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    private setStateLoading = (loading: boolean) => {\n        this.setState({loading});\n    }\n\n    private loadPage = async (page: number) => {\n        const {loadProfilesAndReloadTeamMembers} = this.props.actions;\n        const {teamId, filters} = this.props;\n        await loadProfilesAndReloadTeamMembers(page + 1, PROFILE_CHUNK_SIZE, teamId, {active: true, ...filters});\n    }\n\n    private removeUser = (user: UserProfile) => {\n        this.props.onRemoveCallback(user);\n    }\n\n    private onAddCallback = (users: UserProfile[]) => {\n        this.props.onAddCallback(users);\n    }\n\n    private onSearch = async (term: string) => {\n        this.props.actions.setUserGridSearch(term);\n    }\n\n    private onFilter = async (filterOptions: FilterOptions) => {\n        const roles = filterOptions.role.values;\n        const systemRoles: string[] = [];\n        const teamRoles: string[] = [];\n        let filters = {};\n        Object.keys(roles).forEach((filterKey: string) => {\n            if (roles[filterKey].value) {\n                if (filterKey.includes('team')) {\n                    teamRoles.push(filterKey);\n                } else {\n                    systemRoles.push(filterKey);\n                }\n            }\n        });\n\n        if (systemRoles.length > 0 || teamRoles.length > 0) {\n            if (systemRoles.length > 0) {\n                filters = {roles: systemRoles};\n            }\n            if (teamRoles.length > 0) {\n                filters = {...filters, team_roles: teamRoles};\n            }\n\n            [...systemRoles, ...teamRoles].forEach((role) => {\n                trackEvent('admin_team_config_page', `${role}_filter_applied_to_members_block`, {team_id: this.props.teamId});\n            });\n            this.props.actions.setUserGridFilters(filters);\n            this.props.actions.getFilteredUsersStats({in_team: this.props.teamId, include_bots: true, ...filters});\n        } else {\n            this.props.actions.setUserGridFilters(filters);\n        }\n    }\n\n    private updateMembership = (membership: BaseMembership) => {\n        this.props.updateRole(membership.user_id, membership.scheme_user, membership.scheme_admin);\n    }\n\n    public render = () => {\n        const {users, team, usersToAdd, usersToRemove, teamMembers, totalCount, searchTerm, isDisabled} = this.props;\n\n        const filterOptions: FilterOptions = {\n            role: {\n                name: (\n                    <FormattedMessage\n                        id='admin.user_grid.role'\n                        defaultMessage='Role'\n                    />\n                ),\n                values: {\n                    [GeneralConstants.SYSTEM_GUEST_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.guest'\n                                defaultMessage='Guest'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.TEAM_USER_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_item.member'\n                                defaultMessage='Member'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.TEAM_ADMIN_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.team_admin'\n                                defaultMessage='Team Admin'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.SYSTEM_ADMIN_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.system_admin'\n                                defaultMessage='System Admin'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: [GeneralConstants.SYSTEM_GUEST_ROLE, GeneralConstants.TEAM_USER_ROLE, GeneralConstants.TEAM_ADMIN_ROLE, GeneralConstants.SYSTEM_ADMIN_ROLE],\n            },\n        };\n        if (!this.props.enableGuestAccounts) {\n            delete filterOptions.role.values[GeneralConstants.SYSTEM_GUEST_ROLE];\n            filterOptions.role.keys = [GeneralConstants.TEAM_USER_ROLE, GeneralConstants.TEAM_ADMIN_ROLE, GeneralConstants.SYSTEM_ADMIN_ROLE];\n        }\n        const filterKeys = ['role'];\n        const filterProps = {\n            options: filterOptions,\n            keys: filterKeys,\n            onFilter: this.onFilter,\n        };\n\n        return (\n            <AdminPanel\n                id='teamMembers'\n                titleId={t('admin.team_settings.team_detail.membersTitle')}\n                titleDefault='Members'\n                subtitleId={t('admin.team_settings.team_detail.membersDescription')}\n                subtitleDefault='A list of users who are currently in the team right now'\n                button={\n                    <ToggleModalButton\n                        id='addTeamMembers'\n                        className='btn btn-primary'\n                        dialogType={AddUsersToTeamModal}\n                        isDisabled={isDisabled}\n                        dialogProps={{\n                            team,\n                            onAddCallback: this.onAddCallback,\n                            skipCommit: true,\n                            excludeUsers: usersToAdd,\n                            includeUsers: usersToRemove,\n                            filterExcludeGuests: true,\n                        }}\n                    >\n                        <FormattedMessage\n                            id='admin.team_settings.team_details.add_members'\n                            defaultMessage='Add Members'\n                        />\n                    </ToggleModalButton>\n                }\n            >\n                <UserGrid\n                    loading={this.state.loading || Boolean(this.props.loading)}\n                    users={users}\n                    loadPage={this.loadPage}\n                    removeUser={this.removeUser}\n                    totalCount={totalCount}\n                    memberships={teamMembers}\n                    updateMembership={this.updateMembership}\n                    onSearch={this.onSearch}\n                    term={searchTerm}\n                    includeUsers={usersToAdd}\n                    excludeUsers={usersToRemove}\n                    scope={'team'}\n                    readOnly={isDisabled}\n                    filterProps={filterProps}\n                />\n            </AdminPanel>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {UserProfile, UsersStats, GetFilteredUsersStatsOpts} from 'matterfoss-redux/types/users';\nimport {GenericAction, ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\n\nimport {filterProfilesStartingWithTerm, profileListToMap} from 'matterfoss-redux/utils/user_utils';\n\nimport {getTeamStats as loadTeamStats} from 'matterfoss-redux/actions/teams';\nimport {getFilteredUsersStats} from 'matterfoss-redux/actions/users';\n\nimport {getMembersInTeams, getTeamStats, getTeam} from 'matterfoss-redux/selectors/entities/teams';\nimport {getProfilesInTeam, searchProfilesInTeam, filterProfiles, getFilteredUsersStats as selectFilteredUsersStats} from 'matterfoss-redux/selectors/entities/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {GlobalState} from 'types/store';\nimport {loadProfilesAndReloadTeamMembers, searchProfilesAndTeamMembers} from 'actions/user_actions.jsx';\nimport {setUserGridSearch, setUserGridFilters} from 'actions/views/search';\n\nimport TeamMembers from './team_members';\n\ntype Props = {\n    teamId: string;\n    usersToAdd: Dictionary<UserProfile>;\n    usersToRemove: Dictionary<UserProfile>;\n};\n\ntype Actions = {\n    getTeamStats: (teamId: string) => Promise<{\n        data: boolean;\n    }>;\n    loadProfilesAndReloadTeamMembers: (page: number, perPage: number, teamId?: string, options?: {[key: string]: any}) => Promise<{\n        data: boolean;\n    }>;\n    searchProfilesAndTeamMembers: (term: string, options?: {[key: string]: any}) => Promise<{\n        data: boolean;\n    }>;\n    getFilteredUsersStats: (filters: GetFilteredUsersStatsOpts) => Promise<{\n        data?: UsersStats;\n        error?: ServerError;\n    }>;\n    setUserGridSearch: (term: string) => ActionResult;\n    setUserGridFilters: (filters: GetFilteredUsersStatsOpts) => ActionResult;\n};\n\nfunction searchUsersToAdd(users: Dictionary<UserProfile>, term: string): Dictionary<UserProfile> {\n    const profiles = filterProfilesStartingWithTerm(Object.keys(users).map((key) => users[key]), term);\n    const filteredProfilesMap = filterProfiles(profileListToMap(profiles), {});\n\n    return filteredProfilesMap;\n}\n\nfunction mapStateToProps(state: GlobalState, props: Props) {\n    const {teamId, usersToRemove} = props;\n    let {usersToAdd} = props;\n\n    const teamMembers = getMembersInTeams(state)[teamId] || {};\n    const team = getTeam(state, teamId) || {};\n    const config = getConfig(state);\n    const searchTerm = state.views.search.userGridSearch?.term || '';\n    const filters = state.views.search.userGridSearch?.filters || {};\n\n    let totalCount: number;\n    if (Object.keys(filters).length === 0) {\n        const stats = getTeamStats(state)[teamId] || {active_member_count: 0};\n        totalCount = stats.active_member_count;\n    } else {\n        const filteredUserStats: UsersStats = selectFilteredUsersStats(state) || {\n            total_users_count: 0,\n        };\n        totalCount = filteredUserStats.total_users_count;\n    }\n\n    let users = [];\n    if (searchTerm) {\n        users = searchProfilesInTeam(state, teamId, searchTerm, false, {active: true, ...filters});\n        usersToAdd = searchUsersToAdd(usersToAdd, searchTerm);\n    } else {\n        users = getProfilesInTeam(state, teamId, {active: true, ...filters});\n    }\n\n    return {\n        filters,\n        teamId,\n        team,\n        users,\n        teamMembers,\n        usersToAdd,\n        usersToRemove,\n        totalCount,\n        searchTerm,\n        enableGuestAccounts: config.EnableGuestAccounts === 'true',\n    };\n}\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            getTeamStats: loadTeamStats,\n            loadProfilesAndReloadTeamMembers,\n            searchProfilesAndTeamMembers,\n            getFilteredUsersStats,\n            setUserGridSearch,\n            setUserGridFilters,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamMembers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {cloneDeep} from 'lodash';\n\nimport {Groups} from 'matterfoss-redux/constants';\n\nimport {browserHistory} from 'utils/browser_history';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormError from 'components/form_error';\n\nimport RemoveConfirmModal from '../../remove_confirm_modal';\nimport {NeedDomainsError, NeedGroupsError, UsersWillBeRemovedError} from '../../errors';\n\nimport SaveChangesPanel from '../../save_changes_panel';\n\nimport {TeamProfile} from './team_profile';\nimport {TeamModes} from './team_modes';\nimport {TeamGroups} from './team_groups';\nimport TeamMembers from './team_members/index';\n\nexport default class TeamDetails extends React.PureComponent {\n    static propTypes = {\n        teamID: PropTypes.string.isRequired,\n        team: PropTypes.object.isRequired,\n        totalGroups: PropTypes.number.isRequired,\n        groups: PropTypes.arrayOf(PropTypes.object),\n        allGroups: PropTypes.object.isRequired,\n        isDisabled: PropTypes.bool,\n        actions: PropTypes.shape({\n            setNavigationBlocked: PropTypes.func.isRequired,\n            getTeam: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            membersMinusGroupMembers: PropTypes.func.isRequired,\n            getGroups: PropTypes.func.isRequired,\n            patchTeam: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n            removeUserFromTeam: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        team: {display_name: '', id: ''},\n    };\n\n    constructor(props) {\n        super(props);\n        const team = props.team;\n        this.state = {\n            groups: props.groups,\n            syncChecked: Boolean(team.group_constrained),\n            allAllowedChecked: team.allow_open_invite,\n            allowedDomainsChecked: Boolean(team.allowed_domains && team.allowed_domains !== ''),\n            allowedDomains: team.allowed_domains || '',\n            saving: false,\n            showRemoveConfirmation: false,\n            usersToRemoveCount: 0,\n            usersToRemove: {},\n            usersToAdd: {},\n            rolesToUpdate: {},\n            totalGroups: props.totalGroups,\n            saveNeeded: false,\n            serverError: null,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const {totalGroups, team} = this.props;\n        if (prevProps.team.id !== team.id || totalGroups !== prevProps.totalGroups) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({\n                totalGroups,\n                syncChecked: Boolean(team.group_constrained),\n                allAllowedChecked: team.allow_open_invite,\n                allowedDomainsChecked: Boolean(team.allowed_domains && team.allowed_domains !== ''),\n                allowedDomains: team.allowed_domains || '',\n            });\n        }\n    }\n\n    componentDidMount() {\n        const {teamID, actions} = this.props;\n        actions.getTeam(teamID).\n            then(() => actions.getGroups(teamID)).\n            then(() => this.setState({groups: this.props.groups}));\n    }\n\n    setNewGroupRole = (gid) => {\n        const groups = cloneDeep(this.state.groups).map((g) => {\n            if (g.id === gid) {\n                g.scheme_admin = !g.scheme_admin;\n            }\n            return g;\n        });\n        this.processGroupsChange(groups);\n    }\n\n    handleSubmit = async () => {\n        this.setState({showRemoveConfirmation: false, saving: true});\n        const {groups, allAllowedChecked, allowedDomainsChecked, allowedDomains, syncChecked, usersToAdd, usersToRemove, rolesToUpdate} = this.state;\n\n        let serverError = null;\n        let saveNeeded = false;\n\n        const {team, groups: origGroups, teamID, actions} = this.props;\n        if (allowedDomainsChecked && allowedDomains.trim().length === 0) {\n            saveNeeded = true;\n            serverError = <NeedDomainsError/>;\n        } else if (this.state.groups.length === 0 && syncChecked) {\n            serverError = <NeedGroupsError/>;\n            saveNeeded = true;\n        } else {\n            const patchTeamPromise = actions.patchTeam({\n                ...team,\n                group_constrained: syncChecked,\n                allowed_domains: allowedDomainsChecked ? allowedDomains : '',\n                allow_open_invite: allAllowedChecked,\n            });\n            const patchTeamSyncable = groups.\n                filter((g) => {\n                    return origGroups.some((group) => group.id === g.id && group.scheme_admin !== g.scheme_admin);\n                }).\n                map((g) => actions.patchGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM, {scheme_admin: g.scheme_admin}));\n            const unlink = origGroups.\n                filter((g) => {\n                    return !groups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.unlinkGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM));\n            const link = groups.\n                filter((g) => {\n                    return !origGroups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.linkGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true, scheme_admin: g.scheme_admin}));\n            const result = await Promise.all([patchTeamPromise, ...patchTeamSyncable, ...unlink, ...link]);\n            const resultWithError = result.find((r) => r.error);\n            if (resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            } else {\n                if (unlink.length > 0) {\n                    trackEvent('admin_team_config_page', 'groups_removed_from_team', {count: unlink.length, team_id: teamID});\n                }\n                if (link.length > 0) {\n                    trackEvent('admin_team_config_page', 'groups_added_to_team', {count: link.length, team_id: teamID});\n                }\n                await actions.getGroups(teamID);\n            }\n        }\n\n        const usersToAddList = Object.values(usersToAdd);\n        const usersToRemoveList = Object.values(usersToRemove);\n        const userRolesToUpdate = Object.keys(rolesToUpdate);\n        const usersToUpdate = usersToAddList.length > 0 || usersToRemoveList.length > 0 || userRolesToUpdate.length > 0;\n        if (usersToUpdate && !syncChecked) {\n            const addUserActions = [];\n            const removeUserActions = [];\n            const {addUserToTeam, removeUserFromTeam, updateTeamMemberSchemeRoles} = this.props.actions;\n            usersToAddList.forEach((user) => {\n                addUserActions.push(addUserToTeam(teamID, user.id));\n            });\n            usersToRemoveList.forEach((user) => {\n                removeUserActions.push(removeUserFromTeam(teamID, user.id));\n            });\n\n            if (addUserActions.length > 0) {\n                const result = await Promise.all(addUserActions);\n                const resultWithError = result.find((r) => r.error);\n                const count = result.filter((r) => r.data).length;\n                if (resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_team_config_page', 'members_added_to_team', {count, team_id: teamID});\n                }\n            }\n\n            if (removeUserActions.length > 0) {\n                const result = await Promise.all(removeUserActions);\n                const resultWithError = result.find((r) => r.error);\n                const count = result.filter((r) => r.data).length;\n                if (resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_team_config_page', 'members_removed_from_team', {count, team_id: teamID});\n                }\n            }\n\n            const rolesToPromote = [];\n            const rolesToDemote = [];\n            userRolesToUpdate.forEach((userId) => {\n                const {schemeUser, schemeAdmin} = rolesToUpdate[userId];\n                if (schemeAdmin) {\n                    rolesToPromote.push(updateTeamMemberSchemeRoles(teamID, userId, schemeUser, schemeAdmin));\n                } else {\n                    rolesToDemote.push(updateTeamMemberSchemeRoles(teamID, userId, schemeUser, schemeAdmin));\n                }\n            });\n\n            if (rolesToPromote.length > 0) {\n                const result = await Promise.all(rolesToPromote);\n                const resultWithError = result.find((r) => r.error);\n                const count = result.filter((r) => r.data).length;\n                if (resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_team_config_page', 'members_elevated_to_team_admin', {count, team_id: teamID});\n                }\n            }\n\n            if (rolesToDemote.length > 0) {\n                const result = await Promise.all(rolesToDemote);\n                const resultWithError = result.find((r) => r.error);\n                const count = result.filter((r) => r.data).length;\n                if (resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_team_config_page', 'admins_demoted_to_team_member', {count, team_id: teamID});\n                }\n            }\n        }\n\n        this.setState({usersToRemoveCount: 0, rolesToUpdate: {}, usersToAdd: {}, usersToRemove: {}, serverError, saving: false, saveNeeded}, () => {\n            actions.setNavigationBlocked(saveNeeded);\n            if (!saveNeeded && !serverError) {\n                browserHistory.push('/admin_console/user_management/teams');\n            }\n        });\n    }\n\n    setToggles = (syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains) => {\n        this.setState({\n            saveNeeded: true,\n            syncChecked,\n            allAllowedChecked: !syncChecked && allAllowedChecked,\n            allowedDomainsChecked: !syncChecked && allowedDomainsChecked,\n            allowedDomains,\n        }, () => this.processGroupsChange(this.state.groups));\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    async processGroupsChange(groups) {\n        const {teamID, actions} = this.props;\n        actions.setNavigationBlocked(true);\n\n        let serverError = null;\n        let usersToRemoveCount = 0;\n        if (this.state.syncChecked) {\n            try {\n                if (groups.length === 0) {\n                    serverError = <NeedGroupsError warning={true}/>;\n                } else {\n                    const result = await actions.membersMinusGroupMembers(teamID, groups.map((g) => g.id));\n                    usersToRemoveCount = result.data.total_count;\n                    if (usersToRemoveCount > 0) {\n                        serverError = (\n                            <UsersWillBeRemovedError\n                                total={usersToRemoveCount}\n                                users={result.data.users}\n                                scope={'team'}\n                                scopeId={this.props.teamID}\n                            />\n                        );\n                    }\n                }\n            } catch (ex) {\n                serverError = ex;\n            }\n        }\n        this.setState({groups, usersToRemoveCount, saveNeeded: true, serverError});\n    }\n\n    addUsersToAdd = (users) => {\n        let {usersToRemoveCount} = this.state;\n        const {usersToAdd, usersToRemove} = this.state;\n        users.forEach((user) => {\n            if (usersToRemove[user.id]?.id === user.id) {\n                delete usersToRemove[user.id];\n                usersToRemoveCount -= 1;\n            } else {\n                usersToAdd[user.id] = user;\n            }\n        });\n        this.setState({usersToAdd: {...usersToAdd}, usersToRemove: {...usersToRemove}, usersToRemoveCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addUserToRemove = (user) => {\n        let {usersToRemoveCount} = this.state;\n        const {usersToAdd, usersToRemove, rolesToUpdate} = this.state;\n        if (usersToAdd[user.id]?.id === user.id) {\n            delete usersToAdd[user.id];\n        } else if (usersToRemove[user.id]?.id !== user.id) {\n            usersToRemoveCount += 1;\n            usersToRemove[user.id] = user;\n        }\n        delete rolesToUpdate[user.id];\n        this.setState({usersToRemove: {...usersToRemove}, usersToAdd: {...usersToAdd}, rolesToUpdate: {...rolesToUpdate}, usersToRemoveCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addRolesToUpdate = (userId, schemeUser, schemeAdmin) => {\n        const {rolesToUpdate} = this.state;\n        rolesToUpdate[userId] = {schemeUser, schemeAdmin};\n        this.setState({rolesToUpdate: {...rolesToUpdate}, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleGroupRemoved = (gid) => {\n        const groups = this.state.groups.filter((g) => g.id !== gid);\n        this.setState({totalGroups: this.state.totalGroups - 1});\n        this.processGroupsChange(groups);\n    }\n\n    handleGroupChange = (groupIDs) => {\n        const groups = [...this.state.groups, ...groupIDs.map((gid) => this.props.allGroups[gid])];\n        this.setState({totalGroups: this.state.totalGroups + groupIDs.length});\n        this.processGroupsChange(groups);\n    }\n\n    hideRemoveUsersModal = () => {\n        this.setState({showRemoveConfirmation: false});\n    }\n    showRemoveUsersModal = () => {\n        if (this.state.usersToRemoveCount > 0) {\n            this.setState({showRemoveConfirmation: true});\n        } else {\n            this.handleSubmit();\n        }\n    }\n\n    render = () => {\n        const {team} = this.props;\n        const {totalGroups, saving, saveNeeded, serverError, groups, allAllowedChecked, allowedDomainsChecked, allowedDomains, syncChecked, showRemoveConfirmation, usersToRemoveCount} = this.state;\n        const missingGroup = (og) => !groups.find((g) => g.id === og.id);\n        const removedGroups = this.props.groups.filter(missingGroup);\n\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/teams'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.team_settings.team_detail.group_configuration'\n                            defaultMessage='Team Configuration'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <RemoveConfirmModal\n                            amount={usersToRemoveCount}\n                            inChannel={false}\n                            show={showRemoveConfirmation}\n                            onCancel={this.hideRemoveUsersModal}\n                            onConfirm={this.handleSubmit}\n                        />\n                        <TeamProfile\n                            team={team}\n                        />\n\n                        <TeamModes\n                            allAllowedChecked={allAllowedChecked}\n                            allowedDomainsChecked={allowedDomainsChecked}\n                            allowedDomains={allowedDomains}\n                            syncChecked={syncChecked}\n                            onToggle={this.setToggles}\n                            isDisabled={this.props.isDisabled}\n                        />\n\n                        <TeamGroups\n                            syncChecked={syncChecked}\n                            team={team}\n                            groups={groups}\n                            removedGroups={removedGroups}\n                            totalGroups={totalGroups}\n                            onAddCallback={this.handleGroupChange}\n                            onGroupRemoved={this.handleGroupRemoved}\n                            setNewGroupRole={this.setNewGroupRole}\n                            isDisabled={this.props.isDisabled}\n                        />\n\n                        {!syncChecked &&\n                            <TeamMembers\n                                onRemoveCallback={this.addUserToRemove}\n                                onAddCallback={this.addUsersToAdd}\n                                usersToRemove={this.state.usersToRemove}\n                                usersToAdd={this.state.usersToAdd}\n                                updateRole={this.addRolesToUpdate}\n                                teamId={this.props.teamID}\n                                isDisabled={this.props.isDisabled}\n                            />\n                        }\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    cancelLink='/admin_console/user_management/teams'\n                    saveNeeded={saveNeeded}\n                    onClick={this.showRemoveUsersModal}\n                    serverError={serverError}\n                    isDisabled={this.props.isDisabled}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\n\nimport {connect} from 'react-redux';\n\nimport {getTeam} from 'matterfoss-redux/selectors/entities/teams';\n\nimport {getTeam as fetchTeam, membersMinusGroupMembers, patchTeam, removeUserFromTeam, updateTeamMemberSchemeRoles, addUserToTeam} from 'matterfoss-redux/actions/teams';\nimport {getAllGroups, getGroupsAssociatedToTeam} from 'matterfoss-redux/selectors/entities/groups';\n\nimport {\n    getGroupsAssociatedToTeam as fetchAssociatedGroups,\n    linkGroupSyncable,\n    unlinkGroupSyncable,\n    patchGroupSyncable,\n} from 'matterfoss-redux/actions/groups';\n\nimport {setNavigationBlocked} from 'actions/admin_actions';\n\nimport TeamDetails from './team_details';\n\nfunction mapStateToProps(state, props) {\n    const teamID = props.match.params.team_id;\n    const team = getTeam(state, teamID);\n    const groups = getGroupsAssociatedToTeam(state, teamID);\n    const allGroups = getAllGroups(state, teamID);\n    const totalGroups = groups.length;\n    return {\n        team,\n        groups,\n        totalGroups,\n        allGroups,\n        teamID,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeam: fetchTeam,\n            getGroups: fetchAssociatedGroups,\n            patchTeam,\n            linkGroupSyncable,\n            unlinkGroupSyncable,\n            membersMinusGroupMembers,\n            setNavigationBlocked,\n            patchGroupSyncable,\n            removeUserFromTeam,\n            addUserToTeam,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    id: string;\n    name: string;\n    checked: boolean;\n    label: string;\n    updateOption: (checked: boolean, name: string) => void;\n};\n\nclass TeamFilterCheckbox extends React.PureComponent<Props> {\n    toggleOption = () => {\n        const {checked, id, updateOption} = this.props;\n        updateOption(!checked, id);\n    }\n\n    render() {\n        const {\n            checked,\n            id,\n            label,\n            name,\n        } = this.props;\n\n        return (\n            <div className='TeamFilterDropdown_checkbox'>\n                <label>\n                    <input\n                        type='checkbox'\n                        id={id}\n                        name={name}\n                        checked={checked}\n                        onChange={this.toggleOption}\n                    />\n\n                    {label}\n                </label>\n            </div>\n        );\n    }\n}\n\nexport default TeamFilterCheckbox;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {createSelector} from 'reselect';\n\nimport {Team, TeamSearchOpts} from 'matterfoss-redux/types/teams';\nimport {debounce} from 'matterfoss-redux/actions/helpers';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport InfiniteScroll from 'components/gif_picker/components/InfiniteScroll';\nimport * as Utils from 'utils/utils.jsx';\n\nimport {FilterOption, FilterValues} from '../filter';\n\nimport TeamFilterCheckbox from './team_filter_checkbox';\n\nimport './team_filter_dropdown.scss';\nimport '../filter.scss';\n\ntype Props = {\n    option: FilterOption;\n    optionKey: string;\n    updateValues: (values: FilterValues, optionKey: string) => void;\n\n    teams: Team[];\n    total: number;\n    actions: {\n        getData: (page: number, perPage: number) => Promise<{ data: any }>;\n        searchTeams: (term: string, opts: TeamSearchOpts) => Promise<{ data: any }>;\n    };\n};\n\ntype State = {\n    page: number;\n    loading: boolean;\n    show: boolean;\n    savedSelectedTeams: Team[];\n    searchResults: Team[];\n    searchTerm: string;\n    searchTotal: number;\n}\n\nconst getSelectedTeams = createSelector(\n    (selectedTeamIds: string[]) => selectedTeamIds,\n    (selectedTeamIds: string[], teams: Team[]) => teams,\n    (selectedTeamIds, teams) => teams.filter((team) => selectedTeamIds.includes(team.id)),\n);\n\nconst getFilteredTeams = createSelector(\n    (term: string) => term.trim().toLowerCase(),\n    (term: string, teams: Team[]) => teams,\n    (term: string, teams: Team[]) => {\n        return teams.filter((team: Team) => team?.display_name?.toLowerCase().includes(term));\n    },\n);\n\nconst TEAMS_PER_PAGE = 50;\nconst MAX_BUTTON_TEXT_LENGTH = 30;\nconst INITIAL_SEARCH_RETRY_TIMEOUT = 300;\nclass TeamFilterDropdown extends React.PureComponent<Props, State> {\n    private ref: React.RefObject<HTMLDivElement>;\n    private searchRef: React.RefObject<HTMLInputElement>;\n    private clearRef: React.RefObject<HTMLInputElement>;\n    private listRef: React.RefObject<HTMLDivElement>;\n    private searchRetryInterval: number;\n    private searchRetryId: number;\n    private scrollPosition: number;\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n            loading: false,\n            show: false,\n            savedSelectedTeams: [],\n            searchResults: [],\n            searchTerm: '',\n            searchTotal: 0,\n        };\n\n        this.ref = React.createRef();\n        this.searchRef = React.createRef();\n        this.clearRef = React.createRef();\n        this.listRef = React.createRef();\n        this.searchRetryInterval = INITIAL_SEARCH_RETRY_TIMEOUT;\n        this.searchRetryId = 0;\n        this.scrollPosition = 0;\n    }\n\n    componentDidMount() {\n        document.addEventListener('mousedown', this.handleClickOutside);\n        this.props.actions.getData(0, TEAMS_PER_PAGE);\n    }\n\n    componentWillUnmount = () => {\n        document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n\n    hidePopover = () => {\n        this.setState({show: false});\n    }\n\n    togglePopover = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (this.state.show) {\n            this.hidePopover();\n            return;\n        }\n\n        if (this.clearRef?.current?.contains(event.target as Node)) {\n            return;\n        }\n\n        const selectedTeamIds = this.props.option.values.team_ids.value as string[];\n        const selectedTeams = getSelectedTeams(selectedTeamIds, this.props.teams);\n        const savedSelectedTeams = selectedTeams.sort((a, b) => a.display_name.localeCompare(b.display_name));\n        this.setState({show: true, savedSelectedTeams, searchTerm: ''}, () => {\n            this.searchRef?.current?.focus();\n            if (this.listRef?.current) {\n                this.listRef.current.scrollTop = 0;\n            }\n        });\n    }\n\n    handleClickOutside = (event: MouseEvent) => {\n        if (this.ref?.current?.contains(event.target as Node)) {\n            return;\n        }\n        this.hidePopover();\n    }\n\n    setScrollPosition = (event: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        this.scrollPosition = (event.target as HTMLDivElement).scrollTop;\n    }\n\n    hasMore = (): boolean => {\n        if (this.state.loading) {\n            return false;\n        } else if (this.state.searchTerm.length > 0) {\n            return this.state.searchTotal > this.state.searchResults.length;\n        }\n        return this.props.total > (this.state.page + 1) * TEAMS_PER_PAGE;\n    }\n\n    loadMore = async () => {\n        const {searchTerm, loading} = this.state;\n        if (loading) {\n            return;\n        }\n        this.setState({loading: true});\n        const page = this.state.page + 1;\n        if (searchTerm.length > 0) {\n            this.searchTeams(searchTerm, page);\n        } else {\n            await this.props.actions.getData(page, TEAMS_PER_PAGE);\n        }\n\n        if (this.listRef?.current) {\n            this.listRef.current.scrollTop = this.scrollPosition;\n        }\n\n        this.setState({page, loading: false});\n    }\n\n    searchTeams = async (term: string, page: number) => {\n        let searchResults = [];\n        let searchTotal = 0;\n        const response = await this.props.actions.searchTeams(term, {page, per_page: TEAMS_PER_PAGE});\n        if (response?.data) {\n            const {data} = response;\n            searchResults = page > 0 ? this.state.searchResults.concat(data.teams) : data.teams;\n            searchTotal = data.total_count;\n            this.setState({page, loading: false, searchResults, searchTotal, searchTerm: term});\n            return;\n        }\n        this.searchRetryInterval *= 2;\n        this.searchRetryId = window.setTimeout(this.searchTeams.bind(null, term, page), this.searchRetryInterval);\n    }\n\n    searchTeamsDebounced = debounce((page, term) => this.searchTeams(term, page), INITIAL_SEARCH_RETRY_TIMEOUT, false, () => {});\n\n    handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const searchTerm = e.target.value;\n\n        if (this.searchRetryId !== 0) {\n            clearTimeout(this.searchRetryId);\n            this.searchRetryId = 0;\n            this.searchRetryInterval = INITIAL_SEARCH_RETRY_TIMEOUT;\n        }\n\n        if (searchTerm.length === 0) {\n            const selectedTeamIds = this.props.option.values.team_ids.value as string[];\n            const selectedTeams = getSelectedTeams(selectedTeamIds, this.props.teams);\n            const savedSelectedTeams = selectedTeams.sort((a, b) => a.display_name.localeCompare(b.display_name));\n            this.setState({searchTerm, savedSelectedTeams, searchResults: [], searchTotal: 0, page: 0});\n        } else {\n            this.setState({loading: true, searchTerm, searchResults: [], searchTotal: 0, page: 0});\n        }\n\n        this.searchTeamsDebounced(0, searchTerm);\n    }\n\n    resetTeams = () => {\n        this.setState({savedSelectedTeams: [], show: false, searchResults: [], searchTotal: 0, page: 0, searchTerm: ''});\n        this.props.updateValues({team_ids: {name: 'Teams', value: []}}, 'teams');\n    }\n\n    toggleTeam = (checked: boolean, teamId: string) => {\n        const prevSelectedTeamIds = this.props.option.values.team_ids.value as string[];\n        let selectedTeamIds;\n        if (checked) {\n            selectedTeamIds = [...prevSelectedTeamIds, teamId];\n        } else {\n            selectedTeamIds = prevSelectedTeamIds.filter((id) => id !== teamId);\n        }\n\n        this.props.updateValues({team_ids: {name: 'Teams', value: selectedTeamIds}}, 'teams');\n    }\n\n    generateButtonText = () => {\n        const selectedTeamIds = this.props.option.values.team_ids.value as string[];\n        if (selectedTeamIds.length === 0) {\n            return {\n                buttonText: (\n                    <FormattedMessage\n                        id='admin.filter.all_teams'\n                        defaultMessage='All Teams'\n                    />\n                ),\n                buttonMore: 0,\n            };\n        }\n\n        const selectedTeams = getSelectedTeams(selectedTeamIds, this.props.teams);\n        let buttonText = '';\n        let buttonMore = 0;\n        let buttonOverflowed = false;\n        selectedTeams.forEach((team, index) => {\n            buttonOverflowed = buttonOverflowed || !(MAX_BUTTON_TEXT_LENGTH > (buttonText.length + team.display_name.length));\n            if (index === 0) {\n                buttonText += team.display_name;\n            } else if (buttonOverflowed) {\n                buttonMore += 1;\n            } else {\n                buttonText = `${buttonText}, ${team.display_name}`;\n            }\n        });\n\n        return {buttonText, buttonMore};\n    }\n\n    render() {\n        const selectedTeamIds = this.props.option.values.team_ids.value as string[];\n        const {buttonText, buttonMore} = this.generateButtonText();\n\n        const createFilterCheckbox = (team: Team) => {\n            return (\n                <TeamFilterCheckbox\n                    id={team.id}\n                    name={team.id}\n                    checked={selectedTeamIds.includes(team.id)}\n                    updateOption={this.toggleTeam}\n                    label={team.display_name}\n                    key={team.id}\n                />\n            );\n        };\n\n        let visibleTeams = this.state.searchResults;\n        let selectedTeams: JSX.Element[] = [];\n        if (this.state.searchTerm.length === 0) {\n            visibleTeams = this.props.teams.slice(0, (this.state.page + 1) * TEAMS_PER_PAGE).filter((team) => !this.state.savedSelectedTeams.some((selectedTeam) => selectedTeam.id === team.id));\n            selectedTeams = this.state.savedSelectedTeams.map(createFilterCheckbox);\n        } else {\n            visibleTeams = getFilteredTeams(this.state.searchTerm, visibleTeams);\n        }\n        const teamsToDisplay = visibleTeams.map(createFilterCheckbox);\n        const chevron = this.state.show ? (<i className='Icon icon-chevron-up'/>) : (<i className='Icon icon-chevron-down'/>);\n\n        return (\n            <div\n                className='FilterList FilterList__full'\n            >\n                <div className='FilterList_name'>\n                    {this.props.option.name}\n                </div>\n\n                <div\n                    className='TeamFilterDropdown'\n                    ref={this.ref}\n                >\n                    <button\n                        type='button'\n                        className='TeamFilterDropdownButton'\n                        onClick={this.togglePopover}\n                    >\n                        <div className='TeamFilterDropdownButton_text'>\n                            {buttonText}\n                        </div>\n\n                        {buttonMore > 0 && (\n                            <div className='TeamFilterDropdownButton_more'>\n                                <FormattedMessage\n                                    id='admin.filter.count_more'\n                                    defaultMessage='+{count, number} more'\n                                    values={{count: buttonMore}}\n                                />\n                            </div>\n                        )}\n\n                        {selectedTeamIds.length > 0 && (\n                            <i\n                                className={'TeamFilterDropdownButton_clear fa fa-times-circle'}\n                                onClick={this.resetTeams}\n                                ref={this.clearRef}\n                            />\n                        )}\n\n                        <div className='TeamFilterDropdownButton_icon'>\n                            {chevron}\n                        </div>\n                    </button>\n\n                    <div className={this.state.show ? 'TeamFilterDropdownOptions TeamFilterDropdownOptions__active' : 'TeamFilterDropdownOptions'}>\n                        <input\n                            className='TeamFilterDropdown_search'\n                            type='text'\n                            placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                            value={this.state.searchTerm}\n                            onChange={this.handleSearch}\n                            ref={this.searchRef}\n                        />\n\n                        {selectedTeamIds.length > 0 && (\n                            <a\n                                className='TeamFilterDropdown_reset'\n                                onClick={this.resetTeams}\n                            >\n                                <FormattedMessage\n                                    id='admin.filter.reset_teams'\n                                    defaultMessage='Reset to all teams'\n                                />\n                            </a>\n                        )}\n\n                        {selectedTeamIds.length === 0 && (\n                            <div\n                                className='TeamFilterDropdown_allTeams'\n                            >\n                                <FormattedMessage\n                                    id='admin.filter.showing_all_teams'\n                                    defaultMessage='Showing all teams'\n                                />\n                            </div>\n                        )}\n\n                        <div\n                            className='TeamFilterDropdownOptions_list'\n                            ref={this.listRef}\n                            onScroll={this.setScrollPosition}\n                        >\n                            {selectedTeams}\n\n                            {selectedTeams.length > 0 && <div className='TeamFilterDropdown_divider'/>}\n\n                            <InfiniteScroll\n                                hasMore={this.hasMore()}\n                                loadMore={this.loadMore}\n                                threshold={50}\n                                useWindow={false}\n                                initialLoad={false}\n                            >\n                                {teamsToDisplay}\n                            </InfiniteScroll>\n\n                            {this.state.loading && (\n                                <div className='TeamFilterDropdown_loading'>\n                                    <LoadingSpinner/>\n                                    <FormattedMessage\n                                        id='admin.data_grid.loading'\n                                        defaultMessage='Loading'\n                                    />\n                                </div>\n                            )}\n\n                            {teamsToDisplay.length === 0 && selectedTeams.length === 0 && !this.state.loading && (\n                                <div className='TeamFilterDropdown_empty'>\n                                    <FormattedMessage\n                                        id='admin.filter.no_results'\n                                        defaultMessage='No items match'\n                                    />\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TeamFilterDropdown;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {createSelector} from 'reselect';\n\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\nimport {TeamSearchOpts} from 'matterfoss-redux/types/teams';\nimport {getTeams as fetchTeams, searchTeams} from 'matterfoss-redux/actions/teams';\nimport {getTeams} from 'matterfoss-redux/selectors/entities/teams';\n\nimport {GlobalState} from 'types/store';\n\nimport TeamFilterDropdown from './team_filter_dropdown';\n\nconst getSortedListOfTeams = createSelector(\n    getTeams,\n    (teams) => Object.values(teams).sort((a, b) => a.display_name.localeCompare(b.display_name)),\n);\n\ntype Actions = {\n    getData: (page: number, perPage: number) => Promise<{ data: any }>;\n    searchTeams: (term: string, opts: TeamSearchOpts) => Promise<{ data: any }>;\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        teams: getSortedListOfTeams(state),\n        total: state.entities.teams.totalCount || 0,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getData: (page, pageSize) => fetchTeams(page, pageSize, true),\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamFilterDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\nimport {ChannelWithTeamData, ChannelSearchOpts} from 'matterfoss-redux/types/channels';\nimport {debounce} from 'matterfoss-redux/actions/helpers';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport {Constants} from 'utils/constants';\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport DataGrid, {Row, Column} from 'components/admin_console/data_grid/data_grid';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\nimport TeamFilterDropdown from 'components/admin_console/filter/team_filter_dropdown';\nimport {PAGE_SIZE} from 'components/admin_console/team_channel_settings/abstract_list.jsx';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\n\nimport './channel_list.scss';\ninterface ChannelListProps {\n    actions: {\n        searchAllChannels: (term: string, opts: ChannelSearchOpts) => Promise<{ data: any }>;\n        getData: (page: number, perPage: number, notAssociatedToGroup?: string, excludeDefaultChannels?: boolean, includeDeleted?: boolean) => ActionFunc | ActionResult | Promise<ChannelWithTeamData[]>;\n    };\n    data: ChannelWithTeamData[];\n    total: number;\n    removeGroup?: () => void;\n    emptyListTextId?: string;\n    emptyListTextDefaultMessage?: string;\n    isDisabled?: boolean;\n}\n\ninterface ChannelListState {\n    term: string;\n    channels: ChannelWithTeamData[];\n    loading: boolean;\n    page: number;\n    total: number;\n    searchErrored: boolean;\n    filters: ChannelSearchOpts;\n}\n\nconst ROW_HEIGHT = 40;\n\nexport default class ChannelList extends React.PureComponent<ChannelListProps, ChannelListState> {\n    constructor(props: ChannelListProps) {\n        super(props);\n        this.state = {\n            loading: false,\n            term: '',\n            channels: [],\n            page: 0,\n            total: 0,\n            searchErrored: false,\n            filters: {},\n        };\n    }\n\n    componentDidMount() {\n        this.loadPage();\n    }\n\n    isSearching = (term: string, filters: ChannelSearchOpts) => {\n        return term.length > 0 || Object.keys(filters).length > 0;\n    }\n\n    getPaginationProps = () => {\n        const {page, term, filters} = this.state;\n        const total = this.isSearching(term, filters) ? this.state.total : this.props.total;\n        const startCount = (page * PAGE_SIZE) + 1;\n        let endCount = (page + 1) * PAGE_SIZE;\n        endCount = endCount > total ? total : endCount;\n        return {startCount, endCount, total};\n    }\n\n    loadPage = async (page = 0, term = '', filters = {}) => {\n        this.setState({loading: true, term, filters});\n        if (this.isSearching(term, filters)) {\n            if (page > 0) {\n                this.searchChannels(page, term, filters);\n            } else {\n                this.searchChannelsDebounced(page, term, filters);\n            }\n            return;\n        }\n\n        await this.props.actions.getData(page, PAGE_SIZE, '', false, true);\n        this.setState({page, loading: false});\n    }\n\n    searchChannels = async (page = 0, term = '', filters = {}) => {\n        let channels = [];\n        let total = 0;\n        let searchErrored = true;\n        const response = await this.props.actions.searchAllChannels(term, {...filters, page, per_page: PAGE_SIZE, include_deleted: true});\n        if (response?.data) {\n            channels = page > 0 ? this.state.channels.concat(response.data.channels) : response.data.channels;\n            total = response.data.total_count;\n            searchErrored = false;\n        }\n        this.setState({page, loading: false, channels, total, searchErrored});\n    }\n\n    searchChannelsDebounced = debounce((page, term, filters = {}) => this.searchChannels(page, term, filters), 300, false, () => {});\n\n    nextPage = () => {\n        this.loadPage(this.state.page + 1, this.state.term, this.state.filters);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    onSearch = async (term = '') => {\n        this.loadPage(0, term, this.state.filters);\n    }\n\n    getColumns = (): Column[] => {\n        const name: JSX.Element = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.nameHeader'\n                defaultMessage='Name'\n            />\n        );\n        const team: JSX.Element = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.teamHeader'\n                defaultMessage='Team'\n            />\n        );\n        const management: JSX.Element = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.managementHeader'\n                defaultMessage='Management'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                width: 4,\n                fixed: true,\n            },\n            {\n                name: team,\n                field: 'team',\n                width: 1.5,\n                fixed: true,\n            },\n            {\n                name: management,\n                field: 'management',\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'edit',\n                textAlign: 'right',\n                fixed: true,\n            },\n        ];\n    }\n\n    getRows = (): Row[] => {\n        const {data} = this.props;\n        const {channels, term, filters} = this.state;\n        const {startCount, endCount} = this.getPaginationProps();\n        let channelsToDisplay = this.isSearching(term, filters) ? channels : data;\n        channelsToDisplay = channelsToDisplay.slice(startCount - 1, endCount);\n\n        return channelsToDisplay.map((channel) => {\n            let iconToDisplay = <GlobeIcon className='channel-icon'/>;\n\n            if (channel.type === Constants.PRIVATE_CHANNEL) {\n                iconToDisplay = <LockIcon className='channel-icon'/>;\n            }\n\n            if (isArchivedChannel(channel)) {\n                iconToDisplay = (\n                    <ArchiveIcon\n                        className='channel-icon'\n                        data-testid={`${channel.name}-archive-icon`}\n                    />\n                );\n            }\n\n            if (channel.shared) {\n                iconToDisplay = (\n                    <SharedChannelIndicator\n                        className='channel-icon'\n                        channelType={channel.type}\n                    />\n                );\n            }\n\n            return {\n                cells: {\n                    id: channel.id,\n                    name: (\n                        <span\n                            className='group-name overflow--ellipsis row-content'\n                            data-testid='channel-display-name'\n                        >\n                            {iconToDisplay}\n                            <span className='TeamList_channelDisplayName'>\n                                {channel.display_name}\n                            </span>\n                        </span>\n                    ),\n                    team: (\n                        <span className='group-description row-content'>\n                            {channel.team_display_name}\n                        </span>\n                    ),\n                    management: (\n                        <span className='group-description adjusted row-content'>\n                            <FormattedMessage\n                                id={`admin.channel_settings.channel_row.managementMethod.${channel.group_constrained ? 'group' : 'manual'}`}\n                                defaultMessage={channel.group_constrained ? 'Group Sync' : 'Manual Invites'}\n                            />\n                        </span>\n                    ),\n                    edit: (\n                        <span\n                            className='group-actions TeamList_editRow'\n                            data-testid={`${channel.name}edit`}\n                        >\n                            <Link to={`/admin_console/user_management/channels/${channel.id}`} >\n                                <FormattedMessage\n                                    id='admin.channel_settings.channel_row.configure'\n                                    defaultMessage='Edit'\n                                />\n                            </Link>\n                        </span>\n                    ),\n                },\n                onClick: () => browserHistory.push(`/admin_console/user_management/channels/${channel.id}`),\n            };\n        });\n    }\n\n    onFilter = (filterOptions: FilterOptions) => {\n        const filters: ChannelSearchOpts = {};\n        const {group_constrained: groupConstrained, exclude_group_constrained: excludeGroupConstrained} = filterOptions.management.values;\n        const {public: publicChannels, private: privateChannels, deleted} = filterOptions.channels.values;\n        const {team_ids: teamIds} = filterOptions.teams.values;\n        if (publicChannels.value || privateChannels.value || deleted.value || groupConstrained.value || excludeGroupConstrained.value || (teamIds.value as string[]).length) {\n            filters.public = publicChannels.value as boolean;\n            if (filters.public) {\n                trackEvent('admin_channels_page', 'public_filter_applied_to_channel_list');\n            }\n\n            filters.private = privateChannels.value as boolean;\n            if (filters.private) {\n                trackEvent('admin_channels_page', 'private_filter_applied_to_channel_list');\n            }\n\n            filters.deleted = deleted.value as boolean;\n            if (filters.deleted) {\n                trackEvent('admin_channels_page', 'archived_filter_applied_to_channel_list');\n            }\n\n            if (!(groupConstrained.value && excludeGroupConstrained.value)) {\n                filters.group_constrained = groupConstrained.value as boolean;\n                if (filters.group_constrained) {\n                    trackEvent('admin_channels_page', 'group_sync_filter_applied_to_channel_list');\n                }\n                filters.exclude_group_constrained = excludeGroupConstrained.value as boolean;\n                if (filters.exclude_group_constrained) {\n                    trackEvent('admin_channels_page', 'manual_invites_filter_applied_to_channel_list');\n                }\n            }\n\n            filters.team_ids = teamIds.value as string[];\n            if (filters.team_ids.length > 0) {\n                trackEvent('admin_channels_page', 'team_id_filter_applied_to_channel_list');\n            }\n        }\n        this.loadPage(0, this.state.term, filters);\n    }\n\n    render = (): JSX.Element => {\n        const {term, searchErrored} = this.state;\n        const rows: Row[] = this.getRows();\n        const columns: Column[] = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n\n        let placeholderEmpty: JSX.Element = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.no_channels_found'\n                defaultMessage='No channels found'\n            />\n        );\n\n        if (searchErrored) {\n            placeholderEmpty = (\n                <FormattedMessage\n                    id='admin.channel_settings.channel_list.search_channels_errored'\n                    defaultMessage='Something went wrong. Try again'\n                />\n            );\n        }\n\n        const rowsContainerStyles = {\n            minHeight: `${rows.length * ROW_HEIGHT}px`,\n        };\n\n        const filterOptions: FilterOptions = {\n            teams: {\n                name: 'Teams',\n                values: {\n                    team_ids: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.team_settings.title'\n                                defaultMessage='Teams'\n                            />\n                        ),\n                        value: [],\n                    },\n                },\n                keys: ['team_ids'],\n                type: TeamFilterDropdown,\n            },\n            management: {\n                name: 'Management',\n                values: {\n                    group_constrained: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.group_sync'\n                                defaultMessage='Group Sync'\n                            />\n                        ),\n                        value: false,\n                    },\n                    exclude_group_constrained: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.manual_invites'\n                                defaultMessage='Manual Invites'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: ['group_constrained', 'exclude_group_constrained'],\n            },\n            channels: {\n                name: 'Channels',\n                values: {\n                    public: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.public'\n                                defaultMessage='Public'\n                            />\n                        ),\n                        value: false,\n                    },\n                    private: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.private'\n                                defaultMessage='Private'\n                            />\n                        ),\n                        value: false,\n                    },\n                    deleted: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.archived'\n                                defaultMessage='Archived'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: ['public', 'private', 'deleted'],\n            },\n        };\n        const filterProps = {\n            options: filterOptions,\n            keys: ['teams', 'channels', 'management'],\n            onFilter: this.onFilter,\n        };\n\n        return (\n            <div className='ChannelsList'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    loading={this.state.loading}\n                    page={this.state.page}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    startCount={startCount}\n                    endCount={endCount}\n                    total={total}\n                    onSearch={this.onSearch}\n                    term={term}\n                    placeholderEmpty={placeholderEmpty}\n                    rowsContainerStyles={rowsContainerStyles}\n                    filterProps={filterProps}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getAllChannelsWithCount as getData, searchAllChannels} from 'matterfoss-redux/actions/channels';\nimport {getAllChannels} from 'matterfoss-redux/selectors/entities/channels';\nimport {GenericAction, ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\nimport {ChannelWithTeamData, ChannelSearchOpts} from 'matterfoss-redux/types/channels';\n\nimport {GlobalState} from 'types/store';\nimport {Constants} from 'utils/constants';\n\nimport List from './channel_list';\n\nconst compareByDisplayName = (a: {display_name: string}, b: {display_name: string}) => a.display_name.localeCompare(b.display_name);\n\nconst getSortedListOfChannels = createSelector(\n    getAllChannels,\n    (teams) => Object.values(teams).\n        filter((c) => (c.type === Constants.OPEN_CHANNEL || c.type === Constants.PRIVATE_CHANNEL)).\n        sort(compareByDisplayName),\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        data: getSortedListOfChannels(state) as ChannelWithTeamData[],\n        total: state.entities.channels.totalCount,\n    };\n}\n\ntype Actions = {\n    searchAllChannels: (term: string, opts: ChannelSearchOpts) => Promise<{ data: any }>;\n    getData: (page: number, perPage: number, notAssociatedToGroup?: string, excludeDefaultChannels?: boolean, includeDeleted?: boolean) => ActionFunc | ActionResult | Promise<ChannelWithTeamData[]>;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getData,\n            searchAllChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport ChannelsList from 'components/admin_console/team_channel_settings/channel/list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\ninterface Props {\n    siteName?: string;\n}\n\nexport interface ChannelSettingsState {\n    startCount: number;\n    endCount: number;\n    total: number;\n}\n\nexport class ChannelsSettings extends React.PureComponent<Props> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            startCount: 0,\n            endCount: 1,\n            total: 0,\n        };\n    }\n\n    render = () => {\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header'>\n                    <FormattedMessage\n                        id='admin.channel_settings.groupsPageTitle'\n                        defaultMessage='{siteName} Channels'\n                        values={{siteName: this.props.siteName}}\n                    />\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <AdminPanel\n                            id='channels'\n                            titleId={t('admin.channel_settings.title')}\n                            titleDefault='Channels'\n                            subtitleId={t('admin.channel_settings.description')}\n                            subtitleDefault={'Manage channel settings.'}\n                            subtitleValues={{...this.state}}\n                        >\n                            <ChannelsList/>\n                        </AdminPanel>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport {ChannelsSettings} from './channel_settings';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n\n    return {\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal';\n\nexport default class ConvertConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Channel display name\n         */\n        displayName: PropTypes.string.isRequired,\n\n        /*\n         * Channel privacy setting\n         */\n        toPublic: PropTypes.bool.isRequired,\n    }\n\n    render() {\n        const {displayName, toPublic} = this.props;\n\n        const toPublicMsg = 'When you convert **{displayName}** to a public channel, history and membership are preserved. Public channels are discoverable and can by joined by users on the system without invitation.  \\n \\nAre you sure you want to convert **{displayName}** to a public channel?';\n        const toPrivateMsg = 'When you convert **{displayName}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.  \\n \\nAre you sure you want to convert **{displayName}** to a private channel?';\n        const messageId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicMessage') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateMessage');\n\n        const toPublicTitle = 'Convert {displayName} to a public channel?';\n        const toPrivateTitle = 'Convert {displayName} to a private channel?';\n        const titleId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicTitle') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateTitle');\n\n        const toPublicConfirmMsg = 'Yes, convert to public channel';\n        const toPrivateConfirmMsg = 'Yes, convert to private channel';\n        const confirmMsgId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicConfirm') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateConfirm');\n\n        const title = (\n            <FormattedMessage\n                id={titleId}\n                defaultMessage={toPublic ? toPublicTitle : toPrivateTitle}\n                values={{displayName}}\n            />\n        );\n\n        const message = (\n            <FormattedMarkdownMessage\n                id={messageId}\n                defaultMessage={toPublic ? toPublicMsg : toPrivateMsg}\n                values={{displayName}}\n            />\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id={confirmMsgId}\n                defaultMessage={toPublic ? toPublicConfirmMsg : toPrivateConfirmMsg}\n            />\n        );\n\n        const cancelButton = (\n            <FormattedMessage\n                id='admin.team_channel_settings.convertConfirmModal.cancel'\n                defaultMessage='No, cancel'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={'btn btn-primary'}\n                confirmButtonText={confirmButton}\n                cancelButtonClass={'bnt bnt-link'}\n                cancelButtonText={cancelButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal';\n\nexport default class ConvertAndRemoveConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Channel display name\n         */\n        displayName: PropTypes.string.isRequired,\n\n        /*\n         * Channel privacy setting\n         */\n        toPublic: PropTypes.bool.isRequired,\n\n        /*\n         * Number of users to be removed\n         */\n        removeAmount: PropTypes.number.isRequired,\n    }\n\n    render() {\n        const {show, onConfirm, onCancel, displayName, toPublic, removeAmount} = this.props;\n\n        const toPublicMsg = 'When you convert **{displayName}** to a public channel, history and membership are preserved. Public channels are discoverable and can by joined by users on the system without invitation.  \\n \\nAre you sure you want to convert **{displayName}** to a public channel?';\n        const toPrivateMsg = 'When you convert **{displayName}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.  \\n \\nAre you sure you want to convert **{displayName}** to a private channel?';\n        const convertMessageId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicMessage') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateMessage');\n\n        const toPublicTitle = 'Convert channel to public and remove {amount, number} {amount, plural, one {user} other {users}}?';\n        const toPrivateTitle = 'Convert channel to private and remove {amount, number} {amount, plural, one {user} other {users}}?';\n        const titleId = toPublic ? t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPublicTitle') :\n            t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPrivateTitle');\n\n        const toPublicConfirmMsg = 'Yes, convert channel to public and remove {amount, number} {amount, plural, one {user} other {users}}';\n        const toPrivateConfirmMsg = 'Yes, convert channel to private and remove {amount, number} {amount, plural, one {user} other {users}}';\n        const confirmMsgId = toPublic ? t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPublicConfirm') :\n            t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPrivateConfirm');\n\n        const title = (\n            <FormattedMessage\n                id={titleId}\n                defaultMessage={toPublic ? toPublicTitle : toPrivateTitle}\n                values={{displayName, amount: removeAmount}}\n            />\n        );\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMarkdownMessage\n                        id={convertMessageId}\n                        defaultMessage={toPublic ? toPublicMsg : toPrivateMsg}\n                        values={{displayName}}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.removeConfirmModal.messageChannel'\n                        defaultMessage='{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this channel. Are you sure you wish to remove these users?'\n                        values={{amount: removeAmount}}\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id={confirmMsgId}\n                defaultMessage={toPublic ? toPublicConfirmMsg : toPrivateConfirmMsg}\n                values={{amount: removeAmount}}\n            />\n        );\n\n        const cancelButton = (\n            <FormattedMessage\n                id='admin.team_channel_settings.convertAndRemoveConfirmModal.cancel'\n                defaultMessage='No, cancel'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={'btn btn-primary'}\n                confirmButtonText={confirmButton}\n                cancelButtonClass={'bnt bnt-link'}\n                cancelButtonText={cancelButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LineSwitch from '../../line_switch';\n\ninterface Props {\n    isPublic: boolean;\n    isSynced: boolean;\n    isDefault: boolean;\n    onToggle: (isSynced: boolean, isPublic: boolean) => void;\n    isDisabled?: boolean;\n}\n\nconst SyncGroupsToggle: React.SFC<Props> = (props: Props): JSX.Element => {\n    const {isPublic, isSynced, isDefault, onToggle, isDisabled} = props;\n    return (\n        <LineSwitch\n            id='syncGroupSwitch'\n            disabled={isDisabled || isDefault}\n            toggled={isSynced}\n            last={isSynced}\n            onToggle={() => {\n                if (isDefault) {\n                    return;\n                }\n                onToggle(!isSynced, isPublic);\n            }}\n            title={(\n                <FormattedMessage\n                    id='admin.channel_settings.channel_details.syncGroupMembers'\n                    defaultMessage='Sync Group Members'\n                />\n            )}\n            subTitle={(\n                <FormattedMarkdownMessage\n                    id='admin.channel_settings.channel_details.syncGroupMembersDescr'\n                    defaultMessage='When enabled, adding and removing users from groups will add or remove them from this channel. The only way of inviting members to this channel is by adding the groups they belong to. [Learn More](!https://www.example.com/pl/default-ldap-group-constrained-team-channel.html)'\n                />\n            )}\n        />\n    );\n};\n\nconst AllowAllToggle: React.SFC<Props> = (props: Props): JSX.Element | null => {\n    const {isPublic, isSynced, isDefault, onToggle, isDisabled} = props;\n    if (isSynced) {\n        return null;\n    }\n    return (\n        <LineSwitch\n            id='allow-all-toggle'\n            disabled={isDisabled || isDefault}\n            toggled={isPublic}\n            last={true}\n            onToggle={() => {\n                if (isDefault) {\n                    return;\n                }\n                onToggle(isSynced, !isPublic);\n            }}\n            title={(\n                <FormattedMessage\n                    id='admin.channel_settings.channel_details.isPublic'\n                    defaultMessage='Public channel or private channel'\n                />\n            )}\n            subTitle={isDefault ? (\n                <FormattedMessage\n                    id='admin.channel_settings.channel_details.isDefaultDescr'\n                    defaultMessage='This default channel cannot be converted into a private channel.'\n                />\n            ) :\n                (\n                    <FormattedMessage\n                        id='admin.channel_settings.channel_details.isPublicDescr'\n                        defaultMessage='If `public` the channel is discoverable and any user can join, or if `private` invitations are required. Toggle to convert public channels to private. When Group Sync is enabled, private channels cannot be converted to public.'\n                    />\n                )\n            }\n            onText={(\n                <FormattedMessage\n                    id='channel_toggle_button.public'\n                    defaultMessage='Public'\n                />\n            )}\n            offText={(\n                <FormattedMessage\n                    id='channel_toggle_button.private'\n                    defaultMessage='Private'\n                />\n            )}\n        />\n    );\n};\n\nexport const ChannelModes: React.SFC<Props> = (props: Props): JSX.Element => {\n    const {isPublic, isSynced, isDefault, onToggle, isDisabled} = props;\n    return (\n        <AdminPanel\n            id='channel_manage'\n            titleId={t('admin.channel_settings.channel_detail.manageTitle')}\n            titleDefault='Channel Management'\n            subtitleId={t('admin.channel_settings.channel_detail.manageDescription')}\n            subtitleDefault='Choose between inviting members manually or syncing members automatically from groups.'\n        >\n            <div className='group-teams-and-channels'>\n                <div className='group-teams-and-channels--body'>\n                    <SyncGroupsToggle\n                        isPublic={isPublic}\n                        isSynced={isSynced}\n                        isDefault={isDefault}\n                        onToggle={onToggle}\n                        isDisabled={isDisabled}\n                    />\n                    <AllowAllToggle\n                        isPublic={isPublic}\n                        isSynced={isSynced}\n                        isDefault={isDefault}\n                        onToggle={onToggle}\n                        isDisabled={isDisabled}\n                    />\n                </div>\n            </div>\n        </AdminPanel>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'matterfoss-redux/types/groups';\nimport {Channel} from 'matterfoss-redux/types/channels';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport GroupList from '../../group';\n\ninterface ChannelGroupsProps {\n    synced: boolean;\n    channel: Partial<Channel>;\n    onAddCallback: (groupIDs: string[]) => void;\n    totalGroups: number;\n    groups: Array<Partial<Group>>;\n    removedGroups: Array<{[key: string]: any}>;\n    onGroupRemoved: (gid: string) => void;\n    setNewGroupRole: (gid: string) => void;\n    isDisabled?: boolean;\n}\n\nexport const ChannelGroups: React.FunctionComponent<ChannelGroupsProps> = (props: ChannelGroupsProps): JSX.Element => {\n    const {onGroupRemoved, onAddCallback, totalGroups, groups, removedGroups, channel, synced, setNewGroupRole, isDisabled} = props;\n    return (\n        <AdminPanel\n            id='channel_groups'\n            titleId={synced ? t('admin.channel_settings.channel_detail.syncedGroupsTitle') : t('admin.channel_settings.channel_detail.groupsTitle')}\n            titleDefault={synced ? 'Synced Groups' : 'Groups'}\n            subtitleId={synced ? t('admin.channel_settings.channel_detail.syncedGroupsDescription') : t('admin.channel_settings.channel_detail.groupsDescription')}\n            subtitleDefault={synced ? 'Add and remove channel members based on their group membership.' : 'Select groups to be added to this channel.'}\n            button={\n                <ToggleModalButton\n                    id='addGroupsToChannelToggle'\n                    className='btn btn-primary'\n                    dialogType={AddGroupsToChannelModal}\n                    dialogProps={{\n                        channel,\n                        onAddCallback,\n                        skipCommit: true,\n                        includeGroups: removedGroups,\n                        excludeGroups: groups,\n                    }}\n                    isDisabled={isDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.channel_settings.channel_details.add_group'\n                        defaultMessage='Add Group'\n                    />\n                </ToggleModalButton>}\n        >\n            {channel.id && (\n                <GroupList\n                    channel={channel}\n                    groups={groups}\n                    totalGroups={totalGroups}\n                    onGroupRemoved={onGroupRemoved}\n                    setNewGroupRole={setNewGroupRole}\n                    isModeSync={synced}\n                    type='channel'\n                    isDisabled={isDisabled}\n                />\n            )}\n        </AdminPanel>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function UnarchiveIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='16px'\n                height='16px'\n                viewBox='0 0 16 16'\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.archive', defaultMessage: 'Archive Icon'})}\n            >\n                <path d='M13.994 14.75H2.006V6.50605H3.5V13.256H12.5V6.50605H13.994V14.75ZM1.25 1.25005H14.75V5.75005H1.25V1.25005ZM2.744 2.74405V4.25605H13.256V2.74405H2.744ZM6.884 11.744V9.49405H4.994L8 6.50605L11.006 9.49405H9.134V11.744H6.884Z'/>\n            </svg>\n        </span>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport {Channel} from 'matterfoss-redux/types/channels';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport UnarchiveIcon from 'components/widgets/icons/unarchive_icon';\nimport SharedChannelIndicator from 'components/shared_channel_indicator';\n\nimport './channel_profile.scss';\ninterface ChannelProfileProps {\n    channel: Partial<Channel>;\n    team: Partial<Team>;\n    onToggleArchive?: () => void;\n    isArchived: boolean;\n    isDisabled?: boolean;\n}\n\nexport const ChannelProfile: React.SFC<ChannelProfileProps> = (props: ChannelProfileProps): JSX.Element => {\n    const {team, channel, isArchived, isDisabled} = props;\n\n    let archiveBtnID;\n    let archiveBtnDefault;\n    if (isArchived) {\n        t('admin.channel_settings.channel_details.unarchiveChannel');\n        archiveBtnID = 'admin.channel_settings.channel_details.unarchiveChannel';\n        archiveBtnDefault = 'Unarchive Channel';\n    } else {\n        t('admin.channel_settings.channel_details.archiveChannel');\n        archiveBtnID = 'admin.channel_settings.channel_details.archiveChannel';\n        archiveBtnDefault = 'Archive Channel';\n    }\n\n    let sharedBlock;\n    if (channel.shared && channel.type) {\n        sharedBlock = (\n            <div className='channel-organizations'>\n                <FormattedMarkdownMessage\n                    id='admin.channel_settings.channel_detail.channelOrganizations'\n                    defaultMessage='**Organizations**'\n                />\n                <br/>\n                <SharedChannelIndicator\n                    className='shared-channel-icon'\n                    channelType={channel.type}\n                />\n                <FormattedMessage\n                    id='admin.channel_settings.channel_detail.channelOrganizationsMessage'\n                    defaultMessage='Shared with trusted organizations'\n                />\n            </div>\n        );\n    }\n\n    return (\n        <AdminPanel\n            id='channel_profile'\n            titleId={t('admin.channel_settings.channel_detail.profileTitle')}\n            titleDefault='Channel Profile'\n            subtitleId={t('admin.channel_settings.channel_detail.profileDescription')}\n            subtitleDefault='Summary of the channel, including the channel name.'\n        >\n            <div className='group-teams-and-channels AdminChannelDetails'>\n                <div className='group-teams-and-channels--body channel-desc-col'>\n                    <div className='channel-name'>\n                        <FormattedMarkdownMessage\n                            id='admin.channel_settings.channel_detail.channelName'\n                            defaultMessage='**Name**'\n                        />\n                        <br/>\n                        {channel.display_name}\n                    </div>\n                    <div className='channel-team'>\n                        <FormattedMarkdownMessage\n                            id='admin.channel_settings.channel_detail.channelTeam'\n                            defaultMessage='**Team**'\n                        />\n                        <br/>\n                        {team.display_name}\n                    </div>\n                    {sharedBlock}\n                    <div className='AdminChannelDetails_archiveContainer'>\n                        <button\n                            type='button'\n                            className={\n                                classNames(\n                                    'btn',\n                                    'btn-secondary',\n                                    'ArchiveButton',\n                                    {ArchiveButton___archived: isArchived},\n                                    {ArchiveButton___unarchived: !isArchived},\n                                    {disabled: isDisabled},\n                                )\n                            }\n                            onClick={props.onToggleArchive}\n                        >\n                            {isArchived ?\n                                <UnarchiveIcon className='channel-icon channel-icon__unarchive'/> :\n                                <ArchiveIcon className='channel-icon channel-icon__archive'/>}\n                            <FormattedMessage\n                                id={archiveBtnID}\n                                defaultMessage={archiveBtnDefault}\n                            />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </AdminPanel>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport {ActionResult} from 'matterfoss-redux/types/actions';\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {UserProfile, UsersStats, GetFilteredUsersStatsOpts} from 'matterfoss-redux/types/users';\nimport {Channel, ChannelMembership} from 'matterfoss-redux/types/channels';\nimport GeneralConstants from 'matterfoss-redux/constants/general';\n\nimport {t} from 'utils/i18n';\nimport Constants from 'utils/constants';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport UserGrid from 'components/admin_console/user_grid/user_grid';\nimport {BaseMembership} from 'components/admin_console/user_grid/user_grid_role_dropdown';\nimport ChannelInviteModal from 'components/channel_invite_modal';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\n\ntype Props = {\n    channelId: string;\n    channel: Channel;\n    filters: GetFilteredUsersStatsOpts;\n\n    users: UserProfile[];\n    usersToRemove: Dictionary<UserProfile>;\n    usersToAdd: Dictionary<UserProfile>;\n    channelMembers: Dictionary<ChannelMembership>;\n\n    totalCount: number;\n    searchTerm: string;\n    loading?: boolean;\n    enableGuestAccounts: boolean;\n\n    onAddCallback: (users: UserProfile[]) => void;\n    onRemoveCallback: (user: UserProfile) => void;\n    updateRole: (userId: string, schemeUser: boolean, schemeAdmin: boolean) => void;\n\n    isDisabled?: boolean;\n\n    actions: {\n        getChannelStats: (channelId: string) => Promise<{\n            data: boolean;\n        }>;\n        loadProfilesAndReloadChannelMembers: (page: number, perPage: number, channelId?: string, sort?: string, options?: {[key: string]: any}) => Promise<{\n            data: boolean;\n        }>;\n        searchProfilesAndChannelMembers: (term: string, options?: {[key: string]: any}) => Promise<{\n            data: boolean;\n        }>;\n        getFilteredUsersStats: (filters: GetFilteredUsersStatsOpts) => Promise<{\n            data?: UsersStats;\n            error?: ServerError;\n        }>;\n        setUserGridSearch: (term: string) => ActionResult;\n        setUserGridFilters: (filters: GetFilteredUsersStatsOpts) => ActionResult;\n    };\n}\n\ntype State = {\n    loading: boolean;\n}\n\nconst PROFILE_CHUNK_SIZE = 10;\n\nexport default class ChannelMembers extends React.PureComponent<Props, State> {\n    private searchTimeoutId: number;\n\n    constructor(props: Props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    public componentDidMount() {\n        const {channelId} = this.props;\n        const {loadProfilesAndReloadChannelMembers, getChannelStats, setUserGridSearch, setUserGridFilters} = this.props.actions;\n        Promise.all([\n            setUserGridSearch(''),\n            setUserGridFilters({}),\n            getChannelStats(channelId),\n            loadProfilesAndReloadChannelMembers(0, PROFILE_CHUNK_SIZE * 2, channelId, '', {active: true}),\n        ]).then(() => this.setStateLoading(false));\n    }\n\n    public async componentDidUpdate(prevProps: Props) {\n        const filtersModified = JSON.stringify(prevProps.filters) !== JSON.stringify(this.props.filters);\n        const searchTermModified = prevProps.searchTerm !== this.props.searchTerm;\n        if (filtersModified || searchTermModified) {\n            this.setStateLoading(true);\n            clearTimeout(this.searchTimeoutId);\n            const {searchTerm, filters} = this.props;\n\n            if (searchTerm === '') {\n                this.searchTimeoutId = 0;\n                if (filtersModified) {\n                    await prevProps.actions.loadProfilesAndReloadChannelMembers(0, PROFILE_CHUNK_SIZE * 2, prevProps.channelId, '', {active: true, ...filters});\n                }\n                this.setStateLoading(false);\n                return;\n            }\n\n            const searchTimeoutId = window.setTimeout(\n                async () => {\n                    await prevProps.actions.searchProfilesAndChannelMembers(searchTerm, {...filters, in_channel_id: this.props.channelId, allow_inactive: false});\n\n                    if (searchTimeoutId !== this.searchTimeoutId) {\n                        return;\n                    }\n                    this.setStateLoading(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS,\n            );\n\n            this.searchTimeoutId = searchTimeoutId;\n        }\n    }\n\n    private setStateLoading = (loading: boolean) => {\n        this.setState({loading});\n    }\n\n    private loadPage = async (page: number) => {\n        const {loadProfilesAndReloadChannelMembers} = this.props.actions;\n        const {channelId, filters} = this.props;\n        await loadProfilesAndReloadChannelMembers(page + 1, PROFILE_CHUNK_SIZE, channelId, '', {active: true, ...filters});\n    }\n\n    private removeUser = (user: UserProfile) => {\n        this.props.onRemoveCallback(user);\n    }\n\n    private onAddCallback = (users: UserProfile[]) => {\n        this.props.onAddCallback(users);\n    }\n\n    private onSearch = async (term: string) => {\n        this.props.actions.setUserGridSearch(term);\n    }\n\n    private updateMembership = (membership: BaseMembership) => {\n        this.props.updateRole(membership.user_id, membership.scheme_user, membership.scheme_admin);\n    }\n\n    private onFilter = async (filterOptions: FilterOptions) => {\n        const roles = filterOptions.role.values;\n        const systemRoles: string[] = [];\n        const channelRoles: string[] = [];\n        let filters = {};\n        Object.keys(roles).forEach((filterKey: string) => {\n            if (roles[filterKey].value) {\n                if (filterKey.includes('channel')) {\n                    channelRoles.push(filterKey);\n                } else {\n                    systemRoles.push(filterKey);\n                }\n            }\n        });\n\n        if (systemRoles.length > 0 || channelRoles.length > 0) {\n            if (systemRoles.length > 0) {\n                filters = {roles: systemRoles};\n            }\n            if (channelRoles.length > 0) {\n                filters = {...filters, channel_roles: channelRoles};\n            }\n            [...systemRoles, ...channelRoles].forEach((role) => {\n                trackEvent('admin_channel_config_page', `${role}_filter_applied_to_members_block`, {channel_id: this.props.channelId});\n            });\n\n            this.props.actions.setUserGridFilters(filters);\n            this.props.actions.getFilteredUsersStats({in_channel: this.props.channelId, include_bots: true, ...filters});\n        } else {\n            this.props.actions.setUserGridFilters(filters);\n        }\n    }\n\n    render = () => {\n        const {users, channel, channelId, usersToAdd, usersToRemove, channelMembers, totalCount, searchTerm, isDisabled} = this.props;\n        const filterOptions: FilterOptions = {\n            role: {\n                name: (\n                    <FormattedMessage\n                        id='admin.user_grid.role'\n                        defaultMessage='Role'\n                    />\n                ),\n                values: {\n                    [GeneralConstants.SYSTEM_GUEST_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.guest'\n                                defaultMessage='Guest'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.CHANNEL_USER_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_item.member'\n                                defaultMessage='Member'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.CHANNEL_ADMIN_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.channel_admin'\n                                defaultMessage='Channel Admin'\n                            />\n                        ),\n                        value: false,\n                    },\n                    [GeneralConstants.SYSTEM_ADMIN_ROLE]: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.user_grid.system_admin'\n                                defaultMessage='System Admin'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: [GeneralConstants.SYSTEM_GUEST_ROLE, GeneralConstants.CHANNEL_USER_ROLE, GeneralConstants.CHANNEL_ADMIN_ROLE, GeneralConstants.SYSTEM_ADMIN_ROLE],\n            },\n        };\n\n        if (!this.props.enableGuestAccounts) {\n            delete filterOptions.role.values[GeneralConstants.SYSTEM_GUEST_ROLE];\n            filterOptions.role.keys = [GeneralConstants.CHANNEL_USER_ROLE, GeneralConstants.CHANNEL_ADMIN_ROLE, GeneralConstants.SYSTEM_ADMIN_ROLE];\n        }\n        const filterProps = {\n            options: filterOptions,\n            keys: ['role'],\n            onFilter: this.onFilter,\n        };\n\n        return (\n            <AdminPanel\n                id='channelMembers'\n                titleId={t('admin.channel_settings.channel_detail.membersTitle')}\n                titleDefault='Members'\n                subtitleId={t('admin.channel_settings.channel_detail.membersDescription')}\n                subtitleDefault='A list of users who are currently in the channel right now'\n                button={\n                    <ToggleModalButton\n                        id='addChannelMembers'\n                        className='btn btn-primary'\n                        dialogType={ChannelInviteModal}\n                        isDisabled={isDisabled}\n                        dialogProps={{\n                            channel,\n                            channelId,\n                            teamId: channel?.team_id, // eslint-disable-line camelcase\n                            onAddCallback: this.onAddCallback,\n                            skipCommit: true,\n                            excludeUsers: usersToAdd,\n                            includeUsers: usersToRemove,\n                        }}\n                    >\n                        <FormattedMessage\n                            id='admin.team_settings.team_details.add_members'\n                            defaultMessage='Add Members'\n                        />\n                    </ToggleModalButton>\n                }\n            >\n                <UserGrid\n                    loading={this.state.loading || Boolean(this.props.loading)}\n                    users={users}\n                    loadPage={this.loadPage}\n                    removeUser={this.removeUser}\n                    totalCount={totalCount}\n                    memberships={channelMembers}\n                    updateMembership={this.updateMembership}\n                    onSearch={this.onSearch}\n                    includeUsers={usersToAdd}\n                    excludeUsers={usersToRemove}\n                    term={searchTerm}\n                    scope={'channel'}\n                    readOnly={isDisabled}\n                    filterProps={filterProps}\n                />\n            </AdminPanel>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {ServerError} from 'matterfoss-redux/types/errors';\nimport {UserProfile, UsersStats, GetFilteredUsersStatsOpts} from 'matterfoss-redux/types/users';\n\nimport {filterProfilesStartingWithTerm, profileListToMap} from 'matterfoss-redux/utils/user_utils';\n\nimport {ActionResult, ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\nimport {ChannelStats} from 'matterfoss-redux/types/channels';\n\nimport {getChannelStats} from 'matterfoss-redux/actions/channels';\nimport {getFilteredUsersStats} from 'matterfoss-redux/actions/users';\n\nimport {getChannelMembersInChannels, getAllChannelStats, getChannel} from 'matterfoss-redux/selectors/entities/channels';\nimport {makeGetProfilesInChannel, makeSearchProfilesInChannel, filterProfiles, getFilteredUsersStats as selectFilteredUsersStats} from 'matterfoss-redux/selectors/entities/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {loadProfilesAndReloadChannelMembers, searchProfilesAndChannelMembers} from 'actions/user_actions';\nimport {setUserGridSearch, setUserGridFilters} from 'actions/views/search';\nimport {GlobalState} from 'types/store';\n\nimport ChannelMembers from './channel_members';\n\ntype Props = {\n    channelId: string;\n    usersToAdd: Dictionary<UserProfile>;\n    usersToRemove: Dictionary<UserProfile>;\n};\n\ntype Actions = {\n    getChannelStats: (channelId: string) => Promise<{\n        data: boolean;\n    }>;\n    loadProfilesAndReloadChannelMembers: (page: number, perPage: number, channelId?: string, sort?: string, options?: {[key: string]: any}) => Promise<{\n        data: boolean;\n    }>;\n    searchProfilesAndChannelMembers: (term: string, options?: {[key: string]: any}) => Promise<{\n        data: boolean;\n    }>;\n    getFilteredUsersStats: (filters: GetFilteredUsersStatsOpts) => Promise<{\n        data?: UsersStats;\n        error?: ServerError;\n    }>;\n    setUserGridSearch: (term: string) => ActionResult;\n    setUserGridFilters: (filters: GetFilteredUsersStatsOpts) => ActionResult;\n};\n\nfunction searchUsersToAdd(users: Dictionary<UserProfile>, term: string): Dictionary<UserProfile> {\n    const profiles = filterProfilesStartingWithTerm(Object.values(users), term);\n    const filteredProfilesMap = filterProfiles(profileListToMap(profiles), {});\n\n    return filteredProfilesMap;\n}\n\nfunction makeMapStateToProps() {\n    const doGetProfilesInChannel = makeGetProfilesInChannel();\n    const doSearchProfilesInChannel = makeSearchProfilesInChannel();\n\n    return function mapStateToProps(state: GlobalState, props: Props) {\n        const {channelId, usersToRemove} = props;\n        let {usersToAdd} = props;\n\n        const config = getConfig(state);\n        const channelMembers = getChannelMembersInChannels(state)[channelId] || {};\n        const channel = getChannel(state, channelId) || {channel_id: channelId};\n        const searchTerm = state.views.search.userGridSearch?.term || '';\n        const filters = state.views.search.userGridSearch?.filters || {};\n\n        let totalCount: number;\n        if (Object.keys(filters).length === 0) {\n            const stats: ChannelStats = getAllChannelStats(state)[channelId] || {\n                member_count: 0,\n                channel_id: channelId,\n                pinnedpost_count: 0,\n                guest_count: 0,\n            };\n            totalCount = stats.member_count;\n        } else {\n            const filteredUserStats: UsersStats = selectFilteredUsersStats(state) || {\n                total_users_count: 0,\n            };\n            totalCount = filteredUserStats.total_users_count;\n        }\n\n        let users = [];\n        if (searchTerm) {\n            users = doSearchProfilesInChannel(state, channelId, searchTerm, false, {...filters, active: true});\n            usersToAdd = searchUsersToAdd(usersToAdd, searchTerm);\n        } else {\n            users = doGetProfilesInChannel(state, channelId, {...filters, active: true});\n        }\n\n        return {\n            filters,\n            channelId,\n            channel,\n            users,\n            channelMembers,\n            usersToAdd,\n            usersToRemove,\n            totalCount,\n            searchTerm,\n            enableGuestAccounts: config.EnableGuestAccounts === 'true',\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            getChannelStats,\n            loadProfilesAndReloadChannelMembers,\n            searchProfilesAndChannelMembers,\n            getFilteredUsersStats,\n            setUserGridSearch,\n            setUserGridFilters,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(ChannelMembers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, defineMessages} from 'react-intl';\n\nimport {isNil} from 'lodash';\nimport classNames from 'classnames';\n\nimport {ChannelModeration as ChannelPermissions} from 'matterfoss-redux/types/channels';\nimport {Permissions, Roles} from 'matterfoss-redux/constants';\nimport {ChannelModerationRoles} from 'matterfoss-redux/types/roles';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';\n\nconst PERIOD_TO_SLASH_REGEX = /\\./g;\n\nconst formattedMessages: any = defineMessages({\n    [Permissions.CHANNEL_MODERATED_PERMISSIONS.CREATE_POST]: {\n        title: {\n            id: t('admin.channel_settings.channel_moderation.createPosts'),\n            defaultMessage: 'Create Posts',\n        },\n        description: {\n            id: t('admin.channel_settings.channel_moderation.createPostsDesc'),\n            defaultMessage: 'The ability for members and guests to create posts in the channel.',\n        },\n        descriptionMembers: {\n            id: t('admin.channel_settings.channel_moderation.createPostsDescMembers'),\n            defaultMessage: 'The ability for members to create posts in the channel.',\n        },\n        disabledGuests: {\n            id: t('admin.channel_settings.channel_moderation.createPosts.disabledGuest'),\n            defaultMessage: 'Create posts for guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'guest_create_post',\n        },\n        disabledMembers: {\n            id: t('admin.channel_settings.channel_moderation.createPosts.disabledMember'),\n            defaultMessage: 'Create posts for members are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'create_post',\n        },\n        disabledBoth: {\n            id: t('admin.channel_settings.channel_moderation.createPosts.disabledBoth'),\n            defaultMessage: 'Create posts for members and guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'create_post',\n        },\n    },\n\n    [Permissions.CHANNEL_MODERATED_PERMISSIONS.CREATE_REACTIONS]: {\n        title: {\n            id: t('admin.channel_settings.channel_moderation.postReactions'),\n            defaultMessage: 'Post Reactions',\n        },\n        description: {\n            id: t('admin.channel_settings.channel_moderation.postReactionsDesc'),\n            defaultMessage: 'The ability for members and guests to post reactions.',\n        },\n        descriptionMembers: {\n            id: t('admin.channel_settings.channel_moderation.postReactionsDescMembers'),\n            defaultMessage: 'The ability for members to post reactions.',\n        },\n        disabledGuests: {\n            id: t('admin.channel_settings.channel_moderation.postReactions.disabledGuest'),\n            defaultMessage: 'Post reactions for guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'guest_reactions',\n        },\n        disabledMembers: {\n            id: t('admin.channel_settings.channel_moderation.postReactions.disabledMember'),\n            defaultMessage: 'Post reactions for members are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'reactions',\n        },\n        disabledBoth: {\n            id: t('admin.channel_settings.channel_moderation.postReactions.disabledBoth'),\n            defaultMessage: 'Post reactions for members and guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'reactions',\n        },\n    },\n\n    [Permissions.CHANNEL_MODERATED_PERMISSIONS.MANAGE_MEMBERS]: {\n        title: {\n            id: t('admin.channel_settings.channel_moderation.manageMembers'),\n            defaultMessage: 'Manage Members',\n        },\n        description: {\n            id: t('admin.channel_settings.channel_moderation.manageMembersDesc'),\n            defaultMessage: 'The ability for members to add and remove people.',\n        },\n        disabledGuests: {\n            id: t('admin.channel_settings.channel_moderation.manageMembers.disabledGuest'),\n            defaultMessage: 'Manage members for guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'guest_manage_{public_or_private}_channel_members',\n        },\n        disabledMembers: {\n            id: t('admin.channel_settings.channel_moderation.manageMembers.disabledMember'),\n            defaultMessage: 'Manage members for members are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'manage_{public_or_private}_channel_members',\n        },\n        disabledBoth: {\n            id: t('admin.channel_settings.channel_moderation.manageMembers.disabledBoth'),\n            defaultMessage: 'Manage members for members and guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'manage_{public_or_private}_channel_members',\n        },\n    },\n\n    [Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS]: {\n        title: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions'),\n            defaultMessage: 'Channel Mentions',\n        },\n        description: {\n            id: t('admin.channel_settings.channel_moderation.channelMentionsDesc'),\n            defaultMessage: 'The ability for members and guests to use @all, @here and @channel.',\n        },\n        descriptionMembers: {\n            id: t('admin.channel_settings.channel_moderation.channelMentionsDescMembers'),\n            defaultMessage: 'The ability for members to use @all, @here and @channel.',\n        },\n        disabledGuests: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledGuest'),\n            defaultMessage: 'Channel mentions for guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'guest_use_channel_mentions',\n        },\n        disabledMembers: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledMember'),\n            defaultMessage: 'Channel mentions for members are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'use_channel_mentions',\n        },\n        disabledBoth: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledBoth'),\n            defaultMessage: 'Channel mentions for members and guests are disabled in [{scheme_name}](../permissions/{scheme_link}).',\n            permissionName: 'use_channel_mentions',\n        },\n        disabledGuestsDueToCreatePosts: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledGuestsDueToCreatePosts'),\n            defaultMessage: 'Guests can not use channel mentions without the ability to create posts.',\n        },\n        disabledMembersDueToCreatePosts: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledMemberDueToCreatePosts'),\n            defaultMessage: 'Members can not use channel mentions without the ability to create posts.',\n        },\n        disabledBothDueToCreatePosts: {\n            id: t('admin.channel_settings.channel_moderation.channelMentions.disabledBothDueToCreatePosts'),\n            defaultMessage: 'Guests and members can not use channel mentions without the ability to create posts.',\n        },\n    },\n\n    title: {\n        id: t('admin.channel_settings.channel_moderation.title'),\n        defaultMessage: 'Channel Moderation',\n    },\n    subtitle: {\n        id: t('admin.channel_settings.channel_moderation.subtitle'),\n        defaultMessage: 'Manage the actions available to channel members and guests.',\n    },\n    subtitleMembers: {\n        id: t('admin.channel_settings.channel_moderation.subtitleMembers'),\n        defaultMessage: 'Manage the actions available to channel members.',\n    },\n    permissions: {\n        id: t('admin.channel_settings.channel_moderation.permissions'),\n        defaultMessage: 'Permissions',\n    },\n    guests: {\n        id: t('admin.channel_settings.channel_moderation.guests'),\n        defaultMessage: 'Guests',\n    },\n    members: {\n        id: t('admin.channel_settings.channel_moderation.members'),\n        defaultMessage: 'Members',\n    },\n});\n\ninterface Props {\n    channelPermissions?: ChannelPermissions[];\n    onChannelPermissionsChanged: (name: string, channelRole: ChannelModerationRoles) => void;\n    teamSchemeID?: string;\n    teamSchemeDisplayName?: string;\n    guestAccountsEnabled: boolean;\n    isPublic: boolean;\n    readOnly?: boolean;\n}\n\ninterface RowProps {\n    name: string;\n    guests?: boolean;\n    members: boolean;\n    guestsDisabled?: boolean;\n    membersDisabled: boolean;\n    onClick: (name: string, channelRole: ChannelModerationRoles) => void;\n    errorMessages?: any;\n    guestAccountsEnabled: boolean;\n    readOnly?: boolean;\n}\n\nexport const ChannelModerationTableRow: React.FunctionComponent<RowProps> = (props: RowProps): JSX.Element => {\n    let descriptionId = formattedMessages[props.name].description.id;\n    let descriptionDefaultMessage = formattedMessages[props.name].description.defaultMessage;\n    if (!props.guestAccountsEnabled && formattedMessages[props.name].descriptionMembers) {\n        descriptionId = formattedMessages[props.name].descriptionMembers.id;\n        descriptionDefaultMessage = formattedMessages[props.name].descriptionMembers.defaultMessage;\n    }\n    return (\n        <tr>\n            <td>\n                <label\n                    data-testid={formattedMessages[props.name].title.id.replace(PERIOD_TO_SLASH_REGEX, '-')}\n                >\n                    <FormattedMessage\n                        id={formattedMessages[props.name].title.id}\n                        defaultMessage={formattedMessages[props.name].title.defaultMessage}\n                    />\n                </label>\n                <div\n                    data-testid={formattedMessages[props.name].description.id.replace(PERIOD_TO_SLASH_REGEX, '-')}\n                >\n                    <FormattedMessage\n                        id={descriptionId}\n                        defaultMessage={descriptionDefaultMessage}\n                    />\n                </div>\n                {props.errorMessages}\n            </td>\n            {props.guestAccountsEnabled &&\n                <td>\n                    {!isNil(props.guests) &&\n                        <button\n                            type='button'\n                            data-testid={`${props.name}-${Roles.GUESTS}`}\n                            className={classNames(\n                                'checkbox',\n                                {\n                                    checked: props.guests && !props.guestsDisabled,\n                                    disabled: props.guestsDisabled,\n                                },\n                            )}\n                            onClick={() => props.onClick(props.name, Roles.GUESTS as ChannelModerationRoles)}\n                            disabled={props.guestsDisabled || props.readOnly}\n                        >\n                            {props.guests && !props.guestsDisabled && <CheckboxCheckedIcon/>}\n                        </button>\n                    }\n                </td>\n            }\n            <td>\n                {!isNil(props.members) &&\n                    <button\n                        type='button'\n                        data-testid={`${props.name}-${Roles.MEMBERS}`}\n                        className={classNames(\n                            'checkbox',\n                            {\n                                checked: props.members && !props.membersDisabled,\n                                disabled: props.membersDisabled,\n                            },\n                        )}\n                        onClick={() => props.onClick(props.name, Roles.MEMBERS as ChannelModerationRoles)}\n                        disabled={props.membersDisabled || props.readOnly}\n                    >\n                        {props.members && !props.membersDisabled && <CheckboxCheckedIcon/>}\n                    </button>\n                }\n            </td>\n        </tr>\n    );\n};\n\nexport default class ChannelModeration extends React.PureComponent<Props> {\n    private errorMessagesToDisplay = (entry: ChannelPermissions): JSX.Element[] => {\n        const errorMessages: JSX.Element[] = [];\n        const isGuestsDisabled = !isNil(entry.roles.guests?.enabled) && !entry.roles.guests?.enabled && this.props.guestAccountsEnabled;\n        const isMembersDisabled = !entry.roles.members.enabled;\n        let createPostsKey = '';\n        if (entry.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS) {\n            const createPostsObject = this.props.channelPermissions && this.props.channelPermissions!.find((permission) => permission.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.CREATE_POST);\n            if (!createPostsObject!.roles.guests!.value && this.props.guestAccountsEnabled && !createPostsObject!.roles.members!.value) {\n                errorMessages.push(\n                    <div\n                        data-testid={formattedMessages[entry.name].disabledBothDueToCreatePosts.id.replace(PERIOD_TO_SLASH_REGEX, '-')}\n                        key={formattedMessages[entry.name].disabledBothDueToCreatePosts.id}\n                    >\n                        <FormattedMessage\n                            id={formattedMessages[entry.name].disabledBothDueToCreatePosts.id}\n                            defaultMessage={formattedMessages[entry.name].disabledBothDueToCreatePosts.defaultMessage}\n                        />\n                    </div>,\n                );\n                return errorMessages;\n            } else if (!createPostsObject!.roles.guests!.value && this.props.guestAccountsEnabled) {\n                createPostsKey = 'disabledGuestsDueToCreatePosts';\n            } else if (!createPostsObject!.roles.members!.value) {\n                createPostsKey = 'disabledMembersDueToCreatePosts';\n            }\n\n            if (createPostsKey !== '') {\n                errorMessages.push(\n                    <div\n                        data-testid={formattedMessages[entry.name][createPostsKey].id.replace(PERIOD_TO_SLASH_REGEX, '-')}\n                        key={formattedMessages[entry.name][createPostsKey].id}\n                    >\n                        <FormattedMessage\n                            id={formattedMessages[entry.name][createPostsKey].id}\n                            defaultMessage={formattedMessages[entry.name][createPostsKey].defaultMessage}\n                        />\n                    </div>,\n                );\n            }\n        }\n\n        let disabledKey;\n        if (isGuestsDisabled && isMembersDisabled && errorMessages.length <= 0) {\n            disabledKey = 'disabledBoth';\n        } else if (isGuestsDisabled && createPostsKey !== 'disabledGuestsDueToCreatePosts') {\n            disabledKey = 'disabledGuests';\n        } else if (isMembersDisabled && createPostsKey !== 'disabledMembersDueToCreatePosts') {\n            disabledKey = 'disabledMembers';\n        }\n        if (disabledKey) {\n            let schemeName = 'System Scheme';\n            let schemeLink = 'system_scheme';\n            if (this.props.teamSchemeID) {\n                schemeName = this.props.teamSchemeDisplayName + ' Team Scheme';\n                schemeLink = `team_override_scheme/${this.props.teamSchemeID}`;\n            }\n\n            if (formattedMessages[entry.name][disabledKey].permissionName) {\n                schemeLink += `?rowIdFromQuery=${formattedMessages[entry.name][disabledKey].permissionName}`;\n                if (schemeLink.includes('{public_or_private}')) {\n                    const publicOrPrivate = this.props.isPublic ? 'public' : 'private';\n                    schemeLink = schemeLink.replace('{public_or_private}', publicOrPrivate);\n                }\n            }\n\n            errorMessages.push(\n                <div\n                    data-testid={formattedMessages[entry.name][disabledKey].id.replace(PERIOD_TO_SLASH_REGEX, '-')}\n                    key={formattedMessages[entry.name][disabledKey].id}\n                >\n                    <FormattedMarkdownMessage\n                        id={formattedMessages[entry.name][disabledKey].id}\n                        defaultMessage={formattedMessages[entry.name][disabledKey].defaultMessage}\n                        values={{\n                            scheme_name: schemeName,\n                            scheme_link: schemeLink,\n                        }}\n                    />\n                </div>,\n            );\n        }\n        return errorMessages;\n    }\n\n    render = (): JSX.Element => {\n        const {channelPermissions, guestAccountsEnabled, onChannelPermissionsChanged, readOnly} = this.props;\n        return (\n            <AdminPanel\n                id='channel_moderation'\n                titleId={formattedMessages.title.id}\n                titleDefault={formattedMessages.title.defaultMessage}\n                subtitleId={guestAccountsEnabled ? formattedMessages.subtitle.id : formattedMessages.subtitleMembers.id}\n                subtitleDefault={guestAccountsEnabled ? formattedMessages.subtitle.defaultMessage : formattedMessages.subtitleMembers.defaultMessage}\n            >\n                <div className='channel-moderation'>\n                    <div className='channel-moderation--body'>\n\n                        <table\n                            id='channel_moderation_table'\n                            className='channel-moderation--table'\n                        >\n                            <thead>\n                                <tr>\n                                    <th>\n                                        <FormattedMessage\n                                            id={formattedMessages.permissions.id}\n                                            defaultMessage={formattedMessages.permissions.defaultMessage}\n                                        />\n                                    </th>\n                                    {guestAccountsEnabled &&\n                                        <th>\n                                            <FormattedMessage\n                                                id={formattedMessages.guests.id}\n                                                defaultMessage={formattedMessages.guests.defaultMessage}\n                                            />\n                                        </th>\n                                    }\n                                    <th>\n                                        <FormattedMessage\n                                            id={formattedMessages.members.id}\n                                            defaultMessage={formattedMessages.members.defaultMessage}\n                                        />\n                                    </th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {channelPermissions?.map((entry) => {\n                                    return (\n                                        <ChannelModerationTableRow\n                                            key={entry.name}\n                                            name={entry.name}\n                                            guests={entry.roles.guests?.value}\n                                            guestsDisabled={!entry.roles.guests?.enabled}\n                                            members={entry.roles.members.value}\n                                            membersDisabled={!entry.roles.members.enabled}\n                                            onClick={onChannelPermissionsChanged}\n                                            errorMessages={this.errorMessagesToDisplay(entry)}\n                                            guestAccountsEnabled={guestAccountsEnabled}\n                                            readOnly={readOnly}\n                                        />\n                                    );\n                                })}\n\n                            </tbody>\n                        </table>\n\n                    </div>\n                </div>\n            </AdminPanel>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {cloneDeep} from 'lodash';\n\nimport {Groups, Permissions} from 'matterfoss-redux/constants';\nimport {ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {Scheme} from 'matterfoss-redux/types/schemes';\nimport {ChannelModerationRoles} from 'matterfoss-redux/types/roles';\nimport {SyncablePatch, Group, SyncableType} from 'matterfoss-redux/types/groups';\nimport {Channel, ChannelModeration as ChannelPermissions, ChannelModerationPatch} from 'matterfoss-redux/types/channels';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport ConfirmModal from 'components/confirm_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormError from 'components/form_error';\nimport Constants from 'utils/constants';\nimport {browserHistory} from 'utils/browser_history';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport {NeedGroupsError, UsersWillBeRemovedError} from '../../errors';\nimport ConvertConfirmModal from '../../convert_confirm_modal';\nimport RemoveConfirmModal from '../../remove_confirm_modal';\nimport ConvertAndRemoveConfirmModal from '../../convert_and_remove_confirm_modal';\nimport SaveChangesPanel from '../../save_changes_panel';\n\nimport {ChannelModes} from './channel_modes';\nimport {ChannelGroups} from './channel_groups';\nimport {ChannelProfile} from './channel_profile';\nimport ChannelMembers from './channel_members';\nimport ChannelModeration from './channel_moderation';\n\nexport interface ChannelDetailsProps {\n    channelID: string;\n    channel: Channel;\n    team: Partial<Team>;\n    groups: Group[];\n    totalGroups: number;\n    allGroups: Dictionary<Group>;\n    channelPermissions: ChannelPermissions[];\n    teamScheme?: Scheme;\n    guestAccountsEnabled: boolean;\n    isDisabled?: boolean;\n    actions: ChannelDetailsActions;\n}\n\ninterface ChannelDetailsState {\n    isSynced: boolean;\n    isPublic: boolean;\n    isDefault: boolean;\n    totalGroups: number;\n    groups: Group[];\n    usersToRemoveCount: number;\n    usersToRemove: Dictionary<UserProfile>;\n    usersToAdd: Dictionary<UserProfile>;\n    rolesToUpdate: {\n        [userId: string]: {\n            schemeUser: boolean;\n            schemeAdmin: boolean;\n        };\n    };\n    saveNeeded: boolean;\n    serverError: JSX.Element | null;\n    previousServerError: JSX.Element | null;\n    isPrivacyChanging: boolean;\n    saving: boolean;\n    showConvertConfirmModal: boolean;\n    showRemoveConfirmModal: boolean;\n    showConvertAndRemoveConfirmModal: boolean;\n    channelPermissions: ChannelPermissions[];\n    teamScheme?: Scheme;\n    isLocalArchived: boolean;\n    showArchiveConfirmModal: boolean;\n}\n\nexport type ChannelDetailsActions = {\n    getGroups: (channelID: string, q?: string, page?: number, perPage?: number, filterAllowReference?: boolean) => Promise<ActionResult>;\n    linkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: SyncablePatch) => ActionResult;\n    unlinkGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType) => ActionFunc;\n    membersMinusGroupMembers: (channelID: string, groupIDs: string[], page?: number, perPage?: number) => ActionResult;\n    setNavigationBlocked: (blocked: boolean) => {type: 'SET_NAVIGATION_BLOCKED'; blocked: boolean};\n    getChannel: (channelId: string) => ActionFunc;\n    getTeam: (teamId: string) => Promise<ActionResult>;\n    getChannelModerations: (channelId: string) => Promise<ActionResult>;\n    patchChannel: (channelId: string, patch: Channel) => ActionFunc;\n    updateChannelPrivacy: (channelId: string, privacy: string) => Promise<ActionResult>;\n    patchGroupSyncable: (groupID: string, syncableID: string, syncableType: SyncableType, patch: Partial<SyncablePatch>) => ActionFunc;\n    patchChannelModerations: (channelID: string, patch: ChannelModerationPatch[]) => {data: Channel; error: ServerError};\n    loadScheme: (schemeID: string) => Promise<ActionResult>;\n    addChannelMember: (channelId: string, userId: string, postRootId?: string) => Promise<ActionResult>;\n    removeChannelMember: (channelId: string, userId: string) => Promise<ActionResult>;\n    updateChannelMemberSchemeRoles: (channelId: string, userId: string, isSchemeUser: boolean, isSchemeAdmin: boolean) => Promise<ActionResult>;\n    deleteChannel: (channelId: string) => Promise<ActionResult>;\n    unarchiveChannel: (channelId: string) => Promise<ActionResult>;\n};\n\nexport default class ChannelDetails extends React.PureComponent<ChannelDetailsProps, ChannelDetailsState> {\n    constructor(props: ChannelDetailsProps) {\n        super(props);\n        this.state = {\n            isSynced: Boolean(props.channel.group_constrained),\n            isPublic: props.channel.type === Constants.OPEN_CHANNEL,\n            isDefault: props.channel.name === Constants.DEFAULT_CHANNEL,\n            isPrivacyChanging: false,\n            saving: false,\n            totalGroups: props.totalGroups,\n            showConvertConfirmModal: false,\n            showRemoveConfirmModal: false,\n            showConvertAndRemoveConfirmModal: false,\n            usersToRemoveCount: 0,\n            usersToRemove: {},\n            usersToAdd: {},\n            rolesToUpdate: {},\n            groups: props.groups,\n            saveNeeded: false,\n            serverError: null,\n            previousServerError: null,\n            channelPermissions: props.channelPermissions,\n            teamScheme: props.teamScheme,\n            isLocalArchived: props.channel.delete_at > 0,\n            showArchiveConfirmModal: false,\n        };\n    }\n\n    componentDidUpdate(prevProps: ChannelDetailsProps) {\n        const {channel, totalGroups, actions} = this.props;\n        if (channel.id !== prevProps.channel.id || totalGroups !== prevProps.totalGroups) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({\n                totalGroups,\n                isSynced: Boolean(channel.group_constrained),\n                isPublic: channel.type === Constants.OPEN_CHANNEL,\n                isDefault: channel.name === Constants.DEFAULT_CHANNEL,\n                isLocalArchived: channel.delete_at > 0,\n            });\n        }\n\n        // If we don't have the team and channel on mount, we need to request the team after we load the channel\n        if (!prevProps.team.id && !prevProps.channel.team_id && channel.team_id) {\n            actions.getTeam(channel.team_id).\n                then(async (data: any) => {\n                    if (data.data && data.data.scheme_id) {\n                        await actions.loadScheme(data.data.scheme_id);\n                    }\n                }).\n                then(() => this.setState({teamScheme: this.props.teamScheme}));\n        }\n    }\n\n    componentDidMount() {\n        const {channelID, channel, actions} = this.props;\n        if (channelID) {\n            actions.getGroups(channelID).\n                then(() => actions.getChannel(channelID)).\n                then(() => this.setState({groups: this.props.groups}));\n\n            actions.getChannelModerations(channelID).then(() => this.restrictChannelMentions());\n        }\n\n        if (channel.team_id) {\n            actions.getTeam(channel.team_id).\n                then(async (data: any) => {\n                    if (data.data && data.data.scheme_id) {\n                        await actions.loadScheme(data.data.scheme_id);\n                    }\n                }).\n                then(() => this.setState({teamScheme: this.props.teamScheme}));\n        }\n    }\n\n    private restrictChannelMentions() {\n        // Disabling use_channel_mentions on every role that create_post is either disabled or has a value of false\n        let channelPermissions = this.props.channelPermissions;\n        const currentCreatePostRoles: any = channelPermissions.find((element) => element.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.CREATE_POST)?.roles;\n        if (currentCreatePostRoles) {\n            for (const channelRole of Object.keys(currentCreatePostRoles)) {\n                channelPermissions = channelPermissions.map((permission) => {\n                    if (permission.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS && (!currentCreatePostRoles[channelRole].value || !currentCreatePostRoles[channelRole].enabled)) {\n                        return {\n                            name: permission.name,\n                            roles: {\n                                ...permission.roles,\n                                [channelRole]: {\n                                    value: false,\n                                    enabled: false,\n                                },\n                            },\n                        };\n                    }\n                    return permission;\n                });\n            }\n        }\n        this.setState({channelPermissions});\n    }\n\n    private setToggles = (isSynced: boolean, isPublic: boolean) => {\n        const {channel} = this.props;\n        const isOriginallyPublic = channel.type === Constants.OPEN_CHANNEL;\n        this.setState(\n            {\n                saveNeeded: true,\n                isSynced,\n                isPublic,\n                isPrivacyChanging: isPublic !== isOriginallyPublic,\n            },\n            () => this.processGroupsChange(this.state.groups),\n        );\n        this.props.actions.setNavigationBlocked(true);\n    };\n\n    async processGroupsChange(groups: Group[]) {\n        const {actions, channelID} = this.props;\n        actions.setNavigationBlocked(true);\n        let serverError = null;\n        let usersToRemoveCount = 0;\n        if (this.state.isSynced) {\n            try {\n                if (groups.length === 0) {\n                    serverError = (\n                        <NeedGroupsError\n                            warning={true}\n                            isChannel={true}\n                        />\n                    );\n                } else {\n                    if (!channelID) {\n                        return;\n                    }\n\n                    const result = await actions.membersMinusGroupMembers(channelID, groups.map((g) => g.id));\n                    if ('data' in result) {\n                        usersToRemoveCount = result.data.total_count;\n                        if (usersToRemoveCount > 0) {\n                            serverError = (\n                                <UsersWillBeRemovedError\n                                    total={usersToRemoveCount}\n                                    users={result.data.users}\n                                    scope='channel'\n                                    scopeId={this.props.channelID}\n                                />\n                            );\n                        }\n                    }\n                }\n            } catch (ex) {\n                serverError = ex;\n            }\n        }\n        this.setState({groups, usersToRemoveCount, saveNeeded: true, serverError});\n    }\n\n    private handleGroupRemoved = (gid: string) => {\n        const groups = this.state.groups.filter((g) => g.id !== gid);\n        this.setState({totalGroups: this.state.totalGroups - 1});\n        this.processGroupsChange(groups);\n    };\n\n    private setNewGroupRole = (gid: string) => {\n        const groups = cloneDeep(this.state.groups).map((g) => {\n            if (g.id === gid) {\n                g.scheme_admin = !g.scheme_admin;\n            }\n            return g;\n        });\n        this.processGroupsChange(groups);\n    }\n\n    private channelPermissionsChanged = (name: string, channelRole: ChannelModerationRoles) => {\n        const currentValueIndex = this.state.channelPermissions.findIndex((element) => element.name === name);\n        const currentValue = this.state.channelPermissions[currentValueIndex].roles[channelRole]!.value;\n        const newValue = !currentValue;\n        let channelPermissions = [...this.state.channelPermissions];\n\n        if (name === Permissions.CHANNEL_MODERATED_PERMISSIONS.CREATE_POST) {\n            const originalObj = this.props.channelPermissions.find((element) => element.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS)?.roles![channelRole];\n            channelPermissions = channelPermissions.map((permission) => {\n                if (permission.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS && !newValue) {\n                    return {\n                        name: permission.name,\n                        roles: {\n                            ...permission.roles,\n                            [channelRole]: {\n                                value: false,\n                                enabled: false,\n                            },\n                        },\n                    };\n                } else if (permission.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.USE_CHANNEL_MENTIONS) {\n                    return {\n                        name: permission.name,\n                        roles: {\n                            ...permission.roles,\n                            [channelRole]: {\n                                value: originalObj?.value,\n                                enabled: originalObj?.enabled,\n                            },\n                        },\n                    };\n                }\n                return permission;\n            });\n        }\n        channelPermissions[currentValueIndex] = {\n            ...channelPermissions[currentValueIndex],\n            roles: {\n                ...channelPermissions[currentValueIndex].roles,\n                [channelRole]: {\n                    ...channelPermissions[currentValueIndex].roles[channelRole],\n                    value: newValue,\n                },\n            },\n        };\n        this.setState({channelPermissions, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    private handleGroupChange = (groupIDs: string[]) => {\n        const groups = [...this.state.groups, ...groupIDs.map((gid: string) => this.props.allGroups[gid])];\n        this.setState({totalGroups: this.state.totalGroups + groupIDs.length});\n        this.processGroupsChange(groups);\n    };\n\n    private hideConvertConfirmModal = () => {\n        this.setState({showConvertConfirmModal: false});\n    };\n\n    private hideRemoveConfirmModal = () => {\n        this.setState({showRemoveConfirmModal: false});\n    };\n\n    private hideConvertAndRemoveConfirmModal = () => {\n        this.setState({showConvertAndRemoveConfirmModal: false});\n    };\n\n    private hideArchiveConfirmModal = () => {\n        this.setState({showArchiveConfirmModal: false});\n    };\n\n    private onSave = () => {\n        const {channel} = this.props;\n        const {isSynced, usersToRemoveCount, serverError} = this.state;\n        let {isPublic, isPrivacyChanging} = this.state;\n        if (this.channelToBeArchived()) {\n            this.setState({showArchiveConfirmModal: true});\n            return;\n        }\n        const isOriginallyPublic = channel.type === Constants.OPEN_CHANNEL;\n        if (isSynced) {\n            isPublic = false;\n            isPrivacyChanging = isOriginallyPublic;\n            this.setState({\n                isPublic,\n                isPrivacyChanging,\n            });\n        }\n        if (isPrivacyChanging && usersToRemoveCount > 0) {\n            this.setState({showConvertAndRemoveConfirmModal: true});\n            return;\n        }\n        if (isPrivacyChanging && usersToRemoveCount === 0 && serverError === null) {\n            this.setState({showConvertConfirmModal: true});\n            return;\n        }\n        if (!isPrivacyChanging && usersToRemoveCount > 0) {\n            this.setState({showRemoveConfirmModal: true});\n            return;\n        }\n        this.handleSubmit();\n    };\n\n    private handleSubmit = async () => {\n        this.setState({showConvertConfirmModal: false, showRemoveConfirmModal: false, showConvertAndRemoveConfirmModal: false, showArchiveConfirmModal: false, saving: true});\n        const {groups, isSynced, isPublic, isPrivacyChanging, channelPermissions, usersToAdd, usersToRemove, rolesToUpdate} = this.state;\n        let serverError: JSX.Element | null = null;\n        let saveNeeded = false;\n        const {groups: origGroups, channelID, actions, channel} = this.props;\n\n        if (this.channelToBeArchived()) {\n            const result = await actions.deleteChannel(channel.id);\n            if ('error' in result) {\n                serverError = <FormError error={result.error.message}/>;\n                saveNeeded = true;\n            } else {\n                trackEvent('admin_channel_config_page', 'channel_archived', {channel_id: channelID});\n            }\n            this.setState({serverError, saving: false, saveNeeded, isPrivacyChanging: false, usersToRemoveCount: 0, rolesToUpdate: {}, usersToAdd: {}, usersToRemove: {}}, () => {\n                actions.setNavigationBlocked(saveNeeded);\n                if (!saveNeeded) {\n                    browserHistory.push('/admin_console/user_management/channels');\n                }\n            });\n            return;\n        } else if (this.channelToBeRestored() && this.state.serverError === null) {\n            const result = await actions.unarchiveChannel(channel.id);\n            if ('error' in result) {\n                serverError = <FormError error={result.error.message}/>;\n            } else {\n                trackEvent('admin_channel_config_page', 'channel_unarchived', {channel_id: channelID});\n            }\n            this.setState({serverError, previousServerError: null});\n        }\n\n        if (this.state.groups.length === 0 && isSynced) {\n            serverError = <NeedGroupsError isChannel={true}/>;\n            saveNeeded = true;\n            this.setState({serverError, saving: false, saveNeeded});\n            actions.setNavigationBlocked(saveNeeded);\n            return;\n        }\n\n        const promises = [];\n        if (isPrivacyChanging) {\n            const convert = actions.updateChannelPrivacy(channel.id, isPublic ? Constants.OPEN_CHANNEL : Constants.PRIVATE_CHANNEL);\n            promises.push(\n                convert.then((res: ActionResult) => {\n                    if ('error' in res) {\n                        return res;\n                    }\n                    return actions.patchChannel(channel.id, {\n                        ...channel,\n                        group_constrained: isSynced,\n                    });\n                }),\n            );\n        } else {\n            promises.push(\n                actions.patchChannel(channel.id, {\n                    ...channel,\n                    group_constrained: isSynced,\n                }),\n            );\n        }\n\n        const patchChannelSyncable = groups.\n            filter((g) => {\n                return origGroups.some((group) => group.id === g.id && group.scheme_admin !== g.scheme_admin);\n            }).\n            map((g) => actions.patchGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL, {scheme_admin: g.scheme_admin}));\n\n        const unlink = origGroups.\n            filter((g) => {\n                return !groups.some((group) => group.id === g.id);\n            }).\n            map((g) => actions.unlinkGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL));\n\n        const link = groups.\n            filter((g) => {\n                return !origGroups.some((group) => group.id === g.id);\n            }).\n            map((g) => actions.linkGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true, scheme_admin: g.scheme_admin}));\n\n        const groupActions = [...promises, ...patchChannelSyncable, ...unlink, ...link];\n        if (groupActions.length > 0) {\n            const result = await Promise.all(groupActions);\n            const resultWithError = result.find((r) => 'error' in r);\n            if (resultWithError && 'error' in resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            } else {\n                if (unlink.length > 0) {\n                    trackEvent('admin_channel_config_page', 'groups_removed_from_channel', {count: unlink.length, channel_id: channelID});\n                }\n                if (link.length > 0) {\n                    trackEvent('admin_channel_config_page', 'groups_added_to_channel', {count: link.length, channel_id: channelID});\n                }\n\n                const actionsToAwait: any[] = [actions.getGroups(channelID)];\n                if (isPrivacyChanging) {\n                    // If the privacy is changing update the manage_members value for the channel moderation widget\n                    actionsToAwait.push(\n                        actions.getChannelModerations(channelID).then(() => {\n                            const manageMembersIndex = channelPermissions.findIndex((element) => element.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.MANAGE_MEMBERS);\n                            if (channelPermissions) {\n                                const updatedManageMembers = this.props.channelPermissions.find((element) => element.name === Permissions.CHANNEL_MODERATED_PERMISSIONS.MANAGE_MEMBERS);\n                                channelPermissions[manageMembersIndex] = updatedManageMembers || channelPermissions[manageMembersIndex];\n                            }\n                            this.setState({channelPermissions});\n                        }),\n                    );\n                }\n                await Promise.all(actionsToAwait);\n            }\n        }\n\n        const patchChannelPermissionsArray: ChannelModerationPatch[] = channelPermissions.map((p) => {\n            return {\n                name: p.name,\n                roles: {\n                    ...(p.roles.members && p.roles.members.enabled && {members: p.roles.members!.value}),\n                    ...(p.roles.guests && p.roles.guests.enabled && {guests: p.roles.guests!.value}),\n                },\n            };\n        });\n\n        const patchChannelModerationsResult = await actions.patchChannelModerations(channelID, patchChannelPermissionsArray);\n        if (patchChannelModerationsResult.error) {\n            serverError = <FormError error={patchChannelModerationsResult.error.message}/>;\n        }\n        this.restrictChannelMentions();\n\n        let privacyChanging = isPrivacyChanging;\n        if (serverError == null) {\n            privacyChanging = false;\n        }\n\n        const usersToAddList = Object.values(usersToAdd);\n        const usersToRemoveList = Object.values(usersToRemove);\n        const userRolesToUpdate = Object.keys(rolesToUpdate);\n        const usersToUpdate = usersToAddList.length > 0 || usersToRemoveList.length > 0 || userRolesToUpdate.length > 0;\n        if (usersToUpdate && !isSynced) {\n            const addUserActions: any[] = [];\n            const removeUserActions: any[] = [];\n            const {addChannelMember, removeChannelMember, updateChannelMemberSchemeRoles} = this.props.actions;\n            usersToAddList.forEach((user) => {\n                addUserActions.push(addChannelMember(channelID, user.id));\n            });\n            usersToRemoveList.forEach((user) => {\n                removeUserActions.push(removeChannelMember(channelID, user.id));\n            });\n\n            if (addUserActions.length > 0) {\n                const result = await Promise.all(addUserActions);\n                const resultWithError = result.find((r) => 'error' in r);\n                const count = result.filter((r) => 'data' in r).length;\n                if (resultWithError && 'error' in resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_channel_config_page', 'members_added_to_channel', {count, channel_id: channelID});\n                }\n            }\n\n            if (removeUserActions.length > 0) {\n                const result = await Promise.all(removeUserActions);\n                const resultWithError = result.find((r) => 'error' in r);\n                const count = result.filter((r) => 'data' in r).length;\n                if (resultWithError && 'error' in resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_channel_config_page', 'members_removed_from_channel', {count, channel_id: channelID});\n                }\n            }\n\n            const rolesToPromote: any[] = [];\n            const rolesToDemote: any[] = [];\n            userRolesToUpdate.forEach((userId) => {\n                const {schemeUser, schemeAdmin} = rolesToUpdate[userId];\n                if (schemeAdmin) {\n                    rolesToPromote.push(updateChannelMemberSchemeRoles(channelID, userId, schemeUser, schemeAdmin));\n                } else {\n                    rolesToDemote.push(updateChannelMemberSchemeRoles(channelID, userId, schemeUser, schemeAdmin));\n                }\n            });\n\n            if (rolesToPromote.length > 0) {\n                const result = await Promise.all(rolesToPromote);\n                const resultWithError = result.find((r) => 'error' in r);\n                const count = result.filter((r) => 'data' in r).length;\n                if (resultWithError && 'error' in resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_channel_config_page', 'members_elevated_to_channel_admin', {count, channel_id: channelID});\n                }\n            }\n\n            if (rolesToDemote.length > 0) {\n                const result = await Promise.all(rolesToDemote);\n                const resultWithError = result.find((r) => 'error' in r);\n                const count = result.filter((r) => 'data' in r).length;\n                if (resultWithError && 'error' in resultWithError) {\n                    serverError = <FormError error={resultWithError.error.message}/>;\n                }\n                if (count > 0) {\n                    trackEvent('admin_channel_config_page', 'admins_demoted_to_channel_member', {count, channel_id: channelID});\n                }\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded, isPrivacyChanging: privacyChanging, usersToRemoveCount: 0, rolesToUpdate: {}, usersToAdd: {}, usersToRemove: {}}, () => {\n            actions.setNavigationBlocked(saveNeeded);\n            if (!saveNeeded && serverError === null) {\n                browserHistory.push('/admin_console/user_management/channels');\n            }\n        });\n    };\n\n    private channelToBeArchived = (): boolean => {\n        const {isLocalArchived} = this.state;\n        const isServerArchived = this.props.channel.delete_at !== 0;\n        return isLocalArchived && !isServerArchived;\n    }\n\n    private channelToBeRestored = (): boolean => {\n        const {isLocalArchived} = this.state;\n        const isServerArchived = this.props.channel.delete_at !== 0;\n        return !isLocalArchived && isServerArchived;\n    }\n\n    private addRolesToUpdate = (userId: string, schemeUser: boolean, schemeAdmin: boolean) => {\n        const {rolesToUpdate} = this.state;\n        rolesToUpdate[userId] = {schemeUser, schemeAdmin};\n        this.setState({rolesToUpdate: {...rolesToUpdate}, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    private addUserToRemove = (user: UserProfile) => {\n        let {usersToRemoveCount} = this.state;\n        const {usersToAdd, usersToRemove, rolesToUpdate} = this.state;\n        if (usersToAdd[user.id]?.id === user.id) {\n            delete usersToAdd[user.id];\n        } else if (usersToRemove[user.id]?.id !== user.id) {\n            usersToRemoveCount += 1;\n            usersToRemove[user.id] = user;\n        }\n        delete rolesToUpdate[user.id];\n        this.setState({usersToRemove: {...usersToRemove}, usersToAdd: {...usersToAdd}, rolesToUpdate: {...rolesToUpdate}, usersToRemoveCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    private addUsersToAdd = (users: UserProfile[]) => {\n        let {usersToRemoveCount} = this.state;\n        const {usersToAdd, usersToRemove} = this.state;\n        users.forEach((user) => {\n            if (usersToRemove[user.id]?.id === user.id) {\n                delete usersToRemove[user.id];\n                usersToRemoveCount -= 1;\n            } else {\n                usersToAdd[user.id] = user;\n            }\n        });\n        this.setState({usersToAdd: {...usersToAdd}, usersToRemove: {...usersToRemove}, usersToRemoveCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    private onToggleArchive = () => {\n        const {isLocalArchived, serverError, previousServerError} = this.state;\n        const {isDisabled} = this.props;\n        if (isDisabled) {\n            return;\n        }\n        const newState: any = {\n            saveNeeded: true,\n            isLocalArchived: !isLocalArchived,\n        };\n\n        if (newState.isLocalArchived) {\n            // if the channel is being archived then clear the other server\n            // errors, they're no longer relevant.\n            newState.previousServerError = serverError;\n            newState.serverError = null;\n        } else {\n            // if the channel is being unarchived (maybe the user had toggled\n            // and untoggled) the button, so reinstate any server errors that\n            // were present.\n            newState.serverError = previousServerError;\n            newState.previousServerError = null;\n        }\n        this.props.actions.setNavigationBlocked(true);\n        this.setState(newState);\n    };\n\n    public render = (): JSX.Element => {\n        const {\n            totalGroups,\n            saving,\n            saveNeeded,\n            serverError,\n            isSynced,\n            isPublic,\n            isDefault,\n            groups,\n            showConvertConfirmModal,\n            showRemoveConfirmModal,\n            showConvertAndRemoveConfirmModal,\n            usersToRemoveCount,\n            channelPermissions,\n            teamScheme,\n            usersToRemove,\n            usersToAdd,\n            isLocalArchived,\n            showArchiveConfirmModal,\n        } = this.state;\n        const {channel, team} = this.props;\n        const missingGroup = (og: {id: string}) => !groups.find((g: Group) => g.id === og.id);\n        const removedGroups = this.props.groups.filter(missingGroup);\n        const nonArchivedContent = (\n            <>\n                <ConvertConfirmModal\n                    show={showConvertConfirmModal}\n                    onCancel={this.hideConvertConfirmModal}\n                    onConfirm={this.handleSubmit}\n                    displayName={channel.display_name || ''}\n                    toPublic={isPublic}\n                />\n\n                <ChannelModeration\n                    channelPermissions={channelPermissions}\n                    onChannelPermissionsChanged={this.channelPermissionsChanged}\n                    teamSchemeID={teamScheme?.id}\n                    teamSchemeDisplayName={teamScheme?.display_name}\n                    guestAccountsEnabled={this.props.guestAccountsEnabled}\n                    isPublic={this.props.channel.type === Constants.OPEN_CHANNEL}\n                    readOnly={this.props.isDisabled}\n                />\n\n                <RemoveConfirmModal\n                    show={showRemoveConfirmModal}\n                    onCancel={this.hideRemoveConfirmModal}\n                    onConfirm={this.handleSubmit}\n                    inChannel={true}\n                    amount={usersToRemoveCount}\n                />\n\n                <ConvertAndRemoveConfirmModal\n                    show={showConvertAndRemoveConfirmModal}\n                    onCancel={this.hideConvertAndRemoveConfirmModal}\n                    onConfirm={this.handleSubmit}\n                    displayName={channel.display_name || ''}\n                    toPublic={isPublic}\n                    removeAmount={usersToRemoveCount}\n                />\n\n                <ChannelModes\n                    isPublic={isPublic}\n                    isSynced={isSynced}\n                    isDefault={isDefault}\n                    onToggle={this.setToggles}\n                    isDisabled={this.props.isDisabled}\n                />\n\n                <ChannelGroups\n                    synced={isSynced}\n                    channel={channel}\n                    totalGroups={totalGroups}\n                    groups={groups}\n                    removedGroups={removedGroups}\n                    onAddCallback={this.handleGroupChange}\n                    onGroupRemoved={this.handleGroupRemoved}\n                    setNewGroupRole={this.setNewGroupRole}\n                    isDisabled={this.props.isDisabled}\n                />\n\n                {!isSynced &&\n                    <ChannelMembers\n                        onRemoveCallback={this.addUserToRemove}\n                        onAddCallback={this.addUsersToAdd}\n                        usersToRemove={usersToRemove}\n                        usersToAdd={usersToAdd}\n                        updateRole={this.addRolesToUpdate}\n                        channelId={this.props.channelID}\n                        isDisabled={this.props.isDisabled}\n                    />\n                }\n            </>\n        );\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/channels'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.channel_settings.channel_detail.channel_configuration'\n                            defaultMessage='Channel Configuration'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <ChannelProfile\n                            channel={channel}\n                            team={team}\n                            onToggleArchive={this.onToggleArchive}\n                            isArchived={isLocalArchived}\n                            isDisabled={this.props.isDisabled}\n                        />\n                        <ConfirmModal\n                            show={showArchiveConfirmModal}\n                            title={\n                                <FormattedMessage\n                                    id='admin.channel_settings.channel_detail.archive_confirm.title'\n                                    defaultMessage='Save and Archive Channel'\n                                />\n                            }\n                            message={\n                                <FormattedMessage\n                                    id='admin.channel_settings.channel_detail.archive_confirm.message'\n                                    defaultMessage='Saving will archive the channel from the team and make its contents inaccessible for all users. Are you sure you wish to save and archive this channel?'\n                                />\n                            }\n                            confirmButtonText={\n                                <FormattedMessage\n                                    id='admin.channel_settings.channel_detail.archive_confirm.button'\n                                    defaultMessage='Save and Archive Channel'\n                                />\n                            }\n                            onConfirm={this.handleSubmit}\n                            onCancel={this.hideArchiveConfirmModal}\n                        />\n                        {!isLocalArchived && nonArchivedContent}\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    saveNeeded={saveNeeded}\n                    onClick={this.onSave}\n                    serverError={serverError}\n                    cancelLink='/admin_console/user_management/channels'\n                    isDisabled={this.props.isDisabled}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getChannel, getChannelModerations} from 'matterfoss-redux/selectors/entities/channels';\nimport {getAllGroups, getGroupsAssociatedToChannel} from 'matterfoss-redux/selectors/entities/groups';\nimport {getScheme} from 'matterfoss-redux/selectors/entities/schemes';\nimport {getScheme as loadScheme} from 'matterfoss-redux/actions/schemes';\nimport {\n    addChannelMember,\n    deleteChannel,\n    getChannel as fetchChannel,\n    getChannelModerations as fetchChannelModerations,\n    membersMinusGroupMembers,\n    patchChannel,\n    patchChannelModerations,\n    removeChannelMember,\n    unarchiveChannel,\n    updateChannelMemberSchemeRoles,\n    updateChannelPrivacy,\n} from 'matterfoss-redux/actions/channels';\nimport {getTeam as fetchTeam} from 'matterfoss-redux/actions/teams';\n\nimport {\n    getGroupsAssociatedToChannel as fetchAssociatedGroups,\n    linkGroupSyncable,\n    patchGroupSyncable,\n    unlinkGroupSyncable,\n} from 'matterfoss-redux/actions/groups';\n\nimport {getTeam} from 'matterfoss-redux/selectors/entities/teams';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {setNavigationBlocked} from 'actions/admin_actions';\n\nimport ChannelDetails, {ChannelDetailsActions} from './channel_details';\n\ntype OwnProps = {\n    match: {\n        params: {\n            channel_id: string;\n        };\n    };\n}\n\nfunction mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const config = getConfig(state);\n    const guestAccountsEnabled = config.EnableGuestAccounts === 'true';\n    const channelID = ownProps.match.params.channel_id;\n    const channel = getChannel(state, channelID) || {};\n    const team = getTeam(state, channel.team_id) || {};\n    const groups = getGroupsAssociatedToChannel(state, channelID);\n    const totalGroups = groups.length;\n    const allGroups = getAllGroups(state);\n    const channelPermissions = getChannelModerations(state, channelID);\n    const teamScheme = getScheme(state, team.scheme_id);\n    return {\n        channelID,\n        channel,\n        team,\n        groups,\n        totalGroups,\n        allGroups,\n        channelPermissions,\n        teamScheme,\n        guestAccountsEnabled,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, ChannelDetailsActions>({\n            getGroups: fetchAssociatedGroups,\n            linkGroupSyncable,\n            unlinkGroupSyncable,\n            membersMinusGroupMembers,\n            setNavigationBlocked: setNavigationBlocked as any,\n            getChannel: fetchChannel,\n            getTeam: fetchTeam,\n            getChannelModerations: fetchChannelModerations,\n            patchChannel,\n            updateChannelPrivacy,\n            patchGroupSyncable,\n            patchChannelModerations,\n            loadScheme,\n            addChannelMember,\n            removeChannelMember,\n            updateChannelMemberSchemeRoles,\n            deleteChannel,\n            unarchiveChannel,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nconst PUSH_NOTIFICATIONS_OFF = 'off';\nconst PUSH_NOTIFICATIONS_MHPNS = 'mhpns';\nconst PUSH_NOTIFICATIONS_MTPNS = 'mtpns';\nconst PUSH_NOTIFICATIONS_CUSTOM = 'custom';\n\nexport default class PushSettings extends AdminSettings {\n    canSave = () => {\n        return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;\n    }\n\n    handleAgreeChange = (e) => {\n        this.setState({\n            agree: e.target.checked,\n        });\n    }\n\n    handleDropdownChange = (id, value) => {\n        if (id === 'pushNotificationServerType') {\n            this.setState({\n                agree: false,\n            });\n\n            if (value === PUSH_NOTIFICATIONS_MHPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MHPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_MTPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MTPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_CUSTOM &&\n                (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS ||\n                this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {\n                this.setState({\n                    pushNotificationServer: '',\n                });\n            }\n        }\n\n        this.handleChange(id, value);\n    }\n\n    getConfigFromState = (config) => {\n        config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;\n        config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();\n        config.TeamSettings.MaxNotificationsPerChannel = this.state.maxNotificationsPerChannel;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;\n        let agree = false;\n        if (!config.EmailSettings.SendPushNotifications) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MHPNS &&\n            this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;\n            agree = true;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MTPNS) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;\n        }\n\n        let pushNotificationServer = config.EmailSettings.PushNotificationServer;\n        if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushNotificationServer = Constants.MTPNS;\n        } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushNotificationServer = Constants.MHPNS;\n        }\n\n        const maxNotificationsPerChannel = config.TeamSettings.MaxNotificationsPerChannel;\n\n        return {\n            pushNotificationServerType,\n            pushNotificationServer,\n            maxNotificationsPerChannel,\n            agree,\n        };\n    }\n\n    isPushNotificationServerSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('EmailSettings.SendPushNotifications') ||\n            this.isSetByEnv('EmailSettings.PushNotificationServer');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.environment.pushNotificationServer'\n                defaultMessage='Push Notification Server'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const pushNotificationServerTypes = [];\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_OFF, text: Utils.localizeMessage('admin.email.pushOff', 'Do not send push notifications')});\n        if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MHPNS, text: Utils.localizeMessage('admin.email.mhpns', 'Use HPNS connection with uptime SLA to send notifications to iOS and Android apps')});\n        }\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MTPNS, text: Utils.localizeMessage('admin.email.mtpns', 'Use TPNS connection to send notifications to iOS and Android apps')});\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_CUSTOM, text: Utils.localizeMessage('admin.email.selfPush', 'Manually enter Push Notification Service location')});\n\n        let sendHelpText = null;\n        let pushServerHelpText = null;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {\n            sendHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.pushOffHelp'\n                    defaultMessage='Please see [documentation on push notifications](!https://about.mattermost.com/default-mobile-push-notifications/) to learn more about setup options.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mhpnsHelp'\n                    defaultMessage='Download [MatterFOSS iOS app](!https://about.mattermost.com/matterfoss-ios-app/) from iTunes. Download [MatterFOSS Android app](!https://about.mattermost.com/matterfoss-android-app/) from Google Play. Learn more about the [MatterFOSS Hosted Push Notification Service](!https://about.mattermost.com/default-hpns/).'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mtpnsHelp'\n                    defaultMessage='Download [MatterFOSS iOS app](!https://about.mattermost.com/matterfoss-ios-app/) from iTunes. Download [MatterFOSS Android app](!https://about.mattermost.com/matterfoss-android-app/) from Google Play. Learn more about the [MatterFOSS Test Push Notification Service](!https://about.mattermost.com/default-tpns/).'\n                />\n            );\n        } else {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.easHelp'\n                    defaultMessage='Learn more about compiling and deploying your own mobile apps from an [Enterprise App Store](!https://about.mattermost.com/default-enterprise-app-store).'\n                />\n            );\n        }\n\n        let tosCheckbox;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            tosCheckbox = (\n                <div className='form-group'>\n                    <div className='col-sm-4'/>\n                    <div className='col-sm-8'>\n                        <input\n                            type='checkbox'\n                            ref='agree'\n                            checked={this.state.agree}\n                            onChange={this.handleAgreeChange}\n                            disabled={this.props.isDisabled}\n                        />\n                        <FormattedMarkdownMessage\n                            id='admin.email.agreeHPNS'\n                            defaultMessage=' I understand and accept the MatterFOSS Hosted Push Notification Service [Terms of Service](!https://about.mattermost.com/hpns-terms/) and [Privacy Policy](!https://about.mattermost.com/hpns-privacy/).'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <DropdownSetting\n                    id='pushNotificationServerType'\n                    values={pushNotificationServerTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushTitle'\n                            defaultMessage='Enable Push Notifications: '\n                        />\n                    }\n                    value={this.state.pushNotificationServerType}\n                    onChange={this.handleDropdownChange}\n                    helpText={sendHelpText}\n                    setByEnv={this.isPushNotificationServerSetByEnv()}\n                    disabled={this.props.isDisabled}\n                />\n                {tosCheckbox}\n                <TextSetting\n                    id='pushNotificationServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushServerTitle'\n                            defaultMessage='Push Notification Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.pushServerEx', 'E.g.: \"https://push-test.matterfoss.com\"')}\n                    helpText={pushServerHelpText}\n                    value={this.state.pushNotificationServer}\n                    onChange={this.handleChange}\n                    disabled={this.props.isDisabled || this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM}\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationServer')}\n                />\n                <TextSetting\n                    id='maxNotificationsPerChannel'\n                    type='number'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.maxNotificationsPerChannelTitle'\n                            defaultMessage='Max Notifications Per Channel:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.maxNotificationsPerChannelExample', 'E.g.: \"1000\"')}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.team.maxNotificationsPerChannelDescription'\n                            defaultMessage='Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance.'\n                        />\n                    }\n                    value={this.state.maxNotificationsPerChannel}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSettings.MaxNotificationsPerChannel')}\n                    disabled={this.props.isDisabled}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    title: React.ReactNode;\n    subtitle?: React.ReactNode;\n    buttonText?: React.ReactNode;\n    onClick?: () => void;\n};\n\n// This component can be used in the card header\nconst TitleAndButtonCardHeader: React.FC<Props> = (props: Props) => {\n    return (\n        <>\n            <div>\n                <div className='text-top'>\n                    {props.title}\n                </div>\n                {\n                    props.subtitle &&\n                    <div className='text-bottom'>\n                        {props.subtitle}\n                    </div>\n                }\n            </div>\n            {\n                props.buttonText && props.onClick &&\n                    <button\n                        className='content-button primary'\n                        onClick={props.onClick}\n                    >\n                        {props.buttonText}\n                    </button>\n            }\n\n        </>\n    );\n};\n\nexport default TitleAndButtonCardHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {createRef, RefObject} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport {AdminConfig} from 'matterfoss-redux/types/config';\nimport {DataRetentionCustomPolicies, DataRetentionCustomPolicy} from 'matterfoss-redux/types/data_retention';\n\nimport {JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport DataGrid, {Row, Column} from 'components/admin_console/data_grid/data_grid';\nimport Card from 'components/card/card';\nimport TitleAndButtonCardHeader from 'components/card/title_and_button_card_header/title_and_button_card_header';\n\nimport JobsTable from 'components/admin_console/jobs';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\nimport {browserHistory} from 'utils/browser_history';\nimport {JobTypeBase, JobType} from 'matterfoss-redux/types/jobs';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\nimport './data_retention_settings.scss';\n\ntype OptionType = {\n    label: string | JSX.Element;\n    value: string;\n}\n\ntype Props = {\n    config: DeepPartial<AdminConfig>;\n    customPolicies: DataRetentionCustomPolicies;\n    customPoliciesCount: number;\n    actions: {\n        getDataRetentionCustomPolicies: (page: number) => Promise<{ data: DataRetentionCustomPolicies }>;\n        createJob: (job: JobTypeBase) => Promise<{ data: any }>;\n        getJobsByType: (job: JobType) => Promise<{ data: any}>;\n        deleteDataRetentionCustomPolicy: (id: string) => Promise<ActionResult>;\n        updateConfig: (config: Record<string, any>) => Promise<{ data: any}>;\n    };\n};\n\ntype State = {\n    customPoliciesLoading: boolean;\n    page: number;\n    loading: boolean;\n    showEditJobTime: boolean;\n}\nconst PAGE_SIZE = 10;\n\nexport default class DataRetentionSettings extends React.PureComponent<Props, State> {\n    inputRef: RefObject<ReactSelect<OptionType>>;\n    constructor(props: Props) {\n        super(props);\n        this.inputRef = createRef();\n        this.state = {\n            customPoliciesLoading: true,\n            page: 0,\n            loading: false,\n            showEditJobTime: false,\n        };\n    }\n    deleteCustomPolicy = async (id: string) => {\n        await this.props.actions.deleteDataRetentionCustomPolicy(id);\n        this.loadPage(0);\n    }\n    getGlobalPolicyColumns = (): Column[] => {\n        return [\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.globalPoliciesTable.description'\n                        defaultMessage='Description'\n                    />\n                ),\n                field: 'description',\n            },\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.globalPoliciesTable.channelMessages'\n                        defaultMessage='Channel messages'\n                    />\n                ),\n                field: 'channel_messages',\n            },\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.globalPoliciesTable.files'\n                        defaultMessage='Files'\n                    />\n                ),\n                field: 'files',\n            },\n            {\n                name: '',\n                field: 'actions',\n                className: 'actionIcon',\n            },\n        ];\n    }\n    getCustomPolicyColumns = (): Column[] => {\n        return [\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.customPoliciesTable.description'\n                        defaultMessage='Description'\n                    />\n                ),\n                field: 'description',\n            },\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.customPoliciesTable.channelMessages'\n                        defaultMessage='Channel messages'\n                    />\n                ),\n                field: 'channel_messages',\n            },\n            {\n                name: (\n                    <FormattedMessage\n                        id='admin.data_retention.customPoliciesTable.appliedTo'\n                        defaultMessage='Applied to'\n                    />\n                ),\n                field: 'applied_to',\n            },\n            {\n                name: '',\n                field: 'actions',\n                className: 'actionIcon',\n            },\n        ];\n    }\n    getMessageRetentionSetting = (enabled: boolean | undefined, days: number | undefined): JSX.Element => {\n        if (!enabled) {\n            return (\n                <FormattedMessage\n                    id='admin.data_retention.form.keepForever'\n                    defaultMessage='Keep forever'\n                />\n            );\n        }\n        if (days && days % 365 === 0) {\n            const years = days / 365;\n            return (\n                <FormattedMessage\n                    id='admin.data_retention.retention_years'\n                    defaultMessage='{count} {count, plural, one {year} other {years}}'\n                    values={{\n                        count: `${years}`,\n                    }}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='admin.data_retention.retention_days'\n                defaultMessage='{count} {count, plural, one {day} other {days}}'\n                values={{\n                    count: `${days}`,\n                }}\n            />\n        );\n    }\n    getGlobalPolicyRows = (): Row[] => {\n        const {DataRetentionSettings} = this.props.config;\n        return [{\n            cells: {\n                description: Utils.localizeMessage('admin.data_retention.form.text', 'Applies to all teams and channels, but does not apply to custom retention policies.'),\n                channel_messages: this.getMessageRetentionSetting(DataRetentionSettings?.EnableMessageDeletion, DataRetentionSettings?.MessageRetentionDays),\n                files: this.getMessageRetentionSetting(DataRetentionSettings?.EnableFileDeletion, DataRetentionSettings?.FileRetentionDays),\n                actions: (\n                    <MenuWrapper\n                        isDisabled={false}\n                        stopPropagationOnToggle={true}\n                    >\n                        <div className='text-right'>\n                            <a>\n                                <i className='icon icon-dots-vertical'/>\n                            </a>\n                        </div>\n                        <Menu\n                            openLeft={false}\n                            openUp={false}\n                            ariaLabel={Utils.localizeMessage('admin.user_item.menuAriaLabel', 'User Actions Menu')}\n                        >\n                            <Menu.ItemAction\n                                show={true}\n                                onClick={() => {\n                                    browserHistory.push('/admin_console/compliance/data_retention_settings/global_policy');\n                                }}\n                                text={Utils.localizeMessage('admin.data_retention.globalPoliciesTable.edit', 'Edit')}\n                                disabled={false}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                ),\n            },\n            onClick: () => {\n                browserHistory.push('/admin_console/compliance/data_retention_settings/global_policy');\n            },\n        }];\n    }\n    getChannelAndTeamCounts = (policy: DataRetentionCustomPolicy): JSX.Element => {\n        if (policy.channel_count === 0 && policy.team_count === 0) {\n            return (\n                <FormattedMessage\n                    id='admin.data_retention.channel_team_counts_empty'\n                    defaultMessage='N/A'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='admin.data_retention.channel_team_counts'\n                defaultMessage='{team_count} {team_count, plural, one {team} other {teams}}, {channel_count} {channel_count, plural, one {channel} other {channels}}'\n                values={{\n                    team_count: policy.team_count,\n                    channel_count: policy.channel_count,\n                }}\n            />\n        );\n    }\n    getCustomPolicyRows = (): Row[] => {\n        return Object.values(this.props.customPolicies).map((policy: any) => {\n            return {\n                cells: {\n                    description: policy.display_name,\n                    channel_messages: this.getMessageRetentionSetting(policy.post_duration !== -1, policy.post_duration),\n                    applied_to: this.getChannelAndTeamCounts(policy),\n                    actions: (\n                        <MenuWrapper\n                            isDisabled={false}\n                            stopPropagationOnToggle={true}\n                        >\n                            <div className='text-right'>\n                                <a>\n                                    <i className='icon icon-dots-vertical'/>\n                                </a>\n                            </div>\n                            <Menu\n                                openLeft={false}\n                                openUp={false}\n                                ariaLabel={Utils.localizeMessage('admin.user_item.menuAriaLabel', 'User Actions Menu')}\n                            >\n                                <Menu.ItemAction\n                                    show={true}\n                                    onClick={() => {\n                                        browserHistory.push(`/admin_console/compliance/data_retention_settings/custom_policy/${policy.id}`);\n                                    }}\n                                    text={Utils.localizeMessage('admin.data_retention.globalPoliciesTable.edit', 'Edit')}\n                                    disabled={false}\n                                />\n                                <Menu.ItemAction\n                                    show={true}\n                                    onClick={() => {\n                                        this.deleteCustomPolicy(policy.id);\n                                    }}\n                                    text={Utils.localizeMessage('admin.data_retention.globalPoliciesTable.delete', 'Delete')}\n                                    disabled={false}\n                                />\n                            </Menu>\n                        </MenuWrapper>\n                    ),\n                },\n                onClick: () => {\n                    browserHistory.push(`/admin_console/compliance/data_retention_settings/custom_policy/${policy.id}`);\n                },\n            };\n        });\n    };\n    private loadPage = async (page: number) => {\n        this.setState({customPoliciesLoading: true});\n        await this.props.actions.getDataRetentionCustomPolicies(page);\n        this.setState({page, customPoliciesLoading: false});\n    }\n    componentDidMount = async () => {\n        await this.loadPage(this.state.page);\n    }\n\n    private nextPage = () => {\n        this.loadPage(this.state.page + 1);\n    }\n\n    private previousPage = () => {\n        this.loadPage(this.state.page - 1);\n    }\n\n    public getPaginationProps = (): {startCount: number; endCount: number; total: number} => {\n        const {page} = this.state;\n        const startCount = (page * PAGE_SIZE) + 1;\n        const total = this.props.customPoliciesCount;\n        let endCount = (page + 1) * PAGE_SIZE;\n        endCount = endCount > total ? total : endCount;\n\n        return {startCount, endCount, total};\n    }\n\n    showEditJobTime = (value: boolean) => {\n        this.setState({showEditJobTime: value});\n    }\n\n    componentDidUpdate = (prevProps: Props, prevState: State) => {\n        if (prevState.showEditJobTime !== this.state.showEditJobTime && this.state.showEditJobTime) {\n            this.inputRef.current?.focus();\n        }\n    }\n\n    handleCreateJob = async (e?: React.SyntheticEvent) => {\n        e?.preventDefault();\n        const job = {\n            type: JobTypes.DATA_RETENTION as JobType,\n        };\n\n        await this.props.actions.createJob(job);\n        await this.props.actions.getJobsByType(JobTypes.DATA_RETENTION as JobType);\n    };\n\n    changeJobTimeConfig = async (value: string) => {\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.DataRetentionSettings.DeletionJobStartTime = value;\n\n        await this.props.actions.updateConfig(newConfig);\n        this.inputRef.current?.blur();\n    }\n\n    getJobStartTime = (): JSX.Element | null => {\n        const {DataRetentionSettings} = this.props.config;\n        const timeArray = DataRetentionSettings?.DeletionJobStartTime?.split(':');\n        if (!timeArray) {\n            return null;\n        }\n        let hour = parseInt(timeArray[0], 10);\n        if (hour < 12) {\n            if (hour === 0) {\n                hour = 12;\n            }\n            return (\n                <FormattedMessage\n                    id='admin.data_retention.jobTimeAM'\n                    defaultMessage='{time} AM (UTC)'\n                    values={{\n                        time: `${hour}:${timeArray[1]}`,\n                    }}\n                />\n            );\n        }\n        if (hour !== 12) {\n            hour -= 12;\n        }\n        return (\n            <FormattedMessage\n                id='admin.data_retention.jobTimePM'\n                defaultMessage='{time} PM (UTC)'\n                values={{\n                    time: `${hour}:${timeArray[1]}`,\n                }}\n            />\n        );\n    }\n    getJobTimeOptions = () => {\n        const options: OptionType[] = [];\n        return () => {\n            if (options.length > 0) {\n                return options;\n            }\n            const minuteIntervals = ['00', '15', '30', '45'];\n            for (let h = 0; h < 24; h++) {\n                let hourLabel = h;\n                let hourValue = `${h}`;\n                const timeOfDay = h >= 12 ? 'pm' : 'am';\n                if (hourLabel < 10) {\n                    hourValue = `0${hourValue}`;\n                }\n                if (hourLabel > 12) {\n                    hourLabel -= 12;\n                }\n                if (hourLabel === 0) {\n                    hourLabel = 12;\n                }\n                for (let i = 0; i < minuteIntervals.length; i++) {\n                    options.push({label: `${hourLabel}:${minuteIntervals[i]}${timeOfDay}`, value: `${hourValue}:${minuteIntervals[i]}`});\n                }\n            }\n\n            return options;\n        };\n    }\n    getJobTimes = this.getJobTimeOptions();\n\n    render = () => {\n        const {DataRetentionSettings} = this.props.config;\n        const {startCount, endCount, total} = this.getPaginationProps();\n\n        return (\n            <div className='wrapper--fixed DataRetentionSettings'>\n                <div className='admin-console__header'>\n                    <FormattedMessage\n                        id='admin.data_retention.settings.title'\n                        defaultMessage='Data Retention Policies'\n                    />\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.globalPolicy.title'\n                                            defaultMessage='Global retention policy'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.globalPolicy.subTitle'\n                                            defaultMessage='Keep messages and files for a set amount of time.'\n                                        />\n                                    }\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <DataGrid\n                                    columns={this.getGlobalPolicyColumns()}\n                                    rows={this.getGlobalPolicyRows()}\n                                    loading={false}\n                                    page={0}\n                                    nextPage={() => {}}\n                                    previousPage={() => {}}\n                                    startCount={1}\n                                    endCount={4}\n                                    total={0}\n                                    className={'customTable'}\n                                />\n                            </Card.Body>\n                        </Card>\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.customPolicies.title'\n                                            defaultMessage='Custom retention policies'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.customPolicies.subTitle'\n                                            defaultMessage='Customize how long specific teams and channels will keep messages.'\n                                        />\n                                    }\n                                    buttonText={\n                                        <FormattedMessage\n                                            id='admin.data_retention.customPolicies.addPolicy'\n                                            defaultMessage='Add policy'\n                                        />\n                                    }\n                                    onClick={() => {\n                                        browserHistory.push('/admin_console/compliance/data_retention_settings/custom_policy');\n                                    }}\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <DataGrid\n                                    columns={this.getCustomPolicyColumns()}\n                                    rows={this.getCustomPolicyRows()}\n                                    loading={this.state.customPoliciesLoading}\n                                    page={this.state.page}\n                                    nextPage={this.nextPage}\n                                    previousPage={this.previousPage}\n                                    startCount={startCount}\n                                    endCount={endCount}\n                                    total={total}\n                                    className={'customTable'}\n                                />\n                            </Card.Body>\n                        </Card>\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.jobCreation.title'\n                                            defaultMessage='Policy log'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.jobCreation.subTitle'\n                                            defaultMessage='Daily log of messages and files removed based on the policies defined above.'\n                                        />\n                                    }\n                                    buttonText={\n                                        <FormattedMessage\n                                            id='admin.data_retention.createJob.title'\n                                            defaultMessage='Run Deletion Job Now'\n                                        />\n                                    }\n                                    onClick={this.handleCreateJob}\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <JobsTable\n                                    jobType={JobTypes.DATA_RETENTION}\n                                    hideJobCreateButton={true}\n                                    className={'job-table__data-retention'}\n                                    disabled={String(DataRetentionSettings?.EnableMessageDeletion) !== 'true' && String(DataRetentionSettings?.EnableFileDeletion) !== 'true'}\n                                    createJobButtonText={\n                                        <FormattedMessage\n                                            id='admin.data_retention.createJob.title'\n                                            defaultMessage='Run Deletion Job Now'\n                                        />\n                                    }\n                                    createJobHelpText={\n                                        <div>\n                                            <FormattedMessage\n                                                id='admin.data_retention.createJob.instructions'\n                                                defaultMessage='Daily time to check policies and run delete job:'\n                                            />\n                                            {this.state.showEditJobTime ?\n                                                <ReactSelect\n                                                    id={'JobSelectTime'}\n                                                    className={'JobSelectTime'}\n                                                    components={{\n                                                        DropdownIndicator: () => null,\n                                                        IndicatorSeparator: () => null,\n                                                    }}\n                                                    onChange={(e) => {\n                                                        this.changeJobTimeConfig((e as OptionType).value);\n                                                    }}\n                                                    styles={{\n                                                        control: (base) => ({\n                                                            ...base,\n                                                            height: 32,\n                                                            minHeight: 32,\n                                                        }),\n                                                        menu: (base) => ({\n                                                            ...base,\n                                                            width: 210,\n                                                        }),\n                                                    }}\n                                                    onBlur={() => {\n                                                        this.showEditJobTime(false);\n                                                    }}\n                                                    value={{label: this.getJobStartTime(), value: DataRetentionSettings?.DeletionJobStartTime} as OptionType}\n                                                    hideSelectedOptions={true}\n                                                    isSearchable={true}\n                                                    options={this.getJobTimes()}\n                                                    ref={this.inputRef}\n                                                    onFocus={() => {\n                                                        this.showEditJobTime(true);\n                                                    }}\n                                                    menuIsOpen={this.state.showEditJobTime}\n                                                /> :\n                                                <span\n                                                    className='JobSelectedtime'\n                                                >\n                                                    <b>{this.getJobStartTime()}</b>\n                                                </span>\n                                            }\n                                            <a\n                                                className='EditJobTime'\n                                                onClick={() => this.showEditJobTime(true)}\n                                            >\n                                                {Utils.localizeMessage('admin.data_retention.globalPoliciesTable.edit', 'Edit')}\n                                            </a>\n                                        </div>\n                                    }\n                                />\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getDataRetentionCustomPolicies as fetchDataRetentionCustomPolicies, deleteDataRetentionCustomPolicy, updateConfig} from 'matterfoss-redux/actions/admin';\nimport {getDataRetentionCustomPolicies, getDataRetentionCustomPoliciesCount} from 'matterfoss-redux/selectors/entities/admin';\nimport {GenericAction, ActionFunc, ActionResult} from 'matterfoss-redux/types/actions';\nimport {DataRetentionCustomPolicies} from 'matterfoss-redux/types/data_retention';\nimport {createJob, getJobsByType} from 'matterfoss-redux/actions/jobs';\n\nimport {GlobalState} from 'types/store';\n\nimport {JobTypeBase, JobType} from 'matterfoss-redux/types/jobs';\n\nimport DataRetentionSettings from './data_retention_settings';\n\ntype Actions = {\n    getDataRetentionCustomPolicies: () => Promise<{ data: DataRetentionCustomPolicies}>;\n    deleteDataRetentionCustomPolicy: (id: string) => Promise<ActionResult>;\n    createJob: (job: JobTypeBase) => Promise<{ data: any}>;\n    getJobsByType: (job: JobType) => Promise<{ data: any}>;\n    updateConfig: (config: Record<string, any>) => Promise<{ data: any}>;\n};\n\nfunction mapStateToProps(state: GlobalState) {\n    const customPolicies = getDataRetentionCustomPolicies(state);\n    const customPoliciesCount = getDataRetentionCustomPoliciesCount(state);\n\n    return {\n        customPolicies,\n        customPoliciesCount,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getDataRetentionCustomPolicies: fetchDataRetentionCustomPolicies,\n            createJob,\n            getJobsByType,\n            deleteDataRetentionCustomPolicy,\n            updateConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DataRetentionSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useState, CSSProperties, useEffect, useRef} from 'react';\nimport ReactSelect, {Props as SelectProps, components, IndicatorContainerProps, ControlProps, OptionProps} from 'react-select';\nimport classNames from 'classnames';\n\nimport 'components/input.css';\nimport './dropdown_input_hybrid.scss';\n\ntype OptionType = {\n    label: string | JSX.Element;\n    value: string;\n}\n\ntype Props<T> = Omit<SelectProps<T>, 'onChange'> & {\n    value: T;\n    legend?: string;\n    error?: string;\n    onDropdownChange: (value: T) => void;\n    onInputChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    placeholder: string;\n    className?: string;\n    name?: string;\n    exceptionToInput: string[];\n    width: number;\n    inputValue: string;\n    inputType?: string;\n    defaultValue: T;\n};\n\nconst baseStyles = {\n    input: (provided: CSSProperties) => ({\n        ...provided,\n        color: 'var(--center-channel-color)',\n    }),\n    control: (provided: CSSProperties) => ({\n        ...provided,\n        border: 'none',\n        boxShadow: 'none',\n        padding: '0 2px',\n        cursor: 'pointer',\n    }),\n    indicatorSeparator: (provided: CSSProperties) => ({\n        ...provided,\n        display: 'none',\n    }),\n    menuPortal: (provided: CSSProperties) => ({\n        ...provided,\n        zIndex: 99999999,\n    }),\n};\n\nconst IndicatorsContainer = (props: IndicatorContainerProps<OptionType>) => (\n    <div className='DropdownInput__indicatorsContainer'>\n        <components.IndicatorsContainer {...props}>\n            <i className='icon icon-chevron-down'/>\n        </components.IndicatorsContainer>\n    </div>\n);\n\nconst Control = (props: ControlProps<OptionType>) => (\n    <div className='DropdownInput__controlContainer'>\n        <components.Control {...props}/>\n    </div>\n);\n\nconst Option = (props: OptionProps<OptionType>) => (\n    <div\n        className={classNames('DropdownInput__option', {\n            selected: props.isSelected,\n            focused: props.isFocused,\n        })}\n    >\n        <components.Option {...props}/>\n    </div>\n);\n\nconst DropdownInputHybrid = <T extends OptionType = OptionType>(props: Props<T>) => {\n    const {\n        value,\n        placeholder,\n        className,\n        name,\n        legend,\n        onDropdownChange,\n        onInputChange,\n        error,\n        exceptionToInput,\n        width,\n        inputValue,\n        inputType,\n        defaultValue,\n        ...otherProps\n    } = props;\n\n    const containerRef = useRef<HTMLInputElement>(null);\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [inputFocused, setInputFocused] = useState(false);\n    const [focused, setFocused] = useState(false);\n    const [showInput, setShowInput] = useState(Boolean(inputValue));\n\n    useEffect(() => {\n        if (showInput && !inputValue) {\n            inputRef.current?.focus();\n        }\n    }, [showInput]);\n\n    useEffect(() => {\n        if (!inputFocused) {\n            showTextInput(inputValue, false);\n        }\n    }, [inputValue]);\n\n    useEffect(() => {\n        if (!inputValue && !focused && !inputFocused) {\n            onDropdownChange(defaultValue);\n            showTextInput('');\n        }\n    }, [focused, inputFocused]);\n\n    const getMenuStyles = () =>\n        (showInput ?\n            {\n                menu: (provided: CSSProperties) => ({\n                    ...provided,\n                    width: containerRef.current ? `${containerRef.current.offsetWidth}px` : '0px',\n                    left: inputRef.current ? `-${inputRef.current.offsetWidth}px` : '0px',\n                }),\n            } :\n            {});\n\n    const onInputBlur = () => setInputFocused(false);\n\n    const onInputFocus = () => setInputFocused(true);\n\n    const onDropdownInputFocus = (event: React.FocusEvent<HTMLElement>) => {\n        setFocused(true);\n\n        props.onFocus?.(event);\n    };\n\n    const onDropdownInputBlur = (event: React.FocusEvent<HTMLElement>) => {\n        setFocused(false);\n\n        props.onBlur?.(event);\n    };\n\n    const onValueChange = (event: T) => {\n        showTextInput(event.value);\n\n        onDropdownChange(event);\n    };\n\n    // We want to show the text input when we have a dropdown value selected and\n    const showTextInput = (val: string, focus = true) => {\n        if (!val || exceptionToInput.includes(val)) {\n            setShowInput(false);\n        } else {\n            setShowInput(true);\n            if (focus) {\n                inputRef.current?.focus();\n            }\n        }\n    };\n\n    const showLegend = Boolean(focused || value);\n\n    return (\n        <div\n            className='DropdownInput hybrid_container'\n            ref={containerRef}\n            style={{\n                width: '100%',\n            }}\n        >\n            <fieldset\n                className={classNames('Input_fieldset', className, {\n                    Input_fieldset___error: error,\n                    Input_fieldset___legend: showLegend,\n                    Input_fieldset___split: showInput,\n                })}\n            >\n                <legend className={classNames('Input_legend', {Input_legend___focus: showLegend})}>\n                    {showLegend ? (legend || placeholder) : null}\n                </legend>\n                <div\n                    className={classNames('Input_wrapper input_hybrid_wrapper', {showInput})}\n                    onFocus={onInputFocus}\n                    onBlur={onInputBlur}\n                    style={{\n                        maxWidth: showInput ? '10000px' : '0',\n                    }}\n                >\n                    <input\n                        name={`Input_${name}`}\n                        type={inputType || 'text'}\n                        value={inputValue}\n                        onChange={onInputChange}\n                        placeholder={placeholder}\n                        required={false}\n                        className={classNames('Input form-control')}\n                        ref={inputRef}\n                    />\n                </div>\n                <div\n                    className={classNames('Input_wrapper dropdown_hybrid_wrapper', {showInput: !showInput})}\n                    onFocus={onDropdownInputFocus}\n                    onBlur={onDropdownInputBlur}\n                    style={{\n                        width: showInput ? `${width}px` : '100%',\n                    }}\n                >\n                    <ReactSelect\n                        id={`DropdownInput_${name}`}\n                        placeholder={focused ? '' : placeholder}\n                        components={{\n                            IndicatorsContainer,\n                            Option,\n                            Control,\n                        }}\n                        className={classNames('Input', className, {Input__focus: showLegend})}\n                        classNamePrefix={'DropDown'}\n                        onChange={onValueChange as any}\n                        styles={{...baseStyles, ...getMenuStyles()}}\n                        value={value}\n                        hideSelectedOptions={true}\n                        isSearchable={false}\n                        menuPortalTarget={document.body}\n                        {...otherProps}\n                    />\n                </div>\n            </fieldset>\n        </div>\n    );\n};\n\nexport default DropdownInputHybrid;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport const FOREVER = 'FOREVER';\nexport const YEARS = 'YEARS';\nexport const DAYS = 'DAYS';\nexport const keepForeverOption = () => ({value: FOREVER, label: <div><i className='icon icon-infinity option-icon'/><span>{Utils.localizeMessage('admin.data_retention.form.keepForever', 'Keep forever')}</span></div>});\nexport const yearsOption = () => ({value: YEARS, label: Utils.localizeMessage('admin.data_retention.form.years', 'Years')});\nexport const daysOption = () => ({value: DAYS, label: Utils.localizeMessage('admin.data_retention.form.days', 'Days')});\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {AdminConfig} from 'matterfoss-redux/types/config';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Card from 'components/card/card';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport {browserHistory} from 'utils/browser_history';\nimport DropdownInputHybrid from 'components/widgets/inputs/dropdown_input_hybrid';\nimport {keepForeverOption, yearsOption, daysOption, FOREVER, YEARS, DAYS} from 'components/admin_console/data_retention_settings/dropdown_options/dropdown_options';\n\nimport './global_policy_form.scss';\nimport SaveButton from 'components/save_button';\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\ntype ValueType = {\n    label: string | JSX.Element;\n    value: string;\n}\ntype Props = {\n    config: DeepPartial<AdminConfig>;\n    actions: {\n        updateConfig: (config: Record<string, any>) => Promise<{ data?: AdminConfig; error?: ServerError }>;\n        setNavigationBlocked: (blocked: boolean) => void;\n    };\n};\ntype State = {\n    messageRetentionDropdownValue: ValueType;\n    messageRetentionInputValue: string;\n    fileRetentionDropdownValue: ValueType;\n    fileRetentionInputValue: string;\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: JSX.Element | string | null;\n    formErrorText: string;\n}\n\nexport default class GlobalPolicyForm extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        const {DataRetentionSettings} = props.config;\n        this.state = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            formErrorText: '',\n            messageRetentionDropdownValue: this.getDefaultDropdownValue(DataRetentionSettings?.EnableMessageDeletion, DataRetentionSettings?.MessageRetentionDays),\n            messageRetentionInputValue: this.getDefaultInputValue(DataRetentionSettings?.EnableMessageDeletion, DataRetentionSettings?.MessageRetentionDays),\n            fileRetentionDropdownValue: this.getDefaultDropdownValue(DataRetentionSettings?.EnableFileDeletion, DataRetentionSettings?.FileRetentionDays),\n            fileRetentionInputValue: this.getDefaultInputValue(DataRetentionSettings?.EnableFileDeletion, DataRetentionSettings?.FileRetentionDays),\n        };\n    }\n\n    getDefaultInputValue = (isEnabled: boolean | undefined, days: number | undefined): string => {\n        if (!isEnabled || days === undefined) {\n            return '';\n        }\n        if (days % 365 === 0) {\n            return (days / 365).toString();\n        }\n        return days.toString();\n    }\n    getDefaultDropdownValue = (isEnabled: boolean | undefined, days: number | undefined) => {\n        if (!isEnabled || days === undefined) {\n            return keepForeverOption();\n        }\n        if (days % 365 === 0) {\n            return yearsOption();\n        }\n        return daysOption();\n    }\n\n    handleSubmit = async () => {\n        const {messageRetentionDropdownValue, messageRetentionInputValue, fileRetentionDropdownValue, fileRetentionInputValue} = this.state;\n        const newConfig: AdminConfig = JSON.parse(JSON.stringify(this.props.config));\n\n        this.setState({saving: true});\n\n        if ((messageRetentionDropdownValue.value !== FOREVER && parseInt(messageRetentionInputValue, 10) < 1) || (fileRetentionDropdownValue.value !== FOREVER && parseInt(fileRetentionInputValue, 10) < 1)) {\n            this.setState({formErrorText: Utils.localizeMessage('admin.data_retention.global_policy.form.numberError', 'You must add a number greater than or equal to 1.'), saving: false});\n            return;\n        }\n\n        newConfig.DataRetentionSettings.EnableMessageDeletion = this.setDeletionEnabled(messageRetentionDropdownValue.value);\n\n        const messageDays = this.setRetentionDays(messageRetentionDropdownValue.value, messageRetentionInputValue);\n        if (messageDays >= 1) {\n            newConfig.DataRetentionSettings.MessageRetentionDays = messageDays;\n        }\n\n        newConfig.DataRetentionSettings.EnableFileDeletion = this.setDeletionEnabled(fileRetentionDropdownValue.value);\n\n        const fileDays = this.setRetentionDays(fileRetentionDropdownValue.value, fileRetentionInputValue);\n        if (fileDays >= 1) {\n            newConfig.DataRetentionSettings.FileRetentionDays = fileDays;\n        }\n\n        const {error} = await this.props.actions.updateConfig(newConfig);\n\n        if (error) {\n            this.setState({serverError: error.message, saving: false});\n        } else {\n            this.props.actions.setNavigationBlocked(false);\n            browserHistory.push('/admin_console/compliance/data_retention_settings');\n        }\n    };\n\n    setDeletionEnabled = (dropdownValue: string) => {\n        if (dropdownValue === FOREVER) {\n            return false;\n        }\n        return true;\n    }\n\n    setRetentionDays = (dropdownValue: string, value: string): number => {\n        if (dropdownValue === YEARS) {\n            return parseInt(value, 10) * 365;\n        }\n\n        if (dropdownValue === DAYS) {\n            return parseInt(value, 10);\n        }\n\n        return 0;\n    }\n\n    render = () => {\n        return (\n            <div className='wrapper--fixed DataRetentionSettings'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/compliance/data_retention_settings'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.data_retention.globalPolicyTitle'\n                            defaultMessage='Global Retention Policy'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Body>\n                                <div\n                                    className='global_policy'\n                                >\n                                    <p>{Utils.localizeMessage('admin.data_retention.form.text', 'Applies to all teams and channels, but does not apply to custom retention policies.')}</p>\n                                    <DropdownInputHybrid\n                                        onDropdownChange={(value) => {\n                                            this.setState({messageRetentionDropdownValue: value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        onInputChange={(e) => {\n                                            this.setState({messageRetentionInputValue: e.target.value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        value={this.state.messageRetentionDropdownValue}\n                                        inputValue={this.state.messageRetentionInputValue}\n                                        width={90}\n                                        exceptionToInput={[FOREVER]}\n                                        defaultValue={keepForeverOption()}\n                                        options={[daysOption(), yearsOption(), keepForeverOption()]}\n                                        legend={Utils.localizeMessage('admin.data_retention.form.channelAndDirectMessageRetention', 'Channel & direct message retention')}\n                                        placeholder={Utils.localizeMessage('admin.data_retention.form.channelAndDirectMessageRetention', 'Channel & direct message retention')}\n                                        name={'channel_message_retention'}\n                                        inputType={'number'}\n                                    />\n\n                                    <DropdownInputHybrid\n                                        onDropdownChange={(value) => {\n                                            this.setState({fileRetentionDropdownValue: value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        onInputChange={(e) => {\n                                            this.setState({fileRetentionInputValue: e.target.value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        value={this.state.fileRetentionDropdownValue}\n                                        inputValue={this.state.fileRetentionInputValue}\n                                        width={90}\n                                        exceptionToInput={[FOREVER]}\n                                        defaultValue={keepForeverOption()}\n                                        options={[daysOption(), yearsOption(), keepForeverOption()]}\n                                        legend={Utils.localizeMessage('admin.data_retention.form.fileRetention', 'File retention')}\n                                        placeholder={Utils.localizeMessage('admin.data_retention.form.fileRetention', 'File retention')}\n                                        name={'file_retention'}\n                                        inputType={'number'}\n                                    />\n                                </div>\n\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded}\n                        onClick={this.handleSubmit}\n                        defaultMessage={(\n                            <FormattedMessage\n                                id='admin.data_retention.custom_policy.save'\n                                defaultMessage='Save'\n                            />\n                        )}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/compliance/data_retention_settings'\n                    >\n                        <FormattedMessage\n                            id='admin.data_retention.custom_policy.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    {this.state.serverError &&\n                        <span className='CustomPolicy__error'>\n                            <i className='icon icon-alert-outline'/>\n                            {this.state.serverError}\n                        </span>\n                    }\n                    {\n                        this.state.formErrorText &&\n                        <span className='CustomPolicy__error'>\n                            <i className='icon icon-alert-outline'/>\n                            {this.state.formErrorText}\n                        </span>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    updateConfig,\n} from 'matterfoss-redux/actions/admin';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport {AdminConfig} from 'matterfoss-redux/types/config';\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport GlobalPolicyForm from './global_policy_form';\n\ntype Actions = {\n    updateConfig: (config: Record<string, any>) => Promise<{ data?: AdminConfig; error?: ServerError }>;\n    setNavigationBlocked: (blocked: boolean) => void;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            updateConfig,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(GlobalPolicyForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {debounce} from 'lodash';\n\nimport Constants from 'utils/constants';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\nimport {Team, TeamSearchOpts} from 'matterfoss-redux/types/teams';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport DataGrid, {Column, Row} from 'components/admin_console/data_grid/data_grid';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport './team_list.scss';\n\ntype Props = {\n    teams: Team[];\n    totalCount: number;\n    searchTerm: string;\n\n    policyId?: string;\n\n    onRemoveCallback: (user: Team) => void;\n    onAddCallback: (users: Team[]) => void;\n    teamsToRemove: Dictionary<Team>;\n    teamsToAdd: Dictionary<Team>;\n\n    actions: {\n        searchTeams: (id: string, term: string, opts: TeamSearchOpts) => Promise<{ data: Team[] }>;\n        getDataRetentionCustomPolicyTeams: (id: string, page: number, perPage: number) => Promise<{ data: Team[] }>;\n        setTeamListSearch: (term: string) => ActionResult;\n    };\n}\n\ntype State = {\n    loading: boolean;\n    page: number;\n}\nconst PAGE_SIZE = 10;\nexport default class TeamList extends React.PureComponent<Props, State> {\n    private pageLoaded = 0;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false,\n            page: 0,\n        };\n    }\n\n    componentDidMount = () => {\n        this.loadPage(0, PAGE_SIZE * 2);\n    }\n\n    private setStateLoading = (loading: boolean) => {\n        this.setState({loading});\n    }\n    private setStatePage = (page: number) => {\n        this.setState({page});\n    }\n\n    private loadPage = async (page: number, pageSize = PAGE_SIZE) => {\n        if (this.props.policyId) {\n            this.setStateLoading(true);\n            await this.props.actions.getDataRetentionCustomPolicyTeams(this.props.policyId, page, pageSize);\n            this.setStateLoading(false);\n        }\n    }\n\n    private nextPage = () => {\n        const page = this.state.page + 1;\n        this.loadPage(page + 1);\n        this.setStatePage(page);\n    }\n\n    private previousPage = () => {\n        const page = this.state.page - 1;\n        this.loadPage(page + 1);\n        this.setStatePage(page);\n    }\n\n    private getVisibleTotalCount = (): number => {\n        const {teamsToAdd, teamsToRemove, totalCount} = this.props;\n        const teamsToAddCount = Object.keys(teamsToAdd).length;\n        const teamsToRemoveCount = Object.keys(teamsToRemove).length;\n        return totalCount + (teamsToAddCount - teamsToRemoveCount);\n    }\n\n    public getPaginationProps = (): {startCount: number; endCount: number; total: number} => {\n        const {page} = this.state;\n        const startCount = (page * PAGE_SIZE) + 1;\n        const total = this.getVisibleTotalCount();\n        let endCount = 0;\n\n        endCount = (page + 1) * PAGE_SIZE;\n        endCount = endCount > total ? total : endCount;\n\n        return {startCount, endCount, total};\n    }\n\n    private removeTeam = (team: Team) => {\n        const {teamsToRemove} = this.props;\n        if (teamsToRemove[team.id] === team) {\n            return;\n        }\n\n        let {page} = this.state;\n        const {endCount} = this.getPaginationProps();\n\n        this.props.onRemoveCallback(team);\n        if (endCount > this.getVisibleTotalCount() && (endCount % PAGE_SIZE) === 1 && page > 0) {\n            page--;\n        }\n\n        this.setStatePage(page);\n    }\n\n    getColumns = (): Column[] => {\n        const name = (\n            <FormattedMessage\n                id='admin.team_settings.team_list.nameHeader'\n                defaultMessage='Name'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'remove',\n                textAlign: 'right',\n                fixed: true,\n                className: 'TeamList__actionColumn',\n            },\n        ];\n    }\n\n    getRows = () => {\n        const {page} = this.state;\n        const {teams, teamsToRemove, teamsToAdd, totalCount} = this.props;\n        const {startCount, endCount} = this.getPaginationProps();\n        let teamsToDisplay = teams;\n        const includeTeamsList = Object.values(teamsToAdd);\n\n        // Remove teams to remove and add teams to add\n        teamsToDisplay = teamsToDisplay.filter((user) => !teamsToRemove[user.id]);\n        teamsToDisplay = [...includeTeamsList, ...teamsToDisplay];\n        teamsToDisplay = teamsToDisplay.slice(startCount - 1, endCount);\n\n        if (teamsToDisplay.length < PAGE_SIZE && teams.length < totalCount) {\n            const numberOfTeamsRemoved = Object.keys(teamsToRemove).length;\n            const pagesOfTeamsRemoved = Math.floor(numberOfTeamsRemoved / PAGE_SIZE);\n            const pageToLoad = page + pagesOfTeamsRemoved + 1;\n\n            if (pageToLoad > this.pageLoaded) {\n                this.loadPage(pageToLoad + 1);\n                this.pageLoaded = pageToLoad;\n            }\n        }\n\n        return teamsToDisplay.map((team) => {\n            return {\n                cells: {\n                    id: team.id,\n                    name: (\n                        <div className='TeamList__nameColumn'>\n                            <div className='TeamList__lowerOpacity'>\n                                <TeamIcon\n                                    size='sm'\n                                    url={Utils.imageURLForTeam(team)}\n                                    content={team.display_name}\n                                />\n                            </div>\n                            <div className='TeamList__nameText'>\n                                <b data-testid='team-display-name'>\n                                    {team.display_name}\n                                </b>\n                            </div>\n                        </div>\n                    ),\n                    remove: (\n                        <a\n                            data-testid={`${team.display_name}edit`}\n                            className='group-actions TeamList_editText'\n                            onClick={() => {\n                                this.removeTeam(team);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.data_retention.custom_policy.teams.remove'\n                                defaultMessage='Remove'\n                            />\n                        </a>\n                    ),\n                },\n            };\n        });\n    }\n\n    onSearch = async (searchTerm: string) => {\n        this.props.actions.setTeamListSearch(searchTerm);\n    }\n    public async componentDidUpdate(prevProps: Props) {\n        const {searchTerm} = this.props;\n        const searchTermModified = prevProps.searchTerm !== this.props.searchTerm;\n        if (searchTermModified) {\n            this.setStateLoading(true);\n            if (searchTerm === '') {\n                await this.loadPage(1);\n                this.setStateLoading(false);\n                return;\n            }\n            this.searchDebounced();\n        }\n    }\n\n    searchDebounced = debounce(\n        async () => {\n            const {policyId, searchTerm, actions} = this.props;\n\n            if (policyId) {\n                await actions.searchTeams(policyId, searchTerm, {});\n            }\n\n            this.setStateLoading(false);\n        },\n        Constants.SEARCH_TIMEOUT_MILLISECONDS,\n    );\n    render() {\n        const rows: Row[] = this.getRows();\n        const columns: Column[] = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n        return (\n            <div className='PolicyTeamsList'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    loading={this.state.loading}\n                    page={this.state.page}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    startCount={startCount}\n                    endCount={endCount}\n                    total={total}\n                    className={'customTable'}\n                    onSearch={this.onSearch}\n                    term={this.props.searchTerm}\n                />\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getDataRetentionCustomPolicyTeams, searchDataRetentionCustomPolicyTeams as searchTeams} from 'matterfoss-redux/actions/admin';\nimport {getTeamsInPolicy, searchTeamsInPolicy} from 'matterfoss-redux/selectors/entities/teams';\nimport {getDataRetentionCustomPolicy} from 'matterfoss-redux/selectors/entities/admin';\nimport {teamListToMap, filterTeamsStartingWithTerm} from 'matterfoss-redux/utils/team_utils';\n\nimport {ActionFunc, ActionResult, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {Team, TeamSearchOpts} from 'matterfoss-redux/types/teams';\n\nimport {GlobalState} from 'types/store';\nimport {setTeamListSearch} from 'actions/views/search';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {DataRetentionCustomPolicy} from 'matterfoss-redux/types/data_retention';\n\nimport TeamList from './team_list';\n\ntype OwnProps = {\n    policyId?: string;\n    teamsToAdd: Dictionary<Team>;\n}\n\ntype Actions = {\n    getDataRetentionCustomPolicyTeams: (id: string, page: number, perPage: number) => Promise<{ data: Team[] }>;\n    searchTeams: (id: string, term: string, opts: TeamSearchOpts) => Promise<{ data: Team[] }>;\n    setTeamListSearch: (term: string) => ActionResult;\n}\n\nfunction searchTeamsToAdd(teams: Dictionary<Team>, term: string): Dictionary<Team> {\n    const filteredTeams = filterTeamsStartingWithTerm(Object.keys(teams).map((key) => teams[key]), term);\n    return teamListToMap(filteredTeams);\n}\n\nfunction mapStateToProps() {\n    const getPolicyTeams = getTeamsInPolicy();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        let {teamsToAdd} = ownProps;\n\n        let teams: Team[] = [];\n        const policyId = ownProps.policyId;\n        const policy = policyId ? getDataRetentionCustomPolicy(state, policyId) || {} as DataRetentionCustomPolicy : {} as DataRetentionCustomPolicy;\n        let totalCount = 0;\n        const searchTerm = state.views.search.teamListSearch || '';\n        teams = policyId ? getPolicyTeams(state, {policyId}) : [];\n        if (searchTerm) {\n            teams = searchTeamsInPolicy(teams, searchTerm) || [];\n            teamsToAdd = searchTeamsToAdd(teamsToAdd, searchTerm);\n            totalCount = teams.length;\n        } else if (policy?.team_count) {\n            totalCount = policy.team_count;\n        }\n\n        return {\n            teams,\n            totalCount,\n            searchTerm,\n            teamsToAdd,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            getDataRetentionCustomPolicyTeams,\n            searchTeams,\n            setTeamListSearch,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {debounce, isEqual} from 'lodash';\n\nimport {Constants} from 'utils/constants';\nimport {ChannelSearchOpts, ChannelWithTeamData} from 'matterfoss-redux/types/channels';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\n\nimport DataGrid, {Column, Row} from 'components/admin_console/data_grid/data_grid';\nimport TeamFilterDropdown from 'components/admin_console/filter/team_filter_dropdown';\n\nimport './channel_list.scss';\nimport {FilterOptions} from 'components/admin_console/filter/filter';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\nimport ArchiveIcon from 'components/widgets/icons/archive_icon';\nimport {isArchivedChannel} from 'utils/channel_utils';\nimport {ActionResult} from 'matterfoss-redux/types/actions';\n\ntype Props = {\n    channels: ChannelWithTeamData[];\n    totalCount: number;\n    searchTerm: string;\n    filters: ChannelSearchOpts;\n\n    policyId?: string;\n\n    onRemoveCallback: (channel: ChannelWithTeamData) => void;\n    onAddCallback: (channels: ChannelWithTeamData[]) => void;\n    channelsToRemove: Dictionary<ChannelWithTeamData>;\n    channelsToAdd: Dictionary<ChannelWithTeamData>;\n\n    actions: {\n        searchChannels: (id: string, term: string, opts: ChannelSearchOpts) => Promise<{ data: ChannelWithTeamData[] }>;\n        getDataRetentionCustomPolicyChannels: (id: string, page: number, perPage: number) => Promise<{ data: ChannelWithTeamData[] }>;\n        setChannelListSearch: (term: string) => ActionResult;\n        setChannelListFilters: (filters: ChannelSearchOpts) => ActionResult;\n    };\n}\n\ntype State = {\n    loading: boolean;\n    page: number;\n}\nconst PAGE_SIZE = 10;\nexport default class ChannelList extends React.PureComponent<Props, State> {\n    private pageLoaded = 0;\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            loading: false,\n            page: 0,\n        };\n    }\n\n    componentDidMount = () => {\n        this.loadPage(0, PAGE_SIZE * 2);\n    }\n\n    private setStateLoading = (loading: boolean) => {\n        this.setState({loading});\n    }\n    private setStatePage = (page: number) => {\n        this.setState({page});\n    }\n\n    private loadPage = async (page: number, pageSize = PAGE_SIZE) => {\n        if (this.props.policyId) {\n            this.setStateLoading(true);\n            await this.props.actions.getDataRetentionCustomPolicyChannels(this.props.policyId, page, pageSize);\n            this.setStateLoading(false);\n        }\n    }\n\n    private nextPage = () => {\n        const page = this.state.page + 1;\n        this.loadPage(page + 1);\n        this.setStatePage(page);\n    }\n\n    private previousPage = () => {\n        const page = this.state.page - 1;\n        this.loadPage(page + 1);\n        this.setStatePage(page);\n    }\n\n    private getVisibleTotalCount = (): number => {\n        const {channelsToAdd, channelsToRemove, totalCount} = this.props;\n        const channelsToAddCount = Object.keys(channelsToAdd).length;\n        const channelsToRemoveCount = Object.keys(channelsToRemove).length;\n        return totalCount + (channelsToAddCount - channelsToRemoveCount);\n    }\n\n    public getPaginationProps = (): {startCount: number; endCount: number; total: number} => {\n        const {page} = this.state;\n        const startCount = (page * PAGE_SIZE) + 1;\n        const total = this.getVisibleTotalCount();\n\n        let endCount = 0;\n\n        endCount = (page + 1) * PAGE_SIZE;\n        endCount = endCount > total ? total : endCount;\n\n        return {startCount, endCount, total};\n    }\n\n    private removeChannel = (channel: ChannelWithTeamData) => {\n        const {channelsToRemove} = this.props;\n        if (channelsToRemove[channel.id] === channel) {\n            return;\n        }\n\n        let {page} = this.state;\n        const {endCount} = this.getPaginationProps();\n\n        this.props.onRemoveCallback(channel);\n        if (endCount > this.getVisibleTotalCount() && (endCount % PAGE_SIZE) === 1 && page > 0) {\n            page--;\n        }\n\n        this.setStatePage(page);\n    }\n\n    getColumns = (): Column[] => {\n        const name = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.nameHeader'\n                defaultMessage='Name'\n            />\n        );\n\n        const team = (\n            <FormattedMessage\n                id='admin.channel_settings.channel_list.teamHeader'\n                defaultMessage='Team'\n            />\n        );\n\n        return [\n            {\n                name,\n                field: 'name',\n                fixed: true,\n            },\n            {\n                name: team,\n                field: 'team',\n                fixed: true,\n            },\n            {\n                name: '',\n                field: 'remove',\n                textAlign: 'right',\n                fixed: true,\n            },\n        ];\n    }\n\n    getRows = () => {\n        const {page} = this.state;\n        const {channels, channelsToRemove, channelsToAdd, totalCount} = this.props; // term was here\n        const {startCount, endCount} = this.getPaginationProps();\n\n        let channelsToDisplay = channels;\n        const includeTeamsList = Object.values(channelsToAdd);\n\n        // Remove users to remove and add users to add\n        channelsToDisplay = channelsToDisplay.filter((user) => !channelsToRemove[user.id]);\n        channelsToDisplay = [...includeTeamsList, ...channelsToDisplay];\n        channelsToDisplay = channelsToDisplay.slice(startCount - 1, endCount);\n\n        // Dont load more elements if searching\n        if (channelsToDisplay.length < PAGE_SIZE && channels.length < totalCount) { //term === '' &&  was included\n            const numberOfTeamsRemoved = Object.keys(channelsToRemove).length;\n            const pagesOfTeamsRemoved = Math.floor(numberOfTeamsRemoved / PAGE_SIZE);\n            const pageToLoad = page + pagesOfTeamsRemoved + 1;\n\n            // Directly call action to load more users from parent component to load more users into the state\n            if (pageToLoad > this.pageLoaded) {\n                this.loadPage(pageToLoad + 1);\n                this.pageLoaded = pageToLoad;\n            }\n        }\n\n        return channelsToDisplay.map((channel) => {\n            let iconToDisplay = <GlobeIcon className='channel-icon'/>;\n\n            if (channel.type === Constants.PRIVATE_CHANNEL) {\n                iconToDisplay = <LockIcon className='channel-icon'/>;\n            }\n            if (isArchivedChannel(channel)) {\n                iconToDisplay = (\n                    <ArchiveIcon\n                        className='channel-icon'\n                        data-testid={`${channel.name}-archive-icon`}\n                    />\n                );\n            }\n            return {\n                cells: {\n                    id: channel.id,\n                    name: (\n                        <div className='ChannelList__nameColumn'>\n                            {iconToDisplay}\n                            <div className='ChannelList__nameText'>\n                                <b data-testid='team-display-name'>\n                                    {channel.display_name}\n                                </b>\n                            </div>\n                        </div>\n                    ),\n                    team: channel.team_display_name,\n                    remove: (\n                        <a\n                            data-testid={`${channel.display_name}edit`}\n                            className='group-actions TeamList_editText'\n                            onClick={() => {\n                                this.removeChannel(channel);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='admin.data_retention.custom_policy.teams.remove'\n                                defaultMessage='Remove'\n                            />\n                        </a>\n                    ),\n                },\n            };\n        });\n    }\n\n    onSearch = async (searchTerm: string) => {\n        this.props.actions.setChannelListSearch(searchTerm);\n    }\n    public async componentDidUpdate(prevProps: Props) {\n        const {policyId, searchTerm, filters} = this.props;\n        const filtersModified = !isEqual(prevProps.filters, this.props.filters);\n        const searchTermModified = prevProps.searchTerm !== searchTerm;\n        if (searchTermModified || filtersModified) {\n            this.setStateLoading(true);\n            if (searchTerm === '') {\n                if (filtersModified && policyId) {\n                    await prevProps.actions.searchChannels(policyId, searchTerm, filters);\n                } else {\n                    await this.loadPage(1);\n                    this.setStatePage(0);\n                }\n                this.setStateLoading(false);\n                return;\n            }\n\n            this.searchDebounced();\n        }\n    }\n\n    searchDebounced = debounce(\n        async () => {\n            const {policyId, searchTerm, filters, actions} = this.props;\n            if (policyId) {\n                await actions.searchChannels(policyId, searchTerm, filters);\n            }\n\n            this.setStateLoading(false);\n        },\n        Constants.SEARCH_TIMEOUT_MILLISECONDS,\n    );\n\n    onFilter = async (filterOptions: FilterOptions) => {\n        const filters: ChannelSearchOpts = {};\n        const {public: publicChannels, private: privateChannels, deleted} = filterOptions.channels.values;\n        const {team_ids: teamIds} = filterOptions.teams.values;\n        if (publicChannels.value || privateChannels.value || deleted.value || (teamIds.value as string[]).length) {\n            filters.public = publicChannels.value as boolean;\n            filters.private = privateChannels.value as boolean;\n            filters.deleted = deleted.value as boolean;\n            filters.team_ids = teamIds.value as string[];\n        }\n        this.props.actions.setChannelListFilters(filters);\n    }\n    render() {\n        const rows: Row[] = this.getRows();\n        const columns: Column[] = this.getColumns();\n        const {startCount, endCount, total} = this.getPaginationProps();\n        const filterOptions: FilterOptions = {\n            teams: {\n                name: 'Teams',\n                values: {\n                    team_ids: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.team_settings.title'\n                                defaultMessage='Teams'\n                            />\n                        ),\n                        value: [],\n                    },\n                },\n                keys: ['team_ids'],\n                type: TeamFilterDropdown,\n            },\n            channels: {\n                name: 'Channels',\n                values: {\n                    public: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.public'\n                                defaultMessage='Public'\n                            />\n                        ),\n                        value: false,\n                    },\n                    private: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.private'\n                                defaultMessage='Private'\n                            />\n                        ),\n                        value: false,\n                    },\n                    deleted: {\n                        name: (\n                            <FormattedMessage\n                                id='admin.channel_list.archived'\n                                defaultMessage='Archived'\n                            />\n                        ),\n                        value: false,\n                    },\n                },\n                keys: ['public', 'private', 'deleted'],\n            },\n        };\n\n        const filterProps = {\n            options: filterOptions,\n            keys: ['teams', 'channels'],\n            onFilter: this.onFilter,\n        };\n\n        return (\n            <div className='PolicyChannelsList'>\n                <DataGrid\n                    columns={columns}\n                    rows={rows}\n                    loading={this.state.loading}\n                    page={this.state.page}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    startCount={startCount}\n                    endCount={endCount}\n                    total={total}\n                    className={'customTable'}\n                    onSearch={this.onSearch}\n                    term={this.props.searchTerm}\n                    filterProps={filterProps}\n                />\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {getDataRetentionCustomPolicyChannels, searchDataRetentionCustomPolicyChannels as searchChannels} from 'matterfoss-redux/actions/admin';\nimport {filterChannelList, getChannelsInPolicy, searchChannelsInPolicy} from 'matterfoss-redux/selectors/entities/channels';\nimport {getDataRetentionCustomPolicy} from 'matterfoss-redux/selectors/entities/admin';\nimport {filterChannelsMatchingTerm, channelListToMap} from 'matterfoss-redux/utils/channel_utils';\n\nimport {ActionFunc, ActionResult, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {Channel, ChannelSearchOpts, ChannelWithTeamData} from 'matterfoss-redux/types/channels';\n\nimport {GlobalState} from 'types/store';\n\nimport {setChannelListSearch, setChannelListFilters} from 'actions/views/search';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {DataRetentionCustomPolicy} from 'matterfoss-redux/types/data_retention';\n\nimport ChannelList from './channel_list';\n\ntype OwnProps = {\n    policyId?: string;\n    channelsToAdd: Dictionary<ChannelWithTeamData>;\n}\n\ntype Actions = {\n    searchChannels: (id: string, term: string, opts: ChannelSearchOpts) => Promise<{ data: ChannelWithTeamData[] }>;\n    getDataRetentionCustomPolicyChannels: (id: string, page: number, perPage: number) => Promise<{ data: ChannelWithTeamData[] }>;\n    setChannelListSearch: (term: string) => ActionResult;\n    setChannelListFilters: (filters: ChannelSearchOpts) => ActionResult;\n}\n\nfunction searchChannelsToAdd(channels: Dictionary<Channel>, term: string, filters: ChannelSearchOpts): Dictionary<Channel> {\n    let filteredTeams = filterChannelsMatchingTerm(Object.keys(channels).map((key) => channels[key]), term);\n    filteredTeams = filterChannelList(filteredTeams, filters);\n    return channelListToMap(filteredTeams);\n}\n\nfunction mapStateToProps() {\n    const getPolicyChannels = getChannelsInPolicy();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        let {channelsToAdd} = ownProps;\n\n        let channels: ChannelWithTeamData[] = [];\n        let totalCount = 0;\n        const policyId = ownProps.policyId;\n        const policy = policyId ? getDataRetentionCustomPolicy(state, policyId) : {} as DataRetentionCustomPolicy;\n        const searchTerm = state.views.search.channelListSearch.term || '';\n        const filters = state.views.search.channelListSearch?.filters || {};\n\n        if (searchTerm || (filters && Object.keys(filters).length !== 0)) {\n            channels = policyId ? searchChannelsInPolicy(state, policyId, searchTerm, filters) as ChannelWithTeamData[] : [];\n            channelsToAdd = searchChannelsToAdd(channelsToAdd, searchTerm, filters) as Dictionary<ChannelWithTeamData>;\n            totalCount = channels.length;\n        } else {\n            channels = policyId ? getPolicyChannels(state, {policyId}) as ChannelWithTeamData[] : [];\n            if (policy?.channel_count) {\n                totalCount = policy.channel_count;\n            }\n        }\n        return {\n            channels,\n            totalCount,\n            searchTerm,\n            channelsToAdd,\n            filters,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            getDataRetentionCustomPolicyChannels,\n            searchChannels,\n            setChannelListSearch,\n            setChannelListFilters,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {\n    DataRetentionCustomPolicy,\n    CreateDataRetentionCustomPolicy,\n    PatchDataRetentionCustomPolicy,\n} from 'matterfoss-redux/types/data_retention';\nimport {Team} from 'matterfoss-redux/types/teams';\nimport {IDMappedObjects} from 'matterfoss-redux/types/utilities';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport TitleAndButtonCardHeader from 'components/card/title_and_button_card_header/title_and_button_card_header';\nimport Card from 'components/card/card';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport Input from 'components/input';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport ChannelSelectorModal from 'components/channel_selector_modal';\nimport DropdownInputHybrid from 'components/widgets/inputs/dropdown_input_hybrid';\nimport SaveButton from 'components/save_button';\nimport TeamList from 'components/admin_console/data_retention_settings/team_list';\nimport ChannelList from 'components/admin_console/data_retention_settings/channel_list';\nimport {keepForeverOption, yearsOption, daysOption, FOREVER, YEARS} from 'components/admin_console/data_retention_settings/dropdown_options/dropdown_options';\nimport {ChannelWithTeamData} from 'matterfoss-redux/types/channels';\nimport {browserHistory} from 'utils/browser_history';\n\nimport './custom_policy_form.scss';\n\ntype Props = {\n    policyId?: string;\n    policy?: DataRetentionCustomPolicy | null;\n    teams?: Team[];\n    actions: {\n        fetchPolicy: (id: string) => Promise<{ data: DataRetentionCustomPolicy; error?: Error }>;\n        fetchPolicyTeams: (id: string, page: number, perPage: number) => Promise<{ data: Team[]; error?: Error }>;\n        createDataRetentionCustomPolicy: (policy: CreateDataRetentionCustomPolicy) => Promise<{ data: DataRetentionCustomPolicy; error?: Error }>;\n        updateDataRetentionCustomPolicy: (id: string, policy: PatchDataRetentionCustomPolicy) => Promise<{ data: DataRetentionCustomPolicy; error?: Error }>;\n        addDataRetentionCustomPolicyTeams: (id: string, policy: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n        removeDataRetentionCustomPolicyTeams: (id: string, policy: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n        addDataRetentionCustomPolicyChannels: (id: string, policy: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n        removeDataRetentionCustomPolicyChannels: (id: string, policy: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n        setNavigationBlocked: (blocked: boolean) => void;\n    };\n};\n\ntype State = {\n    policyName: string | undefined;\n    addTeamOpen: boolean;\n    addChannelOpen: boolean;\n    messageRetentionInputValue: string;\n    messageRetentionDropdownValue: {label: string | JSX.Element; value: string};\n    removedTeamsCount: number;\n    removedTeams: IDMappedObjects<Team>;\n    newTeams: IDMappedObjects<Team>;\n    removedChannelsCount: number;\n    removedChannels: IDMappedObjects<ChannelWithTeamData>;\n    newChannels: IDMappedObjects<ChannelWithTeamData>;\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: boolean;\n    inputErrorText: string;\n    formErrorText: string;\n}\n\nexport default class CustomPolicyForm extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            policyName: '',\n            addTeamOpen: false,\n            addChannelOpen: false,\n            messageRetentionInputValue: this.getMessageRetentionDefaultInputValue(),\n            messageRetentionDropdownValue: this.getMessageRetentionDefaultDropdownValue(),\n            removedTeamsCount: 0,\n            removedTeams: {},\n            newTeams: {},\n            removedChannelsCount: 0,\n            removedChannels: {},\n            newChannels: {},\n            saveNeeded: false,\n            saving: false,\n            serverError: false,\n            inputErrorText: '',\n            formErrorText: '',\n        };\n    }\n\n    openAddChannel = () => {\n        this.setState({addChannelOpen: true});\n    }\n\n    closeAddChannel = () => {\n        this.setState({addChannelOpen: false});\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n    getMessageRetentionDefaultInputValue = (): string => {\n        if (!this.props.policy || Object.keys(this.props.policy).length === 0 || (this.props.policy && this.props.policy.post_duration === -1)) {\n            return '';\n        }\n        if (this.props.policy && this.props.policy.post_duration % 365 === 0) {\n            return (this.props.policy.post_duration / 365).toString();\n        }\n        return this.props.policy.post_duration.toString();\n    }\n    getMessageRetentionDefaultDropdownValue = () => {\n        if (!this.props.policyId || (this.props.policy && this.props.policy.post_duration === -1)) {\n            return keepForeverOption();\n        }\n        if (this.props.policy && this.props.policy.post_duration % 365 === 0) {\n            return yearsOption();\n        }\n        return daysOption();\n    }\n\n    componentDidMount = async () => {\n        this.loadPage();\n    }\n    private loadPage = async () => {\n        if (this.props.policyId) {\n            await this.props.actions.fetchPolicy(this.props.policyId);\n            this.setState({\n                policyName: this.props.policy?.display_name,\n                messageRetentionInputValue: this.getMessageRetentionDefaultInputValue(),\n                messageRetentionDropdownValue: this.getMessageRetentionDefaultDropdownValue(),\n            });\n        }\n    }\n\n    addToNewTeams = (teams: Team[]) => {\n        let {removedTeamsCount} = this.state;\n        const {newTeams, removedTeams} = this.state;\n        teams.forEach((team: Team) => {\n            if (removedTeams[team.id]?.id === team.id) {\n                delete removedTeams[team.id];\n                removedTeamsCount -= 1;\n            } else {\n                newTeams[team.id] = team;\n            }\n        });\n        this.setState({newTeams: {...newTeams}, removedTeams: {...removedTeams}, removedTeamsCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addToRemovedTeams = (team: Team) => {\n        let {removedTeamsCount} = this.state;\n        const {newTeams, removedTeams} = this.state;\n        if (newTeams[team.id]?.id === team.id) {\n            delete newTeams[team.id];\n        } else if (removedTeams[team.id]?.id !== team.id) {\n            removedTeamsCount += 1;\n            removedTeams[team.id] = team;\n        }\n        this.setState({removedTeams: {...removedTeams}, newTeams: {...newTeams}, removedTeamsCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addToNewChannels = (channels: ChannelWithTeamData[]) => {\n        let {removedChannelsCount} = this.state;\n        const {newChannels, removedChannels} = this.state;\n        channels.forEach((channel: ChannelWithTeamData) => {\n            if (removedChannels[channel.id]?.id === channel.id) {\n                delete removedChannels[channel.id];\n                removedChannelsCount -= 1;\n            } else {\n                newChannels[channel.id] = channel;\n            }\n        });\n        this.setState({newChannels: {...newChannels}, removedChannels: {...removedChannels}, removedChannelsCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addToRemovedChannels = (channel: ChannelWithTeamData) => {\n        let {removedChannelsCount} = this.state;\n        const {newChannels, removedChannels} = this.state;\n        if (newChannels[channel.id]?.id === channel.id) {\n            delete newChannels[channel.id];\n        } else if (removedChannels[channel.id]?.id !== channel.id) {\n            removedChannelsCount += 1;\n            removedChannels[channel.id] = channel;\n        }\n        this.setState({removedChannels: {...removedChannels}, newChannels: {...newChannels}, removedChannelsCount, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    getTeamsToExclude = () => {\n        const {teams} = this.props;\n        const {newTeams, removedTeams} = this.state;\n\n        let teamsToDisplay = teams?.map((team) => {\n            return team.id;\n        });\n        const includeTeamsList = Object.keys(newTeams);\n\n        // Remove teams to remove and add teams to add\n        if (teamsToDisplay) {\n            teamsToDisplay = teamsToDisplay?.filter((id) => !removedTeams[id]);\n            teamsToDisplay = [...includeTeamsList, ...teamsToDisplay];\n        }\n        return teamsToDisplay;\n    }\n    handleSubmit = async () => {\n        const {policyName, messageRetentionInputValue, messageRetentionDropdownValue, newTeams, removedTeams, newChannels, removedChannels} = this.state;\n        const {policyId, policy} = this.props;\n        const {\n            updateDataRetentionCustomPolicy,\n            addDataRetentionCustomPolicyTeams,\n            removeDataRetentionCustomPolicyTeams,\n            addDataRetentionCustomPolicyChannels,\n            removeDataRetentionCustomPolicyChannels,\n        } = this.props.actions;\n\n        this.setState({saving: true});\n\n        const teamsToAdd = Object.keys(newTeams);\n        const teamsToRemove = Object.keys(removedTeams);\n        const channelsToAdd = Object.keys(newChannels);\n        const channelsToRemove = Object.keys(removedChannels);\n\n        let error = false;\n        let postDuration = parseInt(messageRetentionInputValue, 10);\n\n        if (postDuration <= 0) {\n            this.setState({formErrorText: Utils.localizeMessage('admin.data_retention.custom_policy.form.durationInput.error', 'Error parsing message retention.'), saving: false});\n            return;\n        }\n        if (messageRetentionDropdownValue.value === FOREVER) {\n            postDuration = -1;\n        } else if (this.state.messageRetentionDropdownValue.value === YEARS) {\n            postDuration = parseInt(messageRetentionInputValue, 10) * 365;\n        }\n\n        if (!policyName?.trim()) {\n            this.setState({inputErrorText: Utils.localizeMessage('admin.data_retention.custom_policy.form.input.error', 'Policy name can\\'t be blank.'), saving: false});\n            return;\n        }\n\n        if (policyId && policy) {\n            const policyInfo = {\n                display_name: policyName,\n                post_duration: postDuration,\n            };\n\n            if (((policy?.team_count + teamsToAdd.length) - teamsToRemove.length) === 0 && ((policy?.channel_count + channelsToAdd.length) - channelsToRemove.length) === 0) {\n                this.setState({formErrorText: Utils.localizeMessage('admin.data_retention.custom_policy.form.teamsError', 'You must add a team or a channel to the policy.'), saving: false});\n                return;\n            }\n\n            const actions: Array<Promise<{data?: any; error?: Error}>> = [updateDataRetentionCustomPolicy(policyId, policyInfo)];\n            if (teamsToAdd.length > 0) {\n                actions.push(addDataRetentionCustomPolicyTeams(policyId, teamsToAdd));\n            }\n            if (teamsToRemove.length > 0) {\n                actions.push(removeDataRetentionCustomPolicyTeams(policyId, teamsToRemove));\n            }\n            if (channelsToAdd.length > 0) {\n                actions.push(addDataRetentionCustomPolicyChannels(policyId, channelsToAdd));\n            }\n            if (channelsToRemove.length > 0) {\n                actions.push(removeDataRetentionCustomPolicyChannels(policyId, channelsToRemove));\n            }\n            const results = await Promise.all(actions);\n\n            for (const result of results) {\n                if (result.error) {\n                    error = true;\n                }\n            }\n        } else {\n            if (teamsToAdd.length < 1 && channelsToAdd.length < 1) {\n                this.setState({formErrorText: Utils.localizeMessage('admin.data_retention.custom_policy.form.teamsError', 'You must add a team or a channel to the policy.'), saving: false});\n                return;\n            }\n            const newPolicy = {\n                display_name: policyName,\n                post_duration: postDuration,\n                team_ids: teamsToAdd,\n                channel_ids: channelsToAdd,\n            };\n\n            const result = await this.props.actions.createDataRetentionCustomPolicy(newPolicy);\n            if (result.error) {\n                error = true;\n            }\n        }\n\n        if (error) {\n            this.setState({serverError: true, saving: false});\n        } else {\n            this.props.actions.setNavigationBlocked(false);\n            browserHistory.push('/admin_console/compliance/data_retention_settings');\n        }\n    }\n\n    render = () => {\n        const {serverError, formErrorText} = this.state;\n        return (\n            <div className='wrapper--fixed DataRetentionSettings'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/compliance/data_retention_settings'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.data_retention.customTitle'\n                            defaultMessage='Custom Retention Policy'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.form.title'\n                                            defaultMessage='Name and retention'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.form.subTitle'\n                                            defaultMessage='Give your policy a name and configure retention settings.'\n                                        />\n                                    }\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <div\n                                    className='CustomPolicy__fields'\n                                >\n                                    <Input\n                                        name='policyName'\n                                        type='text'\n                                        value={this.state.policyName}\n                                        onChange={(e) => {\n                                            this.setState({policyName: e.target.value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        placeholder={Utils.localizeMessage('admin.data_retention.custom_policy.form.input', 'Policy name')}\n                                        error={this.state.inputErrorText}\n                                    />\n                                    <DropdownInputHybrid\n                                        onDropdownChange={(value) => {\n                                            if (this.state.messageRetentionDropdownValue.value !== value.value) {\n                                                this.setState({messageRetentionDropdownValue: value, saveNeeded: true});\n                                                this.props.actions.setNavigationBlocked(true);\n                                            }\n                                        }}\n                                        onInputChange={(e) => {\n                                            this.setState({messageRetentionInputValue: e.target.value, saveNeeded: true});\n                                            this.props.actions.setNavigationBlocked(true);\n                                        }}\n                                        value={this.state.messageRetentionDropdownValue}\n                                        inputValue={this.state.messageRetentionInputValue}\n                                        width={95}\n                                        exceptionToInput={[FOREVER]}\n                                        defaultValue={keepForeverOption()}\n                                        options={[daysOption(), yearsOption(), keepForeverOption()]}\n                                        legend={Utils.localizeMessage('admin.data_retention.form.channelAndDirectMessageRetention', 'Channel & direct message retention')}\n                                        placeholder={Utils.localizeMessage('admin.data_retention.form.channelAndDirectMessageRetention', 'Channel & direct message retention')}\n                                        name={'channel_message_retention'}\n                                        inputType={'number'}\n                                    />\n                                </div>\n\n                            </Card.Body>\n                        </Card>\n                        {this.state.addTeamOpen &&\n                            <TeamSelectorModal\n                                onModalDismissed={this.closeAddTeam}\n                                onTeamsSelected={(teams) => {\n                                    this.addToNewTeams(teams);\n                                }}\n                                modalID={'CUSTOM_POLICY_TEAMS'}\n                                alreadySelected={Object.keys(this.state.newTeams)}\n                                excludePolicyConstrained={true}\n                            />\n                        }\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.team_selector.title'\n                                            defaultMessage='Assigned teams'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.team_selector.subTitle'\n                                            defaultMessage='Add teams that will follow this retention policy.'\n                                        />\n                                    }\n                                    buttonText={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.team_selector.addTeams'\n                                            defaultMessage='Add teams'\n                                        />\n                                    }\n                                    onClick={this.openAddTeam}\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <TeamList\n                                    onRemoveCallback={this.addToRemovedTeams}\n                                    onAddCallback={this.addToNewTeams}\n                                    teamsToRemove={this.state.removedTeams}\n                                    teamsToAdd={this.state.newTeams}\n                                    policyId={this.props.policyId}\n                                />\n                            </Card.Body>\n                        </Card>\n                        {this.state.addChannelOpen &&\n                            <ChannelSelectorModal\n                                onModalDismissed={this.closeAddChannel}\n                                onChannelsSelected={(channels) => {\n                                    this.addToNewChannels(channels);\n                                }}\n                                groupID={''}\n                                alreadySelected={Object.keys(this.state.newChannels)}\n                                excludePolicyConstrained={true}\n                                excludeTeamIds={this.getTeamsToExclude()}\n                            />\n                        }\n                        <Card\n                            expanded={true}\n                            className={'console'}\n                        >\n                            <Card.Header>\n                                <TitleAndButtonCardHeader\n                                    title={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.channel_selector.title'\n                                            defaultMessage='Assigned channels'\n                                        />\n                                    }\n                                    subtitle={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.channel_selector.subTitle'\n                                            defaultMessage='Add channels that will follow this retention policy.'\n                                        />\n                                    }\n                                    buttonText={\n                                        <FormattedMessage\n                                            id='admin.data_retention.custom_policy.channel_selector.addChannels'\n                                            defaultMessage='Add channels'\n                                        />\n                                    }\n                                    onClick={this.openAddChannel}\n                                />\n                            </Card.Header>\n                            <Card.Body\n                                expanded={true}\n                            >\n                                <ChannelList\n                                    onRemoveCallback={this.addToRemovedChannels}\n                                    onAddCallback={this.addToNewChannels}\n                                    channelsToRemove={this.state.removedChannels}\n                                    channelsToAdd={this.state.newChannels}\n                                    policyId={this.props.policyId}\n                                />\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded}\n                        onClick={this.handleSubmit}\n                        defaultMessage={(\n                            <FormattedMessage\n                                id='admin.data_retention.custom_policy.save'\n                                defaultMessage='Save'\n                            />\n                        )}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/compliance/data_retention_settings'\n                    >\n                        <FormattedMessage\n                            id='admin.data_retention.custom_policy.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    {serverError &&\n                        <span className='CustomPolicy__error'>\n                            <i className='icon icon-alert-outline'/>\n                            <FormattedMessage\n                                id='admin.data_retention.custom_policy.serverError'\n                                defaultMessage='There are errors in the form above'\n                            />\n                        </span>\n                    }\n                    {\n                        formErrorText &&\n                        <span className='CustomPolicy__error'>\n                            <i className='icon icon-alert-outline'/>\n                            {formErrorText}\n                        </span>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable @typescript-eslint/naming-convention */\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {\n    getDataRetentionCustomPolicy as fetchPolicy,\n    getDataRetentionCustomPolicyTeams as fetchPolicyTeams,\n    createDataRetentionCustomPolicy,\n    updateDataRetentionCustomPolicy,\n    addDataRetentionCustomPolicyTeams,\n    removeDataRetentionCustomPolicyTeams,\n    addDataRetentionCustomPolicyChannels,\n    removeDataRetentionCustomPolicyChannels,\n} from 'matterfoss-redux/actions/admin';\nimport {getDataRetentionCustomPolicy} from 'matterfoss-redux/selectors/entities/admin';\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\nimport {\n    DataRetentionCustomPolicy,\n    CreateDataRetentionCustomPolicy,\n    PatchDataRetentionCustomPolicy,\n} from 'matterfoss-redux/types/data_retention';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {GlobalState} from 'types/store';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport {getTeamsInPolicy} from 'matterfoss-redux/selectors/entities/teams';\n\nimport CustomPolicyForm from './custom_policy_form';\n\ntype Actions = {\n    fetchPolicy: (id: string) => Promise<{ data: DataRetentionCustomPolicy }>;\n    fetchPolicyTeams: (id: string, page: number, perPage: number) => Promise<{ data: Team[] }>;\n    createDataRetentionCustomPolicy: (policy: CreateDataRetentionCustomPolicy) => Promise<{ data: DataRetentionCustomPolicy }>;\n    updateDataRetentionCustomPolicy: (id: string, policy: PatchDataRetentionCustomPolicy) => Promise<{ data: DataRetentionCustomPolicy }>;\n    addDataRetentionCustomPolicyTeams: (id: string, teams: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n    removeDataRetentionCustomPolicyTeams: (id: string, teams: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n    addDataRetentionCustomPolicyChannels: (id: string, channels: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n    removeDataRetentionCustomPolicyChannels: (id: string, channels: string[]) => Promise<{ data?: {status: string}; error?: Error }>;\n    setNavigationBlocked: (blocked: boolean) => void;\n};\n\ntype OwnProps = {\n    match: {\n        params: {\n            policy_id: string;\n        };\n    };\n}\n\nfunction mapStateToProps() {\n    const getPolicyTeams = getTeamsInPolicy();\n    return (state: GlobalState, ownProps: OwnProps) => {\n        const policyId = ownProps.match.params.policy_id;\n        const policy = getDataRetentionCustomPolicy(state, policyId);\n        const teams = policyId ? getPolicyTeams(state, {policyId}) : [];\n        return {\n            policyId,\n            policy,\n            teams,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            fetchPolicy,\n            fetchPolicyTeams,\n            createDataRetentionCustomPolicy,\n            updateDataRetentionCustomPolicy,\n            addDataRetentionCustomPolicyTeams,\n            removeDataRetentionCustomPolicyTeams,\n            addDataRetentionCustomPolicyChannels,\n            removeDataRetentionCustomPolicyChannels,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomPolicyForm);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {AdminConfig} from 'matterfoss-redux/types/config';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\ntype Props = {\n    config: AdminConfig;\n};\n\nconst FeatureFlags: React.FC<Props> = (props: Props) => {\n    const flags = props.config.FeatureFlags;\n    let settings = null;\n    if (flags) {\n        settings = Object.keys(flags).map((ffKey) => (\n            <tr key={ffKey}>\n                <td width='20px'/>\n                <td className='whitespace--nowrap'>{ffKey}</td>\n                <td className='whitespace--nowrap'>{String(flags[ffKey])}</td>\n            </tr>\n        ));\n    }\n\n    return (\n        <div className='wrapper--admin'>\n            <FormattedAdminHeader\n                id='admin.feature_flags.title'\n                defaultMessage='Feature Flags'\n            />\n            <div className='admin-console__wrapper'>\n                <div className='admin-logs-content admin-console__content'>\n                    <div className={'banner info'}>\n                        <div className='banner__content'>\n                            <FormattedMessage\n                                id='admin.feature_flags.introBanner'\n                                defaultMessage={'Feature flag values displayed here show the status of features enabled on this server. The values here are used only for troubleshooting by the MatterFOSS support team.'}\n                            />\n                        </div>\n                    </div>\n                    <div className='job-table__panel'>\n                        <div className='job-table__table'>\n                            <table\n                                className='table'\n                            >\n                                <thead>\n                                    <tr>\n                                        <th/>\n                                        <th>\n                                            <FormattedMessage\n                                                id='admin.feature_flags.flag'\n                                                defaultMessage='Flag'\n                                            />\n                                        </th>\n                                        <th>\n                                            <FormattedMessage\n                                                id='admin.feature_flags.flag_value'\n                                                defaultMessage='Value'\n                                            />\n                                        </th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {settings}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default FeatureFlags;\n","export default __webpack_public_path__ + \"files/fd11b8d1c38dbb28cdd3c2a67efbb8be.png\";","export default __webpack_public_path__ + \"files/ba838609d2582a6a2b8addd93947ec5e.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport statusGreen from 'images/status_green.png';\nimport statusYellow from 'images/status_yellow.png';\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\n\nexport default class ClusterTable extends React.PureComponent {\n    static propTypes = {\n        clusterInfos: PropTypes.array.isRequired,\n        reload: PropTypes.func.isRequired,\n    }\n\n    render() {\n        var versionMismatch = (\n            <img\n                alt='version mismatch'\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var configMismatch = (\n            <img\n                alt='config mismatch'\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var version = '';\n        var configHash = '';\n        var singleItem = false;\n\n        if (this.props.clusterInfos.length) {\n            version = this.props.clusterInfos[0].version;\n            configHash = this.props.clusterInfos[0].config_hash;\n            singleItem = this.props.clusterInfos.length === 1;\n        }\n\n        this.props.clusterInfos.map((clusterInfo) => {\n            if (clusterInfo.version !== version) {\n                versionMismatch = (\n                    <img\n                        alt='version mismatch'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            if (clusterInfo.config_hash !== configHash) {\n                configMismatch = (\n                    <img\n                        alt='config mismatch'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            return null;\n        });\n\n        var items = this.props.clusterInfos.map((clusterInfo) => {\n            var status = null;\n\n            if (clusterInfo.hostname === '') {\n                clusterInfo.hostname = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.version === '') {\n                clusterInfo.version = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.config_hash === '') {\n                clusterInfo.config_hash = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (singleItem) {\n                status = (\n                    <img\n                        alt='Cluster status'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            } else {\n                status = (\n                    <img\n                        alt='Cluster status'\n                        className='cluster-status'\n                        src={statusGreen}\n                    />\n                );\n            }\n\n            return (\n                <tr key={clusterInfo.ipaddress}>\n                    <td style={style.clusterCell}>{status}</td>\n                    <td style={style.clusterCell}>{clusterInfo.hostname}</td>\n                    <td style={style.clusterCell}>{versionMismatch} {clusterInfo.version}</td>\n                    <td style={style.clusterCell}><div className='config-hash'>{configMismatch} {clusterInfo.config_hash}</div></td>\n                    <td style={style.clusterCell}>{clusterInfo.ipaddress}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div\n                className='cluster-panel__table'\n                style={style.clusterTable}\n            >\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        onClick={this.props.reload}\n                    >\n                        <ReloadIcon/>\n                        <FormattedMessage\n                            id='admin.cluster.status_table.reload'\n                            defaultMessage=' Reload Cluster Status'\n                        />\n                    </button>\n                </div>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.status'\n                                    defaultMessage='Status'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.hostname'\n                                    defaultMessage='Hostname'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.version'\n                                    defaultMessage='Version'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.config_hash'\n                                    defaultMessage='Config File MD5'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.url'\n                                    defaultMessage='Gossip Address'\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    clusterTable: {margin: 10, marginBottom: 30},\n    clusterCell: {whiteSpace: 'nowrap'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getClusterStatus} from 'actions/admin_actions.jsx';\nimport LoadingScreen from '../loading_screen';\n\nimport ClusterTable from './cluster_table.jsx';\n\nexport default class ClusterTableContainer extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.interval = null;\n\n        this.state = {\n            clusterInfos: null,\n        };\n    }\n\n    load = () => {\n        getClusterStatus(\n            (data) => {\n                this.setState({\n                    clusterInfos: data,\n                });\n            },\n            null,\n        );\n    }\n\n    componentDidMount() {\n        this.load();\n\n        // reload the cluster status every 15 seconds\n        this.interval = setInterval(this.load, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reload = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            clusterInfos: null,\n        });\n\n        this.load();\n    }\n\n    render() {\n        if (this.state.clusterInfos == null) {\n            return (<LoadingScreen/>);\n        }\n\n        return (\n            <ClusterTable\n                clusterInfos={this.state.clusterInfos}\n                reload={this.reload}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport ClusterTableContainer from './cluster_table_container.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class ClusterSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.ClusterSettings.Enable = this.state.Enable;\n        config.ClusterSettings.ClusterName = this.state.ClusterName;\n        config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;\n        config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;\n        config.ClusterSettings.EnableExperimentalGossipEncryption = this.state.EnableExperimentalGossipEncryption;\n        config.ClusterSettings.EnableGossipCompression = this.state.EnableGossipCompression;\n        config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);\n        config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.ClusterSettings;\n\n        return {\n            Enable: settings.Enable,\n            ClusterName: settings.ClusterName,\n            OverrideHostname: settings.OverrideHostname,\n            UseIpAddress: settings.UseIpAddress,\n            EnableExperimentalGossipEncryption: settings.EnableExperimentalGossipEncryption,\n            EnableGossipCompression: settings.EnableGossipCompression,\n            GossipPort: settings.GossipPort,\n            StreamingPort: settings.StreamingPort,\n            showWarning: false,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.advance.cluster'\n                defaultMessage='High Availability'\n            />\n        );\n    }\n\n    overrideHandleChange = (id, value) => {\n        this.setState({\n            showWarning: true,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    renderSettings = () => {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        var configLoadedFromCluster = null;\n\n        if (Client4.clusterId) {\n            configLoadedFromCluster = (\n                <div\n                    style={style.configLoadedFromCluster}\n                    className='alert alert-warning'\n                >\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.loadedFrom'\n                        defaultMessage='This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html) if you are accessing the System Console through a load balancer and experiencing issues.'\n                        values={{\n                            clusterId: Client4.clusterId,\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        var warning = null;\n\n        if (this.state.showWarning) {\n            warning = (\n                <div\n                    style={style.warning}\n                    className='alert alert-warning'\n                >\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.should_not_change'\n                        defaultMessage='WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart MatterFOSS. Please see the [documentation](!http://docs.mattermost.com/deployment/cluster.html) on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html).'\n                    />\n                </div>\n            );\n        }\n\n        var clusterTableContainer = null;\n        if (this.state.Enable) {\n            clusterTableContainer = (<ClusterTableContainer/>);\n        }\n\n        return (\n            <SettingsGroup>\n                {configLoadedFromCluster}\n                {clusterTableContainer}\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.cluster.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                {warning}\n                <BooleanSetting\n                    id='Enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.enableTitle'\n                            defaultMessage='Enable High Availability Mode:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.cluster.enableDescription'\n                            defaultMessage='When true, MatterFOSS will run in High Availability mode. Please see [documentation](!http://docs.mattermost.com/deployment/cluster.html) to learn more about configuring High Availability for MatterFOSS.'\n                        />\n                    }\n                    value={this.state.Enable}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.Enable')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='ClusterName'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterName'\n                            defaultMessage='Cluster Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.ClusterNameEx', 'E.g.: \"Production\" or \"Staging\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterNameDesc'\n                            defaultMessage='The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database.'\n                        />\n                    }\n                    value={this.state.ClusterName}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ClusterName')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='OverrideHostname'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostname'\n                            defaultMessage='Override Hostname:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.OverrideHostnameEx', 'E.g.: \"app-server-01\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostnameDesc'\n                            defaultMessage=\"The default value of '<blank>' will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed.\"\n                        />\n                    }\n                    value={this.state.OverrideHostname}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.OverrideHostname')}\n                    disabled={this.props.isDisabled}\n                />\n                <BooleanSetting\n                    id='UseIpAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddress'\n                            defaultMessage='Use IP Address:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddressDesc'\n                            defaultMessage='When true, the cluster will attempt to communicate via IP Address vs using the hostname.'\n                        />\n                    }\n                    value={this.state.UseIpAddress}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseIpAddress')}\n                    disabled={this.props.isDisabled}\n                />\n                <BooleanSetting\n                    id='EnableExperimentalGossipEncryption'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.EnableExperimentalGossipEncryption'\n                            defaultMessage='Enable Experimental Gossip encryption:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.EnableExperimentalGossipEncryptionDesc'\n                            defaultMessage='When true, all communication through the gossip protocol will be encrypted.'\n                        />\n                    }\n                    value={this.state.EnableExperimentalGossipEncryption}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.EnableExperimentalGossipEncryption')}\n                    disabled={this.props.isDisabled}\n                />\n                <BooleanSetting\n                    id='EnableGossipCompression'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.EnableGossipCompression'\n                            defaultMessage='Enable Gossip compression:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.EnableGossipCompressionDesc'\n                            defaultMessage='When true, all communication through the gossip protocol will be compressed. It is recommended to keep this flag disabled.'\n                        />\n                    }\n                    value={this.state.EnableGossipCompression}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.EnableGossipCompression')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='GossipPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPort'\n                            defaultMessage='Gossip Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.GossipPortEx', 'E.g.: \"8074\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPortDesc'\n                            defaultMessage='The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port.'\n                        />\n                    }\n                    value={this.state.GossipPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.GossipPort')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='StreamingPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPort'\n                            defaultMessage='Streaming Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.StreamingPortEx', 'E.g.: \"8075\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPortDesc'\n                            defaultMessage='The port used for streaming data between servers.'\n                        />\n                    }\n                    value={this.state.StreamingPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.StreamingPort')}\n                    disabled={this.props.isDisabled}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n\nconst style = {\n    configLoadedFromCluster: {marginBottom: 10},\n    warning: {marginBottom: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\nimport {TermsOfService} from 'matterfoss-redux/types/terms_of_service';\nimport {getTermsOfService, createTermsOfService} from 'matterfoss-redux/actions/users';\n\nimport CustomTermsOfServiceSettings from './custom_terms_of_service_settings';\n\ntype Actions = {\n    getTermsOfService: () => Promise<{data: TermsOfService}>;\n    createTermsOfService: (text: string) => Promise<{data: TermsOfService; error?: Error}>;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            getTermsOfService,\n            createTermsOfService,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(CustomTermsOfServiceSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {AdminConfig, ClientLicense} from 'matterfoss-redux/types/config';\nimport {TermsOfService} from 'matterfoss-redux/types/terms_of_service';\n\nimport AdminSettings, {BaseProps, BaseState} from 'components/admin_console/admin_settings';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport BooleanSetting from 'components/admin_console/boolean_setting';\nimport TextSetting from 'components/admin_console/text_setting';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {Constants} from 'utils/constants';\n\ntype Props = BaseProps & {\n    actions: {\n        getTermsOfService: () => Promise<{data: TermsOfService}>;\n        createTermsOfService: (text: string) => Promise<{data: TermsOfService; error?: Error}>;\n    };\n    config: AdminConfig;\n    license: ClientLicense;\n    setNavigationBlocked: () => void;\n\n    /*\n     * Action to save config file\n     */\n    updateConfig: () => void;\n};\n\ntype State = BaseState & {\n    termsEnabled?: boolean;\n    reAcceptancePeriod?: number;\n    loadingTermsText: boolean;\n    receivedTermsText: string;\n    termsText: string;\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: JSX.Element | string | null;\n    errorTooltip: boolean;\n}\n\nexport default class CustomTermsOfServiceSettings extends AdminSettings<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            termsEnabled: props.config.SupportSettings?.CustomTermsOfServiceEnabled,\n            reAcceptancePeriod: props.config.SupportSettings?.CustomTermsOfServiceReAcceptancePeriod,\n            loadingTermsText: true,\n            receivedTermsText: '',\n            termsText: '',\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n    }\n\n    getStateFromConfig(config: Props['config']) {\n        return {\n            termsEnabled: config.SupportSettings?.CustomTermsOfServiceEnabled,\n            reAcceptancePeriod: this.parseIntNonZero(String(config.SupportSettings?.CustomTermsOfServiceReAcceptancePeriod), Constants.DEFAULT_TERMS_OF_SERVICE_RE_ACCEPTANCE_PERIOD),\n        };\n    }\n\n    getConfigFromState = (config: Props['config']) => {\n        if (config && config.SupportSettings) {\n            config.SupportSettings.CustomTermsOfServiceEnabled = Boolean(this.state.termsEnabled);\n            config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod = this.parseIntNonZero(String(this.state.reAcceptancePeriod), Constants.DEFAULT_TERMS_OF_SERVICE_RE_ACCEPTANCE_PERIOD);\n        }\n        return config;\n    }\n\n    componentDidMount() {\n        this.getTermsOfService();\n    }\n\n    doSubmit = async (callback?: () => void) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.termsEnabled && (this.state.receivedTermsText !== this.state.termsText || !this.props.config?.SupportSettings?.CustomTermsOfServiceEnabled)) {\n            const result = await this.props.actions.createTermsOfService(this.state.termsText);\n            if (result.error) {\n                this.handleAPIError(result.error, callback);\n                return;\n            }\n        }\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        const {data, error} = await this.props.updateConfig(config);\n\n        if (data) {\n            this.setState(this.getStateFromConfig(data));\n\n            this.setState({\n                saveNeeded: false,\n                saving: false,\n            });\n\n            this.props.setNavigationBlocked(false);\n\n            if (callback) {\n                callback();\n            }\n\n            if (this.handleSaved) {\n                this.handleSaved(config);\n            }\n        } else if (error) {\n            this.handleAPIError({id: error.server_error_id, ...error}, callback, config);\n        }\n    };\n\n    handleAPIError = (err: any, callback?: (() => void), config?: Props['config']) => {\n        this.setState({\n            saving: false,\n            serverError: err.message,\n            serverErrorId: err.id,\n        });\n\n        if (callback) {\n            callback();\n        }\n\n        if (this.handleSaved && config) {\n            this.handleSaved(config as AdminConfig);\n        }\n    };\n\n    getTermsOfService = async () => {\n        this.setState({loadingTermsText: true});\n\n        const {data} = await this.props.actions.getTermsOfService();\n        if (data) {\n            this.setState({\n                termsText: data.text,\n                receivedTermsText: data.text,\n            });\n        }\n\n        this.setState({loadingTermsText: false});\n    };\n\n    handleTermsTextChange = (id: string, value: boolean) => {\n        this.handleChange('termsText', value);\n    };\n\n    handleTermsEnabledChange = (id: string, value: boolean) => {\n        this.handleChange('termsEnabled', value);\n    };\n\n    handleReAcceptancePeriodChange = (id: string, value: boolean) => {\n        this.handleChange('reAcceptancePeriod', value);\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.support.termsOfServiceTitle'\n                defaultMessage='Custom Terms of Service (Beta)'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        if (this.state.loadingTermsText) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    key={'customTermsOfServiceEnabled'}\n                    id={'SupportSettings.CustomTermsOfServiceEnabled'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.enableTermsOfServiceTitle'\n                            defaultMessage='Enable Custom Terms of Service'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.support.enableTermsOfServiceHelp'\n                            defaultMessage='When true, new users must accept the terms of service before accessing any MatterFOSS teams on desktop, web or mobile. Existing users must accept them after login or a page refresh.\\n \\nTo update terms of service link displayed in account creation and login pages, go to [Site Configuration > Customization](../site_config/customization).'\n                        />\n                    }\n                    value={Boolean(this.state.termsEnabled)}\n                    onChange={this.handleTermsEnabledChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceEnabled')}\n                    disabled={this.props.isDisabled || !(this.props.license.IsLicensed && this.props.license.CustomTermsOfService === 'true')}\n                />\n                <TextSetting\n                    key={'customTermsOfServiceText'}\n                    id={'SupportSettings.CustomTermsOfServiceText'}\n                    type={'textarea'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceTextTitle'\n                            defaultMessage='Custom Terms of Service Text'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceTextHelp'\n                            defaultMessage='Text that will appear in your custom Terms of Service. Supports Markdown-formatted text.'\n                        />\n                    }\n                    onChange={this.handleTermsTextChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceText')}\n                    value={this.state.termsText}\n                    maxLength={Constants.MAX_TERMS_OF_SERVICE_TEXT_LENGTH}\n                    disabled={this.props.isDisabled || !this.state.termsEnabled}\n                />\n                <TextSetting\n                    key={'customTermsOfServiceReAcceptancePeriod'}\n                    id={'SupportSettings.CustomTermsOfServiceReAcceptancePeriod'}\n                    type={'number'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceReAcceptanceTitle'\n                            defaultMessage='Re-Acceptance Period:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceReAcceptanceHelp'\n                            defaultMessage='The number of days before Terms of Service acceptance expires, and the terms must be re-accepted.'\n                        />\n                    }\n                    value={this.state.reAcceptancePeriod || ''}\n                    onChange={this.handleReAcceptancePeriodChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceReAcceptancePeriod')}\n                    disabled={this.props.isDisabled || !this.state.termsEnabled}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"files/b91f74470e4a2fd79b298fcd1950edb9.svg\";","export default __webpack_public_path__ + \"files/cd908122393e371d1c40cb2d68d5ddb2.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedNumber} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {CloudLinks} from 'utils/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport noBillingHistoryGraphic from 'images/no_billing_history_graphic.svg';\nimport upgradeMattermostCloudImage from 'images/upgrade-mattermost-cloud-image.svg';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nenum TrialPeriodDays {\n    TRIAL_14_DAYS = 14,\n    TRIAL_3_DAYS = 3,\n    TRIAL_1_DAY = 1,\n    TRIAL_0_DAYS = 0\n}\n\nexport const noBillingHistory = (\n    <div className='BillingSummary__noBillingHistory'>\n        <img\n            className='BillingSummary__noBillingHistory-graphic'\n            src={noBillingHistoryGraphic}\n        />\n        <div className='BillingSummary__noBillingHistory-title'>\n            <FormattedMessage\n                id='admin.billing.subscriptions.billing_summary.noBillingHistory.title'\n                defaultMessage='No billing history yet'\n            />\n        </div>\n        <div className='BillingSummary__noBillingHistory-message'>\n            <FormattedMessage\n                id='admin.billing.subscriptions.billing_summary.noBillingHistory.description'\n                defaultMessage='In the future, this is where your most recent bill summary will show.'\n            />\n        </div>\n        <a\n            target='_new'\n            rel='noopener noreferrer'\n            href={CloudLinks.BILLING_DOCS}\n            className='BillingSummary__noBillingHistory-link'\n            onClick={() => trackEvent('cloud_admin', 'click_how_billing_works', {screen: 'subscriptions'})}\n        >\n            <FormattedMessage\n                id='admin.billing.subscriptions.billing_summary.noBillingHistory.link'\n                defaultMessage='See how billing works'\n            />\n        </a>\n    </div>\n);\n\nexport const upgradeFreeTierMattermostCloud = (onUpgradeMattermostCloud: () => void) => (\n    <div className='UpgradeMattermostCloud'>\n        <div className='UpgradeMattermostCloud__image'>\n            <img src={upgradeMattermostCloudImage}/>\n        </div>\n        <div className='UpgradeMattermostCloud__title'>\n            <FormattedMessage\n                id='admin.billing.subscription.upgradeMattermostCloud.title'\n                defaultMessage='Need more users?'\n            />\n        </div>\n        <div className='UpgradeMattermostCloud__description'>\n            <FormattedMarkdownMessage\n                id='admin.billing.subscription.upgradeMattermostCloud.description'\n                defaultMessage='The free tier is **limited to 10 users.** Get access to more users, teams and other great features'\n            />\n        </div>\n        <button\n            type='button'\n            onClick={onUpgradeMattermostCloud}\n            className='UpgradeMattermostCloud__upgradeButton'\n        >\n            <FormattedMessage\n                id='admin.billing.subscription.upgradeMattermostCloud.upgradeButton'\n                defaultMessage='Upgrade MatterFOSS'\n            />\n        </button>\n    </div>\n);\n\nexport const freeTrial = (onUpgradeMattermostCloud: () => void, daysLeftOnTrial: number) => (\n    <div className='UpgradeMattermostCloud'>\n        <div className='UpgradeMattermostCloud__image'>\n            <img src={upgradeMattermostCloudImage}/>\n        </div>\n        <div className='UpgradeMattermostCloud__title'>\n            {daysLeftOnTrial !== TrialPeriodDays.TRIAL_1_DAY &&\n                <FormattedMessage\n                    id='admin.billing.subscription.freeTrial.title'\n                    defaultMessage={'You\\'re currently on a free trial'}\n                />\n            }\n            {daysLeftOnTrial === TrialPeriodDays.TRIAL_1_DAY &&\n                <FormattedMessage\n                    id='admin.billing.subscription.freeTrial.lastDay.title'\n                    defaultMessage={'Your free trial ends today'}\n                />\n            }\n        </div>\n        <div className='UpgradeMattermostCloud__description'>\n            {daysLeftOnTrial > TrialPeriodDays.TRIAL_3_DAYS &&\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.freeTrial.description'\n                    defaultMessage='Your free trial will expire in {daysLeftOnTrial} days. Add your payment information to continue after the trial ends.'\n                    values={{daysLeftOnTrial}}\n                />\n            }\n            {(daysLeftOnTrial > TrialPeriodDays.TRIAL_1_DAY && daysLeftOnTrial <= TrialPeriodDays.TRIAL_3_DAYS) &&\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.freeTrial.lessThan3Days.description'\n                    defaultMessage='Your free trial will end in {daysLeftOnTrial, number} {daysLeftOnTrial, plural, one {day} other {days}}. Add payment information to continue enjoying the benefits of Cloud Professional.'\n                    values={{daysLeftOnTrial}}\n                />\n            }\n            {(daysLeftOnTrial === TrialPeriodDays.TRIAL_1_DAY) &&\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.freeTrial.lastDay.description'\n                    defaultMessage='Your free trial has ended. Add payment information to continue enjoying the benefits of Cloud Professional.'\n                />\n            }\n        </div>\n        <button\n            type='button'\n            onClick={onUpgradeMattermostCloud}\n            className='UpgradeMattermostCloud__upgradeButton'\n        >\n            <FormattedMessage\n                id='admin.billing.subscription.cloudTrial.subscribeButton'\n                defaultMessage='Subscribe Now'\n            />\n        </button>\n    </div>\n);\n\nexport const getPaymentStatus = (status: string) => {\n    switch (status) {\n    case 'failed':\n        return (\n            <div className='BillingSummary__lastInvoice-headerStatus failed'>\n                <FormattedMessage\n                    id='admin.billing.subscriptions.billing_summary.lastInvoice.failed'\n                    defaultMessage='Failed'\n                />\n                <i className='icon icon-alert-outline'/>\n            </div>\n        );\n    case 'paid':\n        return (\n            <div className='BillingSummary__lastInvoice-headerStatus paid'>\n                <FormattedMessage\n                    id='admin.billing.subscriptions.billing_summary.lastInvoice.paid'\n                    defaultMessage='Paid'\n                />\n                <i className='icon icon-check-circle-outline'/>\n            </div>\n        );\n    default:\n        return (\n            <div className='BillingSummary__lastInvoice-headerStatus pending'>\n                <FormattedMessage\n                    id='admin.billing.subscriptions.billing_summary.lastInvoice.pending'\n                    defaultMessage='Pending'\n                />\n                <i className='icon icon-check-circle-outline'/>\n            </div>\n        );\n    }\n};\n\nexport const lastInvoiceInfo = (invoice: any, product: any, fullCharges: any, partialCharges: any) => {\n    return (\n        <div className='BillingSummary__lastInvoice'>\n            <div className='BillingSummary__lastInvoice-header'>\n                <div className='BillingSummary__lastInvoice-headerTitle'>\n                    <FormattedMessage\n                        id='admin.billing.subscriptions.billing_summary.lastInvoice.title'\n                        defaultMessage='Last Invoice'\n                    />\n                </div>\n                {getPaymentStatus(invoice.status)}\n            </div>\n            <div className='BillingSummary__lastInvoice-date'>\n                <FormattedDate\n                    value={new Date(invoice.period_start)}\n                    month='short'\n                    year='numeric'\n                    day='numeric'\n                    timeZone='UTC'\n                />\n            </div>\n            <div className='BillingSummary__lastInvoice-productName'>\n                {product?.name}\n            </div>\n            <hr/>\n            {fullCharges.map((charge: any) => (\n                <div\n                    key={charge.price_id}\n                    className='BillingSummary__lastInvoice-charge'\n                >\n                    <div className='BillingSummary__lastInvoice-chargeDescription'>\n                        <FormattedNumber\n                            value={(charge.price_per_unit / 100.0)}\n                            // eslint-disable-next-line react/style-prop-object\n                            style='currency'\n                            currency='USD'\n                        />\n                        <FormattedMarkdownMessage\n                            id='admin.billing.subscriptions.billing_summary.lastInvoice.userCount'\n                            defaultMessage=' x {users} users'\n                            values={{users: charge.quantity}}\n                        />\n                    </div>\n                    <div className='BillingSummary__lastInvoice-chargeAmount'>\n                        <FormattedNumber\n                            value={(charge.total / 100.0)}\n                            // eslint-disable-next-line react/style-prop-object\n                            style='currency'\n                            currency='USD'\n                        />\n                    </div>\n                </div>\n            ))}\n            {partialCharges.length &&\n            <div className='BillingSummary__lastInvoice-partialCharges'>\n                <FormattedMessage\n                    id='admin.billing.subscriptions.billing_summary.lastInvoice.partialCharges'\n                    defaultMessage='Partial charges'\n                />\n                <OverlayTrigger\n                    delayShow={500}\n                    placement='bottom'\n                    overlay={(\n                        <Tooltip\n                            id='BillingSubscriptions__seatOverageTooltip'\n                            className='BillingSubscriptions__tooltip BillingSubscriptions__tooltip-right'\n                            positionLeft={390}\n                        >\n                            <div className='BillingSubscriptions__tooltipTitle'>\n                                <FormattedMessage\n                                    id='admin.billing.subscriptions.billing_summary.lastInvoice.whatArePartialCharges'\n                                    defaultMessage='What are partial charges?'\n                                />\n                            </div>\n                            <div className='BillingSubscriptions__tooltipMessage'>\n                                <FormattedMessage\n                                    id='admin.billing.subscriptions.billing_summary.lastInvoice.whatArePartialCharges.message'\n                                    defaultMessage='Users who have not been enabled for the full duration of the month are charged at a prorated monthly rate.'\n                                />\n                            </div>\n                        </Tooltip>\n                    )}\n                >\n                    <i className='icon-information-outline'/>\n                </OverlayTrigger>\n            </div>\n            }\n            {partialCharges.map((charge: any) => (\n                <div\n                    key={charge.price_id}\n                    className='BillingSummary__lastInvoice-charge'\n                >\n                    <div className='BillingSummary__lastInvoice-chargeDescription'>\n                        <FormattedMarkdownMessage\n                            id='admin.billing.subscriptions.billing_summary.lastInvoice.userCountPartial'\n                            defaultMessage='{users} users'\n                            values={{users: charge.quantity}}\n                        />\n                    </div>\n                    <div className='BillingSummary__lastInvoice-chargeAmount'>\n                        <FormattedNumber\n                            value={(charge.total / 100.0)}\n                            // eslint-disable-next-line react/style-prop-object\n                            style='currency'\n                            currency='USD'\n                        />\n                    </div>\n                </div>\n            ))}\n            {Boolean(invoice.tax) &&\n            <div className='BillingSummary__lastInvoice-charge'>\n                <div className='BillingSummary__lastInvoice-chargeDescription'>\n                    <FormattedMessage\n                        id='admin.billing.subscriptions.billing_summary.lastInvoice.taxes'\n                        defaultMessage='Taxes'\n                    />\n                </div>\n                <div className='BillingSummary__lastInvoice-chargeAmount'>\n                    <FormattedNumber\n                        value={(invoice.tax / 100.0)}\n                        // eslint-disable-next-line react/style-prop-object\n                        style='currency'\n                        currency='USD'\n                    />\n                </div>\n            </div>\n            }\n            <hr/>\n            <div className='BillingSummary__lastInvoice-charge total'>\n                <div className='BillingSummary__lastInvoice-chargeDescription'>\n                    <FormattedMessage\n                        id='admin.billing.subscriptions.billing_summary.lastInvoice.total'\n                        defaultMessage='Total'\n                    />\n                </div>\n                <div className='BillingSummary__lastInvoice-chargeAmount'>\n                    <FormattedNumber\n                        value={(invoice.total / 100.0)}\n                        // eslint-disable-next-line react/style-prop-object\n                        style='currency'\n                        currency='USD'\n                    />\n                </div>\n            </div>\n            <div className='BillingSummary__lastInvoice-download'>\n                <a\n                    target='_new'\n                    rel='noopener noreferrer'\n                    href={Client4.getInvoicePdfUrl(invoice.id)}\n                    className='BillingSummary__lastInvoice-downloadButton'\n                >\n                    <i className='icon icon-file-pdf-outline'/>\n                    <FormattedMessage\n                        id='admin.billing.subscriptions.billing_summary.lastInvoice.downloadInvoice'\n                        defaultMessage='Download Invoice'\n                    />\n                </a>\n            </div>\n            <BlockableLink\n                to='/admin_console/billing/billing_history'\n                className='BillingSummary__lastInvoice-billingHistory'\n            >\n                <FormattedMessage\n                    id='admin.billing.subscriptions.billing_summary.lastInvoice.seeBillingHistory'\n                    defaultMessage='See Billing History'\n                />\n            </BlockableLink>\n        </div>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useSelector} from 'react-redux';\n\nimport {GlobalState} from 'types/store';\n\nimport {\n    noBillingHistory,\n    upgradeFreeTierMattermostCloud,\n    lastInvoiceInfo,\n    freeTrial,\n} from './billing_summary';\n\nimport './billing_summary.scss';\n\ntype BillingSummaryProps = {\n    isPaidTier: boolean;\n    isFreeTrial: boolean;\n    daysLeftOnTrial: number;\n    onUpgradeMattermostCloud: () => void;\n}\n\nconst BillingSummary: React.FC<BillingSummaryProps> = ({isPaidTier, isFreeTrial, daysLeftOnTrial, onUpgradeMattermostCloud}: BillingSummaryProps) => {\n    const subscription = useSelector((state: GlobalState) => state.entities.cloud.subscription);\n    const product = useSelector((state: GlobalState) => {\n        if (state.entities.cloud.products && subscription) {\n            return state.entities.cloud.products[subscription?.product_id];\n        }\n        return undefined;\n    });\n\n    let body = noBillingHistory;\n\n    if (isFreeTrial) {\n        body = freeTrial(onUpgradeMattermostCloud, daysLeftOnTrial);\n    } else if (!isPaidTier) {\n        body = upgradeFreeTierMattermostCloud(onUpgradeMattermostCloud);\n    } else if (subscription?.last_invoice) {\n        const invoice = subscription!.last_invoice;\n        const fullCharges = invoice.line_items.filter((item) => item.type === 'full');\n        const partialCharges = invoice.line_items.filter((item) => item.type === 'partial');\n        body = (\n            lastInvoiceInfo(invoice, product, fullCharges, partialCharges)\n        );\n    }\n\n    return (\n        <div className='BillingSummary'>\n            {body}\n        </div>\n    );\n};\n\nexport default BillingSummary;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport classNames from 'classnames';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport {getMonthLong} from 'utils/i18n';\nimport {CloudLinks, CloudProducts} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils';\n\nimport Badge from 'components/widgets/badges/badge';\n\nimport './plan_details.scss';\n\nconst howBillingWorksLink = (\n    <a\n        target='_new'\n        rel='noopener noreferrer'\n        href={CloudLinks.BILLING_DOCS}\n        onClick={() => trackEvent('cloud_admin', 'click_how_billing_works', {screen: 'payment'})}\n    >\n        <FormattedMessage\n            id='admin.billing.subscription.planDetails.howBillingWorks'\n            defaultMessage='See how billing works'\n        />\n    </a>\n);\n\nexport const seatsAndSubscriptionDates = (locale: string, userCount: number, numberOfSeats: number, startDate: Date, endDate: Date) => {\n    return (\n        <div className='PlanDetails__seatsAndSubscriptionDates'>\n            <div className='PlanDetails__seats'>\n                <div className='PlanDetails__seats-total'>\n                    <FormattedMarkdownMessage\n                        id='admin.billing.subscription.planDetails.numberOfSeats'\n                        defaultMessage='{numberOfSeats} seats'\n                        values={{numberOfSeats}}\n                    />\n                </div>\n                <div\n                    className={classNames('PlanDetails__seats-registered', {\n                        overLimit: userCount > numberOfSeats,\n                    })}\n                >\n                    <FormattedMarkdownMessage\n                        id='admin.billing.subscription.planDetails.numberOfSeatsRegistered'\n                        defaultMessage='({userCount} currently registered)'\n                        values={{userCount}}\n                    />\n                    {(userCount > numberOfSeats) &&\n                        <OverlayTrigger\n                            delayShow={500}\n                            placement='bottom'\n                            overlay={(\n                                <Tooltip\n                                    id='BillingSubscriptions__seatOverageTooltip'\n                                    className='BillingSubscriptions__tooltip BillingSubscriptions__tooltip-left'\n                                    positionLeft={390}\n                                >\n                                    <div className='BillingSubscriptions__tooltipTitle'>\n                                        <FormattedMessage\n                                            id='admin.billing.subscription.planDetails.seatCountOverages'\n                                            defaultMessage='Seat count overages'\n                                        />\n                                    </div>\n                                    <div className='BillingSubscriptions__tooltipMessage'>\n                                        <FormattedMarkdownMessage\n                                            id='admin.billing.subscription.planDetails.prolongedOverages'\n                                            defaultMessage='Prolonged overages may result in additional charges.'\n                                        />\n                                        {howBillingWorksLink}\n                                    </div>\n                                </Tooltip>\n                            )}\n                        >\n                            <i className='icon-information-outline'/>\n                        </OverlayTrigger>\n                    }\n                </div>\n            </div>\n            <div className='PlanDetails__subscriptionDate'>\n                <FormattedMessage\n                    id='admin.billing.subscription.planDetails.startDate'\n                    defaultMessage='Start Date: '\n                />\n                <FormattedDate\n                    value={startDate}\n                    day='numeric'\n                    month={getMonthLong(locale)}\n                    year='numeric'\n                />\n            </div>\n            <div className='PlanDetails__subscriptionDate'>\n                <FormattedMessage\n                    id='admin.billing.subscription.planDetails.endDate'\n                    defaultMessage='End Date: '\n                />\n                <FormattedDate\n                    value={endDate}\n                    day='numeric'\n                    month={getMonthLong(locale)}\n                    year='numeric'\n                />\n            </div>\n        </div>\n    );\n};\n\nexport const planDetailsTopElements = (\n    userCount: number,\n    isPaidTier: boolean,\n    isFreeTrial: boolean,\n    userLimit: number,\n    subscriptionPlan: string | null,\n) => {\n    let userCountDisplay = (\n        <div className='PlanDetails__userCount'>\n            <FormattedMarkdownMessage\n                id='admin.billing.subscription.planDetails.userCount'\n                defaultMessage='{userCount} users'\n                values={{userCount}}\n            />\n        </div>\n    );\n\n    let productName;\n\n    if (!isPaidTier) {\n        userCountDisplay = (\n            <div\n                className={classNames('PlanDetails__userCount', {\n                    withinLimit: (userLimit - userCount) <= 5,\n                    overLimit: userCount > userLimit,\n                })}\n            >\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.planDetails.userCountWithLimit'\n                    defaultMessage='{userCount} / {userLimit} users'\n                    values={{userCount, userLimit}}\n                />\n            </div>\n        );\n\n        productName = (\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.productName.mmCloud'\n                defaultMessage='Mattermost Cloud'\n            />\n        );\n    }\n\n    switch (subscriptionPlan) {\n    case CloudProducts.PROFESSIONAL:\n        productName = (\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.productName.cloudProfessional'\n                defaultMessage='Cloud Professional'\n            />\n        );\n        break;\n    case CloudProducts.ENTERPRISE:\n        productName = (\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.productName.cloudEnterprise'\n                defaultMessage='Cloud Enterprise'\n            />\n        );\n        break;\n    case CloudProducts.STARTER:\n        productName = (\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.productName.cloudStarter'\n                defaultMessage='Cloud Starter'\n            />\n        );\n        break;\n    default:\n        productName = (\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.productName.cloudProfessional'\n                defaultMessage='Cloud Professional'\n            />\n        );\n        break;\n    }\n\n    const trialBadge = (\n        <Badge\n            className='TrialBadge'\n            show={isFreeTrial}\n        >\n            <FormattedMessage\n                id='admin.cloud.import.header.TrialBadge'\n                defaultMessage='Trial'\n            />\n        </Badge>\n    );\n\n    return (\n        <div className='PlanDetails__top'>\n            <div className='PlanDetails__productName'>\n                {productName} {trialBadge}\n            </div>\n            {userCountDisplay}\n        </div>\n    );\n};\n\nexport const currentPlanText = (isFreeTrial: boolean) => {\n    if (isFreeTrial) {\n        return null;\n    }\n    return (\n        <div className='PlanDetails__currentPlan'>\n            <i className='icon-check-circle'/>\n            <FormattedMessage\n                id='admin.billing.subscription.planDetails.currentPlan'\n                defaultMessage='Current Plan'\n            />\n        </div>\n    );\n};\n\nexport const getPlanDetailElements = (\n    userLimit: number,\n    isPaidTier: boolean,\n    product: any,\n    aboveUserLimit: number,\n) => {\n    let planPricing;\n    let planDetailsDescription;\n\n    if (isPaidTier) {\n        planPricing = (\n            <div className='PlanDetails__plan'>\n                <div className='PlanDetails_paidTier__planName'>\n                    {`$${product.price_per_seat.toFixed(2)}`}\n                    <FormattedMessage\n                        id='admin.billing.subscription.planDetails.perUserPerMonth'\n                        defaultMessage='/user/month. '\n                    />\n                    {howBillingWorksLink}\n                </div>\n            </div>\n        );\n        planDetailsDescription = null;\n    } else {\n        planPricing = (\n            <div className='PlanDetails__plan'>\n                <div className='PlanDetails__planName'>\n                    <FormattedMessage\n                        id='admin.billing.subscription.planDetails.tiers.free'\n                        defaultMessage='Free'\n                    />\n                </div>\n                <div className='PlanDetails__planCaveat'>\n                    <FormattedMarkdownMessage\n                        id='admin.billing.subscription.planDetails.upToXUsers'\n                        defaultMessage='up to {userLimit} users'\n                        values={{userLimit}}\n                    />\n                </div>\n            </div>\n        );\n        planDetailsDescription = (\n            <div className='PlanDetails__description'>\n                <div className='PlanDetails__planDetailsName'>\n                    {`$${product.price_per_seat.toFixed(2)}`}\n                </div>\n                <div className='PlanDetails__planDetailsName'>\n                    <FormattedMessage\n                        id='admin.billing.subscription.planDetails.planDetailsName.freeForXOrMoreUsers'\n                        defaultMessage='/user/month for {aboveUserLimit} or more users.'\n                        values={{aboveUserLimit}}\n                    />\n                </div>\n                {howBillingWorksLink}\n            </div>\n        );\n    }\n\n    return {\n        planPricing,\n        planDetailsDescription,\n    };\n};\n\nexport const featureList = (subscriptionPlan: string | null, isPaidTier: boolean) => {\n    const featuresFreeTier = [\n        localizeMessage('admin.billing.subscription.planDetails.features.10GBstoragePerUser', '10 GB storage per user'),\n        localizeMessage('admin.billing.subscription.planDetails.features.99uptime', '99.0% uptime'),\n        localizeMessage('admin.billing.subscription.planDetails.features.selfServiceDocumentation', 'Self-Service documentation and forum support'),\n        localizeMessage('admin.billing.subscription.planDetails.features.mfaAuthentication', 'Google, Gitlab, O365 & MFA Authentication'),\n        localizeMessage('admin.billing.subscription.planDetails.features.guestAccounts', 'Guest Accounts'),\n        localizeMessage('admin.billing.subscription.planDetails.features.unlimitedIntegrations', 'Unlimited Integrations'),\n    ];\n\n    const featuresCloudStarter = [\n        localizeMessage('admin.billing.subscription.planDetails.features.groupAndOneToOneMessaging', 'Group and one-to-one messaging, file sharing, and search'),\n        localizeMessage('admin.billing.subscription.planDetails.features.incidentCollaboration', 'Incident collaboration'),\n        localizeMessage('admin.billing.subscription.planDetails.features.unlimittedUsersAndMessagingHistory', 'Unlimited users & message history'),\n        localizeMessage('admin.billing.subscription.planDetails.features.mfa', 'Multi-Factor Authentication (MFA)'),\n        localizeMessage('admin.billing.subscription.planDetails.features.multilanguage', 'Multi-language translations'),\n    ];\n\n    const featuresCloudProfessional = [\n        localizeMessage('admin.billing.subscription.planDetails.features.advanceTeamPermission', 'Advanced team permissions'),\n        localizeMessage('admin.billing.subscription.planDetails.features.mfaEnforcement', 'MFA enforcement'),\n        localizeMessage('admin.billing.subscription.planDetails.features.multiplatformSso', 'Gitlab, Google, and O365 single sign-on'),\n        localizeMessage('admin.billing.subscription.planDetails.features.guestAccounts', 'Guest Accounts'),\n        localizeMessage('admin.billing.subscription.planDetails.features.channelModeration', 'Channel moderation'),\n        localizeMessage('admin.billing.subscription.planDetails.features.readOnlyChannels', 'Read-only announcement channels'),\n    ];\n\n    const featuresCloudEnterprise = [\n        localizeMessage('admin.billing.subscription.planDetails.features.enterpriseAdministration', 'Enterprise administration & SSO'),\n        localizeMessage('admin.billing.subscription.planDetails.features.autoComplianceExports', 'Automated compliance exports'),\n        localizeMessage('admin.billing.subscription.planDetails.features.customRetentionPolicies', 'Custom data retention policies'),\n        localizeMessage('admin.billing.subscription.planDetails.features.sharedChannels', 'Shared channels (coming soon)'),\n        localizeMessage('admin.billing.subscription.planDetails.features.enterpriseAdminSso', 'Enterprise administration & SSO'),\n        localizeMessage('admin.billing.subscription.planDetails.features.premiumSupport', 'Premium Support (optional upgrade)'),\n    ];\n\n    let features;\n\n    if (isPaidTier) {\n        switch (subscriptionPlan) {\n        case CloudProducts.PROFESSIONAL:\n            features = featuresCloudProfessional;\n            break;\n\n        case CloudProducts.STARTER:\n            features = featuresCloudStarter;\n            break;\n        case CloudProducts.ENTERPRISE:\n            features = featuresCloudEnterprise;\n            break;\n        default:\n            features = featuresCloudProfessional;\n            break;\n        }\n    } else {\n        features = featuresFreeTier;\n    }\n\n    return features?.map((feature, i) => (\n        <div\n            key={`PlanDetails__feature${i}`}\n            className='PlanDetails__feature'\n        >\n            <i className='icon-check'/>\n            <span>{feature}</span>\n        </div>\n    ));\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {GlobalState} from 'types/store';\n\nimport {seatsAndSubscriptionDates, getPlanDetailElements, planDetailsTopElements, currentPlanText, featureList} from './plan_details';\n\nimport './plan_details.scss';\n\ntype PlanDetailsProps = {\n    isFreeTrial: boolean;\n    subscriptionPlan: string | null;\n}\n/* eslint-disable react/prop-types */\nconst PlanDetails: React.FC<PlanDetailsProps> = ({isFreeTrial, subscriptionPlan}) => {\n    const locale = useSelector((state: GlobalState) => getCurrentLocale(state));\n    const userCount = useSelector((state: GlobalState) => state.entities.admin.analytics!.TOTAL_USERS) as number;\n    const userLimit = parseInt(useSelector((state: GlobalState) => getConfig(state).ExperimentalCloudUserLimit) || '0', 10);\n    const aboveUserLimit = userLimit + 1;\n    const subscription = useSelector((state: GlobalState) => state.entities.cloud.subscription);\n    const product = useSelector((state: GlobalState) => {\n        if (state.entities.cloud.products && subscription) {\n            return state.entities.cloud.products[subscription?.product_id];\n        }\n        return undefined;\n    });\n\n    if (!subscription || !product) {\n        return null;\n    }\n\n    const showSeatsAndSubscriptionDates = false;\n    const isPaidTier = Boolean(subscription?.is_paid_tier === 'true');\n\n    const {\n        planPricing,\n        planDetailsDescription,\n    } = getPlanDetailElements(userLimit, isPaidTier, product, aboveUserLimit);\n\n    return (\n        <div className='PlanDetails'>\n            {planDetailsTopElements(userCount, isPaidTier, isFreeTrial, userLimit, subscriptionPlan)}\n            {planPricing}\n            {showSeatsAndSubscriptionDates && seatsAndSubscriptionDates(locale, userCount, subscription.seats, new Date(subscription.start_at), new Date(subscription.end_at))}\n            {planDetailsDescription}\n            <div className='PlanDetails__teamAndChannelCount'>\n                <FormattedMessage\n                    id='admin.billing.subscription.planDetails.features.unlimitedTeamsAndChannels'\n                    defaultMessage='Unlimited teams, channels, and search history'\n                />\n            </div>\n            {featureList(subscriptionPlan, isPaidTier)}\n            {currentPlanText(isFreeTrial)}\n        </div>\n    );\n};\n\nexport default PlanDetails;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport classNames from 'classnames';\n\nimport './alert_banner.scss';\n\ntype Props = {\n    mode: 'danger' | 'warning' | 'info';\n    title?: React.ReactNode;\n    message: React.ReactNode;\n    className?: string;\n    onDismiss?: () => void;\n}\n\nconst AlertBanner: React.FC<Props> = (props: Props) => {\n    const {mode, title, message, className, onDismiss} = props;\n\n    return (\n        <div className={classNames('AlertBanner', mode, className)}>\n            <div className='AlertBanner__icon'>\n                {mode === 'info' &&\n                    <i className='icon-alert-circle-outline'/>\n                }\n                {mode !== 'info' &&\n                    <i className='icon-alert-outline'/>\n                }\n            </div>\n            <div className='AlertBanner__body'>\n                {title &&\n                    <div className='AlertBanner__title'>\n                        {title}\n                    </div>\n                }\n                <div\n                    className={classNames({\n                        AlertBanner__message: Boolean(title),\n                    })}\n                >\n                    {message}\n                </div>\n            </div>\n            {onDismiss &&\n                <button\n                    className='AlertBanner__closeButton'\n                    onClick={onDismiss}\n                >\n                    <i className='icon-close'/>\n                </button>\n            }\n        </div>\n    );\n};\n\nexport default AlertBanner;\n","export default __webpack_public_path__ + \"files/b080268f08da4093c10332e3f3ab959e.svg\";","export default __webpack_public_path__ + \"files/91370d87ebb29d869ab98e8be7303eac.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedDate, FormattedMessage, FormattedNumber} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {getCloudProducts, getCloudSubscription, getInvoices} from 'matterfoss-redux/actions/cloud';\nimport {Client4} from 'matterfoss-redux/client';\nimport {Invoice} from 'matterfoss-redux/types/cloud';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nimport {pageVisited, trackEvent} from 'actions/telemetry_actions';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport noBillingHistoryGraphic from 'images/no_billing_history_graphic.svg';\nimport {CloudLinks} from 'utils/constants';\n\nimport './billing_history.scss';\n\ntype Props = {\n\n};\n\nconst PAGE_LENGTH = 4;\n\nconst noBillingHistorySection = (\n    <div className='BillingHistory__noHistory'>\n        <img\n            className='BillingHistory__noHistory-graphic'\n            src={noBillingHistoryGraphic}\n        />\n        <div className='BillingHistory__noHistory-message'>\n            <FormattedMessage\n                id='admin.billing.history.noBillingHistory'\n                defaultMessage='In the future, this is where your billing history will show.'\n            />\n        </div>\n        <a\n            target='_new'\n            rel='noopener noreferrer'\n            href={CloudLinks.BILLING_DOCS}\n            className='BillingHistory__noHistory-link'\n            onClick={() => trackEvent('cloud_admin', 'click_billing_history', {screen: 'billing'})}\n        >\n            <FormattedMessage\n                id='admin.billing.history.seeHowBillingWorks'\n                defaultMessage='See how billing works'\n            />\n        </a>\n    </div>\n);\n\nconst getPaymentStatus = (status: string) => {\n    switch (status) {\n    case 'failed':\n        return (\n            <div className='BillingHistory__paymentStatus failed'>\n                <i className='icon icon-alert-outline'/>\n                <FormattedMessage\n                    id='admin.billing.history.paymentFailed'\n                    defaultMessage='Payment failed'\n                />\n            </div>\n        );\n    case 'paid':\n        return (\n            <div className='BillingHistory__paymentStatus paid'>\n                <i className='icon icon-check-circle-outline'/>\n                <FormattedMessage\n                    id='admin.billing.history.paid'\n                    defaultMessage='Paid'\n                />\n            </div>\n        );\n    default:\n        return (\n            <div className='BillingHistory__paymentStatus pending'>\n                <i className='icon icon-check-circle-outline'/>\n                <FormattedMessage\n                    id='admin.billing.history.pending'\n                    defaultMessage='Pending'\n                />\n            </div>\n        );\n    }\n};\n\nconst BillingHistory: React.FC<Props> = () => {\n    const dispatch = useDispatch();\n    const invoices = useSelector((state: GlobalState) => state.entities.cloud.invoices);\n    const subscription = useSelector((state: GlobalState) => state.entities.cloud.subscription);\n    const product = useSelector((state: GlobalState) => {\n        if (state.entities.cloud.products && subscription) {\n            return state.entities.cloud.products[subscription?.product_id];\n        }\n        return undefined;\n    });\n\n    const [billingHistory, setBillingHistory] = useState<Invoice[] | undefined>(undefined);\n    const [firstRecord, setFirstRecord] = useState(1);\n\n    const previousPage = () => {\n        if (firstRecord > PAGE_LENGTH) {\n            setFirstRecord(firstRecord - PAGE_LENGTH);\n        }\n    };\n    const nextPage = () => {\n        if (invoices && (firstRecord + PAGE_LENGTH) < Object.values(invoices).length) {\n            setFirstRecord(firstRecord + PAGE_LENGTH);\n        }\n\n        // TODO: When server paging, check if there are more invoices\n    };\n    useEffect(() => {\n        dispatch(getCloudProducts());\n        dispatch(getCloudSubscription());\n        dispatch(getInvoices());\n        pageVisited('cloud_admin', 'pageview_billing_history');\n    }, []);\n\n    useEffect(() => {\n        if (invoices && Object.values(invoices).length) {\n            const invoicesByDate = Object.values(invoices).sort((a, b) => b.period_start - a.period_start);\n            setBillingHistory(invoicesByDate.slice(firstRecord - 1, (firstRecord - 1) + PAGE_LENGTH));\n        }\n    }, [invoices, firstRecord]);\n\n    const paging = (\n        <div className='BillingHistory__paging'>\n            <FormattedMarkdownMessage\n                id='admin.billing.history.pageInfo'\n                defaultMessage='{startRecord} - {endRecord} of {totalRecords}'\n                values={{\n                    startRecord: firstRecord,\n                    endRecord: Math.min(firstRecord + (PAGE_LENGTH - 1), Object.values(invoices || []).length),\n                    totalRecords: Object.values(invoices || []).length,\n                }}\n            />\n            <button\n                onClick={previousPage}\n                disabled={firstRecord <= PAGE_LENGTH}\n            >\n                <i className='icon icon-chevron-left'/>\n            </button>\n            <button\n                onClick={nextPage}\n                disabled={!invoices || (firstRecord + PAGE_LENGTH) >= Object.values(invoices).length}\n            >\n                <i className='icon icon-chevron-right'/>\n            </button>\n        </div>\n    );\n\n    const billingHistoryTable = billingHistory && (\n        <>\n            <table className='BillingHistory__table'>\n                <tr className='BillingHistory__table-header'>\n                    <th>\n                        <FormattedMessage\n                            id='admin.billing.history.date'\n                            defaultMessage='Date'\n                        />\n                    </th>\n                    <th>\n                        <FormattedMessage\n                            id='admin.billing.history.description'\n                            defaultMessage='Description'\n                        />\n                    </th>\n                    <th className='BillingHistory__table-headerTotal'>\n                        <FormattedMessage\n                            id='admin.billing.history.total'\n                            defaultMessage='Total'\n                        />\n                    </th>\n                    <th>\n                        <FormattedMessage\n                            id='admin.billing.history.status'\n                            defaultMessage='Status'\n                        />\n                    </th>\n                    <th>{''}</th>\n                </tr>\n                {billingHistory.map((invoice: Invoice) => {\n                    const fullUsers = invoice.line_items.filter((item) => item.type === 'full').reduce((val, item) => val + item.quantity, 0);\n                    const partialUsers = invoice.line_items.filter((item) => item.type === 'partial').reduce((val, item) => val + item.quantity, 0);\n\n                    return (\n                        <tr\n                            className='BillingHistory__table-row'\n                            key={invoice.id}\n                        >\n                            <td>\n                                <FormattedDate\n                                    value={new Date(invoice.period_start)}\n                                    month='2-digit'\n                                    day='2-digit'\n                                    year='numeric'\n                                    timeZone='UTC'\n                                />\n                            </td>\n                            <td>\n                                <div>{product?.name}</div>\n                                <div className='BillingHistory__table-bottomDesc'>\n                                    <FormattedMarkdownMessage\n                                        id='admin.billing.history.usersAndRates'\n                                        defaultMessage='{fullUsers} users at full rate, {partialUsers} users with partial charges'\n                                        values={{\n                                            fullUsers,\n                                            partialUsers,\n                                        }}\n                                    />\n                                </div>\n                            </td>\n                            <td className='BillingHistory__table-total'>\n                                <FormattedNumber\n                                    value={(invoice.total / 100.0)}\n                                    // eslint-disable-next-line react/style-prop-object\n                                    style='currency'\n                                    currency='USD'\n                                />\n                            </td>\n                            <td>\n                                {getPaymentStatus(invoice.status)}\n                            </td>\n                            <td className='BillingHistory__table-invoice'>\n                                <a\n                                    target='_new'\n                                    rel='noopener noreferrer'\n                                    href={Client4.getInvoicePdfUrl(invoice.id)}\n                                >\n                                    <i className='icon icon-file-pdf-outline'/>\n                                </a>\n                            </td>\n                        </tr>\n                    );\n                })}\n            </table>\n            {paging}\n        </>\n    );\n\n    return (\n        <div className='wrapper--fixed BillingHistory'>\n            <FormattedAdminHeader\n                id='admin.billing.history.title'\n                defaultMessage='Billing History'\n            />\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <div className='BillingHistory__card'>\n                        <div className='BillingHistory__cardHeader'>\n                            <div className='BillingHistory__cardHeaderText'>\n                                <div className='BillingHistory__cardHeaderText-top'>\n                                    <FormattedMessage\n                                        id='admin.billing.history.transactions'\n                                        defaultMessage='Transactions'\n                                    />\n                                </div>\n                                <div className='BillingHistory__cardHeaderText-bottom'>\n                                    <FormattedMessage\n                                        id='admin.billing.history.allPaymentsShowHere'\n                                        defaultMessage='All of your monthly payments will show here'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className='BillingHistory__cardBody'>\n                            {invoices != null && (\n                                <>\n                                    {billingHistory ?\n                                        billingHistoryTable :\n                                        noBillingHistorySection}\n                                </>\n                            )}\n                            {invoices == null && (\n                                <div className='BillingHistory__spinner'>\n                                    <LoadingSpinner/>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BillingHistory;\n","export default __webpack_public_path__ + \"files/b7af82608dd270dcf670e1fdf7890d0a.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport noCompanyInfoGraphic from 'images/no_company_info_graphic.svg';\nimport {GlobalState} from 'types/store';\n\nimport './company_info_display.scss';\n\nconst addInfoButton = (\n    <div className='CompanyInfoDisplay__addInfo'>\n        <BlockableLink\n            to='/admin_console/billing/company_info_edit'\n            className='CompanyInfoDisplay__addInfoButton'\n            onClick={() => trackEvent('cloud_admin', 'click_add_company_info')}\n        >\n            <i className='icon icon-plus'/>\n            <FormattedMessage\n                id='admin.billing.company_info.add'\n                defaultMessage='Add Company Information'\n            />\n        </BlockableLink>\n    </div>\n);\n\nconst noCompanyInfoSection = (\n    <div className='CompanyInfoDisplay__noCompanyInfo'>\n        <img\n            className='ComapnyInfoDisplay__noCompanyInfo-graphic'\n            src={noCompanyInfoGraphic}\n        />\n        <div className='CompanyInfoDisplay__noCompanyInfo-message'>\n            <FormattedMessage\n                id='admin.billing.company_info_display.noCompanyInfo'\n                defaultMessage='There is currently no company information on file.'\n            />\n        </div>\n        <BlockableLink\n            to='/admin_console/billing/company_info_edit'\n            className='CompanyInfoDisplay__noCompanyInfo-link'\n            onClick={() => trackEvent('cloud_admin', 'click_add_company_info')}\n        >\n            <FormattedMessage\n                id='admin.billing.company_info.add'\n                defaultMessage='Add Company Information'\n            />\n        </BlockableLink>\n    </div>\n);\n\nconst CompanyInfoDisplay: React.FC = () => {\n    const companyInfo = useSelector((state: GlobalState) => state.entities.cloud.customer);\n\n    if (!companyInfo) {\n        return null;\n    }\n\n    let body = noCompanyInfoSection;\n    const address = companyInfo?.company_address?.line1 ? companyInfo.company_address : companyInfo?.billing_address;\n    if (address?.line1) {\n        body = (\n            <div className='CompanyInfoDisplay__companyInfo'>\n                <div className='CompanyInfoDisplay__companyInfo-text'>\n                    <div className='CompanyInfoDisplay__companyInfo-name'>\n                        {companyInfo?.name}\n                    </div>\n                    {Boolean(companyInfo.num_employees) &&\n                        <div className='CompanyInfoDisplay__companyInfo-numEmployees'>\n                            <FormattedMarkdownMessage\n                                id='admin.billing.company_info.employees'\n                                defaultMessage='{employees} employees'\n                                values={{employees: companyInfo.num_employees}}\n                            />\n                        </div>\n                    }\n                    <div className='CompanyInfoDisplay__companyInfo-addressTitle'>\n                        <FormattedMessage\n                            id='admin.billing.company_info.companyAddress'\n                            defaultMessage='Company Address'\n                        />\n                    </div>\n                    <div className='CompanyInfoDisplay__companyInfo-address'>\n                        <div>{address.line1}</div>\n                        {address.line2 && <div>{address.line2}</div>}\n                        <div>{`${address.city}, ${address.state}, ${address.postal_code}`}</div>\n                        <div>{address.country}</div>\n                    </div>\n                </div>\n                <div className='CompanyInfoDisplay__companyInfo-edit'>\n                    <BlockableLink\n                        to='/admin_console/billing/company_info_edit'\n                        className='CompanyInfoDisplay__companyInfo-editButton'\n                        onClick={() => trackEvent('cloud_admin', 'click_edit_company_info')}\n                    >\n                        <i className='icon icon-pencil-outline'/>\n                    </BlockableLink>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className='CompanyInfoDisplay'>\n            <div className='CompanyInfoDisplay__header'>\n                <div className='CompanyInfoDisplay__headerText'>\n                    <div className='CompanyInfoDisplay__headerText-top'>\n                        <FormattedMessage\n                            id='admin.billing.company_info_display.companyDetails'\n                            defaultMessage='Company Details'\n                        />\n                    </div>\n                    <div className='CompanyInfoDisplay__headerText-bottom'>\n                        <FormattedMessage\n                            id='admin.billing.company_info_display.provideDetails'\n                            defaultMessage='Provide your company name and address'\n                        />\n                    </div>\n                </div>\n                {!address?.line1 && addInfoButton}\n            </div>\n            <div className='CompanyInfoDisplay__body'>\n                {body}\n            </div>\n        </div>\n    );\n};\n\nexport default CompanyInfoDisplay;\n","export default __webpack_public_path__ + \"files/e373035e8d2ea1217d621e8ed0e47c35.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useSelector} from 'react-redux';\n\nimport {trackEvent} from 'actions/telemetry_actions';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport CardImage from 'components/payment_form/card_image';\nimport noPaymentInfoGraphic from 'images/no_payment_info_graphic.svg';\nimport {GlobalState} from 'types/store';\n\nimport './payment_info_display.scss';\n\nconst addInfoButton = (\n    <div className='PaymentInfoDisplay__addInfo'>\n        <BlockableLink\n            to='/admin_console/billing/payment_info_edit'\n            className='PaymentInfoDisplay__addInfoButton'\n            onClick={() => trackEvent('cloud_admin', 'click_add_credit_card')}\n        >\n            <i className='icon icon-plus'/>\n            <FormattedMessage\n                id='admin.billing.payment_info.add'\n                defaultMessage='Add a Credit Card'\n            />\n        </BlockableLink>\n    </div>\n);\n\nconst noPaymentInfoSection = (\n    <div className='PaymentInfoDisplay__noPaymentInfo'>\n        <img\n            className='ComapnyInfoDisplay__noPaymentInfo-graphic'\n            src={noPaymentInfoGraphic}\n        />\n        <div className='PaymentInfoDisplay__noPaymentInfo-message'>\n            <FormattedMessage\n                id='admin.billing.payment_info_display.noPaymentInfo'\n                defaultMessage='There are currently no credit cards on file.'\n            />\n        </div>\n        <BlockableLink\n            to='/admin_console/billing/payment_info_edit'\n            className='PaymentInfoDisplay__noPaymentInfo-link'\n            onClick={() => trackEvent('cloud_admin', 'click_add_credit_card')}\n        >\n            <FormattedMessage\n                id='admin.billing.payment_info.add'\n                defaultMessage='Add a Credit Card'\n            />\n        </BlockableLink>\n    </div>\n);\n\nconst PaymentInfoDisplay: React.FC = () => {\n    const paymentInfo = useSelector((state: GlobalState) => state.entities.cloud.customer);\n\n    if (!paymentInfo) {\n        return null;\n    }\n\n    let body = noPaymentInfoSection;\n\n    if (paymentInfo?.payment_method && paymentInfo?.billing_address) {\n        const address = paymentInfo.billing_address;\n        body = (\n            <div className='PaymentInfoDisplay__paymentInfo'>\n                <div className='PaymentInfoDisplay__paymentInfo-text'>\n                    <CardImage brand={paymentInfo.payment_method.card_brand}/>\n                    <div className='PaymentInfoDisplay__paymentInfo-cardInfo'>\n                        <FormattedMarkdownMessage\n                            id='admin.billing.payment_info.cardBrandAndDigits'\n                            defaultMessage='{brand} ending in {digits}'\n                            values={{\n                                brand: paymentInfo.payment_method.card_brand,\n                                digits: paymentInfo.payment_method.last_four,\n                            }}\n                        />\n                        <br/>\n                        <FormattedMarkdownMessage\n                            id='admin.billing.payment_info.cardExpiry'\n                            defaultMessage='Expires {month}/{year}'\n                            values={{\n                                month: String(paymentInfo.payment_method.exp_month).padStart(2, '0'),\n                                year: String(paymentInfo.payment_method.exp_year).padStart(2, '0'),\n                            }}\n                        />\n                    </div>\n                    <div className='PaymentInfoDisplay__paymentInfo-addressTitle'>\n                        <FormattedMessage\n                            id='admin.billing.payment_info.billingAddress'\n                            defaultMessage='Billing Address'\n                        />\n                    </div>\n                    <div className='PaymentInfoDisplay__paymentInfo-address'>\n                        <div>{address.line1}</div>\n                        {address.line2 && <div>{address.line2}</div>}\n                        <div>{`${address.city}, ${address.state}, ${address.postal_code}`}</div>\n                        <div>{address.country}</div>\n                    </div>\n                </div>\n                <div className='PaymentInfoDisplay__paymentInfo-edit'>\n                    { // TODO: remove payment info?\n                    /* <a\n                        href='#'\n                        onClick={() => null}\n                        className='PaymentInfoDisplay__paymentInfo-editButton'\n                    >\n                        <i className='icon icon-trash-can-outline'/>\n                    </a> */}\n                    <BlockableLink\n                        to='/admin_console/billing/payment_info_edit'\n                        className='PaymentInfoDisplay__paymentInfo-editButton'\n                    >\n                        <i className='icon icon-pencil-outline'/>\n                    </BlockableLink>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className='PaymentInfoDisplay'>\n            <div className='PaymentInfoDisplay__header'>\n                <div className='PaymentInfoDisplay__headerText'>\n                    <div className='PaymentInfoDisplay__headerText-top'>\n                        <FormattedMessage\n                            id='admin.billing.payment_info_display.savedPaymentDetails'\n                            defaultMessage='Your saved payment details'\n                        />\n                    </div>\n                    <div className='PaymentInfoDisplay__headerText-bottom'>\n                        <FormattedMessage\n                            id='admin.billing.payment_info_display.allCardsAccepted'\n                            defaultMessage='All major credit cards are accepted.'\n                        />\n                    </div>\n                </div>\n                {!(paymentInfo?.payment_method && paymentInfo?.billing_address) && addInfoButton}\n            </div>\n            <div className='PaymentInfoDisplay__body'>\n                {body}\n            </div>\n        </div>\n    );\n};\n\nexport default PaymentInfoDisplay;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\n\nimport {Stripe} from '@stripe/stripe-js';\nimport {loadStripe} from '@stripe/stripe-js/pure'; // https://github.com/stripe/stripe-js#importing-loadstripe-without-side-effects\nimport {Elements} from '@stripe/react-stripe-js';\n\nimport {getCloudCustomer} from 'matterfoss-redux/actions/cloud';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\n\nimport {completeStripeAddPaymentMethod} from 'actions/cloud';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport PaymentForm from 'components/payment_form/payment_form';\nimport {STRIPE_CSS_SRC, STRIPE_PUBLIC_KEY} from 'components/payment_form/stripe';\nimport SaveButton from 'components/save_button';\nimport {areBillingDetailsValid, BillingDetails} from 'types/cloud/sku';\nimport {GlobalState} from 'types/store';\nimport {CloudLinks} from 'utils/constants';\nimport {browserHistory} from 'utils/browser_history';\n\nimport './payment_info_edit.scss';\nimport AlertBanner from 'components/alert_banner';\n\nlet stripePromise: Promise<Stripe | null>;\n\nconst PaymentInfoEdit: React.FC = () => {\n    const dispatch = useDispatch();\n    const isDevMode = useSelector((state: GlobalState) => getConfig(state).EnableDeveloper === 'true');\n    const paymentInfo = useSelector((state: GlobalState) => state.entities.cloud.customer);\n\n    const [showCreditCardWarning, setShowCreditCardWarning] = useState(true);\n    const [isSaving, setIsSaving] = useState(false);\n    const [isValid, setIsValid] = useState<boolean | undefined>(undefined);\n    const [isServerError, setIsServerError] = useState(false);\n    const [billingDetails, setBillingDetails] = useState<BillingDetails>({\n        address: paymentInfo?.billing_address?.line1 || '',\n        address2: paymentInfo?.billing_address?.line2 || '',\n        city: paymentInfo?.billing_address?.city || '',\n        state: paymentInfo?.billing_address?.state || '',\n        country: paymentInfo?.billing_address?.country || '',\n        postalCode: paymentInfo?.billing_address?.postal_code || '',\n        name: '',\n        card: {} as any,\n    });\n\n    useEffect(() => {\n        dispatch(getCloudCustomer());\n    }, []);\n\n    const onPaymentInput = (billing: BillingDetails) => {\n        setIsServerError(false);\n        setIsValid(areBillingDetailsValid(billing));\n        setBillingDetails(billing);\n    };\n\n    const handleSubmit = async () => {\n        setIsSaving(true);\n        const setPaymentMethod = completeStripeAddPaymentMethod((await stripePromise)!, billingDetails!, isDevMode);\n        const success = await setPaymentMethod();\n\n        if (success) {\n            browserHistory.push('/admin_console/billing/payment_info');\n        } else {\n            setIsServerError(true);\n        }\n\n        setIsSaving(false);\n    };\n\n    if (!stripePromise) {\n        stripePromise = loadStripe(STRIPE_PUBLIC_KEY);\n    }\n\n    return (\n        <div className='wrapper--fixed PaymentInfoEdit'>\n            <div className='admin-console__header with-back'>\n                <div>\n                    <BlockableLink\n                        to='/admin_console/billing/payment_info'\n                        className='fa fa-angle-left back'\n                    />\n                    <FormattedMessage\n                        id='admin.billing.payment_info_edit.title'\n                        defaultMessage='Edit Payment Information'\n                    />\n                </div>\n            </div>\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    {showCreditCardWarning &&\n                        <AlertBanner\n                            mode='info'\n                            title={\n                                <FormattedMessage\n                                    id='admin.billing.payment_info_edit.creditCardWarningTitle'\n                                    defaultMessage='NOTE: Your card will not be charged at this time'\n                                />\n                            }\n                            message={\n                                <>\n                                    <FormattedMarkdownMessage\n                                        id='admin.billing.payment_info_edit.creditCardWarningDescription'\n                                        defaultMessage='Your credit card will be charged based on the number of users you have at the end of the monthly billing cycle. '\n                                    />\n                                    <a\n                                        target='_new'\n                                        rel='noopener noreferrer'\n                                        href={CloudLinks.BILLING_DOCS}\n                                    >\n                                        <FormattedMessage\n                                            id='admin.billing.subscription.planDetails.howBillingWorks'\n                                            defaultMessage='See how billing works'\n                                        />\n                                    </a>\n                                </>\n                            }\n                            onDismiss={() => setShowCreditCardWarning(false)}\n                        />\n                    }\n                    <div className='PaymentInfoEdit__card'>\n                        <Elements\n                            options={{fonts: [{cssSrc: STRIPE_CSS_SRC}]}}\n                            stripe={stripePromise}\n                        >\n                            <PaymentForm\n                                className='PaymentInfoEdit__paymentForm'\n                                onInputChange={onPaymentInput}\n                                initialBillingDetails={billingDetails}\n                            />\n                        </Elements>\n                    </div>\n                </div>\n            </div>\n            <div className='admin-console-save'>\n                <SaveButton\n                    saving={isSaving}\n                    disabled={!billingDetails || !isValid}\n                    onClick={handleSubmit}\n                    defaultMessage={(\n                        <FormattedMessage\n                            id='admin.billing.payment_info_edit.save'\n                            defaultMessage='Save credit card'\n                        />\n                    )}\n                />\n                <BlockableLink\n                    className='cancel-button'\n                    to='/admin_console/billing/payment_info'\n                >\n                    <FormattedMessage\n                        id='admin.billing.payment_info_edit.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </BlockableLink>\n                {isValid === false &&\n                    <span className='PaymentInfoEdit__error'>\n                        <i className='icon icon-alert-outline'/>\n                        <FormattedMessage\n                            id='admin.billing.payment_info_edit.formError'\n                            defaultMessage='There are errors in the form above'\n                        />\n                    </span>\n                }\n                {isServerError &&\n                    <span className='PaymentInfoEdit__error'>\n                        <i className='icon icon-alert-outline'/>\n                        <FormattedMessage\n                            id='admin.billing.payment_info_edit.serverError'\n                            defaultMessage='Something went wrong while saving payment infomation'\n                        />\n                    </span>\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default PaymentInfoEdit;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {AnalyticsRow} from 'matterfoss-redux/types/admin';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport './feature_discovery.scss';\n\ntype Props = {\n    featureName: string;\n\n    titleID: string;\n    titleDefault: string;\n\n    copyID: string;\n    copyDefault: string;\n\n    learnMoreURL: string;\n\n    featureDiscoveryImage: JSX.Element;\n\n    stats?: Dictionary<number | AnalyticsRow[]>;\n    actions: {\n        requestTrialLicense: (users: number, termsAccepted: boolean, receiveEmailsAccepted: boolean, featureName: string) => Promise<{error?: string; data?: null}>;\n        getLicenseConfig: () => void;\n    };\n}\n\ntype State = {\n    gettingTrial: boolean;\n    gettingTrialError: string | null;\n}\n\nexport default class FeatureDiscovery extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            gettingTrial: false,\n            gettingTrialError: null,\n        };\n    }\n\n    requestLicense = async (e: React.MouseEvent) => {\n        e.preventDefault();\n        if (this.state.gettingTrial) {\n            return;\n        }\n        this.setState({gettingTrial: true, gettingTrialError: null});\n        let users = 0;\n        if (this.props.stats && (typeof this.props.stats.TOTAL_USERS === 'number')) {\n            users = this.props.stats.TOTAL_USERS;\n        }\n        const requestedUsers = Math.max(users, 30);\n        const {error} = await this.props.actions.requestTrialLicense(requestedUsers, true, true, this.props.featureName);\n        if (error) {\n            this.setState({gettingTrialError: error});\n        }\n        this.setState({gettingTrial: false});\n        this.props.actions.getLicenseConfig();\n    }\n\n    render() {\n        const {\n            titleID,\n            titleDefault,\n            copyID,\n            copyDefault,\n            learnMoreURL,\n            featureDiscoveryImage,\n        } = this.props;\n\n        let gettingTrialError: React.ReactNode = '';\n        if (this.state.gettingTrialError) {\n            gettingTrialError = (\n                <p className='trial-error'>\n                    <FormattedMarkdownMessage\n                        id='admin.license.trial-request.error'\n                        defaultMessage='Trial license could not be retrieved. Visit [https://mattermost.com/trial/](https://mattermost.com/trial/) to request a license.'\n                    />\n                </p>\n            );\n        }\n        return (\n            <div className='FeatureDiscovery'>\n\n                <div className='FeatureDiscovery_copyWrapper'>\n                    <div\n                        className='FeatureDiscovery_title'\n                        data-testid='featureDiscovery_title'\n                    >\n                        <FormattedMessage\n                            id={titleID}\n                            defaultMessage={titleDefault}\n                        />\n                    </div>\n                    <div className='FeatureDiscovery_copy'>\n                        <FormattedMessage\n                            id={copyID}\n                            defaultMessage={copyDefault}\n                        />\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        data-testid='featureDiscovery_primaryCallToAction'\n                        onClick={this.requestLicense}\n                    >\n                        <LoadingWrapper\n                            loading={this.state.gettingTrial}\n                            text={Utils.localizeMessage('admin.license.trial-request.loading', 'Getting trial')}\n                        >\n                            <FormattedMessage\n                                id='admin.ldap_feature_discovery.call_to_action.primary'\n                                defaultMessage='Start trial'\n                            />\n                        </LoadingWrapper>\n                    </button>\n                    <a\n                        className='btn btn-secondary'\n                        href={learnMoreURL}\n                        data-testid='featureDiscovery_secondaryCallToAction'\n                        target='_blank'\n                        rel='noopener noreferrer'\n                    >\n                        <FormattedMessage\n                            id='admin.ldap_feature_discovery.call_to_action.secondary'\n                            defaultMessage='Learn more'\n                        />\n                    </a>\n                    {gettingTrialError}\n                    <p className='trial-legal-terms'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.trial-request.accept-terms'\n                            defaultMessage='By clicking **Start trial**, I agree to the [MatterFOSS Software Evaluation Agreement](!https://mattermost.com/software-evaluation-agreement/), [Privacy Policy](!https://mattermost.com/privacy-policy/), and receiving product emails.'\n                        />\n                    </p>\n                </div>\n\n                <div className='FeatureDiscovery_imageWrapper'>\n                    {featureDiscoveryImage}\n                </div>\n\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\n\nimport {getLicenseConfig} from 'matterfoss-redux/actions/general';\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {requestTrialLicense} from 'actions/admin_actions';\n\nimport {GlobalState} from 'types/store';\n\nimport FeatureDiscovery from './feature_discovery';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        stats: state.entities.admin.analytics,\n    };\n}\n\ntype Actions = {\n    requestTrialLicense: () => Promise<{error?: string; data?: null}>;\n    getLicenseConfig: () => void;\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            requestTrialLicense,\n            getLicenseConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FeatureDiscovery);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst LdapSVG = () => (\n    <svg\n        width='268'\n        height='220'\n        viewBox='0 0 268 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g\n            clipPath='url(#clip0)'\n            filter='url(#filter0_d)'\n        >\n            <g opacity='0.8'>\n                <path\n                    opacity='0.8'\n                    d='M264 0H138.707V140.092H264V0Z'\n                    fill='var(--center-channel-color)'\n                    fillOpacity='0.04'\n                />\n            </g>\n            <path\n                d='M261.927 93.5345H140.777V137.041H261.927V93.5345Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M155.416 103.854H150.721V126.148H155.416V103.854Z'\n                fill='var(--button-bg)'\n            />\n            <g opacity='0.7'>\n                <path\n                    opacity='0.7'\n                    d='M164.683 103.854H159.988V126.148H164.683V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.6'>\n                <path\n                    opacity='0.6'\n                    d='M173.953 103.854H169.259V126.148H173.953V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M183.221 103.854H178.526V126.148H183.221V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M192.488 103.854H187.794V126.148H192.488V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.4'>\n                <path\n                    opacity='0.4'\n                    d='M201.756 103.854H197.061V126.148H201.756V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.3'>\n                <path\n                    opacity='0.3'\n                    d='M211.026 103.854H206.332V126.148H211.026V103.854Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <path\n                d='M244.776 126.206C251.033 126.206 256.105 121.125 256.105 114.857C256.105 108.59 251.033 103.509 244.776 103.509C238.52 103.509 233.448 108.59 233.448 114.857C233.448 121.125 238.52 126.206 244.776 126.206Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M261.927 48.3324H140.777V91.8395H261.927V48.3324Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M155.416 58.6518H150.721V80.9459H155.416V58.6518Z'\n                fill='var(--button-bg)'\n            />\n            <g opacity='0.7'>\n                <path\n                    opacity='0.7'\n                    d='M164.683 58.6518H159.988V80.9459H164.683V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.6'>\n                <path\n                    opacity='0.6'\n                    d='M173.953 58.6518H169.259V80.9459H173.953V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M183.221 58.6518H178.526V80.9459H183.221V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M192.488 58.6518H187.794V80.9459H192.488V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.4'>\n                <path\n                    opacity='0.4'\n                    d='M201.756 58.6518H197.061V80.9459H201.756V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.3'>\n                <path\n                    opacity='0.3'\n                    d='M211.026 58.6518H206.332V80.9459H211.026V58.6518Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <path\n                d='M244.776 81.007C251.033 81.007 256.105 75.926 256.105 69.6584C256.105 63.3907 251.033 58.3098 244.776 58.3098C238.52 58.3098 233.448 63.3907 233.448 69.6584C233.448 75.926 238.52 81.007 244.776 81.007Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M261.927 3.13034H140.777V46.6374H261.927V3.13034Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M155.416 13.4528H150.721V35.7469H155.416V13.4528Z'\n                fill='var(--button-bg)'\n            />\n            <g opacity='0.7'>\n                <path\n                    opacity='0.7'\n                    d='M164.683 13.4528H159.988V35.7469H164.683V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.6'>\n                <path\n                    opacity='0.6'\n                    d='M173.953 13.4528H169.259V35.7469H173.953V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M183.221 13.4528H178.526V35.7469H183.221V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.5'>\n                <path\n                    opacity='0.5'\n                    d='M192.488 13.4528H187.794V35.7469H192.488V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.4'>\n                <path\n                    opacity='0.4'\n                    d='M201.756 13.4528H197.061V35.7469H201.756V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <g opacity='0.3'>\n                <path\n                    opacity='0.3'\n                    d='M211.026 13.4528H206.332V35.7469H211.026V13.4528Z'\n                    fill='var(--button-bg)'\n                />\n            </g>\n            <path\n                d='M244.776 36.6906C251.521 36.6906 256.988 31.2131 256.988 24.4563C256.988 17.6995 251.521 12.2221 244.776 12.2221C238.032 12.2221 232.564 17.6995 232.564 24.4563C232.564 31.2131 238.032 36.6906 244.776 36.6906Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M244.776 82.195C251.521 82.195 256.988 76.7175 256.988 69.9607C256.988 63.2039 251.521 57.7264 244.776 57.7264C238.032 57.7264 232.564 63.2039 232.564 69.9607C232.564 76.7175 238.032 82.195 244.776 82.195Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M244.776 127.394C251.521 127.394 256.988 121.917 256.988 115.16C256.988 108.403 251.521 102.925 244.776 102.925C238.032 102.925 232.564 108.403 232.564 115.16C232.564 121.917 238.032 127.394 244.776 127.394Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M244.776 35.805C251.033 35.805 256.105 30.724 256.105 24.4563C256.105 18.1887 251.033 13.1077 244.776 13.1077C238.52 13.1077 233.448 18.1887 233.448 24.4563C233.448 30.724 238.52 35.805 244.776 35.805Z'\n                fill='var(--button-bg)'\n            />\n            <g opacity='0.8'>\n                <path\n                    opacity='0.8'\n                    d='M177.767 208.604H10.0814V105.115C10.0814 104.481 10.2059 103.854 10.448 103.269C10.6901 102.683 11.0448 102.151 11.4921 101.703C11.9394 101.255 12.4704 100.9 13.0547 100.657C13.6391 100.415 14.2655 100.29 14.898 100.29H172.947C173.58 100.29 174.206 100.415 174.791 100.657C175.375 100.9 175.906 101.255 176.353 101.703C176.801 102.151 177.155 102.683 177.397 103.269C177.639 103.854 177.764 104.481 177.764 105.115L177.767 208.604Z'\n                    fill='var(--center-channel-color)'\n                    fillOpacity='0.04'\n                />\n            </g>\n            <path\n                d='M17.2088 102.263H170.64C171.917 102.263 173.142 102.771 174.046 103.676C174.949 104.581 175.456 105.808 175.456 107.088V208.604H12.3922V107.088C12.3922 105.808 12.8996 104.581 13.8029 103.676C14.7062 102.771 15.9313 102.263 17.2088 102.263Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M170.207 108.667H17.6417V208.914H170.207V108.667Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                opacity='0.8'\n                d='M169.769 113.761H17.8505V203.951H169.769V113.761Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.08'\n            />\n            <path\n                d='M170.146 108.743H18.227V113.535H170.146V108.743Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M21.4828 112.225C22.1226 112.225 22.6412 111.705 22.6412 111.064C22.6412 110.423 22.1226 109.904 21.4828 109.904C20.843 109.904 20.3243 110.423 20.3243 111.064C20.3243 111.705 20.843 112.225 21.4828 112.225Z'\n                fill='var(--dnd-indicator)'\n            />\n            <path\n                d='M24.6715 112.225C25.3113 112.225 25.8299 111.705 25.8299 111.064C25.8299 110.423 25.3113 109.904 24.6715 109.904C24.0317 109.904 23.5131 110.423 23.5131 111.064C23.5131 111.705 24.0317 112.225 24.6715 112.225Z'\n                fill='var(--away-indicator)'\n            />\n            <path\n                d='M27.8633 112.225C28.5031 112.225 29.0217 111.705 29.0217 111.064C29.0217 110.423 28.5031 109.904 27.8633 109.904C27.2235 109.904 26.7049 110.423 26.7049 111.064C26.7049 111.705 27.2235 112.225 27.8633 112.225Z'\n                fill='var(--online-indicator)'\n            />\n            <g opacity='0.8'>\n                <path\n                    opacity='0.8'\n                    d='M182.459 211.108C173.124 211.816 12.8219 211.532 7.2188 211.108C-0.125039 207.562 -4.76565e-05 202.269 -4.76565e-05 202.269L73.5145 201.777L73.7614 205.964H105.234L106.454 202.269H187.934C187.934 202.269 189.553 206.429 182.459 211.108Z'\n                    fill='var(--center-channel-color)'\n                    fillOpacity='0.04'\n                />\n            </g>\n            <path\n                d='M186.74 203.377H106.851C107.165 203.732 107.369 204.17 107.439 204.639C107.509 205.108 107.441 205.587 107.243 206.018C107.046 206.449 106.727 206.813 106.327 207.066C105.927 207.319 105.461 207.45 104.988 207.442H74.503C74.0298 207.45 73.5646 207.319 73.1641 207.066C72.7637 206.813 72.4453 206.449 72.2478 206.018C72.0504 205.587 71.9823 205.108 72.052 204.639C72.1217 204.17 72.3262 203.732 72.6404 203.377H1.10737C1.10737 203.377 0.985427 206.863 8.23781 209.941C13.7708 210.311 172.113 210.552 181.332 209.941C188.34 205.876 186.74 203.377 186.74 203.377Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M186.74 203.377H106.851C107.165 203.732 107.369 204.17 107.439 204.639C107.509 205.108 107.441 205.587 107.243 206.018C107.046 206.449 106.727 206.813 106.327 207.066C105.927 207.319 105.461 207.45 104.988 207.442H74.503C74.0298 207.45 73.5646 207.319 73.1641 207.066C72.7637 206.813 72.4453 206.449 72.2478 206.018C72.0504 205.587 71.9823 205.108 72.052 204.639C72.1217 204.17 72.3262 203.732 72.6404 203.377H1.10737C1.10737 203.377 0.985427 206.863 8.23781 209.941C13.7708 210.311 172.113 210.552 181.332 209.941C188.34 205.876 186.74 203.377 186.74 203.377Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M17.7026 206.947C18.2464 206.947 18.6873 206.506 18.6873 205.961C18.6873 205.416 18.2464 204.974 17.7026 204.974C17.1588 204.974 16.718 205.416 16.718 205.961C16.718 206.506 17.1588 206.947 17.7026 206.947Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.08'\n            />\n            <path\n                d='M20.6536 206.947C21.1974 206.947 21.6382 206.506 21.6382 205.961C21.6382 205.416 21.1974 204.974 20.6536 204.974C20.1097 204.974 19.6689 205.416 19.6689 205.961C19.6689 206.506 20.1097 206.947 20.6536 206.947Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.08'\n            />\n            <path\n                d='M23.6045 206.947C24.1483 206.947 24.5892 206.506 24.5892 205.961C24.5892 205.416 24.1483 204.974 23.6045 204.974C23.0607 204.974 22.6199 205.416 22.6199 205.961C22.6199 206.506 23.0607 206.947 23.6045 206.947Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.08'\n            />\n            <g opacity='0.7'>\n                <path\n                    opacity='0.7'\n                    d='M90.3756 127.863L66.7047 142.456C66.7047 142.456 66.7047 172.557 90.3756 188.972C114.047 172.554 114.047 142.456 114.047 142.456L90.3756 127.863Z'\n                    fill='var(--center-channel-color)'\n                    fillOpacity='0.04'\n                />\n            </g>\n            <path\n                d='M93.8823 129.576L70.797 143.375C70.797 143.375 70.797 171.836 93.8949 187.358C116.993 171.836 116.993 143.375 116.993 143.375L93.8823 129.576Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                opacity='0.05'\n                d='M94.276 129.576L93.8801 129.821V187.104L94.276 187.373C117.374 171.85 117.374 143.39 117.374 143.39L94.276 129.576Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M93.8825 132.91L73.4575 145.116C73.4575 145.116 73.4575 170.291 93.8825 184.024C114.307 170.291 114.307 145.116 114.307 145.116L93.8825 132.91Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                opacity='0.08'\n                d='M93.8821 133.006V184.11C114.307 170.377 114.307 145.202 114.307 145.202L93.8821 133.006Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M87.3737 93.0769V48.8889H131.53'\n                stroke='#166DE0'\n                strokeWidth='2'\n                strokeDasharray='8 8'\n            />\n            <path\n                d='M98.6477 93.0769V60.1709H131.53'\n                stroke='#166DE0'\n                strokeWidth='2'\n                strokeDasharray='8 8'\n            />\n            <path\n                d='M229.238 147.607V191.795H185.082'\n                stroke='#166DE0'\n                strokeWidth='2'\n                strokeDasharray='8 8'\n            />\n            <path\n                d='M217.964 147.607V180.513H185.082'\n                stroke='#166DE0'\n                strokeWidth='2'\n                strokeDasharray='8 8'\n            />\n        </g>\n        <path\n            d='M101.644 145.486L101.769 148.231C102.913 149.479 103.672 150.935 104.046 152.599C104.421 154.242 104.327 155.875 103.766 157.498C103.225 159.099 102.31 160.451 101.02 161.554C99.7304 162.614 98.264 163.301 96.6208 163.613C94.9152 163.946 93.22 163.831 91.5352 163.27C89.8712 162.708 88.4568 161.782 87.292 160.493C86.1688 159.224 85.42 157.778 85.0456 156.156C84.6712 154.492 84.7648 152.859 85.3264 151.258C85.888 149.635 86.824 148.273 88.1344 147.17C89.424 146.11 90.9008 145.423 92.5648 145.111L94.3432 142.99C92.492 142.948 90.7136 143.281 89.008 143.988C87.3232 144.695 85.8464 145.714 84.5776 147.046C83.2672 148.418 82.3104 150.01 81.7072 151.819C80.9584 154.045 80.8128 156.312 81.2704 158.621C81.728 160.846 82.7056 162.812 84.2032 164.518C85.7424 166.306 87.6248 167.575 89.8504 168.324C92.076 169.073 94.3328 169.218 96.6208 168.761C98.8464 168.303 100.822 167.326 102.549 165.828C104.317 164.289 105.575 162.396 106.324 160.15C106.927 158.34 107.135 156.499 106.948 154.627C106.74 152.797 106.178 151.091 105.263 149.51C104.348 147.909 103.142 146.567 101.644 145.486ZM98.4616 153.629L98.368 149.76L98.2744 147.545L98.2432 145.142C98.2432 144.789 98.2328 144.57 98.212 144.487L98.1808 144.362L98.1496 144.331C98.1288 144.29 98.0768 144.248 97.9936 144.206C97.9312 144.165 97.8584 144.165 97.7752 144.206L97.744 144.238C97.7232 144.238 97.6816 144.269 97.6192 144.331C97.5776 144.373 97.4528 144.529 97.2448 144.799L95.7472 146.671L94.312 148.387L91.9096 151.414L91.6288 151.819C91.4208 152.194 91.2648 152.568 91.1608 152.942C90.9944 153.483 90.9528 154.003 91.036 154.502C91.14 155.272 91.4624 155.917 92.0032 156.437C92.4192 156.853 92.9288 157.165 93.532 157.373C94.156 157.56 94.7488 157.622 95.3104 157.56C96.0592 157.456 96.7144 157.134 97.276 156.593C97.6296 156.239 97.9104 155.802 98.1184 155.282C98.264 154.929 98.368 154.544 98.4304 154.128L98.4616 153.629Z'\n            fill='var(--center-channel-bg)'\n        />\n        <defs>\n            <filter\n                id='filter0_d'\n                x='0'\n                y='0'\n                width='268'\n                height='224'\n                filterUnits='userSpaceOnUse'\n                colorInterpolationFilters='sRGB'\n            >\n                <feFlood\n                    floodOpacity='0'\n                    result='BackgroundImageFix'\n                />\n                <feColorMatrix\n                    in='SourceAlpha'\n                    type='matrix'\n                    values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0'\n                />\n                <feOffset\n                    dx='2'\n                    dy='2'\n                />\n                <feGaussianBlur stdDeviation='1'/>\n                <feColorMatrix\n                    type='matrix'\n                    values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.05 0'\n                />\n                <feBlend\n                    mode='normal'\n                    in2='BackgroundImageFix'\n                    result='effect1_dropShadow'\n                />\n                <feBlend\n                    mode='normal'\n                    in='SourceGraphic'\n                    in2='effect1_dropShadow'\n                    result='shape'\n                />\n            </filter>\n            <clipPath id='clip0'>\n                <rect\n                    width='264'\n                    height='220'\n                    fill='var(--center-channel-bg)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default LdapSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport LdapSVG from './images/ldap_svg';\n\nconst LDAPFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='ldap'\n            titleID='admin.ldap_feature_discovery.title'\n            titleDefault='Integrate Active Directory/LDAP with MatterFOSS'\n            copyID='admin.ldap_feature_discovery.copy'\n            copyDefault={'When you connect MatterFOSS with your organization\\'s Active Directory/LDAP, users can log in without having to create new usernames and passwords.'}\n            learnMoreURL='https://www.example.com/docs-adldap/?utm_medium=product&utm_source=product-feature-discovery&utm_content=adldap'\n            featureDiscoveryImage={<LdapSVG/>}\n        />\n    );\n};\n\nt('admin.ldap_feature_discovery.title');\nt('admin.ldap_feature_discovery.copy');\n\nexport default LDAPFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst SamlSVG = () => (\n    <svg\n        width='318'\n        height='220'\n        viewBox='0 0 318 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0)'>\n            <path\n                opacity='0.1'\n                d='M179.87 29.9522C159.487 29.9795 139.867 24.1891 121.101 17.7565C102.334 11.3239 83.7123 4.12077 63.708 1.06844C50.8426 -0.893578 36.2129 -0.713226 26.1562 6.4107C16.4758 13.2641 13.6725 24.6072 12.32 35.0867C11.3029 42.9703 10.8339 51.2447 14.6433 58.4561C17.2884 63.4622 21.815 67.5885 25.0054 72.3596C36.142 88.9575 29.4448 110.16 18.6218 127.143C13.5471 135.111 7.6025 142.749 3.76579 151.174C-0.0709235 159.598 -1.64433 169.152 2.26874 177.467C6.14635 185.708 14.9051 191.69 24.3046 195.775C43.3927 204.088 65.6168 205.87 87.2436 206.556C135.117 208.078 183.082 204.973 230.92 201.869C248.623 200.721 266.405 199.565 283.742 196.24C293.368 194.395 303.28 191.657 310.106 185.656C318.769 178.038 320.541 165.599 314.237 156.658C303.665 141.661 275.788 138.833 268.207 122.607C264.027 113.674 267.632 103.429 272.941 94.819C284.329 76.3438 303.929 59.795 304.259 39.131C304.486 24.9406 294.293 11.0971 279.068 4.92962C263.111 -1.53028 241.353 0.131153 230.173 12.171C218.676 24.5744 197.868 29.933 179.87 29.9522Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M270.65 176.352C270.65 176.352 267.299 174.136 263.978 175.713C263.978 175.713 265 177.685 269.205 177.5L270.65 176.352Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M271.076 176.469C271.076 176.469 272.096 180.361 269.538 183.009C269.538 183.009 268 181.405 269.538 177.475L271.076 176.469Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M275.243 172.734C275.243 172.734 274.995 169.425 267.537 170.523C267.537 170.523 267.501 172.657 270.119 173.669C272.737 174.68 273.937 173.827 275.243 172.734Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M275.712 172.712C275.712 172.712 278.864 173.726 276.052 180.735C276.052 180.735 273.972 180.271 273.598 177.481C273.225 174.691 274.332 173.729 275.712 172.712Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M279.922 168.017C279.922 168.017 280.35 162.571 272.728 163.129C272.728 163.129 272.183 168.048 278.578 169.326L279.922 168.017Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M284.958 161.869C284.958 161.869 283.914 155.696 276.295 157.535C276.295 157.535 276.268 162.872 283.715 163.339L284.958 161.869Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M288.64 155.513C288.64 155.513 286.889 149.501 279.341 151.299C279.341 151.299 281.138 156.707 288.138 156.622L288.64 155.513Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M292.136 149.305C292.136 149.305 290.426 143.066 283.137 144.932C283.137 144.932 285.569 150.859 291.653 150.359L292.136 149.305Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M294.388 143.408C294.388 143.408 293.074 135.778 286.278 137.467C286.278 137.467 288.253 144.408 293.889 144.52L294.388 143.408Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M296.501 136.284C296.501 136.284 294.922 128.594 288.048 130.818C288.048 130.818 290.742 138.087 296.013 137.336L296.501 136.284Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M297.799 129.654C297.799 129.654 295.293 121.962 289.979 122.17C289.979 122.17 292.539 130.294 297.355 131.187L297.799 129.654Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M298.639 123.184C298.639 123.184 295.912 113.925 291.587 114.639C291.587 114.639 293.474 121.716 298.486 124.626L298.639 123.184Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M299.114 115.464C299.114 115.464 296.556 107.75 292.296 107.441C292.296 107.441 294.036 115.032 299.029 117.47L299.114 115.464Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M299.629 108.261C299.629 108.261 296.441 100.538 293.63 100.363C293.63 100.363 295.015 107.968 299.356 109.529L299.629 108.261Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M299.981 101.56C299.981 101.56 298.02 93.1739 295.203 92.4771C295.203 92.4771 295.588 99.3387 299.697 102.189L299.981 101.56Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M301.044 92.7832C301.044 92.7832 298.983 86.0965 296.7 85.0772C296.7 85.0772 297.15 92.9608 300.518 94.4173L301.044 92.7832Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M301.925 87.0447L302.34 75.2562C302.34 75.2562 298.072 84.1426 301.617 89.1133L301.925 87.0447Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M305.219 75.319C305.219 75.319 308.292 66.7113 309.037 66.2303C309.037 66.2303 303.01 71.8158 303.599 78.9998L305.219 75.319Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M280.129 167.976C280.129 167.976 285.534 167.269 285.373 174.923C285.373 174.923 280.489 175.721 278.894 169.389L280.129 167.976Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M285.215 161.661C285.215 161.661 291.459 161.642 290.941 169.477C290.941 169.477 285.697 170.417 283.969 163.142L285.215 161.661Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M288.7 156.019C288.7 156.019 294.369 153.354 297.996 160.232C297.996 160.232 292.76 162.451 288.198 157.131L288.7 156.019Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M292.261 149.362C292.261 149.362 298.066 146.528 301.475 153.245C301.475 153.245 295.427 155.333 291.781 150.425L292.261 149.362Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M294.314 143.574C294.314 143.574 299.902 138.227 304.36 143.634C304.36 143.634 298.653 148.037 294.058 144.766L294.314 143.574Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M296.185 136.101C296.185 136.101 301.805 130.635 306.228 136.352C306.228 136.352 299.921 140.842 295.983 137.248L296.185 136.101Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M297.235 129.436C297.235 129.436 301.565 122.604 306.664 124.129C306.664 124.129 302.17 131.362 297.284 131.04L297.235 129.436Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M298.511 123.14C298.511 123.14 302.874 114.538 307.002 116.035C307.002 116.035 303.856 122.648 298.399 124.591L298.511 123.14Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M298.814 115.016C298.814 115.016 303.299 108.244 307.502 109.072C307.502 109.072 303.834 115.939 298.377 116.975L298.814 115.016Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M299.163 108.11C299.163 108.11 302.64 100.511 305.465 100.459C305.465 100.459 303.796 108.004 299.397 109.4L299.163 108.11Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M299.844 101.396C299.844 101.396 303.708 93.7013 306.613 93.6849C306.613 93.6849 304.636 100.265 299.973 102.071L299.844 101.396Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M300.425 93.2641C300.425 93.2641 303.316 86.8971 305.71 86.1757C305.71 86.1757 304.265 93.9363 300.744 94.9529L300.425 93.2641Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M302.269 86.8124L308.729 76.9504C308.729 76.9504 307.073 86.6785 301.325 88.7007L302.269 86.8124Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M306.702 76.1142C306.702 76.1142 314.21 70.9223 314.482 70.0834C314.482 70.0834 310.665 77.3548 303.575 78.6392L306.702 76.1142Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M307.153 73.7778C307.153 73.7778 315.772 65.4734 317.973 65.4816C317.973 65.4816 310.864 65.8068 306.945 73.3352L307.153 73.7778Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M300.51 94.4965L300.823 94.5375C302.443 81.8336 304.805 74.3162 307.471 73.3953L307.368 73.0947C304.54 74.0785 302.162 81.4811 300.51 94.4965Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M298.126 124.878L298.601 124.916C298.702 123.73 298.778 122.517 298.83 121.306C299.283 110.791 299.983 101.134 300.905 93.8953L300.632 93.5538C299.708 100.809 298.808 110.756 298.356 121.287C298.304 122.489 298.227 123.697 298.126 124.878Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M261.805 182.413C261.886 182.377 270.239 178.639 278.908 169.725C283.987 164.505 288.207 158.509 291.41 151.963C295.419 143.785 297.862 133.734 298.68 123.97L298.187 124.203C296.346 146.118 286.39 161.093 278.474 169.25C269.89 178.084 261.63 181.784 261.548 181.82L261.805 182.413Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M283.431 23.2901H21.4114C20.7923 23.2901 20.1986 23.5365 19.7608 23.9752C19.3231 24.4138 19.0771 25.0088 19.0771 25.6292V32.4443H285.766V25.6292C285.766 25.0088 285.52 24.4138 285.082 23.9752C284.644 23.5365 284.05 23.2901 283.431 23.2901V23.2901Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M19.0771 32.4443V185.81C19.0771 187.06 19.573 188.26 20.4557 189.145C21.3383 190.029 22.5355 190.526 23.7837 190.526H281.059C282.307 190.526 283.504 190.029 284.387 189.145C285.27 188.26 285.766 187.06 285.766 185.81V32.4443H19.0771Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M20.0771 33.4443V185.81C20.0771 186.796 20.4682 187.741 21.1635 188.438C21.8588 189.135 22.8014 189.526 23.7837 189.526H281.059C282.041 189.526 282.984 189.135 283.679 188.438C284.375 187.741 284.766 186.796 284.766 185.81V33.4443H20.0771ZM19.0771 185.81C19.0771 187.06 19.573 188.26 20.4557 189.145C21.3383 190.029 22.5355 190.526 23.7837 190.526H281.059C282.307 190.526 283.504 190.029 284.387 189.145C285.27 188.26 285.766 187.06 285.766 185.81V32.4443H19.0771V185.81Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.08'\n            />\n            <path\n                opacity='0.8'\n                d='M23.3012 28.8919C23.9036 28.8919 24.3919 28.4025 24.3919 27.7989C24.3919 27.1952 23.9036 26.7058 23.3012 26.7058C22.6988 26.7058 22.2104 27.1952 22.2104 27.7989C22.2104 28.4025 22.6988 28.8919 23.3012 28.8919Z'\n                fill='var(--dnd-indicator)'\n            />\n            <path\n                opacity='0.8'\n                d='M26.3007 28.8919C26.9031 28.8919 27.3915 28.4025 27.3915 27.7989C27.3915 27.1952 26.9031 26.7058 26.3007 26.7058C25.6983 26.7058 25.21 27.1952 25.21 27.7989C25.21 28.4025 25.6983 28.8919 26.3007 28.8919Z'\n                fill='var(--away-indicator)'\n            />\n            <path\n                opacity='0.8'\n                d='M29.3002 28.8919C29.9026 28.8919 30.391 28.4025 30.391 27.7989C30.391 27.1952 29.9026 26.7058 29.3002 26.7058C28.6978 26.7058 28.2095 27.1952 28.2095 27.7989C28.2095 28.4025 28.6978 28.8919 29.3002 28.8919Z'\n                fill='var(--online-indicator)'\n            />\n            <path\n                opacity='0.05'\n                d='M258.2 58.0161H43.8672V152.461H258.2V58.0161Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M252.563 58.7321H49.5032C47.294 58.7321 45.5032 60.5229 45.5032 62.7321V147.094C45.5032 149.304 47.294 151.094 49.5032 151.094H252.563C254.772 151.094 256.563 149.304 256.563 147.094V62.7321C256.563 60.5229 254.772 58.7321 252.563 58.7321Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M252.563 60.7321H49.5032C48.3986 60.7321 47.5032 61.6275 47.5032 62.7321V147.094C47.5032 148.199 48.3986 149.094 49.5032 149.094H252.563C253.668 149.094 254.563 148.199 254.563 147.094V62.7321C254.563 61.6275 253.668 60.7321 252.563 60.7321ZM49.5032 58.7321H252.563C254.772 58.7321 256.563 60.5229 256.563 62.7321V147.094C256.563 149.304 254.772 151.094 252.563 151.094H49.5032C47.294 151.094 45.5032 149.304 45.5032 147.094V62.7321C45.5032 60.5229 47.294 58.7321 49.5032 58.7321Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M227.477 99.9945H142.217C141.664 99.9945 141.217 100.442 141.217 100.995V108.285C141.217 108.838 141.664 109.285 142.217 109.285H227.477C228.029 109.285 228.477 108.838 228.477 108.285V100.995C228.477 100.442 228.029 99.9945 227.477 99.9945Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M142.217 97.9945H227.477C229.133 97.9945 230.477 99.3377 230.477 100.995V108.285C230.477 109.942 229.133 111.285 227.477 111.285H142.217C140.56 111.285 139.217 109.942 139.217 108.285V100.995C139.217 99.3377 140.56 97.9945 142.217 97.9945ZM142.217 99.9945H227.477C228.029 99.9945 228.477 100.442 228.477 100.995V108.285C228.477 108.838 228.029 109.285 227.477 109.285H142.217C141.664 109.285 141.217 108.838 141.217 108.285V100.995C141.217 100.442 141.664 99.9945 142.217 99.9945Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M228.477 116.937H209.661V126.228H228.477V116.937Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M149.806 104.501H148.227L149.632 103.096C149.657 103.07 149.671 103.035 149.671 102.999C149.671 102.963 149.657 102.928 149.632 102.902C149.619 102.889 149.604 102.879 149.587 102.872C149.571 102.865 149.553 102.862 149.535 102.862C149.517 102.862 149.499 102.865 149.482 102.872C149.466 102.879 149.451 102.889 149.438 102.902L148.034 104.309V102.724C148.034 102.688 148.019 102.653 147.994 102.628C147.968 102.602 147.934 102.588 147.897 102.588C147.862 102.588 147.827 102.603 147.802 102.629C147.776 102.654 147.762 102.688 147.761 102.724V104.309L146.359 102.894C146.347 102.881 146.332 102.871 146.315 102.864C146.299 102.857 146.281 102.853 146.263 102.853C146.245 102.853 146.227 102.857 146.21 102.864C146.194 102.871 146.179 102.881 146.166 102.894C146.141 102.92 146.127 102.955 146.127 102.991C146.127 103.027 146.141 103.062 146.166 103.088L147.57 104.492H145.989C145.953 104.493 145.918 104.508 145.893 104.533C145.868 104.559 145.853 104.593 145.852 104.629C145.852 104.665 145.867 104.7 145.892 104.726C145.918 104.751 145.952 104.766 145.989 104.766H147.57L146.166 106.173C146.141 106.199 146.127 106.234 146.127 106.27C146.127 106.306 146.141 106.341 146.166 106.367C146.192 106.392 146.227 106.405 146.263 106.405C146.299 106.405 146.333 106.392 146.359 106.367L147.761 104.96V106.542C147.761 106.578 147.775 106.613 147.801 106.638C147.827 106.664 147.861 106.678 147.897 106.678C147.934 106.678 147.968 106.664 147.994 106.638C148.019 106.613 148.034 106.578 148.034 106.542V104.96L149.438 106.367C149.464 106.392 149.499 106.405 149.535 106.405C149.571 106.405 149.605 106.392 149.632 106.367C149.657 106.341 149.671 106.306 149.671 106.27C149.671 106.234 149.657 106.199 149.632 106.173L148.227 104.766H149.806C149.842 104.766 149.877 104.751 149.903 104.726C149.928 104.7 149.943 104.665 149.943 104.629C149.941 104.594 149.925 104.562 149.9 104.538C149.875 104.514 149.841 104.501 149.806 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M155.533 104.501H153.954L155.358 103.096C155.383 103.07 155.398 103.035 155.398 102.999C155.398 102.963 155.383 102.928 155.358 102.902C155.346 102.889 155.331 102.879 155.314 102.872C155.297 102.865 155.28 102.862 155.262 102.862C155.244 102.862 155.226 102.865 155.209 102.872C155.192 102.879 155.177 102.889 155.165 102.902L153.76 104.309V102.724C153.76 102.688 153.746 102.653 153.72 102.628C153.695 102.602 153.66 102.588 153.624 102.588C153.588 102.588 153.554 102.603 153.528 102.629C153.503 102.654 153.488 102.688 153.488 102.724V104.309L152.086 102.894C152.073 102.881 152.058 102.871 152.042 102.864C152.025 102.857 152.007 102.853 151.989 102.853C151.971 102.853 151.953 102.857 151.937 102.864C151.92 102.871 151.905 102.881 151.892 102.894C151.867 102.92 151.853 102.955 151.853 102.991C151.853 103.027 151.867 103.062 151.892 103.088L153.297 104.492H151.715C151.679 104.493 151.645 104.508 151.62 104.533C151.594 104.559 151.58 104.593 151.579 104.629C151.579 104.665 151.593 104.7 151.619 104.726C151.644 104.751 151.679 104.766 151.715 104.766H153.297L151.892 106.173C151.867 106.199 151.853 106.234 151.853 106.27C151.853 106.306 151.867 106.341 151.892 106.367C151.919 106.392 151.953 106.405 151.989 106.405C152.025 106.405 152.06 106.392 152.086 106.367L153.488 104.96V106.542C153.488 106.578 153.502 106.613 153.528 106.638C153.553 106.664 153.588 106.678 153.624 106.678C153.66 106.678 153.695 106.664 153.72 106.638C153.746 106.613 153.76 106.578 153.76 106.542V104.96L155.165 106.367C155.191 106.392 155.226 106.405 155.262 106.405C155.297 106.405 155.332 106.392 155.358 106.367C155.383 106.341 155.398 106.306 155.398 106.27C155.398 106.234 155.383 106.199 155.358 106.173L153.954 104.766H155.533C155.569 104.766 155.604 104.751 155.629 104.726C155.655 104.7 155.669 104.665 155.669 104.629C155.667 104.594 155.652 104.562 155.626 104.538C155.601 104.514 155.568 104.501 155.533 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M161.259 104.501H159.68L161.085 103.096C161.11 103.07 161.124 103.035 161.124 102.999C161.124 102.963 161.11 102.928 161.085 102.902C161.072 102.889 161.057 102.879 161.04 102.872C161.024 102.865 161.006 102.862 160.988 102.862C160.97 102.862 160.952 102.865 160.935 102.872C160.919 102.879 160.904 102.889 160.891 102.902L159.487 104.309V102.724C159.487 102.688 159.472 102.653 159.447 102.628C159.421 102.602 159.387 102.588 159.35 102.588C159.314 102.588 159.28 102.603 159.255 102.629C159.229 102.654 159.215 102.688 159.214 102.724V104.309L157.812 102.894C157.8 102.881 157.785 102.871 157.768 102.864C157.751 102.857 157.734 102.853 157.716 102.853C157.698 102.853 157.68 102.857 157.663 102.864C157.647 102.871 157.631 102.881 157.619 102.894C157.594 102.92 157.58 102.955 157.58 102.991C157.58 103.027 157.594 103.062 157.619 103.088L159.023 104.492H157.442C157.406 104.493 157.371 104.508 157.346 104.533C157.32 104.559 157.306 104.593 157.305 104.629C157.305 104.665 157.32 104.7 157.345 104.726C157.371 104.751 157.405 104.766 157.442 104.766H159.023L157.619 106.173C157.594 106.199 157.58 106.234 157.58 106.27C157.58 106.306 157.594 106.341 157.619 106.367C157.645 106.392 157.68 106.405 157.716 106.405C157.751 106.405 157.786 106.392 157.812 106.367L159.214 104.96V106.542C159.214 106.578 159.228 106.613 159.254 106.638C159.279 106.664 159.314 106.678 159.35 106.678C159.387 106.678 159.421 106.664 159.447 106.638C159.472 106.613 159.487 106.578 159.487 106.542V104.96L160.891 106.367C160.917 106.392 160.952 106.405 160.988 106.405C161.024 106.405 161.058 106.392 161.085 106.367C161.11 106.341 161.124 106.306 161.124 106.27C161.124 106.234 161.11 106.199 161.085 106.173L159.68 104.766H161.259C161.295 104.766 161.33 104.751 161.356 104.726C161.381 104.7 161.396 104.665 161.396 104.629C161.393 104.594 161.378 104.562 161.353 104.538C161.327 104.514 161.294 104.501 161.259 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M166.986 104.501H165.407L166.811 103.096C166.836 103.07 166.85 103.035 166.85 102.999C166.85 102.963 166.836 102.928 166.811 102.902C166.799 102.889 166.783 102.879 166.767 102.872C166.75 102.865 166.732 102.862 166.714 102.862C166.696 102.862 166.679 102.865 166.662 102.872C166.645 102.879 166.63 102.889 166.618 102.902L165.213 104.309V102.724C165.213 102.688 165.199 102.653 165.173 102.628C165.148 102.602 165.113 102.588 165.077 102.588C165.041 102.588 165.007 102.603 164.981 102.629C164.956 102.654 164.941 102.688 164.941 102.724V104.309L163.539 102.894C163.526 102.881 163.511 102.871 163.495 102.864C163.478 102.857 163.46 102.853 163.442 102.853C163.424 102.853 163.406 102.857 163.39 102.864C163.373 102.871 163.358 102.881 163.345 102.894C163.32 102.92 163.306 102.955 163.306 102.991C163.306 103.027 163.32 103.062 163.345 103.088L164.75 104.492H163.168C163.132 104.493 163.098 104.508 163.072 104.533C163.047 104.559 163.032 104.593 163.032 104.629C163.032 104.665 163.046 104.7 163.072 104.726C163.097 104.751 163.132 104.766 163.168 104.766H164.75L163.345 106.173C163.32 106.199 163.306 106.234 163.306 106.27C163.306 106.306 163.32 106.341 163.345 106.367C163.372 106.392 163.406 106.405 163.442 106.405C163.478 106.405 163.513 106.392 163.539 106.367L164.941 104.96V106.542C164.941 106.578 164.955 106.613 164.98 106.638C165.006 106.664 165.041 106.678 165.077 106.678C165.113 106.678 165.148 106.664 165.173 106.638C165.199 106.613 165.213 106.578 165.213 106.542V104.96L166.618 106.367C166.644 106.392 166.678 106.405 166.714 106.405C166.75 106.405 166.785 106.392 166.811 106.367C166.836 106.341 166.85 106.306 166.85 106.27C166.85 106.234 166.836 106.199 166.811 106.173L165.407 104.766H166.986C167.022 104.766 167.057 104.751 167.082 104.726C167.108 104.7 167.122 104.665 167.122 104.629C167.12 104.594 167.105 104.562 167.079 104.538C167.054 104.514 167.021 104.501 166.986 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M172.712 104.501H171.133L172.538 103.096C172.563 103.07 172.577 103.035 172.577 102.999C172.577 102.963 172.563 102.928 172.538 102.902C172.525 102.889 172.51 102.879 172.493 102.872C172.477 102.865 172.459 102.862 172.441 102.862C172.423 102.862 172.405 102.865 172.388 102.872C172.372 102.879 172.357 102.889 172.344 102.902L170.94 104.309V102.724C170.94 102.688 170.925 102.653 170.9 102.628C170.874 102.602 170.839 102.588 170.803 102.588C170.767 102.588 170.733 102.603 170.708 102.629C170.682 102.654 170.668 102.688 170.667 102.724V104.309L169.265 102.894C169.253 102.881 169.237 102.871 169.221 102.864C169.204 102.857 169.186 102.853 169.168 102.853C169.15 102.853 169.133 102.857 169.116 102.864C169.099 102.871 169.084 102.881 169.072 102.894C169.046 102.92 169.032 102.955 169.032 102.991C169.032 103.027 169.046 103.062 169.072 103.088L170.476 104.492H168.894C168.858 104.493 168.824 104.508 168.799 104.533C168.773 104.559 168.759 104.593 168.758 104.629C168.758 104.665 168.772 104.7 168.798 104.726C168.824 104.751 168.858 104.766 168.894 104.766H170.476L169.072 106.173C169.046 106.199 169.032 106.234 169.032 106.27C169.032 106.306 169.046 106.341 169.072 106.367C169.098 106.392 169.132 106.405 169.168 106.405C169.204 106.405 169.239 106.392 169.265 106.367L170.667 104.96V106.542C170.667 106.578 170.681 106.613 170.707 106.638C170.732 106.664 170.767 106.678 170.803 106.678C170.839 106.678 170.874 106.664 170.9 106.638C170.925 106.613 170.94 106.578 170.94 106.542V104.96L172.344 106.367C172.37 106.392 172.405 106.405 172.441 106.405C172.477 106.405 172.511 106.392 172.538 106.367C172.563 106.341 172.577 106.306 172.577 106.27C172.577 106.234 172.563 106.199 172.538 106.173L171.133 104.766H172.712C172.748 104.766 172.783 104.751 172.808 104.726C172.834 104.7 172.848 104.665 172.848 104.629C172.846 104.594 172.831 104.562 172.806 104.538C172.78 104.514 172.747 104.501 172.712 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M178.439 104.501H176.86L178.264 103.096C178.289 103.07 178.303 103.035 178.303 102.999C178.303 102.963 178.289 102.928 178.264 102.902C178.251 102.889 178.236 102.879 178.22 102.872C178.203 102.865 178.185 102.862 178.167 102.862C178.149 102.862 178.131 102.865 178.115 102.872C178.098 102.879 178.083 102.889 178.07 102.902L176.666 104.309V102.724C176.666 102.688 176.652 102.653 176.626 102.628C176.601 102.602 176.566 102.588 176.53 102.588C176.494 102.588 176.46 102.603 176.434 102.629C176.409 102.654 176.394 102.688 176.393 102.724V104.309L174.992 102.894C174.979 102.881 174.964 102.871 174.947 102.864C174.931 102.857 174.913 102.853 174.895 102.853C174.877 102.853 174.859 102.857 174.843 102.864C174.826 102.871 174.811 102.881 174.798 102.894C174.773 102.92 174.759 102.955 174.759 102.991C174.759 103.027 174.773 103.062 174.798 103.088L176.203 104.492H174.621C174.585 104.493 174.551 104.508 174.525 104.533C174.5 104.559 174.485 104.593 174.485 104.629C174.485 104.665 174.499 104.7 174.525 104.726C174.55 104.751 174.585 104.766 174.621 104.766H176.203L174.798 106.173C174.773 106.199 174.759 106.234 174.759 106.27C174.759 106.306 174.773 106.341 174.798 106.367C174.824 106.392 174.859 106.405 174.895 106.405C174.931 106.405 174.966 106.392 174.992 106.367L176.393 104.96V106.542C176.393 106.578 176.408 106.613 176.433 106.638C176.459 106.664 176.494 106.678 176.53 106.678C176.566 106.678 176.601 106.664 176.626 106.638C176.652 106.613 176.666 106.578 176.666 106.542V104.96L178.07 106.367C178.097 106.392 178.131 106.405 178.167 106.405C178.203 106.405 178.238 106.392 178.264 106.367C178.289 106.341 178.303 106.306 178.303 106.27C178.303 106.234 178.289 106.199 178.264 106.173L176.86 104.766H178.439C178.475 104.766 178.509 104.751 178.535 104.726C178.561 104.7 178.575 104.665 178.575 104.629C178.573 104.594 178.558 104.562 178.532 104.538C178.507 104.514 178.473 104.501 178.439 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M184.165 104.501H182.586L183.99 103.096C184.016 103.07 184.03 103.035 184.03 102.999C184.03 102.963 184.016 102.928 183.99 102.902C183.978 102.889 183.963 102.879 183.946 102.872C183.929 102.865 183.912 102.862 183.894 102.862C183.876 102.862 183.858 102.865 183.841 102.872C183.825 102.879 183.809 102.889 183.797 102.902L182.392 104.309V102.724C182.392 102.688 182.378 102.653 182.352 102.628C182.327 102.602 182.292 102.588 182.256 102.588C182.22 102.588 182.186 102.603 182.16 102.629C182.135 102.654 182.12 102.688 182.12 102.724V104.309L180.718 102.894C180.705 102.881 180.69 102.871 180.674 102.864C180.657 102.857 180.639 102.853 180.621 102.853C180.603 102.853 180.586 102.857 180.569 102.864C180.552 102.871 180.537 102.881 180.525 102.894C180.499 102.92 180.485 102.955 180.485 102.991C180.485 103.027 180.499 103.062 180.525 103.088L181.929 104.492H180.347C180.311 104.493 180.277 104.508 180.252 104.533C180.226 104.559 180.212 104.593 180.211 104.629C180.211 104.665 180.225 104.7 180.251 104.726C180.276 104.751 180.311 104.766 180.347 104.766H181.929L180.525 106.173C180.499 106.199 180.485 106.234 180.485 106.27C180.485 106.306 180.499 106.341 180.525 106.367C180.551 106.392 180.585 106.405 180.621 106.405C180.657 106.405 180.692 106.392 180.718 106.367L182.12 104.96V106.542C182.12 106.578 182.134 106.613 182.16 106.638C182.185 106.664 182.22 106.678 182.256 106.678C182.292 106.678 182.327 106.664 182.352 106.638C182.378 106.613 182.392 106.578 182.392 106.542V104.96L183.797 106.367C183.823 106.392 183.858 106.405 183.894 106.405C183.93 106.405 183.964 106.392 183.99 106.367C184.016 106.341 184.03 106.306 184.03 106.27C184.03 106.234 184.016 106.199 183.99 106.173L182.586 104.766H184.165C184.201 104.766 184.236 104.751 184.261 104.726C184.287 104.7 184.301 104.665 184.301 104.629C184.299 104.594 184.284 104.562 184.259 104.538C184.233 104.514 184.2 104.501 184.165 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M189.891 104.501H188.313L189.717 103.096C189.742 103.07 189.756 103.035 189.756 102.999C189.756 102.963 189.742 102.928 189.717 102.902C189.704 102.889 189.689 102.879 189.673 102.872C189.656 102.865 189.638 102.862 189.62 102.862C189.602 102.862 189.584 102.865 189.568 102.872C189.551 102.879 189.536 102.889 189.523 102.902L188.119 104.309V102.724C188.119 102.688 188.105 102.653 188.079 102.628C188.053 102.602 188.019 102.588 187.983 102.588C187.947 102.588 187.912 102.603 187.887 102.629C187.862 102.654 187.847 102.688 187.846 102.724V104.309L186.445 102.894C186.432 102.881 186.417 102.871 186.4 102.864C186.384 102.857 186.366 102.853 186.348 102.853C186.33 102.853 186.312 102.857 186.295 102.864C186.279 102.871 186.264 102.881 186.251 102.894C186.226 102.92 186.212 102.955 186.212 102.991C186.212 103.027 186.226 103.062 186.251 103.088L187.655 104.492H186.074C186.038 104.493 186.004 104.508 185.978 104.533C185.953 104.559 185.938 104.593 185.938 104.629C185.938 104.665 185.952 104.7 185.977 104.726C186.003 104.751 186.038 104.766 186.074 104.766H187.655L186.251 106.173C186.226 106.199 186.212 106.234 186.212 106.27C186.212 106.306 186.226 106.341 186.251 106.367C186.277 106.392 186.312 106.405 186.348 106.405C186.384 106.405 186.418 106.392 186.445 106.367L187.846 104.96V106.542C187.846 106.578 187.861 106.613 187.886 106.638C187.912 106.664 187.946 106.678 187.983 106.678C188.019 106.678 188.053 106.664 188.079 106.638C188.105 106.613 188.119 106.578 188.119 106.542V104.96L189.523 106.367C189.55 106.392 189.584 106.405 189.62 106.405C189.656 106.405 189.691 106.392 189.717 106.367C189.742 106.341 189.756 106.306 189.756 106.27C189.756 106.234 189.742 106.199 189.717 106.173L188.313 104.766H189.891C189.928 104.766 189.962 104.751 189.988 104.726C190.013 104.7 190.028 104.665 190.028 104.629C190.026 104.594 190.01 104.562 189.985 104.538C189.96 104.514 189.926 104.501 189.891 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M195.618 104.501H194.039L195.443 103.096C195.468 103.07 195.482 103.035 195.482 102.999C195.482 102.963 195.468 102.928 195.443 102.902C195.431 102.889 195.416 102.879 195.399 102.872C195.382 102.865 195.364 102.862 195.346 102.862C195.328 102.862 195.311 102.865 195.294 102.872C195.277 102.879 195.262 102.889 195.25 102.902L193.845 104.309V102.724C193.845 102.688 193.831 102.653 193.805 102.628C193.78 102.602 193.745 102.588 193.709 102.588C193.673 102.588 193.639 102.603 193.613 102.629C193.588 102.654 193.573 102.688 193.573 102.724V104.309L192.171 102.894C192.158 102.881 192.143 102.871 192.127 102.864C192.11 102.857 192.092 102.853 192.074 102.853C192.056 102.853 192.038 102.857 192.022 102.864C192.005 102.871 191.99 102.881 191.977 102.894C191.952 102.92 191.938 102.955 191.938 102.991C191.938 103.027 191.952 103.062 191.977 103.088L193.382 104.492H191.8C191.764 104.493 191.73 104.508 191.705 104.533C191.679 104.559 191.665 104.593 191.664 104.629C191.664 104.665 191.678 104.7 191.704 104.726C191.729 104.751 191.764 104.766 191.8 104.766H193.382L191.977 106.173C191.952 106.199 191.938 106.234 191.938 106.27C191.938 106.306 191.952 106.341 191.977 106.367C192.004 106.392 192.038 106.405 192.074 106.405C192.11 106.405 192.145 106.392 192.171 106.367L193.573 104.96V106.542C193.573 106.578 193.587 106.613 193.613 106.638C193.638 106.664 193.673 106.678 193.709 106.678C193.745 106.678 193.78 106.664 193.805 106.638C193.831 106.613 193.845 106.578 193.845 106.542V104.96L195.25 106.367C195.276 106.392 195.311 106.405 195.346 106.405C195.382 106.405 195.417 106.392 195.443 106.367C195.468 106.341 195.482 106.306 195.482 106.27C195.482 106.234 195.468 106.199 195.443 106.173L194.039 104.766H195.618C195.654 104.766 195.689 104.751 195.714 104.726C195.74 104.7 195.754 104.665 195.754 104.629C195.752 104.594 195.737 104.562 195.711 104.538C195.686 104.514 195.653 104.501 195.618 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M201.344 104.501H199.765L201.17 103.096C201.195 103.07 201.209 103.035 201.209 102.999C201.209 102.963 201.195 102.928 201.17 102.902C201.157 102.889 201.142 102.879 201.125 102.872C201.109 102.865 201.091 102.862 201.073 102.862C201.055 102.862 201.037 102.865 201.021 102.872C201.004 102.879 200.989 102.889 200.976 102.902L199.572 104.309V102.724C199.572 102.688 199.558 102.653 199.532 102.628C199.506 102.602 199.472 102.588 199.436 102.588C199.4 102.588 199.365 102.603 199.34 102.629C199.314 102.654 199.3 102.688 199.299 102.724V104.309L197.898 102.894C197.885 102.881 197.87 102.871 197.853 102.864C197.837 102.857 197.819 102.853 197.801 102.853C197.783 102.853 197.765 102.857 197.748 102.864C197.732 102.871 197.717 102.881 197.704 102.894C197.679 102.92 197.665 102.955 197.665 102.991C197.665 103.027 197.679 103.062 197.704 103.088L199.108 104.492H197.527C197.491 104.493 197.456 104.508 197.431 104.533C197.406 104.559 197.391 104.593 197.39 104.629C197.39 104.665 197.405 104.7 197.43 104.726C197.456 104.751 197.491 104.766 197.527 104.766H199.108L197.704 106.173C197.679 106.199 197.665 106.234 197.665 106.27C197.665 106.306 197.679 106.341 197.704 106.367C197.73 106.392 197.765 106.405 197.801 106.405C197.837 106.405 197.871 106.392 197.898 106.367L199.299 104.96V106.542C199.299 106.578 199.314 106.613 199.339 106.638C199.365 106.664 199.399 106.678 199.436 106.678C199.472 106.678 199.506 106.664 199.532 106.638C199.558 106.613 199.572 106.578 199.572 106.542V104.96L200.976 106.367C201.002 106.392 201.037 106.405 201.073 106.405C201.109 106.405 201.144 106.392 201.17 106.367C201.195 106.341 201.209 106.306 201.209 106.27C201.209 106.234 201.195 106.199 201.17 106.173L199.765 104.766H201.344C201.381 104.766 201.415 104.751 201.441 104.726C201.466 104.7 201.481 104.665 201.481 104.629C201.479 104.594 201.463 104.562 201.438 104.538C201.413 104.514 201.379 104.501 201.344 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M207.071 104.501H205.492L206.896 103.096C206.921 103.07 206.935 103.035 206.935 102.999C206.935 102.963 206.921 102.928 206.896 102.902C206.883 102.889 206.868 102.879 206.852 102.872C206.835 102.865 206.817 102.862 206.799 102.862C206.781 102.862 206.763 102.865 206.747 102.872C206.73 102.879 206.715 102.889 206.702 102.902L205.298 104.309V102.724C205.298 102.688 205.284 102.653 205.258 102.628C205.233 102.602 205.198 102.588 205.162 102.588C205.126 102.588 205.092 102.603 205.066 102.629C205.041 102.654 205.026 102.688 205.025 102.724V104.309L203.624 102.894C203.611 102.881 203.596 102.871 203.58 102.864C203.563 102.857 203.545 102.853 203.527 102.853C203.509 102.853 203.491 102.857 203.475 102.864C203.458 102.871 203.443 102.881 203.43 102.894C203.405 102.92 203.391 102.955 203.391 102.991C203.391 103.027 203.405 103.062 203.43 103.088L204.835 104.492H203.253C203.217 104.493 203.183 104.508 203.157 104.533C203.132 104.559 203.117 104.593 203.117 104.629C203.117 104.665 203.131 104.7 203.157 104.726C203.182 104.751 203.217 104.766 203.253 104.766H204.835L203.43 106.173C203.405 106.199 203.391 106.234 203.391 106.27C203.391 106.306 203.405 106.341 203.43 106.367C203.457 106.392 203.491 106.405 203.527 106.405C203.563 106.405 203.598 106.392 203.624 106.367L205.025 104.96V106.542C205.025 106.578 205.04 106.613 205.065 106.638C205.091 106.664 205.126 106.678 205.162 106.678C205.198 106.678 205.233 106.664 205.258 106.638C205.284 106.613 205.298 106.578 205.298 106.542V104.96L206.702 106.367C206.729 106.392 206.763 106.405 206.799 106.405C206.835 106.405 206.87 106.392 206.896 106.367C206.921 106.341 206.935 106.306 206.935 106.27C206.935 106.234 206.921 106.199 206.896 106.173L205.492 104.766H207.071C207.107 104.766 207.141 104.751 207.167 104.726C207.193 104.7 207.207 104.665 207.207 104.629C207.205 104.594 207.19 104.562 207.164 104.538C207.139 104.514 207.105 104.501 207.071 104.501Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M250.971 137.743C250.963 137.413 250.922 137.084 250.848 136.762C250.603 135.838 250.049 134.721 249.138 134.442C248.198 134.153 247.29 133.769 246.428 133.294C246.264 130.365 246.935 127.367 246.204 124.528C245.932 123.49 245.482 122.495 245.362 121.432C245.212 120.109 245.572 118.699 245.045 117.48C244.631 116.519 243.72 115.841 242.741 115.486C241.762 115.13 240.707 115.035 239.668 114.939C238.359 114.833 234.121 114.33 232.643 115.502C232.542 115.581 232.45 115.673 232.371 115.775V115.775C232.338 115.82 232.309 115.868 232.284 115.917L232.27 115.939C232.24 115.996 232.216 116.056 232.196 116.117V116.117C232.176 116.184 232.16 116.252 232.15 116.322C232.15 116.344 232.15 116.366 232.15 116.387C232.15 116.409 232.15 116.483 232.15 116.532V116.606C232.15 116.655 232.15 116.704 232.15 116.756C232.15 116.808 232.15 116.795 232.15 116.814C232.169 117.06 232.204 117.306 232.204 117.549C232.207 117.67 232.196 117.791 232.172 117.91C232.081 118.232 231.927 118.533 231.719 118.795V118.795L231.67 118.866C231.64 118.91 231.61 118.951 231.583 118.994C231.555 119.038 231.534 119.071 231.512 119.109C231.49 119.147 231.468 119.172 231.449 119.208C231.423 119.253 231.399 119.299 231.378 119.347C231.378 119.374 231.348 119.399 231.337 119.426C231.303 119.5 231.276 119.577 231.255 119.656C231.192 119.893 231.186 120.142 231.239 120.383C231.313 120.689 231.439 120.98 231.613 121.243C231.681 121.355 231.755 121.465 231.831 121.574L232.022 121.834C231.986 122.087 231.967 122.343 231.964 122.599C231.965 123.454 232.159 124.299 232.532 125.069C232.905 125.838 233.447 126.513 234.119 127.042C234.227 128.196 234.215 129.358 234.083 130.51C234.059 130.75 234.029 130.993 233.996 131.234C233.963 131.474 233.939 131.633 233.906 131.832C233.507 131.889 233.1 131.859 232.714 131.742C232.536 131.662 232.354 131.592 232.169 131.532C231.375 131.332 230.566 132.125 229.78 131.884C229.78 131.922 229.758 131.958 229.745 131.993C229.581 131.891 229.392 131.836 229.199 131.832C228.733 131.81 228.354 131.471 228.016 131.152L226.977 130.171C226.909 130.111 226.849 130.043 226.797 129.969C226.741 129.862 226.699 129.749 226.672 129.632C226.497 129.067 226.074 128.616 225.665 128.187C225.588 128.089 225.485 128.014 225.368 127.971C225.323 127.964 225.277 127.964 225.232 127.971C225.204 127.933 225.174 127.896 225.142 127.862C225.071 127.781 224.996 127.704 224.915 127.632C224.419 127.173 224.37 126.78 223.939 126.266C223.564 125.776 223.223 125.26 222.919 124.722C222.884 124.435 222.835 124.14 222.775 123.842C222.637 123.16 222.438 122.492 222.178 121.847L221.632 120.637L221.57 120.7C221.174 120.109 220.752 119.787 220.373 119.863C219.737 119.995 219.424 121.23 219.524 122.845L219.743 124.484C219.743 124.525 219.762 124.566 219.773 124.607C219.733 124.801 219.713 124.999 219.713 125.197C219.713 125.427 219.925 125.596 220.037 125.801C220.216 126.079 220.311 126.403 220.31 126.733C220.296 126.851 220.261 126.963 220.255 127.077C220.27 127.334 220.359 127.581 220.512 127.788L221.875 130.083L222.148 130.564L222.164 130.586C222.25 130.754 222.376 130.898 222.529 131.007C222.583 131.582 222.735 132.143 222.979 132.666C223.026 132.769 223.078 132.868 223.132 132.966C223.499 133.57 223.93 134.132 224.419 134.641L225.068 135.371C225.709 136.087 226.35 136.806 227.045 137.467C227.294 137.732 227.595 137.943 227.929 138.087C228.092 138.153 228.27 138.174 228.444 138.148C228.619 138.123 228.783 138.052 228.921 137.942C228.921 138.281 228.921 138.62 228.921 138.959C229.023 138.965 229.12 138.998 229.204 139.055C229.289 139.112 229.356 139.19 229.4 139.282C229.444 139.373 229.463 139.475 229.454 139.576C229.446 139.678 229.411 139.775 229.352 139.858C228.779 141.331 228.201 142.817 227.334 144.137C227.946 144.5 228.514 144.934 229.025 145.43C229.357 145.798 229.652 146.198 229.906 146.624C229.93 146.826 229.949 147.026 229.96 147.225C230.162 150.482 228.905 153.715 227.779 156.819C227.454 157.699 227.1 158.62 227.127 159.535C226.913 159.667 226.709 159.814 226.516 159.975C226.74 160.56 226.653 161.082 226.628 161.708C226.62 162.083 226.543 162.453 226.402 162.801C226.283 163.042 226.152 163.276 226.009 163.503C225.303 164.752 225.147 166.236 225.005 167.662C224.921 168.523 225.254 169.575 224.864 170.346C224.19 171.668 223.593 173.078 223.5 174.548C223.497 174.879 223.455 175.208 223.375 175.529C223.29 175.803 223.14 176.035 223.064 176.303C222.985 176.662 222.967 177.031 223.009 177.396C223.061 178.706 222.867 180.014 222.437 181.252C222.096 182.227 221.72 183.271 221.987 184.274C221.329 184.966 220.923 185.86 220.833 186.812C220.826 187.056 220.797 187.298 220.746 187.537C220.663 187.78 220.553 188.014 220.419 188.233C219.87 189.235 219.613 190.371 219.677 191.512C218.859 192.625 218.45 193.996 218.207 195.36C217.965 196.724 217.858 198.112 217.547 199.459C217.133 201.241 216.383 203.041 216.236 204.867C215.352 205.432 214.971 206.528 214.802 207.564C214.632 208.6 214.605 209.687 214.172 210.644C213.948 211.141 213.626 211.586 213.414 212.095C213.264 212.499 213.155 212.917 213.086 213.343C212.955 214.01 212.841 214.753 213.002 215.393C212.77 215.638 212.501 215.844 212.203 216.002C212.246 215.833 212.282 215.663 212.312 215.491C211.608 216.131 210.332 215.907 209.77 216.674C209.602 216.922 209.536 217.226 209.587 217.521C209.638 217.816 209.801 218.08 210.043 218.257C210.219 218.364 210.409 218.446 210.608 218.5C211.971 218.937 213.373 219.377 214.774 219.145C214.94 219.127 215.1 219.076 215.246 218.994C215.428 218.86 215.578 218.686 215.685 218.486C215.895 218.153 216.105 217.819 216.312 217.486C216.814 217.636 217.325 217.756 217.842 217.844C217.894 218.281 217.932 218.718 217.951 219.156C218.224 219.21 218.589 219.227 218.717 218.973C218.756 218.876 218.772 218.773 218.764 218.669C218.764 218.475 218.791 218.218 218.807 217.956H218.862C219.694 217.99 220.522 217.822 221.275 217.467C220.983 215.046 221.946 212.679 222.78 210.389C223.661 207.979 224.416 205.525 225.177 203.071C225.723 201.344 226.325 199.672 226.86 197.942C227.532 195.756 228.208 193.57 228.886 191.384C229.18 190.422 229.478 189.471 229.816 188.515C230.527 186.579 231.372 184.696 232.344 182.877C232.616 182.361 232.889 181.85 233.112 181.314C233.385 180.661 233.579 179.978 233.797 179.303C234.272 177.918 234.845 176.569 235.509 175.264C235.528 175.229 235.542 175.196 235.561 175.163C235.782 176.068 236.003 176.986 236.15 177.896C236.35 179.012 236.365 180.153 236.197 181.273C236.066 182.036 235.818 182.79 235.848 183.563C235.888 184.632 236.458 185.602 236.739 186.632C236.92 187.403 237.023 188.19 237.045 188.982C237.121 190.212 237.786 191.592 237.317 192.731C235.858 196.341 236.565 200.418 235.733 204.208C235.305 206.154 233.993 207.982 234.097 209.971C234.17 211.383 234.293 212.791 234.468 214.196C234.51 214.639 234.625 215.072 234.809 215.478C234.917 215.691 235.042 215.895 235.182 216.09C235.062 216.136 234.961 216.259 234.874 216.519C234.65 217.202 234.874 218.049 235.479 218.431C235.726 218.564 235.992 218.656 236.267 218.705C236.638 218.81 237.022 218.864 237.407 218.863C237.527 218.857 237.647 218.842 237.765 218.82C238.186 218.997 238.617 219.152 239.054 219.284C239.054 219.396 239.076 219.508 239.09 219.62C239.091 219.679 239.104 219.736 239.128 219.79C239.152 219.843 239.188 219.89 239.232 219.929C239.3 219.961 239.375 219.974 239.45 219.967H240.93C240.93 219.844 240.93 219.719 240.93 219.596C241.1 219.613 241.271 219.595 241.433 219.542C241.595 219.49 241.744 219.404 241.871 219.29C242.002 219.122 242.095 218.928 242.144 218.721C242.547 217.349 242.948 215.977 243.346 214.603C243.824 213.085 244.022 211.492 243.933 209.903C243.406 204.867 244.563 199.814 244.186 194.764C243.96 191.729 244.116 188.677 244.65 185.681C244.773 185.003 244.923 184.315 244.977 183.64C245.097 182.366 244.95 181.079 245.04 179.814C245.07 179.371 245.13 178.932 245.184 178.492C245.558 175.761 245.754 173.009 245.771 170.253C245.762 169.34 245.706 168.427 245.602 167.52C245.886 167.448 246.144 167.296 246.346 167.083C246.589 166.766 246.526 166.321 246.523 165.916C246.523 164.949 246.93 164.036 247.257 163.123C247.677 161.864 248.021 160.581 248.288 159.281C248.569 158.234 248.723 157.155 248.746 156.07C248.746 155.961 248.74 155.852 248.729 155.743C248.832 155.671 248.918 155.578 248.98 155.469C249.051 155.309 249.096 155.138 249.111 154.964C249.209 154.267 249.31 153.567 249.408 152.868C249.481 152.367 249.553 151.867 249.624 151.368L250.491 145.304C250.564 144.777 250.641 144.252 250.714 143.727L250.941 142.159C250.965 141.973 250.993 141.787 251.012 141.612C251.677 140.497 251.042 139.011 250.971 137.743ZM243.736 160.445C243.415 159.68 243.115 158.896 243.191 158.071H243.161C243.233 157.817 243.22 157.546 243.126 157.3C243.041 157.101 242.894 156.931 242.804 156.732C242.707 156.488 242.657 156.229 242.657 155.967C242.589 154.305 242.72 152.641 243.046 151.01C243.082 150.818 243.12 150.624 243.156 150.433C243.27 150.367 243.375 150.285 243.466 150.19C243.61 150.026 243.728 149.842 243.818 149.643C244.126 149.023 244.407 148.392 244.666 147.75C244.751 147.542 244.873 147.302 245.083 147.25C245.04 148.848 245.203 150.48 244.554 151.922C244.431 152.155 244.339 152.403 244.282 152.66C244.222 153.067 244.391 153.48 244.331 153.884C244.301 154.095 244.211 154.289 244.175 154.497C244.148 154.598 244.149 154.706 244.177 154.807C244.204 154.909 244.259 155.002 244.334 155.076C244.37 155.101 244.409 155.121 244.451 155.136C244.434 155.245 244.421 155.357 244.41 155.464C244.388 155.688 244.377 155.898 244.364 156.029C244.301 156.698 244.276 157.369 244.29 158.041C244.29 158.765 244.317 159.489 244.306 160.227C244.316 160.439 244.281 160.65 244.203 160.847C244.149 160.949 244.079 161.041 243.995 161.12C243.916 160.874 243.829 160.659 243.736 160.445Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.04'\n            />\n            <path\n                d='M222.211 128.739C223.043 128.568 223.326 126.515 222.843 124.154C222.361 121.793 221.295 120.018 220.463 120.188C219.631 120.359 219.347 122.412 219.83 124.773C220.313 127.134 221.379 128.91 222.211 128.739Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M234.918 216.571C234.694 217.248 234.918 218.095 235.523 218.464C235.768 218.595 236.032 218.687 236.306 218.738C236.676 218.842 237.058 218.895 237.443 218.893C237.914 218.871 238.367 218.686 238.839 218.62C238.893 218.606 238.951 218.614 239 218.642C239.023 218.667 239.041 218.698 239.051 218.731C239.062 218.764 239.065 218.799 239.06 218.833C239.065 219.102 239.085 219.37 239.12 219.637C239.12 219.695 239.133 219.753 239.157 219.806C239.182 219.86 239.217 219.907 239.262 219.945C239.33 219.977 239.405 219.99 239.48 219.984H240.958C240.991 218.682 240.849 217.383 240.535 216.12C240.515 216.023 240.478 215.931 240.426 215.846C240.301 215.709 240.136 215.613 239.954 215.573C239.593 215.423 239.203 215.354 238.812 215.374C238.334 215.437 237.936 215.745 237.53 216.002C237.124 216.259 236.57 216.486 236.077 216.355C235.583 216.224 235.171 215.811 234.918 216.571Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M213.217 215.371C212.802 215.817 212.292 216.164 211.725 216.387L211.475 216.508C211.44 216.521 211.41 216.545 211.39 216.576C211.385 216.597 211.385 216.619 211.39 216.641C211.395 216.662 211.404 216.682 211.417 216.699C211.626 217.023 211.935 217.269 212.296 217.401C212.657 217.532 213.051 217.542 213.419 217.429C213.581 217.388 213.732 217.309 213.858 217.199C214.066 216.952 214.185 216.642 214.196 216.319C214.279 215.986 214.264 215.636 214.155 215.311C213.776 214.456 213.637 214.844 213.217 215.371Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M218.884 218.738C218.892 218.841 218.876 218.945 218.837 219.041C218.709 219.292 218.352 219.279 218.074 219.224C218.032 218.297 217.919 217.374 217.738 216.464C217.209 216.439 216.828 216.942 216.544 217.393L215.813 218.554C215.707 218.754 215.558 218.928 215.377 219.063C215.231 219.143 215.071 219.194 214.905 219.213C213.509 219.445 212.099 219.005 210.752 218.568C210.554 218.515 210.364 218.434 210.188 218.328C209.947 218.151 209.785 217.887 209.734 217.593C209.683 217.299 209.748 216.996 209.915 216.748C210.479 215.983 211.747 216.202 212.451 215.568C212.377 216.014 212.257 216.451 212.091 216.871C213.032 216.729 213.664 215.866 214.422 215.289C214.613 215.127 214.842 215.018 215.088 214.972C215.272 214.957 215.457 214.976 215.633 215.029C216.507 215.25 217.325 215.653 218.033 216.213C218.319 216.439 218.766 216.759 218.892 217.109C219.025 217.527 218.884 218.292 218.884 218.738Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M237.642 128.578C240.753 128.578 243.275 126.05 243.275 122.932C243.275 119.814 240.753 117.287 237.642 117.287C234.53 117.287 232.008 119.814 232.008 122.932C232.008 126.05 234.53 128.578 237.642 128.578Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M248.74 156.265C248.717 157.344 248.564 158.416 248.285 159.459C248.018 160.754 247.674 162.031 247.254 163.285C246.929 164.195 246.523 165.107 246.526 166.072C246.526 166.474 246.591 166.919 246.346 167.236C246.127 167.458 245.852 167.616 245.55 167.692C245.399 167.732 245.26 167.807 245.143 167.911C245.027 168.015 244.936 168.145 244.879 168.291C244.623 167.907 244.431 167.485 244.312 167.039C243.823 165.538 243.368 164.029 242.948 162.511C242.91 162.424 242.893 162.329 242.9 162.233C242.907 162.138 242.936 162.046 242.986 161.965C243.056 161.904 243.136 161.859 243.224 161.831C243.503 161.717 243.759 161.552 243.979 161.344C244.082 161.253 244.167 161.142 244.23 161.019C244.309 160.823 244.345 160.613 244.336 160.402C244.336 159.678 244.336 158.956 244.317 158.232C244.306 157.563 244.331 156.895 244.393 156.229C244.393 156.098 244.418 155.887 244.44 155.663C244.481 155.234 244.563 154.737 244.794 154.57C245.141 154.338 246.177 154.65 246.57 154.704C247.246 154.797 247.933 154.906 248.593 155.035C248.689 155.438 248.738 155.85 248.74 156.265Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M225.993 129.253C225.774 129.69 225.251 129.9 224.847 130.176L223.465 131.127C223.372 131.211 223.264 131.274 223.146 131.315C223.029 131.355 222.904 131.371 222.78 131.362C222.668 131.321 222.565 131.257 222.477 131.175C222.39 131.093 222.319 130.994 222.27 130.884C222.271 130.877 222.271 130.869 222.27 130.862L221.984 130.381L220.621 128.091C220.469 127.886 220.381 127.641 220.367 127.386C220.367 127.269 220.408 127.159 220.419 127.042C220.422 126.712 220.327 126.388 220.146 126.113C220.037 125.908 219.819 125.739 219.824 125.509C219.814 125.207 219.866 124.907 219.977 124.626C220.12 124.367 220.325 124.147 220.574 123.987C220.702 123.894 220.833 123.807 220.97 123.714C221.042 123.664 221.122 123.627 221.207 123.604C221.433 123.558 221.657 123.746 221.886 123.755C222.87 124.416 223.249 125.667 224.024 126.569C224.46 127.083 224.504 127.476 224.997 127.936C225.076 128.007 225.153 128.083 225.226 128.162C225.324 128.269 225.406 128.388 225.472 128.518C225.562 128.753 226.104 129.029 225.993 129.253Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M235.662 128.58C236.068 129.441 236.385 130.387 236.267 131.332C236.243 131.588 236.162 131.836 236.03 132.056C235.637 132.66 234.814 132.769 234.097 132.805C233.946 132.792 233.793 132.81 233.649 132.857C233.505 132.904 233.372 132.979 233.257 133.078C233.161 133.218 233.114 133.385 233.123 133.554C233.133 133.724 233.198 133.885 233.309 134.013C233.539 134.259 233.825 134.447 234.143 134.559C235.277 135.059 236.502 135.472 237.734 135.357C238.307 135.303 238.863 135.136 239.433 135.051C240.054 134.984 240.679 134.949 241.304 134.947C242.046 134.92 242.784 134.846 243.523 134.772L245.481 134.578C245.588 134.58 245.692 134.542 245.773 134.472C245.918 134.302 245.732 134.054 245.552 133.925C244.513 133.155 243.191 132.625 242.599 131.466C242.326 130.92 242.242 130.269 242.04 129.679C241.838 129.089 241.516 128.556 241.391 127.955C241.324 127.427 241.294 126.896 241.301 126.364C241.308 125.828 241.113 125.309 240.756 124.911C240.366 124.547 239.801 124.454 239.272 124.432C237.969 124.375 236.581 124.686 235.656 125.607C235.408 125.856 235.196 126.154 234.939 126.378C234.683 126.602 234.334 126.668 234.503 126.963C234.672 127.258 235.005 127.441 235.185 127.701C235.367 127.981 235.526 128.275 235.662 128.58V128.58Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M246.769 136.53C246.425 138.634 245.865 140.697 245.1 142.686C244.715 143.584 244.387 144.506 244.118 145.446C243.908 146.293 243.949 147.2 243.755 148.05C243.515 149.108 243.275 150.168 243.082 151.234C242.757 152.861 242.627 154.522 242.695 156.18C242.695 156.441 242.745 156.7 242.842 156.942C242.932 157.139 243.076 157.308 243.161 157.511C243.224 157.688 243.25 157.877 243.237 158.065C243.224 158.253 243.172 158.437 243.085 158.604C242.945 158.916 242.755 159.204 242.523 159.456C239.981 160.216 237.263 159.967 234.615 160.128C232.174 160.276 229.706 160.779 227.301 160.361C227.029 159.268 227.484 158.123 227.874 157.057C229.006 153.961 230.257 150.736 230.055 147.493C230.034 147.114 229.992 146.738 229.927 146.364C229.532 144.066 229.963 141.686 230.653 139.459C231.081 138.071 231.062 136.592 230.964 135.147C230.915 134.677 230.909 134.205 230.944 133.734C230.984 133.254 231.162 132.795 231.457 132.414C231.457 132.395 231.482 132.376 231.495 132.357C231.509 132.338 231.615 132.34 231.7 132.357C231.721 132.366 231.745 132.371 231.768 132.371C231.791 132.371 231.815 132.366 231.836 132.357L231.866 132.338C231.878 132.329 231.891 132.325 231.906 132.325C231.92 132.325 231.934 132.329 231.945 132.338C232.008 132.376 232.043 132.507 232.18 132.532C232.381 132.562 232.584 132.581 232.788 132.589C233.033 132.596 233.276 132.631 233.513 132.693H233.546C233.901 132.753 234.265 132.722 234.604 132.603C234.83 132.546 235.048 132.462 235.253 132.351C235.313 132.286 235.689 132.226 235.766 132.179C236.014 132.029 235.959 131.324 236.011 131.034C236.04 130.744 236.108 130.459 236.216 130.187C236.34 129.987 236.511 129.82 236.715 129.701C236.918 129.583 237.147 129.516 237.383 129.507C237.852 129.496 238.321 129.538 238.782 129.632C239.799 129.777 240.84 129.753 241.838 129.988C242.34 130.105 242.888 130.283 243.349 130.053C243.474 130.083 243.494 130.193 243.494 130.327C243.482 130.454 243.456 130.579 243.417 130.701C243.243 131.455 243.834 132.149 244.38 132.696C244.61 132.953 244.882 133.17 245.184 133.338C245.457 133.464 245.73 133.515 246.002 133.652C246.223 133.77 246.411 133.942 246.548 134.152C246.705 134.393 246.811 134.664 246.859 134.947C246.917 135.476 246.887 136.011 246.769 136.53Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.1'\n                d='M246.768 136.53C246.425 138.634 245.865 140.697 245.1 142.686C244.715 143.584 244.387 144.506 244.118 145.446C243.908 146.293 243.949 147.2 243.755 148.05C243.515 149.108 243.275 150.168 243.082 151.234C243.024 151.267 242.965 151.297 242.905 151.324C242.565 151.486 242.206 151.602 241.836 151.668C241.171 151.749 240.498 151.727 239.84 151.603L235.948 151.081C234.394 150.87 232.739 150.616 231.585 149.561C230.944 148.982 230.525 148.217 230.064 147.479C230.043 147.101 230 146.724 229.936 146.351C229.54 144.052 229.971 141.672 230.661 139.445C231.089 138.057 231.07 136.579 230.972 135.133C230.923 134.664 230.917 134.191 230.953 133.72C230.992 133.24 231.17 132.781 231.465 132.401C231.545 132.377 231.626 132.359 231.708 132.346V132.346C231.763 132.335 231.818 132.328 231.874 132.324H231.953C232.045 132.324 232.137 132.335 232.226 132.357C232.412 132.416 232.594 132.486 232.771 132.567H232.804C233.038 132.644 233.284 132.68 233.53 132.671C233.889 132.671 234.26 132.614 234.62 132.589C235.065 132.52 235.52 132.601 235.913 132.821C236.166 133.026 236.407 133.246 236.633 133.48C236.906 133.695 237.213 133.862 237.541 133.975C239.888 134.872 242.492 134.818 244.8 133.822C245.021 133.695 245.273 133.631 245.528 133.636C245.716 133.673 245.894 133.749 246.051 133.86C246.215 133.955 246.376 134.048 246.542 134.133C246.699 134.374 246.805 134.645 246.853 134.928C246.916 135.463 246.887 136.004 246.768 136.53V136.53Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M249.144 134.721C248.058 134.388 247.015 133.93 246.035 133.354C245.878 133.244 245.7 133.168 245.512 133.13C245.256 133.127 245.004 133.191 244.781 133.316C242.474 134.312 239.871 134.367 237.525 133.469C237.197 133.355 236.89 133.188 236.617 132.974C236.39 132.741 236.149 132.521 235.897 132.316C234.999 131.734 233.759 132.417 232.755 132.043C232.577 131.963 232.395 131.893 232.21 131.832C231.416 131.633 230.609 132.425 229.829 132.185C229.539 132.975 229.325 133.791 229.189 134.622C229.078 135.577 229.018 136.536 229.011 137.497C229.011 138.073 228.984 138.65 229.011 139.227C229.107 139.242 229.199 139.278 229.281 139.331C229.363 139.384 229.432 139.454 229.486 139.535C229.522 139.631 229.536 139.733 229.529 139.834C229.521 139.935 229.492 140.034 229.442 140.123C228.872 141.59 228.294 143.074 227.43 144.389C228.039 144.752 228.604 145.185 229.115 145.678C230.069 146.689 230.538 148.108 231.569 149.042C232.731 150.094 234.386 150.351 235.932 150.559L239.823 151.081C240.482 151.204 241.156 151.227 241.822 151.149C242.191 151.082 242.55 150.965 242.888 150.802C243.109 150.709 243.311 150.576 243.483 150.408C243.627 150.245 243.745 150.061 243.835 149.862C244.143 149.244 244.424 148.613 244.683 147.974C244.773 147.747 244.909 147.482 245.154 147.463C246.6 146.157 247.963 144.818 249.408 143.511C249.989 143.029 250.51 142.479 250.96 141.872C251.677 140.809 251.025 139.303 250.96 138.019C250.952 137.69 250.911 137.363 250.837 137.043C250.603 136.111 250.052 134.997 249.144 134.721Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                opacity='0.1'\n                d='M225.993 129.253C225.774 129.69 225.251 129.9 224.847 130.176L223.465 131.127C223.372 131.211 223.264 131.274 223.146 131.315C223.029 131.355 222.904 131.371 222.78 131.362C222.668 131.321 222.565 131.257 222.477 131.175C222.39 131.093 222.319 130.994 222.27 130.884C222.27 130.821 222.27 130.753 222.27 130.687C222.26 130.466 222.289 130.245 222.358 130.034C222.493 129.725 222.703 129.455 222.968 129.247C223.482 128.76 224.092 128.387 224.76 128.154C224.864 128.114 224.977 128.102 225.087 128.121C225.13 128.132 225.17 128.15 225.207 128.173C225.305 128.28 225.387 128.399 225.453 128.528C225.562 128.753 226.104 129.029 225.993 129.253Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M229.248 132.133C228.785 132.111 228.406 131.775 228.068 131.455L227.034 130.493C226.965 130.435 226.904 130.367 226.854 130.291C226.798 130.185 226.756 130.072 226.729 129.955C226.51 129.403 226.166 128.909 225.725 128.512C225.648 128.414 225.545 128.34 225.428 128.299C225.317 128.278 225.203 128.29 225.098 128.332C224.43 128.565 223.82 128.937 223.306 129.425C223.041 129.633 222.831 129.903 222.696 130.212C222.627 130.422 222.598 130.644 222.608 130.865C222.615 131.587 222.777 132.299 223.083 132.953C223.129 133.054 223.181 133.155 223.236 133.253C223.599 133.856 224.029 134.416 224.517 134.923L225.166 135.65C225.804 136.366 226.442 137.082 227.135 137.74C227.383 138.006 227.684 138.216 228.018 138.358C228.186 138.426 228.37 138.447 228.549 138.418C228.728 138.389 228.895 138.312 229.033 138.194C229.164 138.042 229.262 137.866 229.322 137.675C229.742 136.582 230.14 135.445 230.165 134.267C230.17 133.795 230.15 133.324 230.105 132.854C230.064 132.357 229.712 132.163 229.248 132.133Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M245.773 170.389C245.758 173.138 245.563 175.883 245.19 178.606C245.135 179.046 245.075 179.486 245.045 179.926C244.955 181.202 245.103 182.484 244.983 183.752C244.92 184.438 244.778 185.118 244.658 185.788C244.125 188.776 243.969 191.819 244.195 194.846C244.571 199.883 243.417 204.921 243.941 209.944C244.004 210.921 243.95 211.901 243.78 212.865C243.682 213.463 243.541 214.053 243.357 214.63C242.959 215.999 242.559 217.365 242.158 218.729C242.11 218.937 242.017 219.131 241.885 219.298C241.746 219.418 241.583 219.508 241.406 219.56C241.23 219.612 241.044 219.626 240.862 219.601C239.289 219.552 237.808 218.871 236.379 218.207C236.215 218.142 236.063 218.05 235.929 217.934C235.632 217.625 235.657 217.139 235.526 216.732C235.395 216.325 235.04 215.942 234.839 215.524C234.673 215.129 234.572 214.709 234.541 214.281C234.36 212.882 234.236 211.477 234.17 210.067C234.067 208.083 235.376 206.258 235.807 204.328C236.625 200.536 235.932 196.469 237.385 192.871C237.844 191.734 237.178 190.357 237.113 189.132C237.089 188.343 236.987 187.557 236.807 186.788C236.535 185.76 235.959 184.793 235.918 183.727C235.888 182.957 236.137 182.205 236.265 181.446C236.435 180.328 236.419 179.189 236.218 178.076C236.074 177.158 235.853 176.24 235.632 175.344L235.583 175.445C234.919 176.746 234.347 178.093 233.873 179.475C233.655 180.145 233.464 180.828 233.192 181.478C232.968 182.025 232.693 182.525 232.423 183.039C231.454 184.85 230.612 186.727 229.9 188.654C229.562 189.6 229.265 190.567 228.97 191.515L226.95 198.074C226.404 199.798 225.807 201.465 225.273 203.186C224.517 205.646 223.762 208.083 222.884 210.488C222.066 212.77 221.092 215.133 221.384 217.543C220.632 217.898 219.806 218.065 218.976 218.033C217.571 217.908 216.192 217.573 214.886 217.038C214.365 216.844 213.825 216.625 213.474 216.196C212.868 215.456 213.018 214.371 213.201 213.428C213.27 213.003 213.379 212.586 213.528 212.182C213.735 211.679 214.073 211.234 214.286 210.736C214.714 209.783 214.742 208.703 214.911 207.668C215.08 206.632 215.456 205.539 216.339 204.976C216.489 203.156 217.237 201.361 217.648 199.582C217.959 198.235 218.063 196.849 218.308 195.483C218.554 194.117 218.949 192.75 219.773 191.644C219.708 190.503 219.965 189.366 220.514 188.365C220.647 188.145 220.756 187.911 220.839 187.668C220.89 187.43 220.919 187.189 220.926 186.946C221.016 185.997 221.421 185.105 222.077 184.413C221.804 183.416 222.183 182.375 222.524 181.407C222.953 180.173 223.148 178.869 223.097 177.563C223.054 177.198 223.072 176.829 223.148 176.469C223.225 176.196 223.375 175.964 223.462 175.702C223.54 175.38 223.581 175.051 223.585 174.721C223.691 173.242 224.288 171.849 224.948 170.529C225.341 169.758 225.008 168.712 225.09 167.854C225.232 166.427 225.387 164.952 226.093 163.708C226.224 163.473 226.366 163.249 226.483 163.006C226.626 162.659 226.702 162.288 226.71 161.913C226.734 161.287 226.822 160.768 226.598 160.186C228.057 158.97 230.047 158.628 231.945 158.546C233.843 158.464 235.763 158.636 237.62 158.232C238.165 158.109 238.711 157.94 239.286 157.858C240.592 157.666 241.918 157.964 243.207 158.259C243.117 159.079 243.417 159.866 243.753 160.629C245.062 163.717 245.749 167.034 245.773 170.389V170.389Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.1'\n                d='M239.351 171.015L236.218 178.076C236.074 177.158 235.853 176.24 235.632 175.344L235.583 175.445V175.297L237.29 171.534L239.351 171.015Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.1'\n                d='M248.74 156.264C248.559 156.4 248.343 156.481 248.118 156.497C247.773 156.509 247.428 156.462 247.098 156.357L244.644 155.743C244.567 155.724 244.492 155.697 244.421 155.663C244.462 155.234 244.543 154.737 244.775 154.57C245.121 154.338 246.158 154.65 246.55 154.704C247.227 154.797 247.914 154.906 248.574 155.035C248.676 155.437 248.732 155.85 248.74 156.264V156.264Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M250.815 140.005C250.867 140.232 250.941 140.456 250.984 140.686C251.058 141.249 251.038 141.82 250.927 142.377L250.703 143.94L250.48 145.512L249.615 151.559L249.403 153.056L249.103 155.147C249.089 155.321 249.044 155.491 248.972 155.65C248.883 155.798 248.758 155.922 248.609 156.01C248.46 156.099 248.291 156.148 248.118 156.155C247.773 156.166 247.428 156.119 247.099 156.016L244.644 155.398C244.537 155.379 244.434 155.337 244.344 155.275C244.269 155.202 244.215 155.11 244.187 155.008C244.16 154.907 244.159 154.8 244.186 154.699C244.222 154.491 244.312 154.297 244.342 154.089C244.402 153.685 244.233 153.27 244.293 152.868C244.351 152.612 244.443 152.365 244.565 152.133C245.383 150.321 244.909 148.206 245.187 146.239C245.437 144.69 246.09 143.235 247.079 142.019C247.69 141.252 248.391 140.562 249.168 139.964C249.474 139.727 249.959 139.238 250.344 139.145C250.837 139.041 250.733 139.661 250.815 140.005Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M232.242 116.467C232.062 117.041 232.343 117.672 232.215 118.257C232.076 118.901 231.471 119.35 231.299 119.997C231.026 120.984 231.861 121.883 232.471 122.703C234.735 125.747 234.438 129.96 233.663 133.674C233.04 136.653 232.178 139.578 231.086 142.418C230.745 143.301 230.369 144.197 229.698 144.859C230.953 144.498 232.286 144.134 233.543 144.484C235.136 144.927 236.51 146.476 238.124 146.124C239.095 145.908 239.777 145.044 240.649 144.566C242.285 143.684 244.257 144.238 246.081 144.522C246.474 144.615 246.886 144.595 247.267 144.462C247.559 144.305 247.807 144.077 247.987 143.798C248.802 142.752 249.289 141.487 249.389 140.164C249.432 139.505 249.335 138.844 249.104 138.226C248.873 137.607 248.514 137.045 248.05 136.576C247.663 136.21 247.199 135.915 246.902 135.483C246.613 134.979 246.458 134.409 246.452 133.827C246.237 130.821 246.968 127.752 246.215 124.845C245.942 123.809 245.498 122.817 245.378 121.757C245.228 120.437 245.585 119.024 245.061 117.817C244.65 116.857 243.742 116.177 242.763 115.827C241.784 115.478 240.737 115.379 239.698 115.281C238.203 115.155 232.867 114.513 232.242 116.467Z'\n                fill='var(--center-channel-color)'\n            />\n            <g opacity='0.1'>\n                <path\n                    opacity='0.1'\n                    d='M233.663 133.674C233.043 136.641 232.186 139.553 231.1 142.383C231.288 142.008 231.446 141.615 231.596 141.224C232.689 138.384 233.551 135.46 234.173 132.48C234.95 128.763 235.247 124.555 232.984 121.508C232.439 120.782 231.738 119.995 231.762 119.142C231.561 119.4 231.404 119.69 231.299 120C231.026 120.986 231.861 121.886 232.471 122.705C234.735 125.747 234.438 129.96 233.663 133.674Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    opacity='0.1'\n                    d='M232.248 117.981C232.467 117.708 232.63 117.395 232.728 117.06C232.77 116.654 232.759 116.244 232.695 115.841C232.485 115.999 232.327 116.217 232.242 116.467C232.081 116.95 232.267 117.475 232.248 117.981Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    opacity='0.1'\n                    d='M248.5 142.596C248.32 142.874 248.072 143.101 247.78 143.257C247.399 143.392 246.987 143.413 246.594 143.317C244.77 143.044 242.776 142.481 241.162 143.364C240.287 143.839 239.608 144.703 238.634 144.921C237.023 145.282 235.648 143.733 234.056 143.282C232.927 142.968 231.738 143.227 230.601 143.555C230.375 144.038 230.07 144.479 229.698 144.861C230.953 144.501 232.286 144.137 233.543 144.487C235.136 144.93 236.51 146.479 238.124 146.126C239.095 145.911 239.777 145.047 240.649 144.569C242.286 143.686 244.257 144.241 246.081 144.525C246.474 144.618 246.886 144.597 247.268 144.465C247.559 144.308 247.807 144.079 247.987 143.801C248.482 143.148 248.863 142.416 249.116 141.637C248.934 141.971 248.728 142.291 248.5 142.596Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <path\n                d='M92.9997 79.4444C89.9231 79.4444 86.9156 80.3567 84.3575 82.066C81.7994 83.7753 79.8056 86.2047 78.6282 89.0471C77.4508 91.8895 77.1428 95.0172 77.743 98.0347C78.3432 101.052 79.8247 103.824 82.0002 105.999C84.1757 108.175 86.9474 109.656 89.9649 110.257C92.9824 110.857 96.1101 110.549 98.9525 109.371C101.795 108.194 104.224 106.2 105.934 103.642C107.643 101.084 108.555 98.0766 108.555 95C108.555 92.9572 108.153 90.9344 107.371 89.0471C106.589 87.1598 105.444 85.445 103.999 84.0005C102.555 82.5561 100.84 81.4103 98.9525 80.6285C97.0652 79.8468 95.0424 79.4444 92.9997 79.4444V79.4444ZM95.7896 95.3737V102.739H90.2906V95.3737C89.5296 94.7977 88.9688 93.9972 88.6872 93.0853C88.4057 92.1733 88.4177 91.196 88.7215 90.2913C89.0253 89.3865 89.6056 88.6 90.3805 88.0428C91.1554 87.4856 92.0857 87.1859 93.0401 87.1859C93.9945 87.1859 94.9248 87.4856 95.6996 88.0428C96.4745 88.6 97.0548 89.3865 97.3586 90.2913C97.6624 91.196 97.6744 92.1733 97.3929 93.0853C97.1114 93.9972 96.5505 94.7977 95.7896 95.3737V95.3737Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                opacity='0.05'\n                d='M92.9997 79.4444C89.9231 79.4444 86.9156 80.3567 84.3575 82.066C81.7994 83.7753 79.8056 86.2047 78.6282 89.0471C77.4508 91.8895 77.1428 95.0172 77.743 98.0347C78.3432 101.052 79.8247 103.824 82.0002 105.999C84.1757 108.175 86.9474 109.656 89.9649 110.257C92.9824 110.857 96.1101 110.549 98.9525 109.371C101.795 108.194 104.224 106.2 105.934 103.642C107.643 101.084 108.555 98.0766 108.555 95C108.555 92.9572 108.153 90.9344 107.371 89.0471C106.589 87.1598 105.444 85.445 103.999 84.0005C102.555 82.5561 100.84 81.4103 98.9525 80.6285C97.0652 79.8468 95.0424 79.4444 92.9997 79.4444V79.4444ZM95.7896 95.3737V102.739H90.2906V95.3737C89.5296 94.7977 88.9688 93.9972 88.6872 93.0853C88.4057 92.1733 88.4177 91.196 88.7215 90.2913C89.0253 89.3865 89.6056 88.6 90.3805 88.0428C91.1554 87.4856 92.0857 87.1859 93.0401 87.1859C93.9945 87.1859 94.9248 87.4856 95.6996 88.0428C96.4745 88.6 97.0548 89.3865 97.3586 90.2913C97.6624 91.196 97.6744 92.1733 97.3929 93.0853C97.1114 93.9972 96.5505 94.7977 95.7896 95.3737V95.3737Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M93 75C89.0444 75 85.1776 76.173 81.8886 78.3706C78.5996 80.5682 76.0362 83.6918 74.5224 87.3463C73.0087 91.0009 72.6126 95.0222 73.3843 98.9018C74.156 102.781 76.0608 106.345 78.8579 109.142C81.6549 111.939 85.2186 113.844 89.0982 114.616C92.9778 115.387 96.9991 114.991 100.654 113.478C104.308 111.964 107.432 109.4 109.629 106.111C111.827 102.822 113 98.9556 113 95C113 89.6957 110.893 84.6086 107.142 80.8579C103.391 77.1071 98.3043 75 93 75V75ZM96.5859 95.4808V104.949H89.5152V95.4808C88.5364 94.7401 87.815 93.7107 87.4528 92.5379C87.0906 91.3651 87.1059 90.1081 87.4966 88.9445C87.8873 87.7809 88.6335 86.7694 89.6301 86.0527C90.6266 85.3361 91.8231 84.9506 93.0505 84.9506C94.278 84.9506 95.4744 85.3361 96.471 86.0527C97.4675 86.7694 98.2138 87.7809 98.6044 88.9445C98.9951 90.1081 99.0104 91.3651 98.6482 92.5379C98.286 93.7107 97.5646 94.7401 96.5859 95.4808V95.4808Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M87.1572 127.225C87.1572 128.127 86.8314 128.838 86.1797 129.357C85.5326 129.877 84.6302 130.137 83.4727 130.137C82.4062 130.137 81.4629 129.936 80.6426 129.535V127.566C81.3171 127.867 81.8867 128.079 82.3516 128.202C82.821 128.325 83.2493 128.387 83.6367 128.387C84.1016 128.387 84.457 128.298 84.7031 128.12C84.9538 127.942 85.0791 127.678 85.0791 127.327C85.0791 127.131 85.0244 126.958 84.915 126.808C84.8057 126.653 84.6439 126.505 84.4297 126.363C84.2201 126.222 83.7894 125.996 83.1377 125.687C82.527 125.399 82.069 125.124 81.7637 124.859C81.4583 124.595 81.2145 124.287 81.0322 123.937C80.8499 123.586 80.7588 123.175 80.7588 122.706C80.7588 121.822 81.0573 121.127 81.6543 120.621C82.2559 120.115 83.0853 119.862 84.1426 119.862C84.6621 119.862 85.1566 119.924 85.626 120.047C86.0999 120.17 86.5944 120.343 87.1094 120.566L86.4258 122.214C85.8926 121.995 85.4505 121.842 85.0996 121.756C84.7533 121.669 84.4115 121.626 84.0742 121.626C83.6732 121.626 83.3656 121.719 83.1514 121.906C82.9372 122.093 82.8301 122.337 82.8301 122.638C82.8301 122.825 82.8734 122.989 82.96 123.13C83.0465 123.267 83.1833 123.401 83.3701 123.533C83.5615 123.661 84.0104 123.893 84.7168 124.23C85.651 124.677 86.2913 125.126 86.6377 125.577C86.984 126.024 87.1572 126.573 87.1572 127.225Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M94.8682 127.225C94.8682 128.127 94.5423 128.838 93.8906 129.357C93.2435 129.877 92.3411 130.137 91.1836 130.137C90.1172 130.137 89.1738 129.936 88.3535 129.535V127.566C89.028 127.867 89.5977 128.079 90.0625 128.202C90.5319 128.325 90.9603 128.387 91.3477 128.387C91.8125 128.387 92.168 128.298 92.4141 128.12C92.6647 127.942 92.79 127.678 92.79 127.327C92.79 127.131 92.7354 126.958 92.626 126.808C92.5166 126.653 92.3548 126.505 92.1406 126.363C91.931 126.222 91.5003 125.996 90.8486 125.687C90.238 125.399 89.7799 125.124 89.4746 124.859C89.1693 124.595 88.9255 124.287 88.7432 123.937C88.5609 123.586 88.4697 123.175 88.4697 122.706C88.4697 121.822 88.7682 121.127 89.3652 120.621C89.9668 120.115 90.7962 119.862 91.8535 119.862C92.373 119.862 92.8675 119.924 93.3369 120.047C93.8109 120.17 94.3053 120.343 94.8203 120.566L94.1367 122.214C93.6035 121.995 93.1615 121.842 92.8105 121.756C92.4642 121.669 92.1224 121.626 91.7852 121.626C91.3841 121.626 91.0765 121.719 90.8623 121.906C90.6481 122.093 90.541 122.337 90.541 122.638C90.541 122.825 90.5843 122.989 90.6709 123.13C90.7575 123.267 90.8942 123.401 91.0811 123.533C91.2725 123.661 91.7214 123.893 92.4277 124.23C93.362 124.677 94.0023 125.126 94.3486 125.577C94.695 126.024 94.8682 126.573 94.8682 127.225Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M105.751 124.989C105.751 126.644 105.341 127.915 104.521 128.804C103.7 129.692 102.524 130.137 100.993 130.137C99.4619 130.137 98.2861 129.692 97.4658 128.804C96.6455 127.915 96.2354 126.639 96.2354 124.976C96.2354 123.312 96.6455 122.043 97.4658 121.168C98.2907 120.288 99.471 119.849 101.007 119.849C102.543 119.849 103.716 120.291 104.527 121.175C105.343 122.059 105.751 123.33 105.751 124.989ZM98.457 124.989C98.457 126.106 98.6689 126.947 99.0928 127.512C99.5166 128.077 100.15 128.359 100.993 128.359C102.684 128.359 103.529 127.236 103.529 124.989C103.529 122.738 102.688 121.612 101.007 121.612C100.164 121.612 99.528 121.897 99.0996 122.467C98.6712 123.032 98.457 123.873 98.457 124.989Z'\n                fill='var(--button-bg)'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0'>\n                <rect\n                    width='318'\n                    height='220'\n                    fill='var(--center-channel-bg)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default SamlSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport SamlSVG from './images/saml_svg';\n\nconst SAMLFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='saml'\n            titleID='admin.saml_feature_discovery.title'\n            titleDefault='Integrate SAML 2.0 with MatterFOSS'\n            copyID='admin.saml_feature_discovery.copy'\n            copyDefault={'When you connect MatterFOSS with your organization\\'s single sign-on provider, users can access MatterFOSS without having to re-enter their credentials.'}\n            learnMoreURL='https://www.example.com/docs-saml/?utm_medium=product&utm_source=product-feature-discovery&utm_content=saml'\n            featureDiscoveryImage={<SamlSVG/>}\n        />\n    );\n};\n\nt('admin.saml_feature_discovery.title');\nt('admin.saml_feature_discovery.copy');\n\nexport default SAMLFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport SamlSVG from './images/saml_svg';\n\nconst OpenIDFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='openid'\n            titleID='admin.openid_feature_discovery.title'\n            titleDefault='Integrate OpenID Connect with MatterFOSS'\n            copyID='admin.openid_feature_discovery.copy'\n            copyDefault={'Use OpenID Connect for authentication and single sign-on (SSO) with any service that supports the OIDC specification such as Google, Office 365, Apple, Okta, OneLogin, and more.'}\n            learnMoreURL='https://docs.mattermost.com/cloud/cloud-administration/sso-openid-connect.html'\n            featureDiscoveryImage={<SamlSVG/>}\n        />\n    );\n};\n\nt('admin.openid_feature_discovery.title');\nt('admin.openid_feature_discovery.copy');\n\nexport default OpenIDFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst AnnouncementBannerSVG = () => (\n    <svg\n        width='272'\n        height='220'\n        viewBox='0 0 272 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            opacity='0.08'\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M271.607 9.93672C271.611 9.17488 271.466 8.41969 271.181 7.71431C270.895 7.00893 270.474 6.36719 269.942 5.82577C269.41 5.28434 268.778 4.85385 268.081 4.55887C267.384 4.2639 266.636 4.11023 265.88 4.10666H10.3351C8.8085 4.11491 7.34763 4.73366 6.2736 5.8269C5.19957 6.92014 4.60028 8.3984 4.60749 9.93672V164.267H4.60742V182.548C4.60742 184.079 5.21087 185.547 6.285 186.63C7.35914 187.712 8.81598 188.32 10.335 188.32H106.02L103.134 213.321H172.254L168.459 188.32H263.496C268.885 188.324 271.611 186.112 271.607 180.31C271.607 179.552 271.607 164.267 271.607 164.267M271.607 9.93672L271.607 164.267L271.607 9.93672Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.07'\n            d='M134 218.24C202.544 218.24 258.111 216.795 258.111 215.013C258.111 213.231 202.544 211.787 134 211.787C65.455 211.787 9.88867 213.231 9.88867 215.013C9.88867 216.795 65.455 218.24 134 218.24Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M169.078 213.727H134.665L100.184 213.283L100.389 211.504H168.737L169.078 213.727Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M180.065 211.787H88.5225V214.133H180.065V211.787Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.04'\n        />\n        <path\n            d='M180.065 211.787H88.5225V214.133H180.065V211.787Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.2'\n            d='M180.065 211.787H88.5225V214.133H180.065V211.787Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.15'\n            d='M141.519 184.148L168.846 211.787L164.808 184.148H141.519Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M267.5 5.78782C267.504 5.03149 267.359 4.28178 267.073 3.58151C266.788 2.88124 266.367 2.24415 265.835 1.70665C265.303 1.16915 264.67 0.741773 263.973 0.448937C263.276 0.1561 262.528 0.00354945 261.772 0H6.22768C4.70108 0.00819372 3.2402 0.622454 2.16617 1.70777C1.09214 2.79309 0.492861 4.26064 0.500064 5.78782V160.747H267.5V5.78782Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M0.5 160.16V178.384C0.5 179.913 1.10345 181.379 2.17758 182.46C3.25172 183.54 4.70856 184.148 6.22762 184.148H261.632C262.384 184.148 263.27 183.999 263.965 183.71C264.66 183.42 265.291 182.996 265.823 182.461C266.355 181.925 266.777 181.29 267.065 180.59C267.353 179.891 267.5 179.104 267.5 178.347V160.16H0.5Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M0.5 160.16H267.5V179.167C267.5 181.954 265.24 184.213 262.453 184.213H5.54726C2.75974 184.213 0.5 181.954 0.5 179.167V160.16Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.04'\n        />\n        <ellipse\n            opacity='0.16'\n            cx='134.133'\n            cy='172.427'\n            rx='6.28369'\n            ry='6.32372'\n            fill='var(--center-channel-color)'\n        />\n        <g clipPath='url(#clip0)'>\n            <rect\n                width='246.462'\n                height='140.8'\n                transform='translate(11.0996 9.5874)'\n                fill='var(--center-channel-bg)'\n            />\n            <rect\n                x='11.0996'\n                y='20.1474'\n                width='50.4659'\n                height='130.24'\n                fill='var(--button-bg)'\n            />\n            <rect\n                x='61.5928'\n                y='20.0502'\n                width='195.198'\n                height='14.1936'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M257.713 33.6407H61.7461V33.0541H257.713V33.6407Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <ellipse\n                opacity='0.32'\n                cx='18.198'\n                cy='27.5074'\n                rx='3.84249'\n                ry='3.84'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M25.7734 24.9261C25.7734 24.3688 26.2254 23.9169 26.7829 23.9169H57.0665C57.624 23.9169 58.0759 24.3688 58.0759 24.9261V26.4399C58.0759 26.9973 57.624 27.4491 57.0665 27.4491H26.7829C26.2254 27.4491 25.7734 26.9973 25.7734 26.4399V24.9261Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 41.5779C16.6885 41.0206 17.1404 40.5687 17.6979 40.5687H55.5524C56.1099 40.5687 56.5618 41.0206 56.5618 41.5779C56.5618 42.1353 56.1099 42.5871 55.5524 42.5871H17.6979C17.1404 42.5871 16.6885 42.1353 16.6885 41.5779Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 49.1469C16.6885 48.5896 17.1404 48.1377 17.6979 48.1377H41.42C41.9776 48.1377 42.4295 48.5896 42.4295 49.1469C42.4295 49.7043 41.9776 50.1561 41.42 50.1561H17.6979C17.1404 50.1561 16.6885 49.7043 16.6885 49.1469Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 56.7159C16.6885 56.1586 17.1404 55.7067 17.6979 55.7067H53.0287C53.5862 55.7067 54.0382 56.1586 54.0382 56.7159C54.0382 57.2733 53.5862 57.7251 53.0287 57.7251H17.6979C17.1404 57.7251 16.6885 57.2733 16.6885 56.7159Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 64.2849C16.6885 63.7276 17.1404 63.2757 17.6979 63.2757H45.4579C46.0154 63.2757 46.4673 63.7276 46.4673 64.2849C46.4673 64.8423 46.0154 65.2941 45.4579 65.2941H17.6979C17.1404 65.2941 16.6885 64.8423 16.6885 64.2849Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 71.8539C16.6885 71.2966 17.1404 70.8447 17.6979 70.8447H55.5524C56.1099 70.8447 56.5618 71.2966 56.5618 71.8539C56.5618 72.4113 56.1099 72.8631 55.5524 72.8631H17.6979C17.1404 72.8631 16.6885 72.4113 16.6885 71.8539Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 79.4229C16.6885 78.8656 17.1404 78.4137 17.6979 78.4137H34.8586C35.4161 78.4137 35.8681 78.8656 35.8681 79.4229C35.8681 79.9803 35.4161 80.4321 34.8586 80.4321H17.6979C17.1404 80.4321 16.6885 79.9803 16.6885 79.4229Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 86.9919C16.6885 86.4346 17.1404 85.9827 17.6979 85.9827H55.5524C56.1099 85.9827 56.5618 86.4346 56.5618 86.9919C56.5618 87.5493 56.1099 88.0011 55.5524 88.0011H17.6979C17.1404 88.0011 16.6885 87.5493 16.6885 86.9919Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.6885 94.5609C16.6885 94.0036 17.1404 93.5517 17.6979 93.5517H45.4579C46.0154 93.5517 46.4673 94.0036 46.4673 94.5609C46.4673 95.1183 46.0154 95.5701 45.4579 95.5701H17.6979C17.1404 95.5701 16.6885 95.1183 16.6885 94.5609Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M25.7734 30.729C25.7734 30.311 26.1124 29.9721 26.5305 29.9721H57.3188C57.7369 29.9721 58.0759 30.311 58.0759 30.729C58.0759 31.1471 57.7369 31.4859 57.3188 31.4859H26.5305C26.1124 31.4859 25.7734 31.1471 25.7734 30.729Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.16'\n                d='M68.0205 26.4366C68.0205 25.8792 68.4725 25.4274 69.03 25.4274H99.2858C99.8433 25.4274 100.295 25.8792 100.295 26.4366V26.7649C100.295 27.3222 99.8433 27.7741 99.2858 27.7741H69.03C68.4725 27.7741 68.0205 27.3222 68.0205 26.7649V26.4366Z'\n                fill='var(--center-channel-color)'\n            />\n            <g opacity='0.16'>\n                <ellipse\n                    cx='71.6727'\n                    cy='42.5474'\n                    rx='3.52228'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 42.2766C79.6777 41.7192 80.1297 41.2674 80.6872 41.2674H110.356C110.914 41.2674 111.366 41.7192 111.366 42.2766V42.6049C111.366 43.1622 110.914 43.6141 110.356 43.6141H80.6872C80.1297 43.6141 79.6777 43.1622 79.6777 42.6049V42.2766Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 46.9699C79.6777 46.4126 80.1297 45.9607 80.6872 45.9607H191.381C191.939 45.9607 192.391 46.4126 192.391 46.9699V47.2982C192.391 47.8556 191.939 48.3074 191.381 48.3074H80.6872C80.1297 48.3074 79.6777 47.8556 79.6777 47.2982V46.9699Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 51.6633C79.6777 51.1059 80.1297 50.6541 80.6872 50.6541H170.888C171.445 50.6541 171.897 51.1059 171.897 51.6633V51.9915C171.897 52.5489 171.445 53.0007 170.888 53.0007H80.6872C80.1297 53.0007 79.6777 52.5489 79.6777 51.9915V51.6633Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='71.6727'\n                    cy='63.5607'\n                    rx='3.52228'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 63.3966C79.6777 62.8392 80.1297 62.3874 80.6872 62.3874H110.356C110.914 62.3874 111.366 62.8392 111.366 63.3966V63.7249C111.366 64.2822 110.914 64.7341 110.356 64.7341H80.6872C80.1297 64.7341 79.6777 64.2822 79.6777 63.7249V63.3966Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 68.0899C79.6777 67.5326 80.1297 67.0807 80.6872 67.0807H191.381C191.939 67.0807 192.391 67.5326 192.391 68.0899V68.4182C192.391 68.9756 191.939 69.4274 191.381 69.4274H80.6872C80.1297 69.4274 79.6777 68.9756 79.6777 68.4182V68.0899Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 72.7833C79.6777 72.2259 80.1297 71.7741 80.6872 71.7741H170.888C171.445 71.7741 171.897 72.2259 171.897 72.7833V73.1115C171.897 73.6689 171.445 74.1207 170.888 74.1207H80.6872C80.1297 74.1207 79.6777 73.6689 79.6777 73.1115V72.7833Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='71.6727'\n                    cy='84.6807'\n                    rx='3.52228'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 84.5166C79.6777 83.9592 80.1297 83.5074 80.6872 83.5074H110.356C110.914 83.5074 111.366 83.9592 111.366 84.5166V84.8449C111.366 85.4022 110.914 85.854 110.356 85.854H80.6872C80.1297 85.854 79.6777 85.4022 79.6777 84.8449V84.5166Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 89.2099C79.6777 88.6525 80.1297 88.2007 80.6872 88.2007H191.381C191.939 88.2007 192.391 88.6525 192.391 89.2099V89.5382C192.391 90.0956 191.939 90.5474 191.381 90.5474H80.6872C80.1297 90.5474 79.6777 90.0956 79.6777 89.5382V89.2099Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 93.9033C79.6777 93.3459 80.1297 92.8941 80.6872 92.8941H170.888C171.445 92.8941 171.897 93.3459 171.897 93.9033V94.2315C171.897 94.7889 171.445 95.2407 170.888 95.2407H80.6872C80.1297 95.2407 79.6777 94.7889 79.6777 94.2315V93.9033Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='71.6727'\n                    cy='105.801'\n                    rx='3.52228'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 105.637C79.6777 105.079 80.1297 104.627 80.6872 104.627H110.356C110.914 104.627 111.366 105.079 111.366 105.637V105.965C111.366 106.522 110.914 106.974 110.356 106.974H80.6872C80.1297 106.974 79.6777 106.522 79.6777 105.965V105.637Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 110.33C79.6777 109.773 80.1297 109.321 80.6872 109.321H191.381C191.939 109.321 192.391 109.773 192.391 110.33V110.658C192.391 111.216 191.939 111.667 191.381 111.667H80.6872C80.1297 111.667 79.6777 111.216 79.6777 110.658V110.33Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M79.6777 115.023C79.6777 114.466 80.1297 114.014 80.6872 114.014H170.888C171.445 114.014 171.897 114.466 171.897 115.023V115.352C171.897 115.909 171.445 116.361 170.888 116.361H80.6872C80.1297 116.361 79.6777 115.909 79.6777 115.352V115.023Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <path\n                opacity='0.16'\n                d='M202.4 25.2633C202.4 24.7059 202.852 24.2541 203.41 24.2541H235.426C235.984 24.2541 236.436 24.7059 236.436 25.2633V27.9382C236.436 28.4956 235.984 28.9474 235.426 28.9474H203.41C202.852 28.9474 202.4 28.4956 202.4 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M239.957 25.2633C239.957 24.7059 240.409 24.2541 240.966 24.2541H243.642C244.2 24.2541 244.652 24.7059 244.652 25.2633V27.9382C244.652 28.4956 244.2 28.9474 243.642 28.9474H240.966C240.409 28.9474 239.957 28.4956 239.957 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M248.759 25.2633C248.759 24.7059 249.211 24.2541 249.768 24.2541H252.444C253.001 24.2541 253.453 24.7059 253.453 25.2633V27.9382C253.453 28.4956 253.001 28.9474 252.444 28.9474H249.768C249.211 28.9474 248.759 28.4956 248.759 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M193.012 25.2633C193.012 24.7059 193.464 24.2541 194.021 24.2541H196.697C197.254 24.2541 197.706 24.7059 197.706 25.2633V27.9382C197.706 28.4956 197.254 28.9474 196.697 28.9474H194.021C193.464 28.9474 193.012 28.4956 193.012 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M181.275 25.2633C181.275 24.7059 181.727 24.2541 182.285 24.2541H184.96C185.518 24.2541 185.97 24.7059 185.97 25.2633V27.9382C185.97 28.4956 185.518 28.9474 184.96 28.9474H182.285C181.727 28.9474 181.275 28.4956 181.275 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <rect\n                opacity='0.08'\n                x='11.0996'\n                y='9.5874'\n                width='246.462'\n                height='10.56'\n                fill='var(--center-channel-color)'\n            />\n            <ellipse\n                cx='16.2767'\n                cy='15.3474'\n                rx='1.92124'\n                ry='1.92'\n                fill='var(--dnd-indicator)'\n            />\n            <ellipse\n                cx='23.9613'\n                cy='15.3474'\n                rx='1.92124'\n                ry='1.92'\n                fill='var(--away-indicator)'\n            />\n            <ellipse\n                cx='31.6468'\n                cy='15.3474'\n                rx='1.92125'\n                ry='1.92'\n                fill='var(--online-indicator)'\n            />\n            <rect\n                opacity='0.1'\n                x='66.8691'\n                y='135.027'\n                width='183.159'\n                height='8.95998'\n                rx='2'\n                fill='var(--center-channel-color)'\n            />\n            <rect\n                opacity='0.92'\n                x='11.0996'\n                y='19.5874'\n                width='247'\n                height='40'\n                fill='var(--sidebar-text-active-border)'\n            />\n            <path\n                d='M67.3105 29.5794C65.5025 29.5794 63.8225 30.0354 62.2705 30.9474C60.7665 31.8434 59.5665 33.0434 58.6705 34.5474C57.7585 36.0994 57.3025 37.7794 57.3025 39.5874C57.3025 41.3954 57.7585 43.0754 58.6705 44.6274C59.5665 46.1314 60.7665 47.3314 62.2705 48.2274C63.8225 49.1394 65.5025 49.5954 67.3105 49.5954C69.1185 49.5954 70.7985 49.1394 72.3505 48.2274C73.8545 47.3314 75.0545 46.1314 75.9505 44.6274C76.8625 43.0754 77.3185 41.3954 77.3185 39.5874C77.3185 37.7794 76.8625 36.0994 75.9505 34.5474C75.0545 33.0434 73.8545 31.8434 72.3505 30.9474C70.7985 30.0354 69.1185 29.5794 67.3105 29.5794ZM67.3105 47.5794C65.8705 47.5794 64.5265 47.2114 63.2785 46.4754C62.0785 45.7714 61.1265 44.8194 60.4225 43.6194C59.6865 42.3714 59.3185 41.0274 59.3185 39.5874C59.3185 38.1474 59.6865 36.8034 60.4225 35.5554C61.1265 34.3554 62.0785 33.4034 63.2785 32.6994C64.5265 31.9634 65.8705 31.5954 67.3105 31.5954C68.7505 31.5954 70.0945 31.9634 71.3425 32.6994C72.5425 33.4034 73.4945 34.3554 74.1985 35.5554C74.9345 36.8034 75.3025 38.1474 75.3025 39.5874C75.3025 41.0274 74.9345 42.3714 74.1985 43.6194C73.4945 44.8194 72.5425 45.7714 71.3425 46.4754C70.0945 47.2114 68.7505 47.5794 67.3105 47.5794ZM67.8145 40.5954H66.8065L66.3025 34.5954H68.3185L67.8145 40.5954ZM68.3185 43.5954C68.3185 43.8674 68.2145 44.0994 68.0065 44.2914C67.8145 44.4834 67.5825 44.5794 67.3105 44.5794C67.0385 44.5794 66.7985 44.4834 66.5905 44.2914C66.3985 44.0994 66.3025 43.8674 66.3025 43.5954C66.3025 43.3234 66.3985 43.0914 66.5905 42.8994C66.7985 42.6914 67.0385 42.5874 67.3105 42.5874C67.5825 42.5874 67.8145 42.6914 68.0065 42.8994C68.2145 43.0914 68.3185 43.3234 68.3185 43.5954Z'\n                fill='var(--center-channel-bg)'\n            />\n            <rect\n                x='85.0996'\n                y='31.5874'\n                width='32'\n                height='3'\n                rx='1.5'\n                fill='var(--center-channel-bg)'\n            />\n            <rect\n                x='85.0996'\n                y='37.5874'\n                width='112'\n                height='3'\n                rx='1.5'\n                fill='var(--center-channel-bg)'\n            />\n            <rect\n                x='85.0996'\n                y='43.5874'\n                width='92'\n                height='3'\n                rx='1.5'\n                fill='var(--center-channel-bg)'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0'>\n                <rect\n                    width='246.462'\n                    height='140.8'\n                    fill='var(--center-channel-bg)'\n                    transform='translate(11.0996 9.5874)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default AnnouncementBannerSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport AnnouncementBannerSVG from './images/announcement_banner_svg';\n\nconst AnnouncementBannerFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='announcement_banner'\n            titleID='admin.announcement_banner_feature_discovery.title'\n            titleDefault='Create custom announcement banners with MatterFOSS'\n            copyID='admin.announcement_banner_feature_discovery.copy'\n            copyDefault={'Create announcement banners to notify all members of important information.'}\n            learnMoreURL='https://docs.mattermost.com/administration/announcement-banner.html'\n            featureDiscoveryImage={<AnnouncementBannerSVG/>}\n        />\n    );\n};\n\nt('admin.announcement_banner_feature_discovery.title');\nt('admin.announcement_banner_feature_discovery.copy');\n\nexport default AnnouncementBannerFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst ChannelsSVG = () => (\n    <svg\n        width='310'\n        height='220'\n        viewBox='0 0 310 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <g clipPath='url(#clip0)'>\n            <path\n                d='M230.831 113.405H127.567C127.06 113.405 126.574 113.203 126.215 112.844C125.857 112.484 125.655 111.998 125.654 111.49V64.3705C125.655 63.8626 125.857 63.3757 126.215 63.0165C126.574 62.6574 127.06 62.4553 127.567 62.4547H230.831C231.338 62.4553 231.824 62.6574 232.183 63.0165C232.541 63.3757 232.743 63.8626 232.743 64.3705V111.49C232.743 111.998 232.541 112.484 232.183 112.844C231.824 113.203 231.338 113.405 230.831 113.405Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M127.567 113.405H230.831C231.338 113.405 231.824 113.203 232.183 112.844C232.541 112.484 232.743 111.998 232.743 111.49V64.3705C232.743 63.8626 232.541 63.3757 232.183 63.0165C231.824 62.6574 231.338 62.4553 230.831 62.4547H127.567C127.06 62.4553 126.574 62.6574 126.215 63.0165C125.857 63.3757 125.655 63.8626 125.654 64.3705V111.49C125.655 111.998 125.857 112.484 126.215 112.844C126.574 113.203 127.06 113.405 127.567 113.405Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M141.127 85.0611C145.563 85.0611 149.159 81.4586 149.159 77.0148C149.159 72.5709 145.563 68.9684 141.127 68.9684C136.692 68.9684 133.096 72.5709 133.096 77.0148C133.096 81.4586 136.692 85.0611 141.127 85.0611Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M143.423 75.8653C143.637 75.8653 143.817 75.9388 143.964 76.086C144.111 76.2331 144.184 76.414 144.184 76.6285V80.0769C144.184 80.2915 144.108 80.4724 143.955 80.6195C143.808 80.7728 143.631 80.8494 143.423 80.8494H138.833C138.625 80.8494 138.445 80.7728 138.292 80.6195C138.145 80.4724 138.071 80.2915 138.071 80.0769V76.6285C138.071 76.414 138.145 76.2331 138.292 76.086C138.445 75.9388 138.625 75.8653 138.833 75.8653H139.219V75.102C139.219 74.7464 139.301 74.4246 139.466 74.1365C139.638 73.8422 139.867 73.6092 140.155 73.4376C140.449 73.2659 140.773 73.1801 141.128 73.1801C141.483 73.1801 141.804 73.2659 142.092 73.4376C142.385 73.6092 142.615 73.8422 142.78 74.1365C142.951 74.4246 143.037 74.7464 143.037 75.102V75.8653H143.423ZM141.128 73.9525C140.914 73.9525 140.718 74.0047 140.54 74.1089C140.369 74.207 140.231 74.3449 140.127 74.5227C140.029 74.6943 139.981 74.8875 139.981 75.102V75.8653H142.275V75.102C142.275 74.8875 142.223 74.6943 142.119 74.5227C142.021 74.3449 141.884 74.207 141.706 74.1089C141.535 74.0047 141.342 73.9525 141.128 73.9525Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M159.502 71.8373C159.147 71.8373 158.806 71.9786 158.555 72.2301C158.304 72.4816 158.163 72.8227 158.163 73.1784C158.163 73.5341 158.304 73.8752 158.555 74.1267C158.806 74.3782 159.147 74.5194 159.502 74.5194H222.608C222.963 74.5194 223.303 74.3782 223.554 74.1267C223.805 73.8752 223.946 73.5341 223.946 73.1784C223.946 72.8227 223.805 72.4816 223.554 72.2301C223.303 71.9786 222.963 71.8373 222.608 71.8373H159.502Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M159.502 79.8837C159.147 79.8837 158.806 80.025 158.555 80.2764C158.304 80.5279 158.163 80.869 158.163 81.2247C158.163 81.5804 158.304 81.9215 158.555 82.173C158.806 82.4245 159.147 82.5658 159.502 82.5658H186.656C187.011 82.5658 187.352 82.4245 187.603 82.173C187.854 81.9215 187.995 81.5804 187.995 81.2247C187.995 80.869 187.854 80.5279 187.603 80.2764C187.352 80.025 187.011 79.8837 186.656 79.8837H159.502Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M134.792 92.7474C133.774 92.7474 132.945 93.3491 132.945 94.0884C132.945 94.8278 133.774 95.4295 134.792 95.4295H221.859C222.877 95.4295 223.706 94.8278 223.706 94.0884C223.706 93.3491 222.877 92.7474 221.859 92.7474H134.792Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M134.792 100.794C133.774 100.794 132.945 101.395 132.945 102.135C132.945 102.874 133.774 103.476 134.792 103.476H221.859C222.877 103.476 223.706 102.874 223.706 102.135C223.706 101.395 222.877 100.794 221.859 100.794H134.792Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M308.088 50.9506H204.823C204.316 50.95 203.83 50.748 203.472 50.3889C203.113 50.0297 202.912 49.5428 202.911 49.0349V1.91579C202.912 1.40787 203.113 0.920932 203.472 0.561781C203.83 0.20263 204.316 0.000596258 204.823 0H308.088C308.595 0.00059727 309.081 0.20263 309.439 0.561781C309.798 0.920932 310 1.40787 310 1.91579V49.0349C310 49.5428 309.798 50.0297 309.439 50.3889C309.081 50.748 308.595 50.95 308.088 50.9506Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M218.209 22.7931C222.645 22.7931 226.241 19.1907 226.241 14.7468C226.241 10.3029 222.645 6.70049 218.209 6.70049C213.774 6.70049 210.178 10.3029 210.178 14.7468C210.178 19.1907 213.774 22.7931 218.209 22.7931Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M236.759 9.3826C236.404 9.3826 236.063 9.52389 235.812 9.77539C235.561 10.0269 235.42 10.368 235.42 10.7237C235.42 11.0793 235.561 11.4204 235.812 11.6719C236.063 11.9234 236.404 12.0647 236.759 12.0647H299.864C300.219 12.0647 300.56 11.9234 300.811 11.6719C301.062 11.4204 301.203 11.0793 301.203 10.7237C301.203 10.368 301.062 10.0269 300.811 9.77539C300.56 9.52389 300.219 9.3826 299.864 9.3826H236.759Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M236.759 17.4289C236.404 17.4289 236.063 17.5702 235.812 17.8217C235.561 18.0732 235.42 18.4143 235.42 18.77C235.42 19.1256 235.561 19.4667 235.812 19.7182C236.063 19.9697 236.404 20.111 236.759 20.111H263.913C264.268 20.111 264.609 19.9697 264.86 19.7182C265.111 19.4667 265.252 19.1256 265.252 18.77C265.252 18.4143 265.111 18.0732 264.86 17.8217C264.609 17.5702 264.268 17.4289 263.913 17.4289H236.759Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M212.049 30.2926C211.031 30.2926 210.202 30.8943 210.202 31.6337C210.202 32.3731 211.031 32.9747 212.049 32.9747H299.116C300.134 32.9747 300.963 32.3731 300.963 31.6337C300.963 30.8943 300.134 30.2926 299.116 30.2926H212.049Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M212.049 38.339C211.031 38.339 210.202 38.9406 210.202 39.68C210.202 40.4194 211.031 41.0211 212.049 41.0211H299.116C300.134 41.0211 300.963 40.4194 300.963 39.68C300.963 38.9406 300.134 38.339 299.116 38.339H212.049Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M308.088 175.86H204.823C204.316 175.86 203.83 175.658 203.472 175.298C203.113 174.939 202.912 174.452 202.911 173.944V126.825C202.912 126.317 203.113 125.83 203.472 125.471C203.83 125.112 204.316 124.91 204.823 124.909H308.088C308.595 124.91 309.081 125.112 309.439 125.471C309.798 125.83 310 126.317 310 126.825V173.944C310 174.452 309.798 174.939 309.439 175.298C309.081 175.658 308.595 175.86 308.088 175.86Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M204.823 175.86H308.088C308.595 175.86 309.081 175.658 309.439 175.298C309.798 174.939 310 174.452 310 173.944V126.825C310 126.317 309.798 125.83 309.439 125.471C309.081 125.112 308.595 124.91 308.088 124.909H204.823C204.316 124.91 203.83 125.112 203.472 125.471C203.113 125.83 202.912 126.317 202.911 126.825V173.944C202.912 174.452 203.113 174.939 203.472 175.298C203.83 175.658 204.316 175.86 204.823 175.86Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <path\n                d='M218.209 147.703C222.645 147.703 226.241 144.1 226.241 139.656C226.241 135.212 222.645 131.61 218.209 131.61C213.774 131.61 210.178 135.212 210.178 139.656C210.178 144.1 213.774 147.703 218.209 147.703Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M236.759 134.292C236.404 134.292 236.063 134.433 235.812 134.685C235.561 134.936 235.42 135.278 235.42 135.633C235.42 135.989 235.561 136.33 235.812 136.581C236.063 136.833 236.404 136.974 236.759 136.974H299.864C300.219 136.974 300.56 136.833 300.811 136.581C301.062 136.33 301.203 135.989 301.203 135.633C301.203 135.278 301.062 134.936 300.811 134.685C300.56 134.433 300.219 134.292 299.864 134.292H236.759Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M236.759 142.338C236.404 142.338 236.063 142.48 235.812 142.731C235.561 142.983 235.42 143.324 235.42 143.679C235.42 144.035 235.561 144.376 235.812 144.628C236.063 144.879 236.404 145.021 236.759 145.021H263.913C264.268 145.021 264.609 144.879 264.86 144.628C265.111 144.376 265.252 144.035 265.252 143.679C265.252 143.324 265.111 142.983 264.86 142.731C264.609 142.48 264.268 142.338 263.913 142.338H236.759Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M212.049 155.202C211.031 155.202 210.202 155.804 210.202 156.543C210.202 157.283 211.031 157.884 212.049 157.884H299.116C300.134 157.884 300.963 157.283 300.963 156.543C300.963 155.804 300.134 155.202 299.116 155.202H212.049Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M212.049 163.248C211.031 163.248 210.202 163.85 210.202 164.59C210.202 165.329 211.031 165.931 212.049 165.931H299.116C300.134 165.931 300.963 165.329 300.963 164.59C300.963 163.85 300.134 163.248 299.116 163.248H212.049Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                d='M99.5805 214.564L104.7 213.074L101.401 192.582L93.8447 194.781L99.5805 214.564Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M115.954 214.963L99.8642 219.645L98.0585 213.418L108.681 210.327C110.131 209.905 111.689 210.077 113.012 210.806C114.335 211.535 115.315 212.76 115.737 214.213L115.954 214.963Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M46.674 214.686L52.0051 214.686L54.5412 194.085L46.6729 194.086L46.674 214.686Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M62.2871 219.645L45.5322 219.645L45.5319 213.16L56.5932 213.16C58.1032 213.16 59.5515 213.761 60.6193 214.83C61.6871 215.9 62.287 217.351 62.2871 218.863L62.2871 219.645Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                d='M59.2173 142.975C59.624 142.481 59.9177 141.903 60.0776 141.283C60.2374 140.663 60.2597 140.015 60.1427 139.386C60.0257 138.756 59.7723 138.16 59.4005 137.639C59.0286 137.118 58.5472 136.685 57.9903 136.371L60.7583 121.052L53.3331 124.232L51.8429 138.291C51.3778 139.263 51.2848 140.373 51.5817 141.409C51.8785 142.446 52.5445 143.337 53.4535 143.914C54.3625 144.492 55.4513 144.715 56.5136 144.542C57.5759 144.368 58.5379 143.811 59.2173 142.975V142.975Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M52.1143 133.648L59.4251 135.135L62.8104 110.408L62.8216 110.383L73.5469 86.3048C73.5526 86.2831 74.8418 82.1821 73.4596 79.5275C73.2111 79.0456 72.8664 78.62 72.4468 78.2773C72.0272 77.9345 71.5418 77.6819 71.0206 77.535C66.2988 76.0806 64.1305 79.4996 63.9487 79.8034L55.2372 106.298L52.1143 133.648Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M93.1879 210.532L84.4502 171.578L72.0925 145.537L58.693 209.625L38.7305 207.403L57.0385 139.715C56.7529 138.679 52.7501 123.228 64.9007 115.196L67.0016 108.12L85.0428 112.335L84.8239 129.219L100.027 164.033L113.139 204.313L93.1879 210.532Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M84.2002 56.4939C87.0295 61.6791 85.1273 68.1802 79.9516 71.0147C79.801 71.0972 79.6492 71.1757 79.4964 71.2502C79.0693 72.285 78.7135 73.3482 78.4315 74.4325C77.6214 77.5283 77.2417 81.628 79.3091 84.8471C83.1457 90.8256 66.1171 78.8715 66.1171 78.8715C67.3171 77.219 68.0161 75.2579 68.1311 73.2211C68.202 71.9915 68.0511 70.7602 67.6867 69.5855C66.8121 68.7978 66.0534 67.8509 65.4573 66.7584C62.628 61.5733 64.5302 55.0721 69.7059 52.2376C74.8816 49.4032 81.3709 51.3088 84.2002 56.4939Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M85.6854 114.656L67.0408 112.878L67.4806 101.424C66.8147 100.231 58.0474 84.2135 63.8288 78.3844L65.5832 75.7481L65.6232 75.7257C65.6942 75.6854 72.795 71.8153 78.9132 79.6955C80.3094 81.4497 81.8133 83.1151 83.416 84.6822C87.3376 88.6496 89.931 91.2726 86.344 98.1608L85.6854 114.656Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M79.2407 142.379C79.5095 141.798 79.6477 141.164 79.6458 140.524C79.6439 139.884 79.5018 139.251 79.2297 138.672C78.9575 138.092 78.5618 137.58 78.0704 137.17C77.5791 136.76 77.004 136.464 76.3858 136.301L75.1951 120.779L68.8145 125.737L70.9234 139.716C70.719 140.775 70.9092 141.872 71.4582 142.8C72.0071 143.727 72.8766 144.42 73.9018 144.749C74.927 145.077 76.0368 145.017 77.0208 144.58C78.0048 144.143 78.7947 143.36 79.2407 142.379Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.32'\n            />\n            <path\n                d='M69.6833 135.558L65.7422 107.92L67.4892 79.9806C67.5014 79.9355 68.784 75.4583 74.1483 75.6937C74.7405 75.7051 75.324 75.8384 75.8626 76.0854C76.4012 76.3324 76.8833 76.6878 77.279 77.1294C79.394 79.4671 79.1806 83.78 79.1705 83.9624L74.8773 109.969L77.8892 135.101L69.6833 135.558Z'\n                fill='var(--button-bg)'\n            />\n            <path\n                d='M88.8493 53.4351C88.4704 51.2333 86.6446 49.5012 84.5907 48.6305C82.5367 47.7597 80.2614 47.6051 78.0346 47.4808C76.1426 47.3317 74.2417 47.3376 72.3507 47.4985C72.6027 47.17 72.7741 46.7868 72.851 46.3798C73.0133 45.436 72.4497 44.3676 71.4986 44.16C70.8145 44.0107 70.1151 44.3022 69.4385 44.5014C68.7618 44.7006 67.9433 44.7796 67.4405 44.3075C66.8659 43.768 67.0034 42.7923 66.5124 42.1789C66.0536 41.6059 65.1557 41.5269 64.4527 41.797C63.771 42.1148 63.1625 42.5707 62.6654 43.1359L62.0301 43.7664C61.9748 43.7251 61.9143 43.6879 61.8605 43.6455C60.1861 42.3273 59.3523 40.3923 60.3026 38.7662C59.8229 39.5912 59.591 40.5374 59.635 41.4911C59.679 42.4449 59.997 43.3656 60.5506 44.1427C60.6975 44.3578 60.8576 44.5636 61.0298 44.7589C60.6976 45.0885 60.3655 45.4181 60.0334 45.7477C59.5213 46.2559 58.9672 46.8867 59.0974 47.5798C59.2339 48.3074 60.1137 48.6996 60.8674 48.5908C61.4805 48.4661 62.0552 48.1972 62.5442 47.8063C61.8637 48.2879 61.3182 48.9365 60.9598 49.69C60.7551 50.1209 60.6732 50.6 60.7231 51.0746C60.7731 51.5492 60.953 52.0007 61.2429 52.3793C61.6618 52.8379 62.2394 53.1192 62.8581 53.1658C61.7786 54.7461 61.0757 56.5535 60.8037 58.4489C60.5098 60.8825 60.9089 63.3498 61.955 65.5658C63.0011 67.7819 64.6515 69.6563 66.7156 70.9728C67.838 71.7289 69.1527 72.1481 70.5049 72.1808C71.8487 72.1533 73.232 71.4798 73.8415 70.2798C74.4766 69.0296 74.1805 67.5318 73.9188 66.1536C73.657 64.7754 73.4785 63.226 74.2852 62.0792C75.092 60.9325 77.2721 60.8628 77.6388 62.2167C78.382 60.9412 79.5041 59.9299 80.8486 59.3239C82.193 58.718 83.6927 58.5475 85.1385 58.8365L85.7198 59.7739C87.9417 59.5803 89.2282 55.637 88.8493 53.4351Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.12'\n                d='M85 220.5C112.614 220.5 135 219.605 135 218.5C135 217.395 112.614 216.5 85 216.5C57.3858 216.5 35 217.395 35 218.5C35 219.605 57.3858 220.5 85 220.5Z'\n                fill='var(--center-channel-color)'\n            />\n        </g>\n        <defs>\n            <clipPath id='clip0'>\n                <rect\n                    width='310'\n                    height='220'\n                    fill='var(--center-channel-bg)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default ChannelsSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport ChannelsSVG from './images/channels_svg';\n\nconst ChannelsFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='channels'\n            titleID='admin.channels_feature_discovery.title'\n            titleDefault='Create read-only channels with MatterFOSS'\n            copyID='admin.channels_feature_discovery.copy'\n            copyDefault={'Decide which channels should be public, private, read-only, or react-only.'}\n            learnMoreURL='https://docs.mattermost.com/deployment/team-channel-management.html'\n            featureDiscoveryImage={<ChannelsSVG/>}\n        />\n    );\n};\n\nt('admin.channels_feature_discovery.title');\nt('admin.channels_feature_discovery.copy');\n\nexport default ChannelsFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst ComplianceExportSVG = () => (\n    <svg\n        width='271'\n        height='220'\n        viewBox='0 0 271 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            opacity='0.08'\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M270.092 9.93672C270.096 9.17488 269.952 8.41969 269.667 7.71431C269.383 7.00893 268.963 6.36719 268.433 5.82577C267.904 5.28434 267.273 4.85385 266.579 4.55887C265.884 4.2639 265.139 4.11023 264.386 4.10666H9.79852C8.27763 4.11491 6.82223 4.73366 5.75222 5.8269C4.68221 6.92014 4.08517 8.3984 4.09235 9.93672V164.267H4.09229V182.548C4.09229 184.079 4.69347 185.547 5.76358 186.63C6.8337 187.712 8.28509 188.32 9.79846 188.32H105.125L102.249 213.321H171.111L167.331 188.32H262.011C267.38 188.324 270.096 186.112 270.092 180.31C270.092 179.552 270.092 164.267 270.092 164.267M270.092 9.93672L270.092 164.267L270.092 9.93672Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.07'\n            d='M133 218.24C201.288 218.24 256.646 216.795 256.646 215.013C256.646 213.231 201.288 211.787 133 211.787C64.7123 211.787 9.354 213.231 9.354 215.013C9.354 216.795 64.7123 218.24 133 218.24Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M167.946 213.727H133.663L99.3105 213.283L99.5149 211.504H167.607L167.946 213.727Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M178.892 211.787H87.6924V214.133H178.892V211.787Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.04'\n        />\n        <path\n            d='M178.892 211.787H87.6924V214.133H178.892V211.787Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.2'\n            d='M178.892 211.787H87.6924V214.133H178.892V211.787Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.15'\n            d='M140.49 184.148L167.715 211.787L163.692 184.148H140.49Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M266 5.78782C266.004 5.03149 265.86 4.28178 265.575 3.58151C265.29 2.88124 264.871 2.24415 264.341 1.70665C263.811 1.16915 263.181 0.741773 262.487 0.448937C261.792 0.1561 261.047 0.00354945 260.294 0H5.70623C4.18535 0.00819372 2.72994 0.622454 1.65993 1.70777C0.589924 2.79309 -0.00711273 4.26064 6.39597e-05 5.78782V160.747H266V5.78782Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M0 160.16V178.384C0 179.913 0.601185 181.379 1.6713 182.46C2.74141 183.54 4.1928 184.148 5.70617 184.148H260.154C260.903 184.148 261.785 183.999 262.478 183.71C263.171 183.42 263.8 182.996 264.33 182.461C264.86 181.925 265.28 181.29 265.567 180.59C265.853 179.891 266 179.104 266 178.347V160.16H0Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M0 160.16H266V179.167C266 181.954 263.749 184.213 260.972 184.213H5.02836C2.25128 184.213 0 181.954 0 179.167V160.16Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.04'\n        />\n        <ellipse\n            opacity='0.16'\n            cx='133.133'\n            cy='172.427'\n            rx='6.26017'\n            ry='6.32372'\n            fill='var(--center-channel-color)'\n        />\n        <g clipPath='url(#clip0)'>\n            <rect\n                width='245.538'\n                height='140.8'\n                transform='translate(10.5596 9.5874)'\n                fill='var(--center-channel-bg)'\n            />\n            <rect\n                x='10.5596'\n                y='20.1474'\n                width='50.2769'\n                height='130.24'\n                fill='var(--button-bg)'\n            />\n            <rect\n                x='60.8638'\n                y='20.0502'\n                width='194.467'\n                height='14.1936'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                fillRule='evenodd'\n                clipRule='evenodd'\n                d='M256.249 33.6407H61.0161V33.0541H256.249V33.6407Z'\n                fill='var(--center-channel-color)'\n                fillOpacity='0.16'\n            />\n            <ellipse\n                opacity='0.32'\n                cx='17.6313'\n                cy='27.5074'\n                rx='3.82809'\n                ry='3.84'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M25.1782 24.9261C25.1782 24.3688 25.6285 23.9169 26.1839 23.9169H56.354C56.9094 23.9169 57.3597 24.3688 57.3597 24.9261V26.4399C57.3597 26.9973 56.9094 27.4491 56.354 27.4491H26.1839C25.6285 27.4491 25.1782 26.9973 25.1782 26.4399V24.9261Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 41.5779C16.127 41.0206 16.5772 40.5687 17.1326 40.5687H54.8453C55.4007 40.5687 55.851 41.0206 55.851 41.5779C55.851 42.1353 55.4007 42.5871 54.8453 42.5871H17.1326C16.5772 42.5871 16.127 42.1353 16.127 41.5779Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 49.1469C16.127 48.5896 16.5772 48.1377 17.1326 48.1377H40.7659C41.3213 48.1377 41.7716 48.5896 41.7716 49.1469C41.7716 49.7043 41.3213 50.1561 40.7659 50.1561H17.1326C16.5772 50.1561 16.127 49.7043 16.127 49.1469Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 56.7159C16.127 56.1586 16.5772 55.7067 17.1326 55.7067H52.3311C52.8865 55.7067 53.3368 56.1586 53.3368 56.7159C53.3368 57.2733 52.8865 57.7251 52.3311 57.7251H17.1326C16.5772 57.7251 16.127 57.2733 16.127 56.7159Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 64.2849C16.127 63.7276 16.5772 63.2757 17.1326 63.2757H44.7886C45.344 63.2757 45.7942 63.7276 45.7942 64.2849C45.7942 64.8423 45.344 65.2941 44.7886 65.2941H17.1326C16.5772 65.2941 16.127 64.8423 16.127 64.2849Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 71.8539C16.127 71.2966 16.5772 70.8447 17.1326 70.8447H54.8453C55.4007 70.8447 55.851 71.2966 55.851 71.8539C55.851 72.4113 55.4007 72.8631 54.8453 72.8631H17.1326C16.5772 72.8631 16.127 72.4113 16.127 71.8539Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 79.4229C16.127 78.8656 16.5772 78.4137 17.1326 78.4137H34.229C34.7844 78.4137 35.2347 78.8656 35.2347 79.4229C35.2347 79.9803 34.7844 80.4321 34.229 80.4321H17.1326C16.5772 80.4321 16.127 79.9803 16.127 79.4229Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 86.9919C16.127 86.4346 16.5772 85.9827 17.1326 85.9827H54.8453C55.4007 85.9827 55.851 86.4346 55.851 86.9919C55.851 87.5493 55.4007 88.0011 54.8453 88.0011H17.1326C16.5772 88.0011 16.127 87.5493 16.127 86.9919Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M16.127 94.5609C16.127 94.0036 16.5772 93.5517 17.1326 93.5517H44.7886C45.344 93.5517 45.7942 94.0036 45.7942 94.5609C45.7942 95.1183 45.344 95.5701 44.7886 95.5701H17.1326C16.5772 95.5701 16.127 95.1183 16.127 94.5609Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.32'\n                d='M25.1782 30.729C25.1782 30.311 25.5159 29.9721 25.9325 29.9721H56.6054C57.022 29.9721 57.3597 30.311 57.3597 30.729C57.3597 31.1471 57.022 31.4859 56.6054 31.4859H25.9325C25.5159 31.4859 25.1782 31.1471 25.1782 30.729Z'\n                fill='var(--center-channel-bg)'\n            />\n            <path\n                opacity='0.16'\n                d='M67.2671 26.4366C67.2671 25.8792 67.7173 25.4274 68.2728 25.4274H98.4153C98.9707 25.4274 99.4209 25.8792 99.4209 26.4366V26.7649C99.4209 27.3222 98.9707 27.7741 98.4153 27.7741H68.2728C67.7173 27.7741 67.2671 27.3222 67.2671 26.7649V26.4366Z'\n                fill='var(--center-channel-color)'\n            />\n            <g opacity='0.16'>\n                <ellipse\n                    cx='70.9056'\n                    cy='42.5474'\n                    rx='3.50908'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 42.2766C78.8809 41.7192 79.3311 41.2674 79.8865 41.2674H109.444C110 41.2674 110.45 41.7192 110.45 42.2766V42.6049C110.45 43.1622 110 43.6141 109.444 43.6141H79.8865C79.3311 43.6141 78.8809 43.1622 78.8809 42.6049V42.2766Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 46.9699C78.8809 46.4126 79.3311 45.9607 79.8865 45.9607H190.166C190.721 45.9607 191.172 46.4126 191.172 46.9699V47.2982C191.172 47.8556 190.721 48.3074 190.166 48.3074H79.8865C79.3311 48.3074 78.8809 47.8556 78.8809 47.2982V46.9699Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 51.6633C78.8809 51.1059 79.3311 50.6541 79.8865 50.6541H169.749C170.305 50.6541 170.755 51.1059 170.755 51.6633V51.9915C170.755 52.5489 170.305 53.0007 169.749 53.0007H79.8865C79.3311 53.0007 78.8809 52.5489 78.8809 51.9915V51.6633Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='70.9056'\n                    cy='63.5607'\n                    rx='3.50909'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 63.3966C78.8809 62.8392 79.3311 62.3874 79.8865 62.3874H109.444C110 62.3874 110.45 62.8392 110.45 63.3966V63.7249C110.45 64.2822 110 64.7341 109.444 64.7341H79.8865C79.3311 64.7341 78.8809 64.2822 78.8809 63.7249V63.3966Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 68.0899C78.8809 67.5326 79.3311 67.0807 79.8865 67.0807H190.166C190.721 67.0807 191.172 67.5326 191.172 68.0899V68.4182C191.172 68.9756 190.721 69.4274 190.166 69.4274H79.8865C79.3311 69.4274 78.8809 68.9756 78.8809 68.4182V68.0899Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 72.7833C78.8809 72.2259 79.3311 71.7741 79.8865 71.7741H169.749C170.305 71.7741 170.755 72.2259 170.755 72.7833V73.1115C170.755 73.6689 170.305 74.1207 169.749 74.1207H79.8865C79.3311 74.1207 78.8809 73.6689 78.8809 73.1115V72.7833Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='70.9056'\n                    cy='84.6807'\n                    rx='3.50909'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 84.5166C78.8809 83.9592 79.3311 83.5074 79.8865 83.5074H109.444C110 83.5074 110.45 83.9592 110.45 84.5166V84.8449C110.45 85.4022 110 85.854 109.444 85.854H79.8865C79.3311 85.854 78.8809 85.4022 78.8809 84.8449V84.5166Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 89.2099C78.8809 88.6525 79.3311 88.2007 79.8865 88.2007H190.166C190.721 88.2007 191.172 88.6525 191.172 89.2099V89.5382C191.172 90.0956 190.721 90.5474 190.166 90.5474H79.8865C79.3311 90.5474 78.8809 90.0956 78.8809 89.5382V89.2099Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 93.9033C78.8809 93.3459 79.3311 92.8941 79.8865 92.8941H169.749C170.305 92.8941 170.755 93.3459 170.755 93.9033V94.2315C170.755 94.7889 170.305 95.2407 169.749 95.2407H79.8865C79.3311 95.2407 78.8809 94.7889 78.8809 94.2315V93.9033Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <g opacity='0.16'>\n                <ellipse\n                    cx='70.9056'\n                    cy='105.801'\n                    rx='3.50909'\n                    ry='3.52'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 105.637C78.8809 105.079 79.3311 104.627 79.8865 104.627H109.444C110 104.627 110.45 105.079 110.45 105.637V105.965C110.45 106.522 110 106.974 109.444 106.974H79.8865C79.3311 106.974 78.8809 106.522 78.8809 105.965V105.637Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 110.33C78.8809 109.773 79.3311 109.321 79.8865 109.321H190.166C190.721 109.321 191.172 109.773 191.172 110.33V110.658C191.172 111.216 190.721 111.667 190.166 111.667H79.8865C79.3311 111.667 78.8809 111.216 78.8809 110.658V110.33Z'\n                    fill='var(--center-channel-color)'\n                />\n                <path\n                    d='M78.8809 115.023C78.8809 114.466 79.3311 114.014 79.8865 114.014H169.749C170.305 114.014 170.755 114.466 170.755 115.023V115.352C170.755 115.909 170.305 116.361 169.749 116.361H79.8865C79.3311 116.361 78.8809 115.909 78.8809 115.352V115.023Z'\n                    fill='var(--center-channel-color)'\n                />\n            </g>\n            <path\n                opacity='0.16'\n                d='M201.144 25.2633C201.144 24.7059 201.594 24.2541 202.15 24.2541H234.046C234.601 24.2541 235.052 24.7059 235.052 25.2633V27.9382C235.052 28.4956 234.601 28.9474 234.046 28.9474H202.15C201.594 28.9474 201.144 28.4956 201.144 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M238.56 25.2633C238.56 24.7059 239.01 24.2541 239.565 24.2541H242.231C242.786 24.2541 243.236 24.7059 243.236 25.2633V27.9382C243.236 28.4956 242.786 28.9474 242.231 28.9474H239.565C239.01 28.9474 238.56 28.4956 238.56 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M247.329 25.2633C247.329 24.7059 247.779 24.2541 248.334 24.2541H251C251.555 24.2541 252.006 24.7059 252.006 25.2633V27.9382C252.006 28.4956 251.555 28.9474 251 28.9474H248.334C247.779 28.9474 247.329 28.4956 247.329 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M191.791 25.2633C191.791 24.7059 192.241 24.2541 192.796 24.2541H195.462C196.017 24.2541 196.467 24.7059 196.467 25.2633V27.9382C196.467 28.4956 196.017 28.9474 195.462 28.9474H192.796C192.241 28.9474 191.791 28.4956 191.791 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.16'\n                d='M180.098 25.2633C180.098 24.7059 180.548 24.2541 181.104 24.2541H183.769C184.325 24.2541 184.775 24.7059 184.775 25.2633V27.9382C184.775 28.4956 184.325 28.9474 183.769 28.9474H181.104C180.548 28.9474 180.098 28.4956 180.098 27.9382V25.2633Z'\n                fill='var(--center-channel-color)'\n            />\n            <rect\n                opacity='0.08'\n                x='10.5596'\n                y='9.5874'\n                width='245.538'\n                height='10.56'\n                fill='var(--center-channel-color)'\n            />\n            <ellipse\n                cx='15.7173'\n                cy='15.3474'\n                rx='1.91405'\n                ry='1.92'\n                fill='var(--dnd-indicator)'\n            />\n            <ellipse\n                cx='23.3735'\n                cy='15.3474'\n                rx='1.91405'\n                ry='1.92'\n                fill='var(--away-indicator)'\n            />\n            <ellipse\n                cx='31.0293'\n                cy='15.3474'\n                rx='1.91405'\n                ry='1.92'\n                fill='var(--online-indicator)'\n            />\n            <rect\n                opacity='0.1'\n                x='66.1201'\n                y='135.027'\n                width='182.472'\n                height='8.95998'\n                rx='2'\n                fill='var(--center-channel-color)'\n            />\n            <ellipse\n                opacity='0.1'\n                cx='135.011'\n                cy='85.5297'\n                rx='28.913'\n                ry='29.0145'\n                fill='var(--center-channel-color)'\n            />\n            <ellipse\n                cx='132.497'\n                cy='83.0067'\n                rx='29.4159'\n                ry='29.5191'\n                fill='var(--button-bg)'\n            />\n            <ellipse\n                cx='132.497'\n                cy='83.0067'\n                rx='29.4159'\n                ry='29.5191'\n                fill='url(#paint0_linear)'\n            />\n            <path\n                d='M134.357 99.4062H130.134V74.1762L118.619 85.7315L115.652 82.7544L132.245 66.1026L148.839 82.7544L145.872 85.7315L134.357 74.1762V99.4062Z'\n                fill='var(--center-channel-bg)'\n            />\n        </g>\n        <defs>\n            <linearGradient\n                id='paint0_linear'\n                x1='162'\n                y1='83'\n                x2='103'\n                y2='83'\n                gradientUnits='userSpaceOnUse'\n            >\n                <stop\n                    stopColor='#3D3C40'\n                    stopOpacity='0.2'\n                />\n                <stop\n                    offset='1'\n                    stopColor='#3D3C40'\n                    stopOpacity='0'\n                />\n            </linearGradient>\n            <clipPath id='clip0'>\n                <rect\n                    width='245.538'\n                    height='140.8'\n                    fill='var(--center-channel-bg)'\n                    transform='translate(10.5596 9.5874)'\n                />\n            </clipPath>\n        </defs>\n    </svg>\n);\n\nexport default ComplianceExportSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport ComplianceExportSVG from './images/compliance_export_svg';\n\nconst ComplianceExportFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='compliance_export'\n            titleID='admin.compliance_export_feature_discovery.title'\n            titleDefault='Run compliance exports with MatterFOSS'\n            copyID='admin.compliance_export_feature_discovery.copy'\n            copyDefault={'Run daily compliance reports and export them to a variety of formats consumable by third-party integration tools such as Smarsh (Actiance).'}\n            learnMoreURL='https://docs.mattermost.com/administration/compliance-export.html'\n            featureDiscoveryImage={<ComplianceExportSVG/>}\n        />\n    );\n};\n\nt('admin.compliance_export_feature_discovery.title');\nt('admin.compliance_export_feature_discovery.copy');\n\nexport default ComplianceExportFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst CustomTermsOfServiceSVG = () => (\n    <svg\n        width='192'\n        height='220'\n        viewBox='0 0 192 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <rect\n            x='26'\n            y='0.16983'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-bg)'\n        />\n        <rect\n            opacity='0.04'\n            x='26'\n            y='0.16983'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-color)'\n        />\n        <rect\n            x='13'\n            y='13.1698'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-bg)'\n        />\n        <rect\n            opacity='0.08'\n            x='13'\n            y='13.1698'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-color)'\n        />\n        <rect\n            y='28.1698'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-bg)'\n        />\n        <rect\n            opacity='0.16'\n            y='28.1698'\n            width='84'\n            height='120'\n            rx='8'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M72.8914 54.987H11.1086C10.2841 54.987 9.49345 54.6698 8.91048 54.1052C8.32751 53.5406 8 52.7748 8 51.9763C8 51.1778 8.32751 50.412 8.91048 49.8474C9.49345 49.2827 10.2841 48.9655 11.1086 48.9655H72.8914C73.7159 48.9655 74.5066 49.2827 75.0895 49.8474C75.6725 50.412 76 51.1778 76 51.9763C76 52.7748 75.6725 53.5406 75.0895 54.1052C74.5066 54.6698 73.7159 54.987 72.8914 54.987Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M72.8914 67.7827H11.1086C10.2841 67.7827 9.49345 67.4655 8.91048 66.9009C8.32751 66.3363 8 65.5705 8 64.772C8 63.9735 8.32751 63.2077 8.91048 62.643C9.49345 62.0784 10.2841 61.7612 11.1086 61.7612H72.8914C73.7159 61.7612 74.5066 62.0784 75.0895 62.643C75.6725 63.2077 76 63.9735 76 64.772C76 65.5705 75.6725 66.3363 75.0895 66.9009C74.5066 67.4655 73.7159 67.7827 72.8914 67.7827Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M72.8914 80.5784H11.1086C10.2841 80.5784 9.49345 80.2612 8.91048 79.6966C8.32751 79.132 8 78.3662 8 77.5677C8 76.7692 8.32751 76.0034 8.91048 75.4388C9.49345 74.8741 10.2841 74.5569 11.1086 74.5569H72.8914C73.7159 74.5569 74.5066 74.8741 75.0895 75.4388C75.6725 76.0034 76 76.7692 76 77.5677C76 78.3662 75.6725 79.132 75.0895 79.6966C74.5066 80.2612 73.7159 80.5784 72.8914 80.5784Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M72.8914 93.3741H11.1086C10.2841 93.3741 9.49345 93.0569 8.91048 92.4923C8.32751 91.9277 8 91.1619 8 90.3634C8 89.5649 8.32751 88.7991 8.91048 88.2345C9.49345 87.6698 10.2841 87.3526 11.1086 87.3526H72.8914C73.7159 87.3526 74.5066 87.6698 75.0895 88.2345C75.6725 88.7991 76 89.5649 76 90.3634C76 91.1619 75.6725 91.9277 75.0895 92.4923C74.5066 93.0569 73.7159 93.3741 72.8914 93.3741Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M72.8914 106.17H11.1086C10.2841 106.17 9.49345 105.853 8.91048 105.288C8.32751 104.723 8 103.958 8 103.159C8 102.361 8.32751 101.595 8.91048 101.03C9.49345 100.466 10.2841 100.148 11.1086 100.148H72.8914C73.7159 100.148 74.5066 100.466 75.0895 101.03C75.6725 101.595 76 102.361 76 103.159C76 103.958 75.6725 104.723 75.0895 105.288C74.5066 105.853 73.7159 106.17 72.8914 106.17Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M40.2514 42.1913H11.1086C10.2841 42.1913 9.49345 41.8741 8.91048 41.3095C8.32751 40.7449 8 39.9791 8 39.1806C8 38.3821 8.32751 37.6163 8.91048 37.0517C9.49345 36.487 10.2841 36.1698 11.1086 36.1698H40.2514C41.0759 36.1698 41.8666 36.487 42.4495 37.0517C43.0325 37.6163 43.36 38.3821 43.36 39.1806C43.36 39.9791 43.0325 40.7449 42.4495 41.3095C41.8666 41.8741 41.0759 42.1913 40.2514 42.1913Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M33.3561 133.379C33.9667 130.806 36.8361 129.962 39.182 130.057C40.6641 130.156 42.1343 130.388 43.575 130.748C45.0823 131.084 46.575 131.481 48.0602 131.903C50.7838 132.676 53.4792 133.61 56.2476 134.215C58.5523 134.718 61.0569 135.013 63.3552 134.318C65.5646 133.651 67.4389 132.012 68.04 129.746C68.6065 127.611 67.8288 125.276 65.7494 124.3C63.8532 123.41 61.458 123.863 60.5182 125.875C59.4585 128.144 60.5173 130.619 62.1952 132.261C63.1489 133.152 64.1935 133.941 65.312 134.616C66.4472 135.386 67.7108 135.949 69.0439 136.28C71.2326 136.745 73.8399 136.059 74.9687 133.978C75.2196 133.507 75.3705 132.99 75.412 132.459C75.4788 131.735 74.3434 131.74 74.277 132.459C74.0856 134.531 71.6472 135.501 69.8237 135.274C68.5928 135.071 67.4173 134.617 66.3711 133.94C65.3614 133.354 64.4046 132.683 63.5115 131.932C61.9649 130.601 60.5151 128.409 61.5538 126.331C62.3996 124.638 64.6045 124.655 65.9456 125.747C67.5696 127.068 67.2801 129.467 66.2089 131.037C65.0228 132.775 62.8731 133.503 60.8462 133.582C58.6438 133.667 56.4598 133.164 54.355 132.57C51.7396 131.831 49.1503 131.003 46.5224 130.308C45.0304 129.913 43.527 129.556 42.0082 129.279C40.572 128.964 39.0969 128.862 37.6309 128.977C35.2624 129.249 32.8448 130.621 32.2616 133.079C32.0938 133.786 33.188 134.087 33.3561 133.379L33.3561 133.379Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M75.0603 133.647C74.9168 133.528 74.8119 133.369 74.7588 133.191C74.7057 133.013 74.7067 132.823 74.7619 132.646C74.817 132.468 74.9237 132.311 75.0685 132.193C75.2133 132.076 75.3898 132.004 75.5757 131.986C77.6393 131.788 79.7219 132.001 81.7022 132.611L101.874 138.81C102.135 138.891 102.378 139.021 102.588 139.195C102.798 139.368 102.972 139.582 103.1 139.822C103.228 140.062 103.306 140.326 103.332 140.596C103.357 140.867 103.329 141.14 103.248 141.4C103.168 141.66 103.036 141.901 102.862 142.111C102.687 142.32 102.473 142.493 102.232 142.62C101.99 142.747 101.726 142.825 101.453 142.851C101.181 142.876 100.907 142.848 100.646 142.767L80.4741 136.568C78.4926 135.962 76.6522 134.968 75.0603 133.647Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M157.747 159.398C157.199 159.17 156.708 158.824 156.309 158.386C155.91 157.948 155.612 157.429 155.436 156.864C155.261 156.299 155.212 155.703 155.293 155.117C155.374 154.531 155.583 153.97 155.905 153.473L152.448 135.481L161.26 134.797L161.792 152.397C162.594 152.991 163.15 153.858 163.353 154.832C163.556 155.807 163.393 156.822 162.894 157.685C162.396 158.548 161.597 159.199 160.648 159.515C159.699 159.831 158.667 159.789 157.747 159.398Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M151.904 150.112L142.929 108.517C142.56 106.808 142.889 105.024 143.842 103.557C144.795 102.089 146.296 101.059 148.012 100.692C149.729 100.325 151.522 100.652 152.997 101.601C154.472 102.55 155.507 104.042 155.876 105.751L164.851 147.346C164.946 147.785 164.861 148.244 164.616 148.621C164.371 148.998 163.985 149.263 163.544 149.358L153.926 151.413C153.708 151.46 153.482 151.463 153.262 151.423C153.042 151.383 152.832 151.3 152.644 151.179C152.457 151.059 152.295 150.902 152.168 150.719C152.041 150.536 151.951 150.33 151.904 150.112Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M137.172 215.544H132.534L130.327 197.741L137.173 197.741L137.172 215.544Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M129.221 214.225H138.167V219.83H123.589C123.589 219.094 123.735 218.365 124.018 217.685C124.301 217.005 124.716 216.387 125.239 215.867C125.762 215.347 126.383 214.934 127.066 214.652C127.749 214.37 128.482 214.225 129.221 214.225Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M152.684 215.168H148.047L145.84 197.365L152.686 197.365L152.684 215.168Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M144.733 213.849H153.679V219.454H139.101C139.101 218.718 139.246 217.989 139.529 217.309C139.812 216.629 140.227 216.011 140.75 215.491C141.273 214.97 141.894 214.557 142.578 214.276C143.261 213.994 143.993 213.849 144.733 213.849Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M131.614 212.224C131.441 212.081 131.297 211.906 131.192 211.708C131.087 211.51 131.023 211.294 131.003 211.071L125.61 152.045C125.59 151.816 125.616 151.585 125.688 151.366C125.759 151.148 125.875 150.946 126.028 150.773C126.18 150.6 126.367 150.46 126.576 150.362C126.784 150.263 127.011 150.207 127.242 150.199L154.287 149.19C154.521 149.181 154.754 149.22 154.972 149.305C155.19 149.391 155.388 149.52 155.554 149.684C155.719 149.849 155.849 150.046 155.935 150.263C156.02 150.48 156.06 150.712 156.052 150.945L153.89 209.743C153.874 210.155 153.708 210.547 153.424 210.846C153.139 211.145 152.755 211.33 152.343 211.368L146.89 211.862C146.663 211.882 146.436 211.857 146.219 211.789C146.003 211.72 145.802 211.61 145.63 211.463C145.457 211.316 145.316 211.137 145.214 210.935C145.112 210.733 145.052 210.512 145.037 210.287L142.534 172.933C142.532 172.861 142.516 172.791 142.487 172.725C142.457 172.66 142.415 172.601 142.362 172.552C142.31 172.503 142.248 172.465 142.18 172.44C142.112 172.415 142.04 172.403 141.968 172.406H141.966C141.894 172.404 141.821 172.415 141.754 172.44C141.686 172.466 141.624 172.504 141.571 172.554C141.519 172.603 141.477 172.663 141.447 172.729C141.418 172.795 141.402 172.866 141.401 172.938L139.162 210.543C139.139 210.946 138.973 211.327 138.692 211.618C138.411 211.909 138.035 212.09 137.632 212.129L132.868 212.603C132.644 212.626 132.418 212.604 132.203 212.539C131.988 212.474 131.788 212.367 131.614 212.224H131.614Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M148.009 89.6745C150.028 87.9783 151.31 85.4413 151.31 82.6063C151.31 77.4994 147.149 73.3594 142.017 73.3594C136.885 73.3594 132.725 77.4994 132.725 82.6063C132.725 86.0635 134.631 89.0776 137.455 90.6641C137.018 93.2573 135.992 95.9792 133.8 97.824C128.367 102.401 148.17 96.0152 148.17 96.0152C147.512 94.0819 147.424 92.0017 147.917 90.022C147.945 89.9055 147.976 89.7897 148.009 89.6745Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M124.122 152.445C123.957 152.258 123.835 152.037 123.766 151.797C123.697 151.557 123.683 151.306 123.724 151.06C125.44 140.683 124.473 125.431 123.359 114.463C123.069 111.553 123.554 108.619 124.765 105.955C125.977 103.292 127.872 100.993 130.261 99.2896L135.114 95.1505C135.436 94.8785 135.848 94.7336 136.271 94.7431L148.327 95.0858C148.762 95.0976 149.175 95.2752 149.482 95.5818L151.345 99.6871L151.365 99.7011C153.585 101.325 155.366 103.471 156.549 105.947C157.731 108.423 158.279 111.153 158.143 113.891L156.368 150.386C156.345 150.811 156.164 151.211 155.86 151.509C155.556 151.808 155.15 151.982 154.723 151.998L125.459 153.021C125.44 153.021 125.421 153.022 125.403 153.022C125.16 153.022 124.921 152.971 124.7 152.871C124.479 152.772 124.282 152.626 124.122 152.445Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M89.0208 137.216C89.0062 136.625 89.122 136.037 89.3601 135.496C89.5982 134.954 89.9528 134.471 90.3988 134.08C90.8449 133.689 91.3716 133.401 91.9419 133.235C92.5121 133.069 93.1121 133.029 93.6994 133.118L108.782 122.615L113.016 130.336L97.0962 138.022C96.8797 138.994 96.3124 139.853 95.5018 140.437C94.6913 141.02 93.6938 141.288 92.6984 141.188C91.703 141.089 90.7788 140.629 90.101 139.897C89.4232 139.165 89.0388 138.211 89.0207 137.216L89.0208 137.216Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M101.713 139.041C101.492 139.008 101.28 138.932 101.089 138.816C100.897 138.701 100.731 138.549 100.599 138.369L94.7784 130.478C94.5118 130.116 94.4005 129.663 94.4689 129.219C94.5374 128.775 94.7799 128.376 95.1435 128.11L129.609 102.936C131.025 101.902 132.795 101.47 134.531 101.735C135.39 101.867 136.215 102.165 136.959 102.614C137.703 103.062 138.35 103.652 138.865 104.349C139.379 105.047 139.75 105.838 139.958 106.679C140.165 107.519 140.203 108.392 140.071 109.247C139.94 110.102 139.64 110.923 139.189 111.663C138.738 112.403 138.146 113.047 137.445 113.559L102.979 138.732C102.688 138.946 102.337 139.061 101.975 139.061C101.888 139.061 101.8 139.054 101.713 139.041Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M142.493 90.838C143.726 89.3345 143.591 87.0442 142.602 85.3722C141.613 83.7001 139.934 82.5485 138.206 81.6491C136.478 80.7496 134.643 80.0423 133.017 78.9713C131.391 77.9003 131.462 73.3664 131.029 71.4746L132.062 71.8168C131.665 71.3116 131.538 69.8189 131.141 69.3137C132.308 69.4284 133.205 70.5307 134.371 70.6454L133.698 68.8471C137.699 68.6017 140.186 71.3681 144.187 71.1227C146.169 71.0011 148.322 70.9241 149.952 72.0538C151.368 73.0354 152.085 74.7345 152.555 76.3868C153.565 79.9345 153.722 83.9086 151.978 87.1618C150.233 90.415 146.213 92.6072 142.7 91.4325L142.493 90.838Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.12'\n            d='M142 219.67C169.614 219.67 192 218.774 192 217.67C192 216.565 169.614 215.67 142 215.67C114.386 215.67 92 216.565 92 217.67C92 218.774 114.386 219.67 142 219.67Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default CustomTermsOfServiceSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport CustomTermsOfServiceSVG from './images/custom_terms_of_service_svg';\n\nconst CustomTermsOfServiceFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='custom_terms_of_service'\n            titleID='admin.custom_terms_of_service_feature_discovery.title'\n            titleDefault='Create custom terms of service with MatterFOSS'\n            copyID='admin.custom_terms_of_service_feature_discovery.copy'\n            copyDefault={'Create your own terms of service that new users must accept before accessing your MatterFOSS instance on desktop, web, or mobile.'}\n            learnMoreURL='https://docs.mattermost.com/cloud/cloud-administration/custom-terms-of-service.html'\n            featureDiscoveryImage={<CustomTermsOfServiceSVG/>}\n        />\n    );\n};\n\nt('admin.custom_terms_of_service_feature_discovery.title');\nt('admin.custom_terms_of_service_feature_discovery.copy');\n\nexport default CustomTermsOfServiceFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst DataRetentionSVG = () => (\n    <svg\n        width='210'\n        height='220'\n        viewBox='0 0 210 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            opacity='0.1'\n            d='M121 218C167.392 218 205 210.837 205 202C205 193.163 167.392 186 121 186C74.6081 186 37 193.163 37 202C37 210.837 74.6081 218 121 218Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M175 104L106 88V218L175 199V104Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.9'\n            d='M175 104L106 88V218L175 199V104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M205 77L175 104L106 88L134 62L205 77Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.2'\n            d='M205 77L175 104L106 88L134 62L205 77Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M37 104L106 88V218L37 199V104Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.8'\n            d='M37 104L106 88V218L37 199V104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M7 77L37 104L106 88L78 62L7 77Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.2'\n            d='M7 77L37 104L106 88L78 62L7 77Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M158 96H138V116H158V96Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.1'\n            d='M158 96H138V116H158V96Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M114 38H90V58H114V38Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.08'\n            d='M114 38H90V58H114V38Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M114 38H90V44H114V38Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M103.707 73H56.2926C55.5787 73 55 73.628 55 74.4027V121.597C55 122.372 55.5787 123 56.2926 123H103.707C104.421 123 105 122.372 105 121.597V74.4027C105 73.628 104.421 73 103.707 73Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M112.707 84H65.2926C64.5787 84 64 84.628 64 85.4027V132.597C64 133.372 64.5787 134 65.2926 134H112.707C113.421 134 114 133.372 114 132.597V85.4027C114 84.628 113.421 84 112.707 84Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.08'\n            d='M112.707 84H65.2926C64.5787 84 64 84.628 64 85.4027V132.597C64 133.372 64.5787 134 65.2926 134H112.707C113.421 134 114 133.372 114 132.597V85.4027C114 84.628 113.421 84 112.707 84Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M134 90H94V140H134V90Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M140 0H120V20H140V0Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.08'\n            d='M140 0H120V20H140V0Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M162 56H130V80H162V56Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.1'\n            d='M162 56H130V80H162V56Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M162 56H130V62H162V56Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M37 104V199L106 218V123L37 104Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.4'\n            d='M37 104V199L106 218V123L37 104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.4'\n            d='M37 104V154.545L73 166L106 135.75V123L37 104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M37 104L4 135L70 156L106 123L37 104Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.4'\n            d='M37 104L4 135L70 156L106 123L37 104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M175 199L106 218V123L175 104V199Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.6'\n            d='M175 199L106 218V123L175 104V199Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.4'\n            d='M175 104V154.545L139 166L106 135.75V123L175 104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M175 104L208 135L142 156L106 123L175 104Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.6'\n            d='M175 104L208 135L142 156L106 123L175 104Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default DataRetentionSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport DataRetentionSVG from './images/data_retention_svg';\n\nconst DataRetentionFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='data_retention'\n            titleID='admin.data_retention_feature_discovery.title'\n            titleDefault='Create data retention schedules with MatterFOSS'\n            copyID='admin.data_retention_feature_discovery.copy'\n            copyDefault={'Hold on to your data only as long as you need to. Create data retention jobs for select channels and teams to automatically delete disposable data.'}\n            learnMoreURL='https://docs.mattermost.com/administration/data-retention.html'\n            featureDiscoveryImage={<DataRetentionSVG/>}\n        />\n    );\n};\n\nt('admin.data_retention_feature_discovery.title');\nt('admin.data_retention_feature_discovery.copy');\n\nexport default DataRetentionFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst GuestAccessSVG = () => (\n    <svg\n        width='286'\n        height='220'\n        viewBox='0 0 286 220'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            opacity='0.1'\n            d='M283.787 65.1065C283.734 65.356 283.683 65.6056 283.624 65.8524C281.779 74.335 278.764 82.5091 274.28 90.0158C274.131 90.2654 273.982 90.515 273.83 90.7645C270.874 95.5943 267.336 100.046 263.296 104.02C261.063 106.218 258.627 108.307 255.73 109.813C251.671 111.928 246.926 112.786 242.262 113.487C237.419 114.219 232.507 114.83 227.61 115.489C225.87 115.719 224.14 115.963 222.421 116.221C217.69 116.919 212.992 117.727 208.408 118.798C202.74 120.119 197.246 121.849 192.057 124.283C191.642 124.47 191.233 124.668 190.828 124.877C190.423 125.079 190.015 125.284 189.615 125.491C189.216 125.699 188.822 125.906 188.431 126.119C188.229 126.229 188.026 126.338 187.826 126.453C187.627 126.568 187.43 126.669 187.236 126.781C186.651 127.106 186.077 127.44 185.503 127.777L185.481 127.791C185.101 128.012 184.727 128.239 184.355 128.467C182.235 129.751 180.159 131.091 178.083 132.44L176.778 133.281L174.755 134.585C174.362 134.84 173.959 135.096 173.563 135.348C173.281 135.533 173 135.718 172.694 135.909C171.22 136.834 169.726 137.743 168.193 138.609C167.83 138.817 167.465 139.024 167.096 139.226C163.999 140.949 160.76 142.405 157.415 143.578L157.37 143.595C155.687 144.18 153.969 144.663 152.228 145.042C151.224 145.261 150.217 145.44 149.198 145.577C146.477 145.962 143.717 146.001 140.985 145.692C135.621 145.073 130.595 143.02 125.234 142.327C114.196 140.925 103.477 145.443 93.0975 148.982C90.5453 149.851 87.9744 150.665 85.3848 151.424C83.6634 151.932 81.9363 152.411 80.1952 152.874C69.528 155.684 58.641 157.587 47.6513 158.564C43.0573 159.012 38.4359 159.115 33.8265 158.869C32.0741 158.763 30.3414 158.589 28.6397 158.308C22.8172 157.411 17.3886 155.529 13.0063 152.083C9.41714 149.254 6.84907 145.566 4.89418 141.708C2.89304 137.771 1.48014 133.563 0.700325 129.218C0.59344 128.626 0.497805 128.032 0.419047 127.437C0.278408 126.42 0.173396 125.398 0.104014 124.37C-0.274451 118.889 0.381974 113.387 2.03921 108.148C3.89565 102.281 6.98971 96.6505 8.3511 90.7393C8.40735 90.4888 8.46079 90.2392 8.51143 89.9906C8.69736 89.0928 8.83538 88.1858 8.9249 87.2734C9.61966 80.0106 6.95596 72.9301 4.86606 65.8271C4.79293 65.5804 4.71979 65.3308 4.64947 65.0812C4.42445 64.2923 4.2088 63.5043 4.00253 62.7173C2.06734 55.2078 1.53009 47.1682 3.25433 39.6727C3.30777 39.4231 3.37247 39.1736 3.43435 38.9268C4.58867 34.1888 6.75934 29.7565 9.79687 25.9351C13.0259 21.8971 17.2648 18.5349 21.7934 15.5821C24.0005 14.1427 26.2826 12.7976 28.6397 11.547C30.3274 10.6496 32.0563 9.79996 33.8265 8.99797C48.017 2.5484 64.2045 -0.600678 80.2121 0.0947539C81.0559 0.131208 81.8998 0.176074 82.7436 0.237766C83.5874 0.299457 84.51 0.372366 85.3932 0.453686C95.7049 1.45197 105.738 3.86074 115.701 6.49385C119.04 7.37716 122.373 8.28291 125.703 9.17183C127.186 9.56441 128.665 9.957 130.147 10.3384C137.407 12.2087 144.774 13.9024 152.233 15.1671C153.96 15.4644 155.689 15.7354 157.42 15.9803C163.43 16.8608 169.488 17.3731 175.56 17.5142C177.921 17.5609 180.283 17.5404 182.645 17.4525C183.838 17.4095 185.031 17.345 186.226 17.259C198.56 16.3925 210.481 13.493 222.421 10.7842C224.148 10.3916 225.878 10.0047 227.61 9.6233C229.883 9.12416 232.156 8.64184 234.44 8.19598C248.653 5.41144 261.322 7.01262 274.536 12.7584C277.54 14.0623 280.541 15.6382 282.381 18.0863C284.22 20.5343 284.682 23.5404 285.025 26.4427C285.512 30.576 285.829 34.7626 285.95 38.9717C285.95 39.2184 285.95 39.468 285.967 39.7176C286.159 48.2198 285.523 56.8033 283.787 65.1065Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            opacity='0.1'\n            d='M264.139 169.167C266.16 159.311 241.422 145.947 208.886 139.318C176.351 132.689 148.337 135.306 146.317 145.163C144.296 155.019 169.034 168.383 201.569 175.012C234.105 181.641 262.119 179.024 264.139 169.167Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M198.436 106.011C198.436 106.011 201.634 90.3608 213.844 91.8105C213.844 91.8105 222.282 92.3882 224.018 97.8955V110.068L198.436 106.011Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M265.305 111.81L156.571 102.822L142.617 105.722L143.489 125.141L144.44 125.256L145.523 154.416L252.22 173.543L263.561 163.978V132.367L265.013 131.517L265.305 111.81Z'\n            fill='var(--sidebar-text-active-border)'\n        />\n        <path\n            opacity='0.05'\n            d='M265.449 111.81L265.157 131.517L253.383 137.025L253.236 116.445L265.449 111.81Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.05'\n            d='M263.56 132.387L263.704 163.401L252.365 172.966L253.094 137.025L263.56 132.387Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.05'\n            d='M144.585 126.417L253.181 139.627L253.238 137.12L144.504 125.43L144.585 126.417Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.05'\n            d='M263.56 133.525V132.387L252.801 137.12V139.633L263.56 133.525Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M142.47 105.722L156.424 102.822L265.158 111.81L252.947 116.445L142.47 105.722Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            opacity='0.1'\n            d='M253.575 112.368L258.911 112.716L250.068 115.354L245.564 115.032L253.575 112.368Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M253.575 112.135L258.911 112.483L250.068 115.124L245.564 114.799L253.575 112.135Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M252.936 112.732C253.146 112.643 253.369 112.814 253.593 112.856C253.723 112.881 253.855 112.856 253.984 112.881C254.246 112.915 254.504 113.089 254.755 113.002'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M252.66 112.892C252.868 112.802 253.093 112.971 253.318 113.016C253.447 113.038 253.58 113.016 253.709 113.038C253.97 113.074 254.229 113.248 254.479 113.161'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M252.025 113.212C252.236 113.122 252.461 113.29 252.686 113.332C252.813 113.358 252.948 113.332 253.074 113.358C253.338 113.394 253.597 113.568 253.845 113.478'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            opacity='0.1'\n            d='M230.511 109.749L235.847 110.099L227.003 112.738L222.5 112.413L230.511 109.749Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M230.511 109.519L235.847 109.867L227.003 112.505L222.5 112.183L230.511 109.519Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M229.871 110.116C230.082 110.026 230.304 110.195 230.529 110.239C230.658 110.262 230.79 110.239 230.92 110.262C231.181 110.298 231.44 110.472 231.69 110.385'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M229.596 110.276C229.804 110.186 230.029 110.354 230.254 110.396C230.383 110.422 230.515 110.396 230.644 110.422C230.906 110.458 231.165 110.632 231.415 110.542'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M228.961 110.593C229.172 110.503 229.397 110.674 229.622 110.716C229.748 110.741 229.883 110.716 230.01 110.741C230.274 110.775 230.533 110.952 230.78 110.862'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            opacity='0.1'\n            d='M241.573 111.058L246.912 111.406L238.069 114.048L233.562 113.722L241.573 111.058Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M241.573 110.828L246.912 111.176L238.069 113.815L233.562 113.489L241.573 110.828Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M240.934 111.426C241.144 111.336 241.369 111.504 241.594 111.546C241.721 111.571 241.853 111.546 241.982 111.571C242.244 111.605 242.505 111.782 242.753 111.692'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M240.658 111.583C240.869 111.493 241.094 111.664 241.319 111.706C241.445 111.731 241.578 111.706 241.707 111.731C241.968 111.765 242.23 111.942 242.477 111.852'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M240.025 111.902C240.233 111.813 240.458 111.981 240.683 112.026C240.813 112.048 240.945 112.026 241.074 112.048C241.336 112.085 241.594 112.258 241.845 112.172'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            opacity='0.1'\n            d='M120.767 220C152.221 220 177.72 214.767 177.72 208.312C177.72 201.857 152.221 196.625 120.767 196.625C89.3123 196.625 63.8135 201.857 63.8135 208.312C63.8135 214.767 89.3123 220 120.767 220Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M183.135 112.601C182.528 107.278 180.123 102.2 180.123 102.2L180.305 100.405C180.305 100.405 180.345 99.5079 180.286 98.1619C180.292 97.3216 180.403 96.4852 180.615 95.6718C181.107 94.1155 179.999 92.2031 179.875 92.0264C179.751 91.8498 179.937 88.4371 178.829 86.763C177.72 85.0889 170.34 81.9763 170.34 81.9763C170.34 81.9763 169.943 81.1491 169.383 80.1816L169.434 80.0835C168.976 79.2553 168.408 78.4922 167.746 77.8149C167.294 77.3326 166.858 77.0578 166.506 77.1924C166.363 76.727 166.254 76.2518 166.18 75.7707C166.253 75.7903 166.329 75.8099 166.402 75.824C166.706 75.8944 167.022 75.902 167.33 75.8464C168.016 75.6922 168.472 75.0781 168.855 74.5004C170.762 71.6121 172.404 68.4434 172.739 65.0251C172.829 64.3275 172.796 63.6195 172.641 62.9332C172.482 62.3997 172.261 61.8867 171.982 61.405C171.489 60.4164 170.865 59.4987 170.126 58.6765C168.812 57.2969 167.001 56.4528 165.139 55.9537C163.041 55.3913 160.856 55.2286 158.698 55.4742C158.135 55.5387 157.573 55.6312 157.01 55.6676C156.296 55.699 155.582 55.6868 154.869 55.6312L151.188 55.4181L151.171 55.362L150.557 55.3255C150.316 55.805 150.557 56.3743 150.858 56.823C151.159 57.2716 151.505 57.7399 151.48 58.2699C151.455 58.7999 151.069 59.2261 150.768 59.672C150.467 60.1179 150.24 60.7011 150.541 61.1386C150.583 61.1991 150.633 61.2537 150.69 61.3012C151.007 61.6293 151.562 61.6657 152.043 61.6601H152.127C150.916 63.2506 150.261 65.193 150.262 67.1899C150.27 68.8965 150.749 70.5678 151.647 72.021C152.544 73.4741 153.826 74.653 155.35 75.4286C155.404 75.6108 155.457 75.7987 155.508 75.9894C156.066 77.9591 156.266 80.0122 156.099 82.052L156.034 82.1922L155.995 82.0436C155.995 82.0436 151.657 84.9768 150.369 85.7535C149.081 86.5303 147.787 89.1634 147.725 89.8812C147.663 90.5991 145.632 101.426 145.632 101.426C145.22 102.517 144.879 103.633 144.614 104.769L142.023 107.037C142.023 107.037 136.679 107.517 135.132 107.158L135.177 107.455C133.813 107.144 132.423 106.957 131.025 106.894C130.262 106.796 129.486 106.9 128.775 107.194L128.722 107.219L128.68 107.239C127.865 107.35 127.07 107.573 126.317 107.901C126.227 107.937 126.145 107.974 126.067 108.01L126.083 107.643L120.3 107.346L117.347 106.748C117.347 106.748 116.301 105.907 115.685 106.03C115.069 106.154 113.777 105.313 113.777 105.313C113.483 105.082 113.164 104.885 112.827 104.724C112.728 104.045 112.666 103.633 112.666 103.633C112.666 103.633 110.368 94.5418 108.647 89.197C107.494 85.6273 105.834 83.8691 104.855 83.1036C104.419 82.3464 104.132 81.8585 104.132 81.8585C103.944 81.2023 102.909 79.7246 102.644 79.6881C102.602 79.6208 102.571 79.5871 102.554 79.5871C102.498 79.5811 102.441 79.5898 102.389 79.6124C101.905 77.212 101.623 74.2032 102.363 71.5813C103.376 70.7516 104.192 69.709 104.753 68.528C105.314 67.3471 105.607 66.0571 105.609 64.7503C105.609 64.7111 105.609 64.6718 105.609 64.6326C105.609 64.5933 105.609 64.5512 105.609 64.512C105.609 62.428 104.868 60.4115 103.519 58.8195L103.424 58.713C103.449 58.6949 103.474 58.6752 103.497 58.6541C103.708 58.4832 103.869 58.2584 103.963 58.0037C104.056 57.7489 104.079 57.4737 104.028 57.2071C103.902 56.6687 103.48 56.2453 103.263 55.7349C103.133 55.3421 103.029 54.9412 102.951 54.5348C102.785 53.9576 102.481 53.4292 102.065 52.9953L102.107 53.1074C101.005 51.8708 99.1088 51.2567 97.4015 51.5315C96.1329 51.7334 94.9515 52.3223 93.6773 52.5045C92.7632 52.6335 91.8321 52.5494 90.9124 52.642C90.059 52.7294 89.2283 52.9688 88.4596 53.3486C88.2588 53.4338 88.0807 53.5643 87.9392 53.73C87.8084 53.9519 87.7206 54.1964 87.6805 54.4506C87.3683 55.5863 86.3782 56.3967 85.6609 57.3445C84.8416 58.4274 84.3673 59.7306 84.2995 61.0853C84.2715 61.4296 84.3048 61.7761 84.398 62.1088C84.4598 62.3079 84.5555 62.4958 84.6005 62.6977C84.7411 63.3146 84.4176 63.9287 84.2601 64.54C84.0617 65.3198 84.132 66.1435 84.4598 66.8787C85.5709 69.3576 89.2191 70.1848 89.9785 72.7871C90.5596 73.0533 91.1734 73.2419 91.804 73.3479C91.8546 73.6059 91.8996 73.8667 91.9362 74.1302C91.9191 74.1375 91.903 74.1469 91.8884 74.1583C90.9039 75.1145 90.6592 76.9625 90.6592 76.9625L90.5411 77.0578C90.1388 77.3887 88.7634 78.4991 87.5201 79.3544C86.0434 80.3723 83.5822 83.7822 81.8608 84.8001C80.1394 85.818 78.7218 92.0909 79.093 94.3707C79.4643 96.6505 81.0001 103.044 80.3841 105.377C79.7681 107.71 81.3067 118.358 81.3067 118.358C82.3392 118.554 83.3493 118.852 84.322 119.249L84.2911 119.715L84.1983 121.117C84.1983 121.117 81.4108 131.167 82.4768 138.904C83.5429 146.64 81.9846 147.437 81.9846 147.437C81.9846 147.437 82.3109 150.866 81.4923 152.064C80.6738 153.261 80.5079 155.891 80.5079 155.891C80.5079 155.891 80.4263 161.794 80.5894 163.462C80.7526 165.131 80.8342 168.171 80.2604 168.889C79.6865 169.606 78.6205 174.309 78.7021 175.745C78.7836 177.18 76.6516 180.453 77.7992 184.679C78.9468 188.905 74.4238 188.986 74.4238 188.986C74.4238 188.986 75.0004 195.436 76.2296 197.281L76.4097 197.544C76.3787 197.651 76.3478 197.763 76.314 197.884C75.8499 199.566 75.2142 202.222 75.6558 202.864C76.3112 203.823 76.6403 203.66 76.6403 203.66L76.885 207.967C76.885 207.967 81.8074 212.115 85.5821 211.958C89.3569 211.801 88.6171 207.967 88.6171 207.967L85.4021 199.656L85.2924 199.375L88.8647 192.645C88.8647 192.645 89.8491 189.695 90.0938 188.658C90.3386 187.62 91.6746 183.944 91.6746 183.944C91.6746 183.944 95.05 175.969 95.1203 175.01C95.1906 174.051 95.4494 168.872 96.1048 167.831C96.7601 166.791 98.5659 160.821 98.5659 160.821L98.611 160.86C98.9173 161.16 99.1361 161.538 99.2441 161.952C99.3521 162.366 99.3452 162.802 99.2241 163.213C98.8107 164.727 99.0582 167.837 99.0582 167.837C99.0582 167.837 98.895 170.47 98.5659 171.827C98.2369 173.184 98.1581 184.269 98.7319 186.9C99.1904 189.006 99.1763 192.948 99.1538 194.44C98.7685 196.024 98.4309 197.993 99.0582 198.226C100.127 198.627 105.542 198.545 105.542 198.545C105.542 198.545 107.837 197.746 110.956 200.539C114.076 203.332 123.67 199.743 123.67 199.743C123.67 199.743 126.623 198.944 120.798 196.633C116.734 195.021 114.109 193.947 112.394 192.797C112.433 192.721 112.475 192.645 112.512 192.564C112.512 192.564 110.132 190.321 112.101 186.344C114.07 182.368 113.988 179.006 113.988 179.006L114.318 165.605L113.333 147.815L112.571 129.145L112.706 129.1C112.835 132.533 113.507 140.704 117.026 139.12C121.456 137.126 117.682 131.941 117.682 131.941L115.693 128.077L116.286 127.875L114.062 120.707C113.848 119.309 113.82 117.888 113.977 116.482C114.021 115.659 114.004 114.834 113.927 114.014C116.841 113.506 119.631 112.968 120.132 113.091C120.722 113.234 124.027 113.262 125.327 113.268C124.902 113.599 124.562 113.927 124.562 113.927L129.853 117.477C129.853 117.477 131.647 116.498 132.021 115.461C132.389 115.368 132.729 115.187 133.011 114.934C133.068 116.159 133.394 117.485 134.53 117.516C134.814 117.522 135.097 117.467 135.357 117.354L144.009 115.646L143.267 120.27L143.784 121.187C143.523 125.087 143.222 129.229 142.957 132.872L142.836 133.668L142.898 133.682C142.488 139.291 142.158 143.539 142.158 143.539C142.643 142.618 143.395 141.865 144.316 141.377L144.372 149.7C144.372 149.7 144.805 162.86 144.805 164.654C144.805 166.449 144.864 170.456 144.864 170.456C144.864 170.456 145.79 175.361 146.341 176.976C146.892 178.591 147.326 185.949 147.326 185.949C147.326 185.949 148.619 187.982 148.065 188.753C147.511 189.524 150.22 191.204 150.22 191.204C150.22 191.204 148.496 193.537 148.372 195.093C148.358 195.273 148.535 195.464 148.856 195.654C148.754 195.736 148.65 195.817 148.535 195.895C147.736 196.428 146.566 196.798 144.805 196.647C140.004 196.226 136.62 200.654 139.574 201.551C142.527 202.449 151.387 202.628 151.387 202.628C151.387 202.628 154.071 200.96 156.169 201.711C156.138 203.467 156.225 205.076 156.239 205.289L156.214 205.309C154.959 206.431 152.557 208.36 150.211 209.148C146.836 210.284 146.088 214.891 150.456 215.488C154.824 216.085 161.224 214.77 161.224 214.77C161.224 214.77 164.545 212.319 167.068 211.781C169.592 211.243 171.746 210.045 171.316 208.609C171.035 207.693 170.312 205.289 169.822 203.674C169.794 203.577 169.766 203.483 169.738 203.394C169.814 203.225 169.89 203.052 169.96 202.872C169.96 202.872 168.669 196.173 169.715 194.499C170.762 192.825 170.208 176.073 170.208 176.073C170.208 176.073 168.421 171.827 169.347 169.256C170.272 166.684 167.87 163.033 167.87 163.033C167.87 163.033 168.132 155.717 168.835 151.64C168.867 151.466 168.898 151.298 168.928 151.135C170.105 150.787 171.253 150.345 172.359 149.815C172.359 149.815 172.975 140.6 173.344 138.508C173.38 138.312 173.431 137.995 173.493 137.583L173.774 136.105L174.106 134.423L175.231 128.688L177.262 126.069L182.494 120.741C182.494 120.741 183.751 117.926 183.135 112.601ZM102.453 79.6993L102.414 79.7274C102.408 79.7071 102.403 79.6865 102.4 79.6657C102.416 79.6791 102.434 79.6904 102.453 79.6993ZM154.144 86.2302L153.941 86.6705L154.681 85.9358L153.677 87.0574L154.014 86.3508L154.144 86.2302ZM149.148 96.5215C148.954 97.0347 148.746 97.5899 148.529 98.1675L148.926 96.987L149.148 96.5215Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M133.005 113.299C133.005 113.299 132.316 117.872 134.383 117.931C136.45 117.99 137.832 114.404 137.832 114.404L136.988 111.535L133.005 113.299Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.2'\n            d='M133.005 113.299C133.005 113.299 132.316 117.872 134.383 117.931C136.45 117.99 137.832 114.404 137.832 114.404L136.988 111.535L133.005 113.299Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M86.6983 212.297C83.0192 212.457 78.2206 208.312 78.2206 208.312L77.9815 204.008C77.9815 204.008 77.6636 204.168 77.0223 203.211C76.592 202.569 77.2108 199.908 77.6636 198.234C77.883 197.415 78.063 196.832 78.063 196.832L86.1357 198.986L86.5211 200.004L89.6545 208.309C89.6545 208.309 90.3746 212.137 86.6983 212.297Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M123.79 200.104C123.79 200.104 114.438 203.691 111.414 200.901C108.39 198.111 106.137 198.907 106.137 198.907C106.137 198.907 100.861 198.988 99.8199 198.587C99.2067 198.355 99.5386 196.361 99.9212 194.774C100.18 193.677 100.461 192.772 100.461 192.772C100.461 192.772 109.653 189.662 111.094 191.574C111.526 192.136 112.043 192.628 112.627 193.032C114.292 194.233 116.894 195.321 121.009 196.995C126.668 199.305 123.79 200.104 123.79 200.104Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M115.397 127.255L117.954 132.356C117.954 132.356 121.633 137.538 117.315 139.529C112.998 141.52 113.079 128.054 113.079 128.054L115.397 127.255Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M115.397 127.255L117.954 132.356C117.954 132.356 121.633 137.538 117.315 139.529C112.998 141.52 113.079 128.054 113.079 128.054L115.397 127.255Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M104.684 83.0223C104.684 83.0223 107.482 84.2982 109.162 89.6373C110.841 94.9764 113.08 104.065 113.08 104.065C113.08 104.065 114.599 114.345 114.357 116.897C114.203 118.302 114.23 119.721 114.438 121.12L116.596 128.293L112.278 129.807L105.643 104.463L104.684 83.0223Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.05'\n            d='M104.684 83.0223C104.684 83.0223 107.482 84.2982 109.162 89.6373C110.841 94.9764 113.08 104.065 113.08 104.065C113.08 104.065 114.599 114.345 114.357 116.897C114.203 118.302 114.23 119.721 114.438 121.12L116.596 128.293L112.278 129.807L105.643 104.463L104.684 83.0223Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M86.1358 198.988L86.5211 200.006L86.0486 200.906C84.209 201.703 79.6523 201.066 79.6523 201.066C79.6523 201.066 78.8085 199.998 77.6553 198.24C77.8747 197.421 78.0547 196.838 78.0547 196.838L86.1358 198.988Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M112.919 193.408C110.587 198.674 102.66 196.72 100.458 196.061C100.095 195.952 99.8955 195.879 99.8955 195.879C99.8955 195.879 99.9096 195.45 99.9152 194.774C100.174 193.677 100.455 192.772 100.455 192.772C100.455 192.772 109.647 189.662 111.088 191.574C111.52 192.136 112.037 192.628 112.621 193.032C112.709 193.166 112.808 193.292 112.919 193.408Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M112.517 186.715C110.598 190.696 112.919 192.931 112.919 192.931C110.587 198.195 102.661 196.243 100.458 195.581C100.095 195.475 99.8957 195.402 99.8957 195.402C99.8957 195.402 100.056 189.9 99.4963 187.27C98.9365 184.639 99.0153 173.563 99.3359 172.209C99.6566 170.854 99.8141 168.221 99.8141 168.221C99.8141 168.221 99.575 165.114 99.9744 163.6C100.095 163.191 100.103 162.757 99.9978 162.344C99.893 161.931 99.679 161.553 99.3781 161.25L99.3359 161.208C99.3359 161.208 97.5779 167.186 96.9366 168.218C96.2953 169.25 96.059 174.435 95.9775 175.391C95.8959 176.348 92.619 184.32 92.619 184.32C92.619 184.32 91.342 187.985 91.1029 189.02C90.8638 190.054 89.9019 193.007 89.9019 193.007L86.0483 200.421C84.2088 201.218 79.6521 200.581 79.6521 200.581C79.6521 200.581 78.7745 199.459 77.5734 197.631C76.3724 195.803 75.8154 189.345 75.8154 189.345C75.8154 189.345 80.2118 189.264 79.0923 185.04C77.9728 180.817 80.0515 177.548 79.9727 176.112C79.894 174.676 80.9319 169.977 81.4916 169.259C82.0514 168.541 81.9698 165.512 81.8095 163.838C81.6491 162.164 81.7307 156.267 81.7307 156.267C81.7307 156.267 81.891 153.637 82.6899 152.442C83.4887 151.248 83.1709 147.818 83.1709 147.818C83.1709 147.818 84.6869 147.022 83.649 139.291C82.6111 131.56 85.3367 121.518 85.3367 121.518L85.4295 120.116L85.5758 117.844C85.5758 117.844 108.441 116.409 110.28 118.161C110.761 118.648 111.156 119.212 111.448 119.83C112.077 121.178 112.522 122.605 112.77 124.072L113.729 148.222L114.688 165.995L114.367 179.384C114.367 179.384 114.438 182.727 112.517 186.715Z'\n            fill='var(--mention-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M105.739 139.052L103.339 190.856L100.459 195.579C100.096 195.472 99.8964 195.399 99.8964 195.399C99.8964 195.399 100.057 189.897 99.497 187.267C98.9372 184.637 99.016 173.56 99.3366 172.206C99.6573 170.851 99.8148 168.218 99.8148 168.218C99.8148 168.218 99.5757 165.111 99.9751 163.597C100.095 163.188 100.103 162.754 99.9985 162.341C99.8937 161.928 99.6797 161.55 99.3788 161.247L99.4182 160.967L105.739 139.052Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M79.8997 194.684C79.8997 194.684 86.1356 192.214 87.0948 193.001C88.054 193.789 79.7422 194.992 79.7422 194.992L79.8997 194.684Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M110.68 188.147C110.441 188.229 104.365 190.391 104.925 192.69C105.485 194.99 110.68 188.147 110.68 188.147Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M91.6934 70.2325C91.6934 70.2325 93.7298 75.1341 92.6525 77.6467C91.5752 80.1592 104.283 84.4608 104.283 84.4608C104.283 84.4608 100.568 74.8958 104.165 69.5146C107.763 64.1334 91.6934 70.2325 91.6934 70.2325Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M166.103 212.137C163.645 212.675 160.407 215.126 160.407 215.126C160.407 215.126 154.171 216.441 149.913 215.844C145.654 215.247 146.377 210.642 149.674 209.507C151.96 208.722 154.303 206.784 155.527 205.674C156.067 205.177 156.388 204.832 156.388 204.832L168.322 202.44C168.322 202.44 168.516 203.105 168.786 204.022C169.265 205.64 169.971 208.04 170.241 208.954C170.66 210.404 168.561 211.599 166.103 212.137Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M163.046 202.931C163.046 202.931 158.008 203.469 155.91 202.275C153.811 201.08 150.813 202.993 150.813 202.993C150.813 202.993 142.178 202.813 139.3 201.916C136.423 201.019 139.719 196.588 144.397 197.014C146.102 197.168 147.255 196.796 148.034 196.263C148.848 195.707 149.415 194.859 149.617 193.896L159.743 194.493L161.15 198.071L163.046 202.931Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M161.304 199.703C161.304 199.703 149.535 197.785 148.033 196.263C148.847 195.707 149.414 194.859 149.617 193.896L159.743 194.493L161.149 198.071L161.304 199.703Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M143.857 132.577L143.978 150.089C143.978 150.089 144.397 163.241 144.397 165.036C144.397 166.83 144.457 170.832 144.457 170.832C144.457 170.832 145.357 175.733 145.897 177.349C146.437 178.964 146.856 186.322 146.856 186.322C146.856 186.322 148.116 188.355 147.576 189.126C147.036 189.897 149.674 191.577 149.674 191.577C149.674 191.577 147.987 193.91 147.877 195.464C147.767 197.017 161.305 199.224 161.305 199.224L156.031 145.308L151.832 131.801L143.857 132.577Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M143.857 132.577L143.978 150.089C143.978 150.089 144.397 163.241 144.397 165.036C144.397 166.83 144.457 170.832 144.457 170.832C144.457 170.832 145.357 175.733 145.897 177.349C146.437 178.964 146.856 186.322 146.856 186.322C146.856 186.322 148.116 188.355 147.576 189.126C147.036 189.897 149.674 191.577 149.674 191.577C149.674 191.577 147.987 193.91 147.877 195.464C147.767 197.017 161.305 199.224 161.305 199.224L156.031 145.308L151.832 131.801L143.857 132.577Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M168.787 204.036C164.869 213.348 155.55 206.161 155.55 206.161C155.55 206.161 155.55 205.982 155.527 205.674C156.067 205.177 156.388 204.832 156.388 204.832L168.323 202.44C168.323 202.44 168.517 203.119 168.787 204.036Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M168.922 203.231C165.082 213.046 155.55 205.682 155.55 205.682C155.55 205.682 155.249 200.601 155.851 198.271C156.452 195.94 155.19 188.944 155.19 188.944C155.19 188.944 154.469 182.727 153.811 181.294C153.153 179.861 153.212 176.99 153.212 176.751C153.212 176.513 153.451 174.598 152.911 173.283C152.371 171.968 152.067 168.74 152.067 168.74C152.067 168.74 152.067 164.197 151.527 161.508L149.668 152.254L146.31 133.304L147.359 133.124L166.157 129.838C166.157 129.838 169.695 147.784 168.494 149.624C168.235 150.028 168.007 150.911 167.819 152.05C167.133 156.121 166.877 163.432 166.877 163.432C166.877 163.432 169.214 167.077 168.317 169.648C167.419 172.22 169.161 176.463 169.161 176.463C169.161 176.463 169.701 193.201 168.68 194.875C167.659 196.549 168.922 203.231 168.922 203.231Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M136.462 108.249C136.462 108.249 129.267 106.176 128.068 108.209C126.87 110.242 128.428 114.704 130.6 115.422C132.771 116.139 137.756 112.99 137.756 112.99L136.462 108.249Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M136.462 108.249C136.462 108.249 129.267 106.176 128.068 108.209C126.87 110.242 128.428 114.704 130.6 115.422C132.771 116.139 137.756 112.99 137.756 112.99L136.462 108.249Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.56'\n        />\n        <path\n            d='M144.697 104.724L141.699 107.475C141.699 107.475 136.481 107.951 134.982 107.592C134.982 107.592 136.363 116.798 134.383 117.934L146.495 115.483L144.697 104.724Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M144.697 104.724L141.699 107.475C141.699 107.475 136.481 107.951 134.982 107.592C134.982 107.592 136.363 116.798 134.383 117.934L146.495 115.483L144.697 104.724Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M106.202 65.2102C106.202 67.5901 105.254 69.8725 103.566 71.5553C101.878 73.2381 99.5885 74.1835 97.2013 74.1835C92.5827 71.971 88.2004 70.1708 88.2004 65.2102C88.1525 64.0029 88.3497 62.7984 88.7801 61.6689C89.2105 60.5394 89.8652 59.5082 90.7051 58.6371C91.545 57.7661 92.5527 57.073 93.6678 56.5997C94.7828 56.1263 95.9823 55.8823 97.1943 55.8823C98.4062 55.8823 99.6057 56.1263 100.721 56.5997C101.836 57.073 102.844 57.7661 103.683 58.6371C104.523 59.5082 105.178 60.5394 105.608 61.6689C106.039 62.7984 106.236 64.0029 106.188 65.2102H106.202Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M106.201 64.9691C106.203 67.0794 105.457 69.1224 104.095 70.7378C102.732 72.3532 100.842 73.4373 98.7565 73.7988C96.6709 74.1603 94.5244 73.7761 92.6953 72.7138C90.8662 71.6516 89.4721 69.9796 88.7588 67.9927C88.0455 66.0058 88.0589 63.8316 88.7966 61.8535C89.5342 59.8755 90.9488 58.2207 92.7909 57.1809C94.6329 56.1411 96.7841 55.7831 98.865 56.1701C100.946 56.5572 102.823 57.6643 104.165 59.2962C105.479 60.8967 106.199 62.9006 106.201 64.9691Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M104.095 70.7378C105.457 69.1224 106.203 67.0794 106.201 64.9691C106.199 62.9006 105.479 60.8967 104.165 59.2962C102.823 57.6643 100.946 56.5572 98.865 56.1701C96.7841 55.7831 94.6329 56.1411 92.7909 57.1809C90.9488 58.2207 89.5342 59.8755 88.7966 61.8535C88.0589 63.8316 88.0455 66.0058 88.7588 67.9927C89.4424 69.8971 90.7515 71.5122 92.4696 72.5784C92.9 74.1883 93.2408 76.274 92.6522 77.6467C91.5749 80.1592 104.283 84.4608 104.283 84.4608C104.283 84.4608 101.443 77.1501 103.133 71.7158C103.476 71.4163 103.798 71.0897 104.095 70.7378Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            opacity='0.1'\n            d='M111.448 119.838C110.558 120.389 109.626 120.871 108.661 121.279C108.661 121.279 104.104 120.62 103.446 121.397C102.788 122.174 96.9764 122.474 96.9764 122.474C96.9764 122.474 88.1021 122.056 86.7829 120.921C86.375 120.591 85.9211 120.323 85.4355 120.124L85.5818 117.853C85.5818 117.853 108.447 116.417 110.286 118.17C110.765 118.657 111.158 119.221 111.448 119.838Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M112.559 118.231C112.379 119.246 108.66 120.8 108.66 120.8C108.66 120.8 104.103 120.144 103.445 120.921C102.787 121.697 96.9757 121.997 96.9757 121.997C96.9757 121.997 88.1014 121.577 86.7822 120.441C85.463 119.305 82.5236 118.759 82.5236 118.759C82.5236 118.759 81.0244 108.12 81.6264 105.789C82.2283 103.459 80.7263 97.0599 80.3662 94.7885C80.0062 92.5172 81.3845 86.2414 83.0637 85.2263C84.7429 84.2112 87.1422 80.8014 88.5796 79.7863C89.7919 78.931 91.1307 77.8233 91.5217 77.4897L91.6371 77.3943C91.6371 77.3943 91.879 75.5408 92.8381 74.5901C93.7973 73.6395 102.61 80.6275 102.61 80.6275C102.61 80.6275 102.672 81.1659 103.271 80.1508C103.406 79.9237 104.567 81.595 104.77 82.3016C104.77 82.3016 109.566 90.672 109.867 92.3966C110.168 94.1212 111.425 99.7491 111.664 101.123C111.726 101.476 111.827 102.716 111.945 104.376C111.968 104.701 111.988 105.046 112.013 105.405C112.19 108.159 112.381 111.675 112.497 114.334C112.497 114.636 112.522 114.928 112.53 115.208C112.591 116.215 112.601 117.224 112.559 118.231Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.1'\n            d='M82.1104 96.6505C82.1104 96.6505 85.4069 100.655 86.487 100.655C87.5671 100.655 82.1104 96.6505 82.1104 96.6505Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M89.0553 105.259C89.0553 105.259 83.6576 111.117 84.3777 112.194C85.0977 113.271 89.0553 105.259 89.0553 105.259Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M85.0977 116.916C85.0977 116.916 91.2858 110.161 91.5671 107.831L85.0977 116.916Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M92.8916 117.393C92.8916 117.393 100.028 113.627 100.627 110.638C101.226 107.648 92.8916 117.393 92.8916 117.393Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M101.946 81.0509L100.956 83.4401L102.604 84.2169L104.225 88.7316C104.225 88.7316 108.691 97.6376 108.511 102.27C108.331 106.903 109.321 113.865 109.321 113.865L111.898 113.389L110.683 99.7631C110.493 97.6535 109.963 95.5883 109.113 93.6473C107.054 88.9475 103.223 80.2714 102.981 80.2714C102.652 80.2714 102.883 80.392 102.883 80.392L101.946 81.0509Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M102.185 80.8098L101.195 83.2017L102.846 83.9785L104.464 88.4932C104.464 88.4932 108.93 97.3992 108.75 102.032C108.57 106.664 109.561 113.627 109.561 113.627L112.14 113.15L110.922 99.5248C110.735 97.4151 110.206 95.3496 109.355 93.4089C107.296 88.7063 103.465 80.033 103.226 80.033C102.894 80.033 103.125 80.1536 103.125 80.1536L102.185 80.8098Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M131.385 115.94C130.13 115.845 127.121 114.328 125.925 113.697L125.419 113.417L125.481 108.787C125.776 108.614 126.083 108.459 126.398 108.324C127.995 107.629 131.272 106.684 132.915 109.726C135.132 113.806 132.974 116.047 131.385 115.94Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M131.385 115.94C130.13 115.845 127.121 114.328 125.925 113.697L125.419 113.417L125.481 108.787C125.776 108.614 126.083 108.459 126.398 108.324C127.995 107.629 131.272 106.684 132.915 109.726C135.132 113.806 132.974 116.047 131.385 115.94Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            opacity='0.1'\n            d='M104.166 59.2962C104.037 59.3767 103.895 59.4346 103.747 59.4673C102.703 59.6944 101.516 58.7999 100.622 59.3748C100.076 59.7281 99.9495 60.46 99.8763 61.1049C99.7488 62.2266 99.6213 63.3408 99.4938 64.4475C99.467 64.8415 99.3837 65.2296 99.2463 65.6C98.8047 66.6067 97.5923 67.0806 96.4869 67.0638C96.0539 67.0945 95.6262 66.9534 95.2971 66.6712C95.103 66.4749 94.999 66.2001 94.7852 66.0206C93.3788 64.8457 92.9512 67.7256 93.3225 68.5444C93.9188 69.882 96.0369 71.1719 95.148 72.8712C94.9985 73.1474 94.7719 73.3744 94.4955 73.5246C93.156 73.1064 91.9332 72.3817 90.9248 71.4084C89.9164 70.4351 89.1502 69.2402 88.6876 67.9191C88.2249 66.598 88.0786 65.1873 88.2603 63.7998C88.442 62.4123 88.9467 61.0863 89.734 59.9279C90.5213 58.7695 91.5695 57.8107 92.7947 57.1281C94.02 56.4455 95.3884 56.058 96.7907 55.9967C98.1929 55.9353 99.5901 56.2017 100.871 56.7746C102.151 57.3475 103.28 58.2111 104.166 59.2962Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M94.5456 66.0094C94.7566 66.1861 94.8634 66.4609 95.0575 66.6572C95.3868 66.9391 95.8143 67.0802 96.2473 67.0498C97.3528 67.0666 98.5651 66.5955 99.0039 65.5832C99.1438 65.2144 99.2281 64.8269 99.2542 64.4335L99.6367 61.0909C99.7099 60.446 99.8336 59.7141 100.382 59.3607C101.277 58.7999 102.464 59.6804 103.507 59.4533C103.883 59.358 104.209 59.1235 104.418 58.7974C104.627 58.4714 104.704 58.0782 104.632 57.6979C104.511 57.1623 104.101 56.7388 103.89 56.2285C103.762 55.8363 103.659 55.4364 103.583 55.0311C103.001 52.8551 100.438 51.6325 98.2106 51.997C96.973 52.2017 95.8226 52.7906 94.5822 52.97C93.6933 53.099 92.7848 53.0149 91.8875 53.1103C91.0539 53.196 90.2433 53.4346 89.4967 53.8141C89.3006 53.9006 89.1274 54.0311 88.9904 54.1955C88.8629 54.4174 88.7772 54.6607 88.7372 54.9133C88.4362 56.035 87.4686 56.8622 86.7683 57.8072C85.9672 58.8945 85.5036 60.1922 85.435 61.5396C85.4074 61.8837 85.4398 62.23 85.5306 62.5631C85.5897 62.7594 85.6825 62.9501 85.7275 63.152C85.8653 63.7661 85.5503 64.3802 85.3956 64.9915C85.2034 65.7716 85.2725 66.593 85.5925 67.3302C86.6726 69.8063 90.2308 70.6335 90.9706 73.2329C91.6275 73.5469 92.337 73.7371 93.0633 73.7938C93.789 73.8078 94.5709 73.4965 94.9084 72.8544C95.7945 71.1719 93.6793 69.8651 93.083 68.5304C92.7089 67.7087 93.128 64.8317 94.5456 66.0094Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M166.823 72.823C167.851 71.2893 168.4 69.4861 168.4 67.6414C168.4 66.4165 168.159 65.2036 167.689 64.0718C167.219 62.9401 166.53 61.9118 165.661 61.0457C164.792 60.1795 163.761 59.4925 162.625 59.024C161.49 58.5554 160.273 58.3144 159.045 58.3148C157.194 58.3148 155.386 58.8618 153.847 59.8866C152.309 60.9114 151.11 62.368 150.402 64.0723C149.693 65.7765 149.508 67.6518 149.869 69.461C150.23 71.2702 151.121 72.932 152.43 74.2364C153.089 74.8938 153.84 75.4456 154.654 75.8772C154.707 76.0617 154.757 76.2468 154.806 76.4325C155.616 79.5283 155.996 83.628 153.928 86.8471C150.092 92.8256 167.12 80.8715 167.12 80.8715C165.92 79.219 165.221 77.2579 165.106 75.2211C165.097 75.0672 165.092 74.9132 165.09 74.7594C165.752 74.2006 166.336 73.5498 166.823 72.823Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M166.823 72.823C167.851 71.2893 168.4 69.4861 168.4 67.6414C168.4 66.4165 168.159 65.2036 167.689 64.0718C167.219 62.9401 166.53 61.9118 165.661 61.0457C164.792 60.1795 163.761 59.4925 162.625 59.024C161.49 58.5554 160.273 58.3144 159.045 58.3148C157.194 58.3148 155.386 58.8618 153.847 59.8866C152.309 60.9114 151.11 62.368 150.402 64.0723C149.693 65.7765 149.508 67.6518 149.869 69.461C150.23 71.2702 151.121 72.932 152.43 74.2364C153.089 74.8938 153.84 75.4456 154.654 75.8772C154.707 76.0617 154.757 76.2468 154.806 76.4325C155.616 79.5283 155.996 83.628 153.928 86.8471C150.092 92.8256 167.12 80.8715 167.12 80.8715C165.92 79.219 165.221 77.2579 165.106 75.2211C165.097 75.0672 165.092 74.9132 165.09 74.7594C165.752 74.2006 166.336 73.5498 166.823 72.823Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.56'\n        />\n        <path\n            d='M168.001 82.9438C168.001 82.9438 166.24 84.8562 166.001 85.0132C165.762 85.1703 160.656 106.605 160.566 106.855C160.476 107.104 154.488 126.459 154.488 126.459L144.894 131.161L145.695 107.489L152.727 87.966C152.727 87.966 155.048 85.3357 155.765 84.3795C156.482 83.4233 165.438 77.6832 165.438 77.6832L166.968 80.8266L168.001 82.9438Z'\n            fill='var(--button-bg)'\n            fillOpacity='0.08'\n        />\n        <path\n            opacity='0.1'\n            d='M166.732 81.3061L155.701 89.1802L155.523 84.8562C156.244 83.9 165.197 78.1627 165.197 78.1627L166.732 81.3061Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M166.971 80.8266L155.939 88.7007L155.768 84.3795C156.488 83.4205 165.441 77.6832 165.441 77.6832L166.971 80.8266Z'\n            fill='var(--button-bg)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M155.4 82.4558L155.769 84.3795L153.302 86.878L155.271 82.4839C155.271 82.4839 151.052 85.4142 149.786 86.191C148.52 86.9677 147.254 89.598 147.206 90.3159C147.159 91.0338 145.167 101.852 145.167 101.852C145.167 101.852 143.668 105.857 144.09 106.992C144.512 108.128 141.812 143.934 141.812 143.934C142.172 143.239 142.683 142.631 143.306 142.155C143.929 141.678 144.65 141.345 145.418 141.178L144.456 120.018C144.456 120.018 145.626 105.941 145.685 105.761C145.744 105.582 148.413 97.4216 148.413 97.4216L155.4 82.4558Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M156.011 84.6178L155.82 88.5437C155.82 88.5437 153.151 96.9421 152.253 98.3162C151.356 99.6902 148.625 107.881 148.625 107.881L147.086 122.109L144.448 123.307L143.148 120.921L145.309 107.18C145.309 107.18 149.384 95.5849 149.986 94.3875L152.993 88.0726L156.011 84.6178Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M155.77 84.3795L155.581 88.3053C155.581 88.3053 152.912 96.7038 152.012 98.0778C151.112 99.4519 148.386 107.643 148.386 107.643L146.856 121.868L144.218 123.063L142.898 120.674L145.059 106.933C145.059 106.933 149.134 95.3354 149.733 94.1408L152.763 87.8342L155.77 84.3795Z'\n            fill='var(--mention-color)'\n        />\n        <path\n            d='M124.67 114.345L129.826 117.903C129.826 117.903 133.463 115.87 131.345 114.555C129.227 113.24 127.348 113.041 126.667 113.041C125.986 113.041 124.67 114.345 124.67 114.345Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M124.671 114.345L129.827 117.903C129.827 117.903 133.464 115.87 131.346 114.555C129.228 113.24 127.349 113.041 126.668 113.041C125.987 113.041 124.671 114.345 124.671 114.345Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.56'\n        />\n        <path\n            d='M128.522 107.766C128.406 107.838 128.312 107.937 128.246 108.056C128.181 108.174 128.147 108.307 128.147 108.442C128.147 109.533 128.271 112.421 129.188 111.117C130.313 109.522 130.108 108.089 131.827 109.123C132.895 109.787 133.83 110.642 134.583 111.647L134.105 108.22C134.105 108.22 130.572 106.482 128.522 107.766Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M128.522 107.766C128.406 107.838 128.312 107.937 128.246 108.056C128.181 108.174 128.147 108.307 128.147 108.442C128.147 109.533 128.271 112.421 129.188 111.117C130.313 109.522 130.108 108.089 131.827 109.123C132.895 109.787 133.83 110.642 134.583 111.647L134.105 108.22C134.105 108.22 130.572 106.482 128.522 107.766Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.56'\n        />\n        <path\n            opacity='0.1'\n            d='M168.499 149.613C168.24 150.017 168.012 150.9 167.824 152.038C157.309 155.182 149.616 148.536 149.616 148.536C148.686 145.392 147.925 142.2 147.338 138.974C147.15 137.869 147.192 135.726 147.366 133.113L166.164 129.827C166.164 129.827 169.7 147.759 168.499 149.613Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M179.292 96.1121C178.813 97.6684 178.993 100.834 178.993 100.834L174.676 121.159C174.676 121.159 172.577 136.82 172.217 138.912C171.857 141.004 171.258 150.21 171.258 150.21C159.025 156.188 149.6 148.059 149.6 148.059C148.669 144.914 147.909 141.721 147.322 138.494C146.72 134.944 148.492 120.721 149.33 114.404C149.58 112.533 149.749 111.356 149.749 111.356L152.896 99.6986C152.896 99.6986 156.764 89.8644 158.204 86.9958C159.644 84.1271 165.427 77.6831 165.427 77.6831C166.145 77.2289 167.292 78.8328 168.145 80.2938C168.789 81.3987 169.27 82.425 169.27 82.425C169.27 82.425 176.465 85.532 177.542 87.1921C178.619 88.8521 178.442 92.2732 178.563 92.4527C178.684 92.6321 179.773 94.5586 179.292 96.1121Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M162.325 88.8802C162.325 88.8802 162.865 92.0489 161.481 93.0051C160.145 93.9305 150.199 113.428 149.58 114.645C149.83 112.772 149.999 111.594 149.999 111.594L153.147 99.9398C153.147 99.9398 157.017 90.1056 158.454 87.2341C159.892 84.3627 165.68 77.9215 165.68 77.9215C166.398 77.4672 167.543 79.0712 168.395 80.5322C167.109 83.1933 164.429 88.224 162.325 88.8802Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M162.086 88.6418C162.086 88.6418 162.624 91.8105 161.242 92.7667C159.861 93.7229 149.963 113.187 149.336 114.404C149.586 112.533 149.755 111.356 149.755 111.356L152.903 99.6986C152.903 99.6986 156.77 89.8644 158.21 86.9958C159.65 84.1271 165.433 77.6831 165.433 77.6831C166.151 77.2289 167.298 78.8328 168.151 80.2938C166.871 82.9522 164.187 87.9856 162.086 88.6418Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M176.355 117.275L172.971 134.826V134.829L172.647 136.509V136.512L171.919 140.289L168.811 139.633L167.362 139.327L147.316 135.093L145.842 134.781L142.478 134.072L143.136 129.714L143.409 127.903L145.836 111.835L176.355 117.275Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M157.648 131.621C157.648 131.621 149.674 134.49 151.412 137.897C153.15 141.304 164.303 135.267 164.303 135.267L157.648 131.621Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M157.646 131.621C157.646 131.621 149.672 134.49 151.41 137.897C153.148 141.304 164.301 135.267 164.301 135.267L157.646 131.621Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.56'\n        />\n        <path\n            opacity='0.1'\n            d='M163.344 156.068C163.344 156.306 163.645 159.357 164.842 160.431C166.04 161.505 163.344 156.068 163.344 156.068Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M155.311 166.886C155.311 166.886 156.748 170.832 162.444 172.447C168.14 174.062 155.311 166.886 155.311 166.886Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M168.401 67.6414C168.401 69.281 167.968 70.8917 167.144 72.3111C166.321 73.7304 165.137 74.9083 163.712 75.7258C163.174 75.4261 162.697 75.0296 162.305 74.5565C161.897 74.063 161.58 73.39 161.824 72.8011C162.021 72.3272 162.542 72.0271 162.668 71.5364C162.728 71.2363 162.712 70.9262 162.623 70.6335C162.519 70.1708 162.421 69.7081 162.319 69.2482C162.232 68.8556 162.077 68.393 161.686 68.2976C161.295 68.2023 160.969 68.5276 160.663 68.7687C159.912 69.3604 158.471 69.7614 157.569 69.2763C156.666 68.7911 156.919 67.1675 156.772 66.2898C156.771 66.2136 156.752 66.1387 156.718 66.0703C156.684 66.002 156.635 65.942 156.576 65.8944C156.444 65.851 156.304 65.8413 156.168 65.8664C155.681 65.8664 155.29 65.4318 155.15 64.9663C155.05 64.491 154.995 64.0075 154.986 63.5221C154.933 63.037 154.756 62.5238 154.339 62.2743C154.007 62.1199 153.638 62.0598 153.273 62.1004L151.51 62.12C152.68 60.5431 154.319 59.3741 156.193 58.7791C158.068 58.1841 160.083 58.1935 161.952 58.8059C163.821 59.4184 165.449 60.6026 166.604 62.1904C167.759 63.7781 168.383 65.6885 168.386 67.6499L168.401 67.6414Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M160.914 68.7687C161.22 68.5275 161.558 68.2079 161.938 68.3004C162.317 68.3929 162.481 68.8612 162.568 69.2482L162.872 70.6307C162.962 70.9242 162.978 71.2351 162.919 71.5364C162.776 72.0299 162.258 72.3272 162.059 72.8011C161.814 73.39 162.135 74.063 162.54 74.5537C163.278 75.4413 164.3 76.05 165.434 76.2782C165.73 76.3492 166.038 76.3559 166.337 76.2979C167.006 76.1436 167.462 75.5295 167.822 74.9547C169.681 72.0664 171.282 68.9005 171.608 65.485C171.698 64.7884 171.665 64.0815 171.512 63.3959C171.36 62.863 171.145 62.35 170.871 61.8677C170.392 60.8822 169.784 59.9647 169.063 59.1392C167.783 57.7652 166.016 56.9211 164.202 56.422C162.161 55.8575 160.031 55.6909 157.927 55.9312C157.364 55.9957 156.824 56.0883 156.27 56.1247C155.574 56.157 154.877 56.1457 154.183 56.0911L150.043 55.8443C149.806 56.3238 150.043 56.8931 150.324 57.3417C150.605 57.7904 150.954 58.2559 150.931 58.7887C150.909 59.3215 150.529 59.7421 150.237 60.1908C149.944 60.6394 149.722 61.2199 150.014 61.6573C150.307 62.0948 150.903 62.1228 151.421 62.1172L153.508 62.0948C153.871 62.0575 154.238 62.1206 154.568 62.2771C154.985 62.5266 155.162 63.0426 155.215 63.5249C155.227 64.0101 155.281 64.4934 155.378 64.9691C155.522 65.4346 155.91 65.8748 156.397 65.8692C156.533 65.8421 156.674 65.8528 156.804 65.9C156.864 65.947 156.913 66.0066 156.947 66.0744C156.981 66.1423 156.999 66.2168 157.001 66.2926C157.148 67.1703 156.878 68.7911 157.797 69.2791C158.717 69.767 160.163 69.3604 160.914 68.7687Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M172.804 87.1893C171.769 87.0798 170.729 87.324 169.852 87.882C168.975 88.44 168.315 89.2785 167.98 90.2598C166.855 93.4538 164.978 99.2163 165.448 101.493C166.109 104.721 166.888 110.102 166.888 110.102C166.888 110.102 170.306 112.065 168.576 114.045C166.846 116.024 166.357 118.829 166.357 118.829C166.357 118.829 164.137 119.785 163.659 121.818C163.181 123.851 159.941 126.658 159.941 126.658L155.086 131.501C155.086 131.501 163.119 139.633 164.739 140.048L169.715 134.249L175.591 126.478L180.688 121.15C180.688 121.15 181.886 118.346 181.287 113.018C180.688 107.691 178.348 102.618 178.348 102.618L178.528 100.823C178.528 100.823 179.079 87.966 172.804 87.1893Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M173.281 87.1892C172.248 87.0811 171.208 87.326 170.333 87.8839C169.458 88.4417 168.798 89.2795 168.463 90.2598C167.338 93.4537 165.462 99.2163 165.931 101.493C166.59 104.721 167.369 110.102 167.369 110.102C167.369 110.102 170.786 112.065 169.056 114.045C167.327 116.024 166.84 118.829 166.84 118.829C166.84 118.829 164.621 119.785 164.14 121.818C163.659 123.851 160.424 126.658 160.424 126.658L155.566 131.501C155.566 131.501 163.6 139.633 165.22 140.048L170.196 134.249L176.057 126.478L181.154 121.15C181.154 121.15 182.355 118.346 181.753 113.018C181.151 107.69 178.817 102.618 178.817 102.618L178.997 100.823C178.997 100.823 179.557 87.966 173.281 87.1892Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M168.26 105.38C168.26 105.38 173.357 111.594 175.517 110.22C177.677 108.846 168.26 105.38 168.26 105.38Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M170.18 100.596C170.72 100.775 175.158 106.933 177.437 106.204C179.715 105.475 170.18 100.596 170.18 100.596Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M171.439 111.173C171.439 111.173 171.74 114.701 175.397 114.221C179.054 113.742 171.439 111.173 171.439 111.173Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M155.279 82.7222L153.303 87.1163L155.771 84.6178L155.279 82.7222Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M155.279 82.4839L153.303 86.878L155.771 84.3795L155.279 82.4839Z'\n            fill='var(--button-bg)'\n            fillOpacity='0.08'\n        />\n        <path\n            opacity='0.3'\n            d='M147.316 135.093L145.842 134.781L143.136 129.714L143.409 127.903L147.316 135.093Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.3'\n            d='M172.972 134.829L172.649 136.509V136.512L168.812 139.633L167.363 139.327L172.972 134.829Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M112.522 115.22C111.779 115.343 111.059 115.455 110.401 115.539C106.744 116.019 98.0472 111.714 98.0472 111.714C98.0472 111.714 87.4346 102.867 84.3771 94.4997C81.3196 86.1321 88.0337 84.8758 88.0337 84.8758C90.5652 83.4401 96.0698 87.4444 96.849 88.1034C97.6281 88.7624 98.2891 90.4337 98.2272 91.5105C98.1654 92.5873 100.027 93.9613 100.027 93.9613C100.027 93.9613 103.206 99.4603 103.985 100.058C104.764 100.655 104.944 101.193 105.183 102.211C105.422 103.229 107.521 104.065 108.421 104.003C109.321 103.941 110.39 104.303 110.39 104.78C110.39 105.164 111.27 105.355 111.993 105.416C112.207 108.481 112.418 112.497 112.522 115.22Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M112.489 114.345C111.926 114.434 111.386 114.516 110.88 114.583C107.223 115.063 98.5287 110.758 98.5287 110.758C98.5287 110.758 87.916 101.911 84.8585 93.5435C81.801 85.1759 88.5152 83.9196 88.5152 83.9196C91.0467 82.4839 96.5485 86.4882 97.3276 87.1472C98.1068 87.8062 98.7678 89.4774 98.7087 90.5542C98.6496 91.631 100.506 93.0051 100.506 93.0051C100.506 93.0051 103.685 98.504 104.464 99.1013C105.243 99.6986 105.423 100.237 105.665 101.255C105.907 102.273 108.002 103.106 108.902 103.047C109.802 102.988 110.871 103.347 110.871 103.824C110.871 104.104 111.372 104.292 111.929 104.384C111.951 104.71 111.971 105.055 111.996 105.413C112.182 108.17 112.373 111.686 112.489 114.345Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M126.397 108.324L126.17 113.697H125.925L125.419 113.417L125.481 108.787C125.776 108.614 126.082 108.459 126.397 108.324Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M88.0337 84.3963C88.0337 84.3963 81.3196 85.6526 84.3771 94.0202C87.4346 102.388 98.0472 111.238 98.0472 111.238C98.0472 111.238 106.742 115.539 110.401 115.063C114.06 114.586 119.633 113.33 120.353 113.509C121.073 113.689 125.93 113.689 125.93 113.689L126.169 108.08L120.544 107.78L117.666 107.183C117.666 107.183 116.645 106.342 116.046 106.465C115.447 106.588 114.19 105.747 114.19 105.747C114.19 105.747 113.228 104.97 112.502 104.97C111.776 104.97 110.404 104.791 110.404 104.314C110.404 103.838 109.324 103.473 108.435 103.538C107.546 103.602 105.422 102.761 105.175 101.732C104.927 100.703 104.756 100.178 103.977 99.5808C103.197 98.9836 100.019 93.4818 100.019 93.4818C100.019 93.4818 98.1597 92.1078 98.2188 91.0338C98.2779 89.9598 97.6197 88.2829 96.8405 87.6239C96.0614 86.9649 90.5483 82.9634 88.0337 84.3963Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.1'\n            d='M105.304 103.644C105.304 103.644 102.726 106.215 103.384 106.692L105.304 103.644Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M108.06 105.677C108.06 105.677 104.703 108.249 105.602 108.428C106.502 108.607 108.06 105.677 108.06 105.677Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M102.362 109.491C102.843 109.732 109.976 113.977 112.677 113.916L102.362 109.491Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.1'\n            d='M102.846 81.1098C102.846 81.1098 101.586 85.2348 101.105 85.2348C100.728 85.2348 94.399 80.1256 91.7578 77.9776L91.8731 77.8822C91.8731 77.8822 92.1122 76.0287 93.0714 75.0781C94.0305 74.1275 102.846 81.1098 102.846 81.1098Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M102.605 80.6303C102.605 80.6303 101.347 84.7552 100.866 84.7552C100.487 84.7552 94.1578 79.6461 91.5166 77.4981L91.6319 77.4027C91.6319 77.4027 91.8738 75.5492 92.833 74.5986C93.7921 73.648 102.605 80.6303 102.605 80.6303Z'\n            fill='var(--center-channel-bg)'\n        />\n        <g opacity='0.15'>\n            <path\n                opacity='0.15'\n                d='M85.624 67.2993C86.4679 69.2202 88.7912 70.1512 90.1385 71.6823C89.3369 69.8007 86.9938 68.8781 85.624 67.2993Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.15'\n                d='M94.2233 71.7243C93.8886 72.3664 93.0982 72.6777 92.3782 72.6637C91.738 72.6179 91.1112 72.4583 90.5273 72.1926C90.7391 72.5039 90.9005 72.8464 91.0055 73.2077C91.6622 73.5223 92.3718 73.7125 93.0982 73.7685C93.8267 73.7853 94.6087 73.4741 94.9434 72.8291C95.4807 71.8056 94.9209 70.9307 94.2655 70.1035C94.3877 70.3577 94.4476 70.6372 94.4402 70.919C94.4329 71.2007 94.3586 71.4768 94.2233 71.7243Z'\n                fill='var(--center-channel-color)'\n            />\n            <path\n                opacity='0.15'\n                d='M104.661 57.6698C104.54 57.1314 104.129 56.708 103.918 56.2005C103.789 55.8077 103.686 55.4068 103.611 55.0003C103.452 54.4255 103.155 53.8975 102.748 53.4608C102.805 53.5988 102.852 53.7402 102.891 53.8842C102.97 54.2925 103.075 54.6953 103.206 55.09C103.417 55.5976 103.828 56.021 103.949 56.5594C104.02 56.9397 103.944 57.3329 103.735 57.6589C103.526 57.985 103.2 58.2195 102.824 58.3148C101.783 58.5419 100.596 57.6446 99.7017 58.2223C99.1532 58.5728 99.0266 59.3047 98.9535 59.9496C98.8279 61.0713 98.7003 62.1864 98.571 63.295C98.5456 63.6883 98.4622 64.0757 98.3234 64.4447C97.8818 65.4542 96.6695 65.9281 95.5641 65.9113C95.1322 65.94 94.7061 65.7991 94.3771 65.5187C94.2172 65.2929 94.0454 65.0757 93.8624 64.8681C92.456 63.6904 92.0284 66.5702 92.3997 67.3919C92.5856 67.7615 92.8161 68.1071 93.086 68.421C92.7766 67.4956 93.2098 64.8317 94.5824 65.973C94.7654 66.1799 94.9363 66.3971 95.0944 66.6235C95.4247 66.9036 95.8515 67.0444 96.2842 67.0161C97.3896 67.0329 98.6019 66.559 99.0435 65.5495C99.1825 65.1796 99.2659 64.7913 99.291 64.397C99.4185 63.2754 99.5461 62.1612 99.6736 61.0545C99.7467 60.4095 99.8733 59.6776 100.419 59.3271C101.316 58.7494 102.503 59.6468 103.544 59.4168C103.917 59.3204 104.24 59.0865 104.447 58.7624C104.654 58.4382 104.731 58.0478 104.661 57.6698Z'\n                fill='var(--center-channel-color)'\n            />\n        </g>\n        <path\n            opacity='0.1'\n            d='M166.936 75.5828C166.636 75.6384 166.329 75.6308 166.033 75.5604C164.9 75.3323 163.88 74.7247 163.141 73.8386C162.733 73.3451 162.413 72.6721 162.66 72.0832C162.857 71.6093 163.375 71.3121 163.504 70.8185C163.563 70.5173 163.546 70.2063 163.456 69.9128L163.152 68.5304C163.065 68.1378 162.913 67.6751 162.522 67.5825C162.131 67.49 161.805 67.8097 161.499 68.0508C160.748 68.6425 159.305 69.0463 158.405 68.5584C157.504 68.0705 157.755 66.4497 157.609 65.572C157.606 65.4962 157.587 65.4219 157.553 65.3541C157.519 65.2864 157.471 65.2267 157.412 65.1794C157.28 65.1336 157.138 65.123 157.001 65.1485C156.514 65.1485 156.126 64.7139 155.983 64.2484C155.885 63.7729 155.832 63.2895 155.822 62.8043C155.766 62.3219 155.592 61.806 155.173 61.5564C154.842 61.4013 154.476 61.3383 154.112 61.3741L152.025 61.3966C151.51 61.3966 150.9 61.3629 150.619 60.9367C150.337 60.5104 150.546 59.9047 150.841 59.4701C151.136 59.0355 151.51 58.6036 151.536 58.068C151.561 57.5324 151.212 57.0697 150.928 56.6211C150.765 56.3757 150.645 56.1045 150.574 55.8191L149.975 55.7826C149.741 56.2593 149.975 56.8286 150.256 57.28C150.537 57.7315 150.889 58.1942 150.863 58.7242C150.838 59.2542 150.464 59.6804 150.169 60.1263C149.873 60.5721 149.657 61.1554 149.949 61.5929C150.242 62.0303 150.835 62.0611 151.356 62.0555L153.443 62.0303C153.807 61.9952 154.173 62.0592 154.503 62.2154C154.922 62.4649 155.1 62.9809 155.153 63.4632C155.162 63.9486 155.216 64.4322 155.316 64.9074C155.457 65.3701 155.848 65.8131 156.334 65.8047C156.471 65.7807 156.611 65.7913 156.742 65.8356C156.802 65.8834 156.85 65.9435 156.884 66.0117C156.918 66.08 156.937 66.1548 156.939 66.2309C157.085 67.1058 156.815 68.7294 157.735 69.2174C158.655 69.7053 160.089 69.3015 160.829 68.7098C161.136 68.4687 161.476 68.149 161.856 68.2387C162.236 68.3285 162.399 68.7995 162.483 69.1865L162.79 70.5718C162.879 70.8655 162.894 71.1765 162.835 71.4775C162.694 71.9683 162.174 72.2683 161.977 72.7394C161.732 73.3283 162.05 74.0041 162.458 74.4948C163.201 75.3847 164.229 75.9926 165.369 76.2166C165.665 76.287 165.973 76.2946 166.272 76.239C166.755 76.0921 167.17 75.7778 167.442 75.3529C167.288 75.4591 167.117 75.537 166.936 75.5828Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default GuestAccessSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport GuestAccessSVG from './images/guest_access_svg';\n\nconst GuestAccessFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='guest_access'\n            titleID='admin.guest_access_feature_discovery.title'\n            titleDefault='Enable guest accounts with MatterFOSS'\n            copyID='admin.guest_access_feature_discovery.copy'\n            copyDefault={'Collaborate with users outside of your organization while tightly controlling their access channels and team members.'}\n            learnMoreURL='https://docs.mattermost.com/deployment/guest-accounts.html'\n            featureDiscoveryImage={<GuestAccessSVG/>}\n        />\n    );\n};\n\nt('admin.guest_access_feature_discovery.title');\nt('admin.guest_access_feature_discovery.copy');\n\nexport default GuestAccessFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst SystemRolesSVG = () => (\n    <svg\n        width='208'\n        height='222'\n        viewBox='0 0 208 222'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M204.994 134.912H105.197C104.4 134.911 103.636 134.593 103.073 134.028C102.509 133.463 102.192 132.697 102.191 131.898V98.1453C102.192 97.3463 102.509 96.5803 103.073 96.0153C103.636 95.4503 104.4 95.1325 105.197 95.1316H204.994C205.791 95.1325 206.555 95.4503 207.118 96.0153C207.682 96.5803 207.999 97.3463 208 98.1453V131.898C207.999 132.697 207.682 133.463 207.118 134.028C206.555 134.593 205.791 134.911 204.994 134.912Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M144.274 104.173H117.822V107.186H144.274V104.173Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M179.142 107.789C180.139 107.789 180.946 106.979 180.946 105.981C180.946 104.982 180.139 104.173 179.142 104.173C178.146 104.173 177.339 104.982 177.339 105.981C177.339 106.979 178.146 107.789 179.142 107.789Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M185.154 107.789C186.15 107.789 186.958 106.979 186.958 105.981C186.958 104.982 186.15 104.173 185.154 104.173C184.158 104.173 183.351 104.982 183.351 105.981C183.351 106.979 184.158 107.789 185.154 107.789Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M191.166 107.789C192.162 107.789 192.969 106.979 192.969 105.981C192.969 104.982 192.162 104.173 191.166 104.173C190.17 104.173 189.362 104.982 189.362 105.981C189.362 106.979 190.17 107.789 191.166 107.789Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M204.994 177.706H105.197C104.4 177.705 103.636 177.387 103.073 176.822C102.509 176.257 102.192 175.491 102.191 174.692V140.939C102.192 140.14 102.509 139.374 103.073 138.809C103.636 138.244 104.4 137.926 105.197 137.926H204.994C205.791 137.926 206.555 138.244 207.118 138.809C207.682 139.374 207.999 140.14 208 140.939V174.692C207.999 175.491 207.682 176.257 207.118 176.822C206.555 177.387 205.791 177.705 204.994 177.706Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M144.274 146.967H117.822V149.98H144.274V146.967Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M179.142 150.583C180.139 150.583 180.946 149.773 180.946 148.775C180.946 147.776 180.139 146.967 179.142 146.967C178.146 146.967 177.339 147.776 177.339 148.775C177.339 149.773 178.146 150.583 179.142 150.583Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M185.154 150.583C186.15 150.583 186.958 149.773 186.958 148.775C186.958 147.776 186.15 146.967 185.154 146.967C184.158 146.967 183.351 147.776 183.351 148.775C183.351 149.773 184.158 150.583 185.154 150.583Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M191.166 150.583C192.162 150.583 192.969 149.773 192.969 148.775C192.969 147.776 192.162 146.967 191.166 146.967C190.17 146.967 189.362 147.776 189.362 148.775C189.362 149.773 190.17 150.583 191.166 150.583Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M204.994 220.5H105.197C104.4 220.499 103.636 220.181 103.073 219.616C102.509 219.051 102.192 218.285 102.191 217.486V183.733C102.192 182.934 102.509 182.168 103.073 181.603C103.636 181.038 104.4 180.721 105.197 180.72H204.994C205.791 180.721 206.555 181.038 207.118 181.603C207.682 182.168 207.999 182.934 208 183.733V217.486C207.999 218.285 207.682 219.051 207.118 219.616C206.555 220.181 205.791 220.499 204.994 220.5Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.08'\n        />\n        <path\n            d='M144.274 189.761H117.822V192.774H144.274V189.761Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M179.142 193.377C180.139 193.377 180.946 192.567 180.946 191.569C180.946 190.57 180.139 189.761 179.142 189.761C178.146 189.761 177.339 190.57 177.339 191.569C177.339 192.567 178.146 193.377 179.142 193.377Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M185.154 193.377C186.15 193.377 186.958 192.567 186.958 191.569C186.958 190.57 186.15 189.761 185.154 189.761C184.158 189.761 183.351 190.57 183.351 191.569C183.351 192.567 184.158 193.377 185.154 193.377Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M191.166 193.377C192.162 193.377 192.969 192.567 192.969 191.569C192.969 190.57 192.162 189.761 191.166 189.761C190.17 189.761 189.362 190.57 189.362 191.569C189.362 192.567 190.17 193.377 191.166 193.377Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M167.372 62.172L167.261 62.0903L167.259 62.0883C167.116 61.9823 166.955 61.9054 166.783 61.8621C166.611 61.8188 166.432 61.8099 166.256 61.8359C166.081 61.8618 165.912 61.9222 165.76 62.0135C165.608 62.1048 165.475 62.2252 165.37 62.368L142.907 92.6901H140.436V92.108C140.435 91.9644 140.379 91.8267 140.277 91.7251C140.176 91.6236 140.039 91.5665 139.895 91.5665H138.421C138.278 91.5665 138.14 91.6236 138.039 91.7251C137.938 91.8267 137.881 91.9644 137.881 92.108V92.6901H137.027V92.108C137.027 91.9644 136.971 91.8267 136.869 91.7251C136.768 91.6236 136.631 91.5665 136.487 91.5665H135.013C134.87 91.5665 134.732 91.6236 134.631 91.7251C134.53 91.8267 134.473 91.9644 134.473 92.108V92.6901H133.622V92.108C133.622 91.9644 133.565 91.8267 133.464 91.7251C133.363 91.6236 133.225 91.5665 133.082 91.5665H131.608C131.464 91.5665 131.327 91.6236 131.226 91.7251C131.124 91.8267 131.068 91.9644 131.068 92.108V92.6901H130.214V92.108C130.214 91.9644 130.157 91.8267 130.056 91.7251C129.955 91.6236 129.817 91.5665 129.674 91.5665H128.2C128.056 91.5665 127.919 91.6236 127.818 91.7251C127.716 91.8267 127.659 91.9644 127.659 92.108V92.6901H126.809V92.108C126.809 91.9644 126.752 91.8267 126.651 91.7251C126.549 91.6236 126.412 91.5665 126.269 91.5665H124.794C124.723 91.5665 124.653 91.5805 124.588 91.6077C124.522 91.6349 124.462 91.6748 124.412 91.7251C124.362 91.7754 124.322 91.8351 124.295 91.9008C124.268 91.9665 124.254 92.0369 124.254 92.108V92.6901H123.401V92.108C123.401 91.9644 123.344 91.8267 123.243 91.7251C123.141 91.6236 123.004 91.5665 122.861 91.5665H121.386C121.243 91.5665 121.106 91.6236 121.004 91.7251C120.903 91.8267 120.846 91.9644 120.846 92.108V92.6901H119.993V92.108C119.993 91.9644 119.936 91.8267 119.835 91.7251C119.733 91.6236 119.596 91.5665 119.453 91.5665H117.978C117.835 91.5665 117.698 91.6236 117.596 91.7251C117.495 91.8267 117.438 91.9644 117.438 92.108V92.6901H116.587V92.108C116.587 91.9644 116.531 91.8267 116.429 91.7251C116.328 91.6236 116.191 91.5665 116.047 91.5665H114.573C114.43 91.5665 114.292 91.6236 114.191 91.7251C114.09 91.8267 114.033 91.9644 114.033 92.108V92.6901H113.179V92.108C113.179 91.9644 113.122 91.8267 113.021 91.7251C112.92 91.6236 112.783 91.5665 112.639 91.5665H111.165C111.022 91.5665 110.884 91.6236 110.783 91.7251C110.682 91.8267 110.625 91.9644 110.625 92.108V92.6901H109.774V92.108C109.774 91.9644 109.717 91.8267 109.616 91.7251C109.515 91.6236 109.377 91.5665 109.234 91.5665H107.76C107.616 91.5665 107.479 91.6236 107.378 91.7251C107.276 91.8267 107.219 91.9644 107.219 92.108V92.6901H106.15C105.973 92.6901 105.797 92.7251 105.633 92.7931C105.47 92.8612 105.321 92.9609 105.195 93.0866C105.07 93.2123 104.97 93.3615 104.903 93.5258C104.835 93.69 104.8 93.8661 104.8 94.0438V95.3353C104.8 95.5131 104.835 95.6891 104.903 95.8533C104.97 96.0176 105.07 96.1668 105.195 96.2925C105.321 96.4182 105.47 96.5179 105.633 96.586C105.797 96.654 105.973 96.689 106.15 96.689H142.683C143.145 96.689 143.594 96.529 143.953 96.2362C144.312 95.9433 144.559 95.5355 144.653 95.0813L144.667 95.0917L167.649 64.0686L167.651 64.066C167.864 63.7777 167.955 63.4162 167.902 63.0611C167.85 62.7059 167.659 62.3861 167.372 62.172Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M25.4092 209.002L29.947 211.33L41.0633 194.89L34.3662 191.454L25.4092 209.002Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M25.0092 206.923L33.9458 211.508L33.9462 211.508C35.4565 212.283 36.5979 213.628 37.1193 215.247C37.6407 216.865 37.4994 218.625 36.7265 220.14L36.6318 220.325L22 212.818L25.0092 206.923Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M77.8172 215.371H82.9149L85.3399 195.659H77.8164L77.8172 215.371Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M76.5176 213.703L86.5564 213.702H86.5568C88.2535 213.702 89.8807 214.378 91.0804 215.581C92.2802 216.784 92.9543 218.415 92.9544 220.116V220.325L76.5179 220.325L76.5176 213.703Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.12'\n            d='M50 221.5C77.6142 221.5 100 220.605 100 219.5C100 218.395 77.6142 217.5 50 217.5C22.3858 217.5 0 218.395 0 219.5C0 220.605 22.3858 221.5 50 221.5Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M53.974 54.5811C53.974 54.5811 50.5605 51.9591 50.5605 58.3637L50.0215 79.5281L56.0401 99.5217L59.5435 93.0373L58.1062 78.9877L53.974 54.5811Z'\n            fill='var(--mention-color)'\n        />\n        <path\n            d='M90.4889 112.469C90.4889 112.469 94.4472 131.796 89.4333 147.657L86.6625 208.64L76.5028 207.847L72.9403 162.605L69.5097 140.117L62.3847 160.621L38.8986 204.01L28.0791 195.544C28.0791 195.544 40.0688 162.745 48.9263 155.859L53.3687 105.132L90.4889 112.469Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M84.0014 6.93618C89.6152 10.0129 91.6783 17.0696 88.6096 22.6979C87.3754 24.9615 85.499 26.6493 83.3315 27.6581C83.2665 27.7154 83.1968 27.7737 83.1223 27.8331C78.0606 31.8678 78.6964 42.1094 78.6964 42.1094C78.6964 42.1094 67.8945 34.152 69.6839 32.0853C70.8977 30.6832 71.0802 27.7986 71.072 26.088C66.8632 22.6151 65.5692 16.5283 68.2802 11.5562C71.349 5.92798 78.3876 3.8595 84.0014 6.93618Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M77.6262 19.5905C79.0149 19.7716 80.0624 18.3472 80.5482 17.0304C81.0341 15.7136 81.4043 14.1806 82.6116 13.4693C84.2611 12.4975 86.3716 13.6663 88.2578 13.3457C90.388 12.9836 91.7731 10.7202 91.8816 8.55679C91.9901 6.39337 91.1314 4.31261 90.2889 2.31795L89.9947 4.79686C90.034 3.95669 89.8577 3.12046 89.4825 2.36815C89.1074 1.61584 88.546 0.972615 87.852 0.5L88.2312 4.13741C88.1505 3.63558 87.9717 3.15466 87.7052 2.72225C87.4387 2.28985 87.0896 1.91447 86.678 1.61766C86.2664 1.32086 85.8004 1.10846 85.3067 0.992674C84.813 0.876887 84.3014 0.859983 83.8012 0.942933L83.8609 3.11024C81.4005 2.81692 78.9187 2.52319 76.451 2.74666C73.9833 2.97012 71.4984 3.75289 69.6281 5.38222C66.8305 7.81945 65.8087 11.8326 66.1518 15.5325C66.4948 19.2324 68.0182 22.7081 69.6059 26.0658C70.0053 26.9105 70.5579 27.8638 71.4842 27.9714C72.3165 28.0681 73.078 27.3706 73.3367 26.5716C73.5361 25.7519 73.5284 24.8952 73.3143 24.0791C73.0802 22.832 72.7851 21.5574 73.0052 20.3077C73.2253 19.0581 74.122 17.8232 75.3784 17.67C76.6349 17.5169 77.9206 18.9568 77.3165 20.0719L77.6262 19.5905Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M91.2048 117.638L52.5361 115.137L55.4467 103.048L90.7887 110.968L91.2048 117.638Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            opacity='0.2'\n            d='M91.2048 117.638L52.5361 115.137L55.4467 103.048L90.7887 110.968L91.2048 117.638Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M67.3582 32.9663L69.7836 29.5903C69.7836 29.5903 72.4945 30.514 79.7547 34.1371L80.2676 37.3002L92.8699 115.012L69.9632 114.022L63.7253 113.889L61.684 109.301L59.1667 113.791L53.0752 113.661L46.877 110.059L52.9854 91.3261L54.9616 74.2145L51.9074 58.0935C51.9074 58.0935 48.0642 43.2899 62.8667 35.308L67.3582 32.9663Z'\n            fill='var(--mention-color)'\n        />\n        <path\n            d='M118.988 91.7949C118.427 91.9378 117.842 91.9557 117.273 91.8472C116.705 91.7388 116.167 91.5067 115.697 91.1672C115.228 90.8278 114.839 90.3893 114.556 89.8826C114.274 89.3759 114.106 88.8134 114.065 88.2346L100.475 84.5851L105.942 79.7184L118.009 83.9301C118.983 83.9242 119.926 84.2768 120.658 84.9212C121.391 85.5655 121.862 86.4569 121.983 87.4263C122.104 88.3958 121.866 89.3759 121.314 90.1811C120.762 90.9863 119.934 91.5605 118.988 91.7949V91.7949Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M112.901 89.7346C112.615 89.8906 112.3 89.9846 111.975 90.0104C111.651 90.0362 111.325 89.9933 111.018 89.8844L88.6619 81.3775C83.2079 79.4391 78.6418 75.5806 75.8129 70.5196L66.4901 53.846C65.8354 53.1133 65.3313 52.2584 65.0066 51.3302C64.6818 50.402 64.5428 49.4187 64.5976 48.4366C64.6523 47.4545 64.8996 46.4929 65.3254 45.6067C65.7513 44.7206 66.3472 43.9273 67.0791 43.2723C67.8111 42.6173 68.6647 42.1134 69.5911 41.7895C70.5175 41.4656 71.4985 41.3281 72.478 41.3847C73.4574 41.4413 74.4162 41.691 75.2993 42.1196C76.1824 42.5481 76.9725 43.147 77.6245 43.882L93.761 69.5239L114.068 81.4606C114.466 81.7224 114.775 82.1005 114.951 82.5436C115.128 82.9868 115.165 83.4737 115.057 83.9384L114.047 88.2288C113.938 88.6888 113.693 89.1048 113.342 89.4212C113.208 89.5428 113.06 89.648 112.901 89.7346Z'\n            fill='var(--mention-color)'\n        />\n    </svg>\n);\n\nexport default SystemRolesSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport SystemRolesSVG from './images/system_roles_svg';\n\nconst SystemRolesFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='system_roles'\n            titleID='admin.system_roles_feature_discovery.title'\n            titleDefault='Provide controlled access to the System Console with MatterFOSS'\n            copyID='admin.system_roles_feature_discovery.copy'\n            copyDefault={'Use System Roles to give designated users read and/or write access to select sections of System Console.'}\n            learnMoreURL='https://docs.mattermost.com/deployment/admin-roles.html'\n            featureDiscoveryImage={<SystemRolesSVG/>}\n        />\n    );\n};\n\nt('admin.system_roles_feature_discovery.title');\nt('admin.system_roles_feature_discovery.copy');\n\nexport default SystemRolesFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst GroupsSVG = () => (\n    <svg\n        width='276'\n        height='210'\n        viewBox='0 0 276 210'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            opacity='0.07'\n            d='M124.323 208.24C192.611 208.24 247.97 206.795 247.97 205.013C247.97 203.231 192.611 201.787 124.323 201.787C56.0355 201.787 0.677246 203.231 0.677246 205.013C0.677246 206.795 56.0355 208.24 124.323 208.24Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            opacity='0.12'\n            d='M216.323 209C243.937 209 266.323 208.105 266.323 207C266.323 205.895 243.937 205 216.323 205C188.709 205 166.323 205.895 166.323 207C166.323 208.105 188.709 209 216.323 209Z'\n            fill='var(--center-channel-color)'\n        />\n        <rect\n            x='12.3232'\n            y='-1.52588e-05'\n            width='216'\n            height='141'\n            rx='8'\n            fill='var(--center-channel-bg)'\n        />\n        <rect\n            x='14.8232'\n            y='2.49998'\n            width='211'\n            height='136'\n            rx='5.5'\n            stroke='#3D3C40'\n            strokeOpacity='0.16'\n            strokeWidth='5'\n        />\n        <path\n            d='M60.3232 19H36.3232C34.1141 19 32.3232 20.7908 32.3232 23V39C32.3232 41.2091 34.1141 43 36.3232 43H60.3232C62.5324 43 64.3232 41.2091 64.3232 39V23C64.3232 20.7908 62.5324 19 60.3232 19Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.24'\n        />\n        <path\n            d='M48.3232 23C46.741 23 45.1943 23.4692 43.8787 24.3482C42.5631 25.2273 41.5377 26.4767 40.9322 27.9385C40.3267 29.4003 40.1683 31.0089 40.477 32.5607C40.7856 34.1125 41.5476 35.538 42.6664 36.6568C43.7852 37.7757 45.2107 38.5376 46.7625 38.8463C48.3144 39.1549 49.9229 38.9965 51.3847 38.391C52.8465 37.7855 54.0959 36.7601 54.975 35.4445C55.854 34.129 56.3232 32.5822 56.3232 31C56.317 28.8802 55.4722 26.8489 53.9732 25.35C52.4743 23.851 50.4431 23.0062 48.3232 23ZM48.3232 25.4C48.7979 25.4 49.2619 25.5407 49.6566 25.8045C50.0513 26.0682 50.3589 26.443 50.5406 26.8815C50.7222 27.3201 50.7697 27.8026 50.6771 28.2682C50.5845 28.7338 50.356 29.1614 50.0203 29.497C49.6847 29.8327 49.257 30.0613 48.7915 30.1539C48.3259 30.2465 47.8433 30.1989 47.4048 30.0173C46.9663 29.8356 46.5914 29.528 46.3277 29.1333C46.064 28.7387 45.9232 28.2747 45.9232 27.8C45.9254 27.1641 46.1789 26.5549 46.6285 26.1053C47.0782 25.6556 47.6874 25.4021 48.3232 25.4V25.4ZM48.3232 36.9538C47.3752 36.9495 46.4424 36.7139 45.606 36.2676C44.7695 35.8212 44.0546 35.1775 43.5232 34.3923C43.5617 32.7923 46.7232 31.9115 48.3232 31.9115C49.9232 31.9115 53.0848 32.7923 53.1232 34.3923C52.5913 35.1769 51.8762 35.8201 51.0399 36.2664C50.2036 36.7127 49.2712 36.9487 48.3232 36.9538V36.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M108.323 19H84.3232C82.1141 19 80.3232 20.7908 80.3232 23V39C80.3232 41.2091 82.1141 43 84.3232 43H108.323C110.532 43 112.323 41.2091 112.323 39V23C112.323 20.7908 110.532 19 108.323 19Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.24'\n        />\n        <path\n            d='M96.3232 23C94.741 23 93.1943 23.4692 91.8787 24.3482C90.5631 25.2273 89.5377 26.4767 88.9322 27.9385C88.3267 29.4003 88.1683 31.0089 88.477 32.5607C88.7856 34.1125 89.5476 35.538 90.6664 36.6568C91.7852 37.7757 93.2107 38.5376 94.7625 38.8463C96.3144 39.1549 97.9229 38.9965 99.3847 38.391C100.847 37.7855 102.096 36.7601 102.975 35.4445C103.854 34.129 104.323 32.5822 104.323 31C104.317 28.8802 103.472 26.8489 101.973 25.35C100.474 23.851 98.4431 23.0062 96.3232 23ZM96.3232 25.4C96.7979 25.4 97.2619 25.5407 97.6566 25.8045C98.0513 26.0682 98.3589 26.443 98.5406 26.8815C98.7222 27.3201 98.7697 27.8026 98.6771 28.2682C98.5845 28.7338 98.356 29.1614 98.0203 29.497C97.6847 29.8327 97.257 30.0613 96.7915 30.1539C96.3259 30.2465 95.8433 30.1989 95.4048 30.0173C94.9663 29.8356 94.5914 29.528 94.3277 29.1333C94.064 28.7387 93.9232 28.2747 93.9232 27.8C93.9254 27.1641 94.1789 26.5549 94.6285 26.1053C95.0782 25.6556 95.6874 25.4021 96.3232 25.4V25.4ZM96.3232 36.9538C95.3752 36.9495 94.4424 36.7139 93.606 36.2676C92.7695 35.8212 92.0546 35.1775 91.5232 34.3923C91.5617 32.7923 94.7232 31.9115 96.3232 31.9115C97.9232 31.9115 101.085 32.7923 101.123 34.3923C100.591 35.1769 99.8762 35.8201 99.0399 36.2664C98.2036 36.7127 97.2712 36.9487 96.3232 36.9538V36.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M156.323 19H132.323C130.114 19 128.323 20.7908 128.323 23V39C128.323 41.2091 130.114 43 132.323 43H156.323C158.532 43 160.323 41.2091 160.323 39V23C160.323 20.7908 158.532 19 156.323 19Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M144.323 23C142.741 23 141.194 23.4692 139.879 24.3482C138.563 25.2273 137.538 26.4767 136.932 27.9385C136.327 29.4003 136.168 31.0089 136.477 32.5607C136.786 34.1125 137.548 35.538 138.666 36.6568C139.785 37.7757 141.211 38.5376 142.763 38.8463C144.314 39.1549 145.923 38.9965 147.385 38.391C148.847 37.7855 150.096 36.7601 150.975 35.4445C151.854 34.129 152.323 32.5822 152.323 31C152.317 28.8802 151.472 26.8489 149.973 25.35C148.474 23.851 146.443 23.0062 144.323 23ZM144.323 25.4C144.798 25.4 145.262 25.5407 145.657 25.8045C146.051 26.0682 146.359 26.443 146.541 26.8815C146.722 27.3201 146.77 27.8026 146.677 28.2682C146.585 28.7338 146.356 29.1614 146.02 29.497C145.685 29.8327 145.257 30.0613 144.791 30.1539C144.326 30.2465 143.843 30.1989 143.405 30.0173C142.966 29.8356 142.591 29.528 142.328 29.1333C142.064 28.7387 141.923 28.2747 141.923 27.8C141.925 27.1641 142.179 26.5549 142.629 26.1053C143.078 25.6556 143.687 25.4021 144.323 25.4V25.4ZM144.323 36.9538C143.375 36.9495 142.442 36.7139 141.606 36.2676C140.77 35.8212 140.055 35.1775 139.523 34.3923C139.562 32.7923 142.723 31.9115 144.323 31.9115C145.923 31.9115 149.085 32.7923 149.123 34.3923C148.591 35.1769 147.876 35.8201 147.04 36.2664C146.204 36.7127 145.271 36.9487 144.323 36.9538V36.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M204.323 19H180.323C178.114 19 176.323 20.7908 176.323 23V39C176.323 41.2091 178.114 43 180.323 43H204.323C206.532 43 208.323 41.2091 208.323 39V23C208.323 20.7908 206.532 19 204.323 19Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M192.323 23C190.741 23 189.194 23.4692 187.879 24.3482C186.563 25.2273 185.538 26.4767 184.932 27.9385C184.327 29.4003 184.168 31.0089 184.477 32.5607C184.786 34.1125 185.548 35.538 186.666 36.6568C187.785 37.7757 189.211 38.5376 190.763 38.8463C192.314 39.1549 193.923 38.9965 195.385 38.391C196.847 37.7855 198.096 36.7601 198.975 35.4445C199.854 34.129 200.323 32.5822 200.323 31C200.317 28.8802 199.472 26.8489 197.973 25.35C196.474 23.851 194.443 23.0062 192.323 23ZM192.323 25.4C192.798 25.4 193.262 25.5407 193.657 25.8045C194.051 26.0682 194.359 26.443 194.541 26.8815C194.722 27.3201 194.77 27.8026 194.677 28.2682C194.585 28.7338 194.356 29.1614 194.02 29.497C193.685 29.8327 193.257 30.0613 192.791 30.1539C192.326 30.2465 191.843 30.1989 191.405 30.0173C190.966 29.8356 190.591 29.528 190.328 29.1333C190.064 28.7387 189.923 28.2747 189.923 27.8C189.925 27.1641 190.179 26.5549 190.629 26.1053C191.078 25.6556 191.687 25.4021 192.323 25.4V25.4ZM192.323 36.9538C191.375 36.9495 190.442 36.7139 189.606 36.2676C188.77 35.8212 188.055 35.1775 187.523 34.3923C187.562 32.7923 190.723 31.9115 192.323 31.9115C193.923 31.9115 197.085 32.7923 197.123 34.3923C196.591 35.1769 195.876 35.8201 195.04 36.2664C194.204 36.7127 193.271 36.9487 192.323 36.9538V36.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M60.3232 59H36.3232C34.1141 59 32.3232 60.7908 32.3232 63V79C32.3232 81.2091 34.1141 83 36.3232 83H60.3232C62.5324 83 64.3232 81.2091 64.3232 79V63C64.3232 60.7908 62.5324 59 60.3232 59Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M48.3232 63C46.741 63 45.1943 63.4692 43.8787 64.3482C42.5631 65.2273 41.5377 66.4767 40.9322 67.9385C40.3267 69.4003 40.1683 71.0089 40.477 72.5607C40.7856 74.1125 41.5476 75.538 42.6664 76.6568C43.7852 77.7757 45.2107 78.5376 46.7625 78.8463C48.3144 79.1549 49.9229 78.9965 51.3847 78.391C52.8465 77.7855 54.0959 76.7601 54.975 75.4445C55.854 74.129 56.3232 72.5822 56.3232 71C56.317 68.8802 55.4722 66.8489 53.9732 65.35C52.4743 63.851 50.4431 63.0062 48.3232 63ZM48.3232 65.4C48.7979 65.4 49.2619 65.5407 49.6566 65.8045C50.0513 66.0682 50.3589 66.443 50.5406 66.8815C50.7222 67.3201 50.7697 67.8026 50.6771 68.2682C50.5845 68.7338 50.356 69.1614 50.0203 69.497C49.6847 69.8327 49.257 70.0613 48.7915 70.1539C48.3259 70.2465 47.8433 70.1989 47.4048 70.0173C46.9663 69.8356 46.5914 69.528 46.3277 69.1333C46.064 68.7387 45.9232 68.2747 45.9232 67.8C45.9254 67.1641 46.1789 66.5549 46.6285 66.1053C47.0782 65.6556 47.6874 65.4021 48.3232 65.4V65.4ZM48.3232 76.9538C47.3752 76.9495 46.4424 76.7139 45.606 76.2676C44.7695 75.8212 44.0546 75.1775 43.5232 74.3923C43.5617 72.7923 46.7232 71.9115 48.3232 71.9115C49.9232 71.9115 53.0848 72.7923 53.1232 74.3923C52.5913 75.1769 51.8762 75.8201 51.0399 76.2664C50.2036 76.7127 49.2712 76.9487 48.3232 76.9538V76.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M108.323 59H84.3232C82.1141 59 80.3232 60.7908 80.3232 63V79C80.3232 81.2091 82.1141 83 84.3232 83H108.323C110.532 83 112.323 81.2091 112.323 79V63C112.323 60.7908 110.532 59 108.323 59Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M96.3232 63C94.741 63 93.1943 63.4692 91.8787 64.3482C90.5631 65.2273 89.5377 66.4767 88.9322 67.9385C88.3267 69.4003 88.1683 71.0089 88.477 72.5607C88.7856 74.1125 89.5476 75.538 90.6664 76.6568C91.7852 77.7757 93.2107 78.5376 94.7625 78.8463C96.3144 79.1549 97.9229 78.9965 99.3847 78.391C100.847 77.7855 102.096 76.7601 102.975 75.4445C103.854 74.129 104.323 72.5822 104.323 71C104.317 68.8802 103.472 66.8489 101.973 65.35C100.474 63.851 98.4431 63.0062 96.3232 63ZM96.3232 65.4C96.7979 65.4 97.2619 65.5407 97.6566 65.8045C98.0513 66.0682 98.3589 66.443 98.5406 66.8815C98.7222 67.3201 98.7697 67.8026 98.6771 68.2682C98.5845 68.7338 98.356 69.1614 98.0203 69.497C97.6847 69.8327 97.257 70.0613 96.7915 70.1539C96.3259 70.2465 95.8433 70.1989 95.4048 70.0173C94.9663 69.8356 94.5914 69.528 94.3277 69.1333C94.064 68.7387 93.9232 68.2747 93.9232 67.8C93.9254 67.1641 94.1789 66.5549 94.6285 66.1053C95.0782 65.6556 95.6874 65.4021 96.3232 65.4V65.4ZM96.3232 76.9538C95.3752 76.9495 94.4424 76.7139 93.606 76.2676C92.7695 75.8212 92.0546 75.1775 91.5232 74.3923C91.5617 72.7923 94.7232 71.9115 96.3232 71.9115C97.9232 71.9115 101.085 72.7923 101.123 74.3923C100.591 75.1769 99.8762 75.8201 99.0399 76.2664C98.2036 76.7127 97.2712 76.9487 96.3232 76.9538V76.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M156.323 59H132.323C130.114 59 128.323 60.7908 128.323 63V79C128.323 81.2091 130.114 83 132.323 83H156.323C158.532 83 160.323 81.2091 160.323 79V63C160.323 60.7908 158.532 59 156.323 59Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.24'\n        />\n        <path\n            d='M144.323 63C142.741 63 141.194 63.4692 139.879 64.3482C138.563 65.2273 137.538 66.4767 136.932 67.9385C136.327 69.4003 136.168 71.0089 136.477 72.5607C136.786 74.1125 137.548 75.538 138.666 76.6568C139.785 77.7757 141.211 78.5376 142.763 78.8463C144.314 79.1549 145.923 78.9965 147.385 78.391C148.847 77.7855 150.096 76.7601 150.975 75.4445C151.854 74.129 152.323 72.5822 152.323 71C152.317 68.8802 151.472 66.8489 149.973 65.35C148.474 63.851 146.443 63.0062 144.323 63ZM144.323 65.4C144.798 65.4 145.262 65.5407 145.657 65.8045C146.051 66.0682 146.359 66.443 146.541 66.8815C146.722 67.3201 146.77 67.8026 146.677 68.2682C146.585 68.7338 146.356 69.1614 146.02 69.497C145.685 69.8327 145.257 70.0613 144.791 70.1539C144.326 70.2465 143.843 70.1989 143.405 70.0173C142.966 69.8356 142.591 69.528 142.328 69.1333C142.064 68.7387 141.923 68.2747 141.923 67.8C141.925 67.1641 142.179 66.5549 142.629 66.1053C143.078 65.6556 143.687 65.4021 144.323 65.4V65.4ZM144.323 76.9538C143.375 76.9495 142.442 76.7139 141.606 76.2676C140.77 75.8212 140.055 75.1775 139.523 74.3923C139.562 72.7923 142.723 71.9115 144.323 71.9115C145.923 71.9115 149.085 72.7923 149.123 74.3923C148.591 75.1769 147.876 75.8201 147.04 76.2664C146.204 76.7127 145.271 76.9487 144.323 76.9538V76.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M204.323 59H180.323C178.114 59 176.323 60.7908 176.323 63V79C176.323 81.2091 178.114 83 180.323 83H204.323C206.532 83 208.323 81.2091 208.323 79V63C208.323 60.7908 206.532 59 204.323 59Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.24'\n        />\n        <path\n            d='M192.323 63C190.741 63 189.194 63.4692 187.879 64.3482C186.563 65.2273 185.538 66.4767 184.932 67.9385C184.327 69.4003 184.168 71.0089 184.477 72.5607C184.786 74.1125 185.548 75.538 186.666 76.6568C187.785 77.7757 189.211 78.5376 190.763 78.8463C192.314 79.1549 193.923 78.9965 195.385 78.391C196.847 77.7855 198.096 76.7601 198.975 75.4445C199.854 74.129 200.323 72.5822 200.323 71C200.317 68.8802 199.472 66.8489 197.973 65.35C196.474 63.851 194.443 63.0062 192.323 63ZM192.323 65.4C192.798 65.4 193.262 65.5407 193.657 65.8045C194.051 66.0682 194.359 66.443 194.541 66.8815C194.722 67.3201 194.77 67.8026 194.677 68.2682C194.585 68.7338 194.356 69.1614 194.02 69.497C193.685 69.8327 193.257 70.0613 192.791 70.1539C192.326 70.2465 191.843 70.1989 191.405 70.0173C190.966 69.8356 190.591 69.528 190.328 69.1333C190.064 68.7387 189.923 68.2747 189.923 67.8C189.925 67.1641 190.179 66.5549 190.629 66.1053C191.078 65.6556 191.687 65.4021 192.323 65.4V65.4ZM192.323 76.9538C191.375 76.9495 190.442 76.7139 189.606 76.2676C188.77 75.8212 188.055 75.1775 187.523 74.3923C187.562 72.7923 190.723 71.9115 192.323 71.9115C193.923 71.9115 197.085 72.7923 197.123 74.3923C196.591 75.1769 195.876 75.8201 195.04 76.2664C194.204 76.7127 193.271 76.9487 192.323 76.9538V76.9538Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M60.3232 99H36.3232C34.1141 99 32.3232 100.791 32.3232 103V119C32.3232 121.209 34.1141 123 36.3232 123H60.3232C62.5324 123 64.3232 121.209 64.3232 119V103C64.3232 100.791 62.5324 99 60.3232 99Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M48.3232 103C46.741 103 45.1943 103.469 43.8787 104.348C42.5631 105.227 41.5377 106.477 40.9322 107.939C40.3267 109.4 40.1683 111.009 40.477 112.561C40.7856 114.113 41.5476 115.538 42.6664 116.657C43.7852 117.776 45.2107 118.538 46.7625 118.846C48.3144 119.155 49.9229 118.997 51.3847 118.391C52.8465 117.786 54.0959 116.76 54.975 115.445C55.854 114.129 56.3232 112.582 56.3232 111C56.317 108.88 55.4722 106.849 53.9732 105.35C52.4743 103.851 50.4431 103.006 48.3232 103ZM48.3232 105.4C48.7979 105.4 49.2619 105.541 49.6566 105.804C50.0513 106.068 50.3589 106.443 50.5406 106.882C50.7222 107.32 50.7697 107.803 50.6771 108.268C50.5845 108.734 50.356 109.161 50.0203 109.497C49.6847 109.833 49.257 110.061 48.7915 110.154C48.3259 110.246 47.8433 110.199 47.4048 110.017C46.9663 109.836 46.5914 109.528 46.3277 109.133C46.064 108.739 45.9232 108.275 45.9232 107.8C45.9254 107.164 46.1789 106.555 46.6285 106.105C47.0782 105.656 47.6874 105.402 48.3232 105.4V105.4ZM48.3232 116.954C47.3752 116.95 46.4424 116.714 45.606 116.268C44.7695 115.821 44.0546 115.177 43.5232 114.392C43.5617 112.792 46.7232 111.912 48.3232 111.912C49.9232 111.912 53.0848 112.792 53.1232 114.392C52.5913 115.177 51.8762 115.82 51.0399 116.266C50.2036 116.713 49.2712 116.949 48.3232 116.954V116.954Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M108.323 99H84.3232C82.1141 99 80.3232 100.791 80.3232 103V119C80.3232 121.209 82.1141 123 84.3232 123H108.323C110.532 123 112.323 121.209 112.323 119V103C112.323 100.791 110.532 99 108.323 99Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M96.3232 103C94.741 103 93.1943 103.469 91.8787 104.348C90.5631 105.227 89.5377 106.477 88.9322 107.939C88.3267 109.4 88.1683 111.009 88.477 112.561C88.7856 114.113 89.5476 115.538 90.6664 116.657C91.7852 117.776 93.2107 118.538 94.7625 118.846C96.3144 119.155 97.9229 118.997 99.3847 118.391C100.847 117.786 102.096 116.76 102.975 115.445C103.854 114.129 104.323 112.582 104.323 111C104.317 108.88 103.472 106.849 101.973 105.35C100.474 103.851 98.4431 103.006 96.3232 103ZM96.3232 105.4C96.7979 105.4 97.2619 105.541 97.6566 105.804C98.0513 106.068 98.3589 106.443 98.5406 106.882C98.7222 107.32 98.7697 107.803 98.6771 108.268C98.5845 108.734 98.356 109.161 98.0203 109.497C97.6847 109.833 97.257 110.061 96.7915 110.154C96.3259 110.246 95.8433 110.199 95.4048 110.017C94.9663 109.836 94.5914 109.528 94.3277 109.133C94.064 108.739 93.9232 108.275 93.9232 107.8C93.9254 107.164 94.1789 106.555 94.6285 106.105C95.0782 105.656 95.6874 105.402 96.3232 105.4V105.4ZM96.3232 116.954C95.3752 116.95 94.4424 116.714 93.606 116.268C92.7695 115.821 92.0546 115.177 91.5232 114.392C91.5617 112.792 94.7232 111.912 96.3232 111.912C97.9232 111.912 101.085 112.792 101.123 114.392C100.591 115.177 99.8762 115.82 99.0399 116.266C98.2036 116.713 97.2712 116.949 96.3232 116.954V116.954Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M156.323 99H132.323C130.114 99 128.323 100.791 128.323 103V119C128.323 121.209 130.114 123 132.323 123H156.323C158.532 123 160.323 121.209 160.323 119V103C160.323 100.791 158.532 99 156.323 99Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M144.323 103C142.741 103 141.194 103.469 139.879 104.348C138.563 105.227 137.538 106.477 136.932 107.939C136.327 109.4 136.168 111.009 136.477 112.561C136.786 114.113 137.548 115.538 138.666 116.657C139.785 117.776 141.211 118.538 142.763 118.846C144.314 119.155 145.923 118.997 147.385 118.391C148.847 117.786 150.096 116.76 150.975 115.445C151.854 114.129 152.323 112.582 152.323 111C152.317 108.88 151.472 106.849 149.973 105.35C148.474 103.851 146.443 103.006 144.323 103ZM144.323 105.4C144.798 105.4 145.262 105.541 145.657 105.804C146.051 106.068 146.359 106.443 146.541 106.882C146.722 107.32 146.77 107.803 146.677 108.268C146.585 108.734 146.356 109.161 146.02 109.497C145.685 109.833 145.257 110.061 144.791 110.154C144.326 110.246 143.843 110.199 143.405 110.017C142.966 109.836 142.591 109.528 142.328 109.133C142.064 108.739 141.923 108.275 141.923 107.8C141.925 107.164 142.179 106.555 142.629 106.105C143.078 105.656 143.687 105.402 144.323 105.4V105.4ZM144.323 116.954C143.375 116.95 142.442 116.714 141.606 116.268C140.77 115.821 140.055 115.177 139.523 114.392C139.562 112.792 142.723 111.912 144.323 111.912C145.923 111.912 149.085 112.792 149.123 114.392C148.591 115.177 147.876 115.82 147.04 116.266C146.204 116.713 145.271 116.949 144.323 116.954V116.954Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M204.323 99H180.323C178.114 99 176.323 100.791 176.323 103V119C176.323 121.209 178.114 123 180.323 123H204.323C206.532 123 208.323 121.209 208.323 119V103C208.323 100.791 206.532 99 204.323 99Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M192.323 103C190.741 103 189.194 103.469 187.879 104.348C186.563 105.227 185.538 106.477 184.932 107.939C184.327 109.4 184.168 111.009 184.477 112.561C184.786 114.113 185.548 115.538 186.666 116.657C187.785 117.776 189.211 118.538 190.763 118.846C192.314 119.155 193.923 118.997 195.385 118.391C196.847 117.786 198.096 116.76 198.975 115.445C199.854 114.129 200.323 112.582 200.323 111C200.317 108.88 199.472 106.849 197.973 105.35C196.474 103.851 194.443 103.006 192.323 103ZM192.323 105.4C192.798 105.4 193.262 105.541 193.657 105.804C194.051 106.068 194.359 106.443 194.541 106.882C194.722 107.32 194.77 107.803 194.677 108.268C194.585 108.734 194.356 109.161 194.02 109.497C193.685 109.833 193.257 110.061 192.791 110.154C192.326 110.246 191.843 110.199 191.405 110.017C190.966 109.836 190.591 109.528 190.328 109.133C190.064 108.739 189.923 108.275 189.923 107.8C189.925 107.164 190.179 106.555 190.629 106.105C191.078 105.656 191.687 105.402 192.323 105.4V105.4ZM192.323 116.954C191.375 116.95 190.442 116.714 189.606 116.268C188.77 115.821 188.055 115.177 187.523 114.392C187.562 112.792 190.723 111.912 192.323 111.912C193.923 111.912 197.085 112.792 197.123 114.392C196.591 115.177 195.876 115.82 195.04 116.266C194.204 116.713 193.271 116.949 192.323 116.954V116.954Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M251.048 200.742C251.048 200.742 241.714 201.461 242.671 204.82C243.629 208.179 251.048 207.699 251.048 207.699C251.048 207.699 256.791 207.22 259.903 208.179C263.014 209.139 266.604 208.179 266.843 206.5C267.082 204.82 265.168 203.621 265.168 203.621L263.971 201.221L251.048 200.742Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M204.627 100.6L201.061 102.313C201.061 102.313 191.477 104.661 194.837 108.715C198.197 112.768 203.256 106.089 203.256 106.089L206.517 104.007L204.627 100.6Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M204.628 100.6L201.062 102.313C201.062 102.313 191.478 104.661 194.838 108.715C198.198 112.768 203.257 106.089 203.257 106.089L206.518 104.007L204.628 100.6Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M272.706 122.647L273.663 126.486C273.663 126.486 277.971 135.363 272.706 135.363C267.441 135.363 269.356 127.206 269.356 127.206L268.877 123.367L272.706 122.647Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M247.817 57.3884C253.5 57.3884 258.108 52.7694 258.108 47.0717C258.108 41.374 253.5 36.7551 247.817 36.7551C242.133 36.7551 237.526 41.374 237.526 47.0717C237.526 52.7694 242.133 57.3884 247.817 57.3884Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M244.706 54.9892C244.706 54.9892 245.902 60.5074 245.184 63.1465C244.466 65.7857 260.022 62.6667 260.022 62.6667C260.022 62.6667 254.518 53.5496 254.757 53.3097L244.706 54.9892Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M247.099 61.2271C247.099 61.2271 242.791 60.0275 241.355 61.467C239.919 62.9066 231.543 66.9852 231.543 66.9852L237.287 102.254L262.176 96.7355L266.484 63.3864C266.484 63.3864 259.697 59.3968 258.544 60.192C257.39 60.9872 247.099 61.2271 247.099 61.2271Z'\n            fill='var(--sidebar-text-active-border)'\n        />\n        <path\n            d='M238.323 76L236.181 66.8376C236.181 66.8376 232.998 65.1856 231.458 67.4277C229.917 69.6697 221.097 81.9717 221.097 81.9717L201.642 101.41L205.422 105.663L224.063 91.2768L238.323 76Z'\n            fill='var(--sidebar-text-active-border)'\n        />\n        <path\n            d='M265.766 64.1062L266.914 63.4886C266.914 63.4886 271.27 64.3461 271.031 67.705C270.792 71.0639 269.834 89.7778 269.834 89.7778L273.663 123.607L266.723 124.806L259.783 96.4956L265.766 64.1062Z'\n            fill='var(--sidebar-text-active-border)'\n        />\n        <path\n            d='M237.526 98.6549L236.568 113.29L233.457 142.561L238.004 203.261L253.8 203.741L249.013 145.92L253.8 126.006L269.445 125.425C269.445 125.425 270.552 102.494 261.697 95.296L237.526 98.6549Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M254.757 122.647L252.245 175.55L251.407 202.301L265.527 203.741L269.09 125.068L263.612 119.528L254.757 122.647Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M252.364 33.3962C252.364 33.3962 243.03 32.1966 240.398 36.7551C240.398 36.7551 239.68 40.114 237.287 41.3136C234.893 42.5132 237.765 46.5919 238.483 47.7915C239.201 48.9911 241.116 55.9488 238.962 57.6283C236.808 59.3077 242.791 64.1061 242.791 64.1061C242.791 64.1061 245.663 67.9449 243.27 70.8239C240.876 73.703 246.381 74.6627 246.381 74.6627C246.381 74.6627 245.184 82.82 247.338 80.6607C247.338 80.6607 248.295 99.1347 257.39 87.6185C266.484 76.1022 270.313 70.584 266.484 66.0255C262.655 61.467 265.527 57.3883 265.527 57.3883C265.527 57.3883 266.723 54.9891 264.091 51.3903C261.458 47.7915 261.458 33.3962 252.364 33.3962Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M238.842 202.181C238.842 202.181 229.509 202.901 230.466 206.26C231.423 209.619 238.842 209.139 238.842 209.139C238.842 209.139 244.586 208.659 247.697 209.619C250.808 210.578 254.398 209.619 254.637 207.939C254.877 206.26 252.962 205.06 252.962 205.06L251.766 202.661L238.842 202.181Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default GroupsSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport GroupsSVG from './images/groups_svg';\n\nconst GroupsFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='groups'\n            titleID='admin.groups_feature_discovery.title'\n            titleDefault='Synchronize your Active Directory/LDAP groups with MatterFOSS'\n            copyID='admin.groups_feature_discovery.copy'\n            copyDefault={'Use AD/LDAP groups to organize and apply actions to multiple users at once. Manage team and channel memberships, permissions, and more.'}\n            learnMoreURL='https://docs.mattermost.com/deployment/ldap-group-sync.html'\n            featureDiscoveryImage={<GroupsSVG/>}\n        />\n    );\n};\n\nt('admin.groups_feature_discovery.title');\nt('admin.groups_feature_discovery.copy');\n\nexport default GroupsFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nconst PermissionsSVG = () => (\n    <svg\n        width='290'\n        height='222'\n        viewBox='0 0 290 222'\n        fill='none'\n        xmlns='http://www.w3.org/2000/svg'\n    >\n        <path\n            d='M166.5 0.749939C163.848 0.749929 161.304 1.80349 159.429 3.67884C157.554 5.5542 156.5 8.09773 156.5 10.7499C156.5 13.4021 157.554 15.9456 159.429 17.821C161.304 19.6963 163.848 20.7499 166.5 20.7499H166.5C169.152 20.7499 171.696 19.6964 173.571 17.821C175.446 15.9456 176.5 13.4021 176.5 10.7499C176.5 8.09777 175.446 5.55423 173.571 3.67887C171.696 1.80351 169.152 0.749939 166.5 0.749939Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M165.551 14.903C165.288 14.9034 165.032 14.8182 164.821 14.6603L164.808 14.6505L162.058 12.5469C161.931 12.4492 161.824 12.3275 161.743 12.1885C161.663 12.0496 161.611 11.8961 161.59 11.737C161.569 11.5778 161.579 11.4161 161.621 11.261C161.662 11.1059 161.734 10.9605 161.831 10.8331C161.929 10.7057 162.051 10.5988 162.19 10.5185C162.329 10.4382 162.482 10.3861 162.641 10.3651C162.801 10.3441 162.962 10.3547 163.117 10.3962C163.272 10.4377 163.418 10.5094 163.545 10.6071L165.326 11.9731L169.536 6.48177C169.633 6.35445 169.755 6.24761 169.894 6.16734C170.033 6.08707 170.186 6.03494 170.345 6.01394C170.504 5.99293 170.666 6.00345 170.821 6.04491C170.976 6.08636 171.121 6.15794 171.248 6.25554L171.249 6.25581L171.222 6.29208L171.249 6.25581C171.506 6.45321 171.674 6.74444 171.717 7.0656C171.759 7.38675 171.672 7.7116 171.475 7.96885L166.524 14.4249C166.41 14.5737 166.263 14.6941 166.094 14.7767C165.925 14.8594 165.74 14.9021 165.552 14.9015L165.551 14.903Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M8.61258 2.74994C6.46099 2.74994 4.39753 3.5928 2.87613 5.09309C1.35472 6.59338 0.5 8.62821 0.5 10.7499C0.5 12.8717 1.35472 14.9065 2.87613 16.4068C4.39753 17.9071 6.46099 18.7499 8.61258 18.7499H132.387C134.539 18.7499 136.602 17.9071 138.124 16.4068C139.645 14.9065 140.5 12.8717 140.5 10.7499C140.5 8.62821 139.645 6.59338 138.124 5.09309C136.602 3.5928 134.539 2.74994 132.387 2.74994H8.61258Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M166.5 40.7499C163.848 40.7499 161.304 41.8035 159.429 43.6788C157.554 45.5542 156.5 48.0977 156.5 50.7499C156.5 53.4021 157.554 55.9456 159.429 57.821C161.304 59.6963 163.848 60.7499 166.5 60.7499H166.5C169.152 60.7499 171.696 59.6964 173.571 57.821C175.446 55.9456 176.5 53.4021 176.5 50.7499C176.5 48.0978 175.446 45.5542 173.571 43.6789C171.696 41.8035 169.152 40.7499 166.5 40.7499Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M165.551 54.903C165.288 54.9034 165.032 54.8182 164.821 54.6603L164.808 54.6505L162.058 52.5469C161.931 52.4492 161.824 52.3275 161.743 52.1885C161.663 52.0496 161.611 51.8961 161.59 51.737C161.569 51.5778 161.579 51.4161 161.621 51.261C161.662 51.1059 161.734 50.9605 161.831 50.8331C161.929 50.7057 162.051 50.5988 162.19 50.5185C162.329 50.4382 162.482 50.3861 162.641 50.3651C162.801 50.3441 162.962 50.3547 163.117 50.3962C163.272 50.4377 163.418 50.5094 163.545 50.6071L165.326 51.9731L169.536 46.4818C169.633 46.3545 169.755 46.2476 169.894 46.1673C170.033 46.0871 170.186 46.0349 170.345 46.0139C170.504 45.9929 170.666 46.0035 170.821 46.0449C170.976 46.0864 171.121 46.1579 171.248 46.2555L171.249 46.2558L171.222 46.2921L171.249 46.2558C171.506 46.4532 171.674 46.7444 171.717 47.0656C171.759 47.3868 171.672 47.7116 171.475 47.9688L166.524 54.4249C166.41 54.5737 166.263 54.6941 166.094 54.7767C165.925 54.8594 165.74 54.9021 165.552 54.9015L165.551 54.903Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M8.61258 42.7499C6.46099 42.7499 4.39753 43.5928 2.87613 45.0931C1.35472 46.5934 0.5 48.6282 0.5 50.7499C0.5 52.8717 1.35472 54.9065 2.87613 56.4068C4.39753 57.9071 6.46099 58.7499 8.61258 58.7499H132.387C134.539 58.7499 136.602 57.9071 138.124 56.4068C139.645 54.9065 140.5 52.8717 140.5 50.7499C140.5 48.6282 139.645 46.5934 138.124 45.0931C136.602 43.5928 134.539 42.7499 132.387 42.7499H8.61258Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M166.5 80.7499C163.848 80.7499 161.304 81.8035 159.429 83.6788C157.554 85.5542 156.5 88.0977 156.5 90.7499C156.5 93.4021 157.554 95.9456 159.429 97.821C161.304 99.6963 163.848 100.75 166.5 100.75H166.5C169.152 100.75 171.696 99.6964 173.571 97.821C175.446 95.9456 176.5 93.4021 176.5 90.7499C176.5 88.0978 175.446 85.5542 173.571 83.6789C171.696 81.8035 169.152 80.7499 166.5 80.7499Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M8.61258 82.7499C6.46099 82.7499 4.39753 83.5928 2.87613 85.0931C1.35472 86.5934 0.5 88.6282 0.5 90.7499C0.5 92.8717 1.35472 94.9065 2.87613 96.4068C4.39753 97.9071 6.46099 98.7499 8.61258 98.7499H132.387C134.539 98.7499 136.602 97.9071 138.124 96.4068C139.645 94.9065 140.5 92.8717 140.5 90.7499C140.5 88.6282 139.645 86.5934 138.124 85.0931C136.602 83.5928 134.539 82.7499 132.387 82.7499H8.61258Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.16'\n        />\n        <path\n            d='M259.454 143.769C256.513 143.769 253.692 144.928 251.613 146.99C249.533 149.052 248.365 151.85 248.365 154.766C248.365 157.683 249.533 160.48 251.613 162.543C253.692 164.605 256.513 165.764 259.454 165.764C262.394 165.764 265.215 164.605 267.294 162.543C269.374 160.48 270.542 157.683 270.542 154.766C270.542 151.85 269.374 149.053 267.294 146.99C265.215 144.928 262.395 143.769 259.454 143.769Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M258.401 159.334C258.109 159.334 257.825 159.241 257.591 159.067L257.577 159.056L254.527 156.743C254.386 156.635 254.267 156.501 254.178 156.348C254.089 156.196 254.031 156.027 254.008 155.852C253.984 155.677 253.996 155.499 254.042 155.329C254.088 155.158 254.167 154.998 254.276 154.858C254.384 154.718 254.519 154.6 254.673 154.512C254.827 154.424 254.998 154.366 255.174 154.343C255.35 154.32 255.53 154.332 255.702 154.377C255.874 154.423 256.035 154.502 256.176 154.609L258.151 156.112L262.819 150.073C262.927 149.933 263.062 149.815 263.216 149.727C263.37 149.639 263.54 149.581 263.716 149.558C263.892 149.535 264.072 149.547 264.244 149.592C264.415 149.638 264.576 149.717 264.718 149.824L264.718 149.824L264.689 149.864L264.719 149.824C265.004 150.041 265.19 150.361 265.237 150.715C265.284 151.068 265.188 151.425 264.969 151.708L259.48 158.808C259.353 158.972 259.189 159.104 259.002 159.195C258.815 159.286 258.61 159.333 258.402 159.332L258.401 159.334Z'\n            fill='var(--center-channel-bg)'\n        />\n        <path\n            d='M245.374 215.45L239.848 215.449L237.22 194.551L245.376 194.552L245.374 215.45Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M235.9 213.901H246.558V220.48H229.189C229.189 219.616 229.363 218.76 229.7 217.962C230.038 217.164 230.532 216.439 231.155 215.828C231.778 215.217 232.518 214.732 233.332 214.402C234.146 214.071 235.019 213.901 235.9 213.901Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M223.378 215.45L217.851 215.449L215.224 194.551L223.38 194.552L223.378 215.45Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M213.904 213.901H224.562V220.48H207.193C207.193 219.616 207.367 218.76 207.704 217.962C208.041 217.164 208.536 216.439 209.159 215.828C209.782 215.217 210.522 214.732 211.336 214.402C212.15 214.071 213.023 213.901 213.904 213.901Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M249.632 143.199C249.187 142.718 248.855 142.146 248.66 141.525C248.465 140.905 248.411 140.249 248.502 139.606C248.593 138.962 248.827 138.346 249.187 137.801C249.547 137.255 250.025 136.794 250.587 136.45L248.875 126.434L254.83 123.93L257.045 138.107C257.573 139.071 257.722 140.19 257.464 141.255C257.206 142.319 256.559 143.253 255.645 143.881C254.731 144.509 253.615 144.786 252.506 144.66C251.398 144.535 250.375 144.015 249.632 143.199V143.199Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            d='M203.012 138.467C203.532 138.064 203.955 137.554 204.252 136.973C204.549 136.393 204.713 135.755 204.731 135.106C204.75 134.456 204.623 133.811 204.36 133.214C204.096 132.618 203.703 132.086 203.207 131.655L206.583 122.054L201.132 118.62L196.559 132.244C195.876 133.109 195.54 134.189 195.615 135.28C195.69 136.372 196.171 137.398 196.966 138.165C197.761 138.932 198.816 139.387 199.93 139.442C201.045 139.498 202.141 139.151 203.012 138.467Z'\n            fill='var(--center-channel-color)'\n            fillOpacity='0.32'\n        />\n        <path\n            opacity='0.32'\n            fillRule='evenodd'\n            clipRule='evenodd'\n            d='M238.148 65.6193C241.198 63.5125 243.19 60.0333 243.19 56.0981C243.19 49.6694 237.874 44.4579 231.316 44.4579C224.759 44.4579 219.443 49.6694 219.443 56.0981C219.443 60.0555 221.458 63.5516 224.536 65.6547C227.945 71.0985 224.057 79.9919 224.057 79.9919C224.057 79.9919 238.546 75.6125 237.302 73.1066C236.058 70.6007 238.358 65.6866 238.358 65.6866C238.358 65.6866 238.284 65.6627 238.148 65.6193Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M202.644 131.284C202.441 131.284 202.238 131.256 202.042 131.2L198.582 130.226C198.029 130.07 197.562 129.705 197.283 129.213C197.003 128.72 196.933 128.138 197.089 127.596L204.231 102.874L214.19 78.9055C215.181 76.5227 217.25 74.96 219.59 74.8274C220.659 74.7762 221.72 75.0299 222.645 75.5579C223.57 76.0859 224.318 76.8655 224.8 77.8021C225.336 78.8047 225.63 79.9142 225.66 81.0456C225.69 82.177 225.455 83.3 224.973 84.3284L213.653 108.598L204.653 129.965C204.489 130.355 204.211 130.688 203.853 130.923C203.496 131.158 203.075 131.284 202.644 131.284Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M238.016 65.8597L231.419 65.9747C230.732 65.9879 230.051 65.8427 229.431 65.5507C228.812 65.2587 228.271 64.8281 227.853 64.2936C227.434 63.7591 227.15 63.1357 227.022 62.4736C226.895 61.8115 226.928 61.1293 227.118 60.482C227.259 60.0142 227.365 59.537 227.435 59.0542C227.509 58.5276 227.524 57.9946 227.479 57.4648C227.437 56.9344 227.212 56.4336 226.842 56.0446C226.472 55.6556 225.978 55.4015 225.441 55.3239C224.904 55.2463 224.356 55.3499 223.887 55.6176C223.418 55.8853 223.056 56.3013 222.86 56.7974C221.751 56.8129 219.388 56.4583 218.278 56.4738C215.923 50.5546 221.055 42.809 226.58 39.8997C232.213 36.9339 239.524 39.9513 241.683 46.1327C244.679 46.1855 247.114 49.0827 247.5 52.3441C247.886 55.6055 246.517 59.0111 244.424 61.5107C242.33 64.0104 239.581 65.8324 238.016 65.8597Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M216.331 213.498C215.797 213.496 215.282 213.301 214.884 212.95C214.487 212.6 214.234 212.119 214.174 211.598L211.727 130.919L242.562 133.071L242.586 133.265C249.554 190.451 247.172 210.246 247.147 210.439C247.13 210.732 247.052 211.018 246.917 211.279C246.782 211.541 246.593 211.772 246.363 211.959C246.133 212.146 245.866 212.284 245.579 212.366C245.291 212.447 244.99 212.469 244.694 212.431L237.879 212.591C237.363 212.534 236.884 212.297 236.53 211.923C236.176 211.55 235.971 211.065 235.951 210.555L229.584 152.12C229.544 151.968 229.452 151.835 229.322 151.743C229.193 151.652 229.034 151.608 228.875 151.62C228.711 151.619 228.552 151.674 228.425 151.776C228.298 151.878 228.211 152.02 228.179 152.177L225.719 210.804C225.745 211.348 225.557 211.881 225.194 212.293C224.83 212.705 224.319 212.965 223.766 213.017L216.547 213.488C216.475 213.495 216.403 213.499 216.331 213.498Z'\n            fill='var(--center-channel-color)'\n        />\n        <path\n            d='M229.126 140.559C228.942 140.559 228.758 140.556 228.573 140.551C219.706 140.289 212.769 133.712 210.855 131.703C210.611 131.447 210.435 131.135 210.344 130.796C210.253 130.458 210.249 130.102 210.332 129.761L215.447 108.546L214.09 90.1022C213.877 87.5425 214.219 84.9675 215.095 82.5469C215.97 80.1262 217.358 77.9148 219.168 76.0582C220.677 74.4961 222.51 73.2701 224.544 72.4633C226.578 71.6566 228.765 71.2881 230.957 71.3826C239.589 71.7864 246.398 79.35 246.46 88.6016C246.555 102.931 246.125 103.915 245.983 104.239C241.676 114.095 244.028 127.93 244.852 131.936C244.926 132.293 244.905 132.663 244.792 133.01C244.679 133.357 244.477 133.671 244.206 133.92C239.468 138.327 234.397 140.559 229.126 140.559Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            d='M251.394 135.166C250.902 135.166 250.424 135.002 250.04 134.701C249.655 134.4 249.386 133.981 249.276 133.51L243.999 110.972L236.926 85.2103C236.624 84.1179 236.582 82.9723 236.802 81.8613C237.022 80.7503 237.499 79.7036 238.196 78.8016C238.83 77.9563 239.7 77.3091 240.7 76.9381C241.701 76.5672 242.79 76.4885 243.836 76.7115C246.122 77.2215 247.899 79.0978 248.474 81.6084L254.253 106.835L257.136 132.399C257.198 132.96 257.031 133.522 256.672 133.963C256.313 134.403 255.791 134.687 255.22 134.752L251.643 135.152C251.56 135.162 251.477 135.166 251.394 135.166Z'\n            fill='var(--button-bg)'\n        />\n        <path\n            opacity='0.12'\n            d='M239.5 221.25C267.114 221.25 289.5 220.355 289.5 219.25C289.5 218.145 267.114 217.25 239.5 217.25C211.886 217.25 189.5 218.145 189.5 219.25C189.5 220.355 211.886 221.25 239.5 221.25Z'\n            fill='var(--center-channel-color)'\n        />\n    </svg>\n);\n\nexport default PermissionsSVG;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {t} from 'utils/i18n';\n\nimport FeatureDiscovery from '../index';\n\nimport PermissionsSVG from './images/permissions_svg';\n\nconst PermissionsFeatureDiscovery: React.FC = () => {\n    return (\n        <FeatureDiscovery\n            featureName='permissions'\n            titleID='admin.permissions_feature_discovery.title'\n            titleDefault='Set role-based permissions with MatterFOSS'\n            copyID='admin.permissions_feature_discovery.copy'\n            copyDefault={'Decide who can perform an array of actions such as creating channels, inviting people, managing and archiving channels, managing webhooks, and more in Permission Schemes.'}\n            learnMoreURL='https://docs.mattermost.com/deployment/advanced-permissions.html'\n            featureDiscoveryImage={<PermissionsSVG/>}\n        />\n    );\n};\n\nt('admin.permissions_feature_discovery.title');\nt('admin.permissions_feature_discovery.copy');\n\nexport default PermissionsFeatureDiscovery;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst SECTION_NONE = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNone'\n                defaultMessage='None'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNoneDescription'\n                defaultMessage='MatterFOSS will connect over an insecure connection.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_TLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTls'\n                defaultMessage='TLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTlsDescription'\n                defaultMessage='Encrypts the communication between MatterFOSS and your server.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_STARTTLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStart'\n                defaultMessage='STARTTLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStartDescription'\n                defaultMessage='Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS.'\n            />\n        </td>\n    </tr>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_EMAIL = (\n    <table\n        className='table table-bordered'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_LDAP = (\n    <table\n        className='table table-bordered'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = (\n    <table\n        className='table table-bordered'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n        </tbody>\n    </table>\n);\n\nexport const WEBSERVER_MODE_HELP_TEXT = (\n    <div>\n        <table\n            className='table table-bordered'\n            cellPadding='5'\n        >\n            <tbody>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzip'\n                            defaultMessage='gzip'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzipDescription'\n                            defaultMessage='The MatterFOSS server will serve static files compressed with gzip.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressed'\n                            defaultMessage='Uncompressed'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressedDescription'\n                            defaultMessage='The MatterFOSS server will serve static files uncompressed.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabled'\n                            defaultMessage='Disabled'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabledDescription'\n                            defaultMessage='The MatterFOSS server will not serve static files.'\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <p className='help-text'>\n            <FormattedMessage\n                id='admin.webserverModeHelpText'\n                defaultMessage='gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly.'\n            />\n        </p>\n    </div>\n);\n\nexport const LOG_LEVEL_OPTIONS = [\n    {\n        value: 'DEBUG',\n        display_name: 'DEBUG',\n        display_name_default: 'DEBUG',\n    },\n    {\n        value: 'INFO',\n        display_name: 'INFO',\n        display_name_default: 'INFO',\n    },\n    {\n        value: 'ERROR',\n        display_name: 'ERROR',\n        display_name_default: 'ERROR',\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {RESOURCE_KEYS} from 'matterfoss-redux/constants/permissions_sysconsole';\n\nimport {Constants} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n';\nimport {\n    ldapTest, invalidateAllCaches, reloadConfig, testS3Connection,\n    removeIdpSamlCertificate, uploadIdpSamlCertificate,\n    removePrivateSamlCertificate, uploadPrivateSamlCertificate,\n    removePublicSamlCertificate, uploadPublicSamlCertificate,\n    removePrivateLdapCertificate, uploadPrivateLdapCertificate,\n    removePublicLdapCertificate, uploadPublicLdapCertificate,\n    invalidateAllEmailInvites, testSmtp, testSiteURL, getSamlMetadataFromIdp, setSamlIdpCertificateFromMetadata,\n} from 'actions/admin_actions';\nimport SystemAnalytics from 'components/analytics/system_analytics';\nimport TeamAnalytics from 'components/analytics/team_analytics';\nimport PluginManagement from 'components/admin_console/plugin_management';\nimport CustomPluginSettings from 'components/admin_console/custom_plugin_settings';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport OpenIdConvert from './openid_convert';\nimport Audits from './audits';\nimport CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';\nimport CustomEnableDisableGuestAccountsSetting from './custom_enable_disable_guest_accounts_setting';\nimport LicenseSettings from './license_settings';\nimport PermissionSchemesSettings from './permission_schemes_settings';\nimport PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';\nimport PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';\nimport SystemRoles from './system_roles';\nimport SystemRole from './system_roles/system_role';\nimport SystemUsers from './system_users';\nimport SystemUserDetail from './system_user_detail';\nimport ServerLogs from './server_logs';\nimport BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';\nimport GroupSettings from './group_settings/group_settings.jsx';\nimport GroupDetails from './group_settings/group_details';\nimport TeamSettings from './team_channel_settings/team';\nimport TeamDetails from './team_channel_settings/team/details';\nimport ChannelSettings from './team_channel_settings/channel';\nimport ChannelDetails from './team_channel_settings/channel/details';\nimport PasswordSettings from './password_settings.jsx';\nimport PushNotificationsSettings from './push_settings.jsx';\nimport DataRetentionSettingsOld from './data_retention_settings.jsx';\nimport DataRetentionSettings from './data_retention_settings/index.ts';\nimport GlobalDataRetentionForm from './data_retention_settings/global_policy_form';\nimport CustomDataRetentionForm from './data_retention_settings/custom_policy_form';\nimport MessageExportSettings from './message_export_settings.jsx';\nimport DatabaseSettings from './database_settings.jsx';\nimport ElasticSearchSettings from './elasticsearch_settings.jsx';\nimport BleveSettings from './bleve_settings.jsx';\nimport FeatureFlags from './feature_flags.tsx';\nimport ClusterSettings from './cluster_settings.jsx';\nimport CustomTermsOfServiceSettings from './custom_terms_of_service_settings';\nimport SessionLengthSettings from './session_length_settings';\nimport BillingSubscriptions from './billing/billing_subscriptions/index.tsx';\nimport BillingHistory from './billing/billing_history';\nimport CompanyInfo from './billing/company_info';\nimport PaymentInfo from './billing/payment_info';\nimport CompanyInfoEdit from './billing/company_info_edit';\nimport PaymentInfoEdit from './billing/payment_info_edit';\nimport {\n    LDAPFeatureDiscovery,\n    SAMLFeatureDiscovery,\n    OpenIDFeatureDiscovery,\n    AnnouncementBannerFeatureDiscovery,\n    ChannelsFeatureDiscovery,\n    ComplianceExportFeatureDiscovery,\n    CustomTermsOfServiceFeatureDiscovery,\n    DataRetentionFeatureDiscovery,\n    GuestAccessFeatureDiscovery,\n    SystemRolesFeatureDiscovery,\n    GroupsFeatureDiscovery,\n    PermissionsFeatureDiscovery,\n} from './feature_discovery/features';\n\nimport * as DefinitionConstants from './admin_definition_constants';\n\nconst FILE_STORAGE_DRIVER_LOCAL = 'local';\nconst FILE_STORAGE_DRIVER_S3 = 'amazons3';\nconst MEBIBYTE = Math.pow(1024, 2);\n\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1 = 'RSAwithSHA1';\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256 = 'RSAwithSHA256';\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512 = 'RSAwithSHA512';\n\nconst SAML_SETTINGS_CANONICAL_ALGORITHM_C14N = 'Canonical1.0';\nconst SAML_SETTINGS_CANONICAL_ALGORITHM_C14N11 = 'Canonical1.1';\n\n// admin_definitions data structure define the autogenerated admin_console\n// section. It defines the structure of the menu based on sections, subsections\n// and pages. Each page contains an schema which defines a component to use for\n// render the entire section or the name of the section (name and\n// name_default), the section in the config file (id), and a list of options to\n// configure (settings).\n//\n// All text fields contains a translation key, and the <field>_default string are the\n// default text when the translation is still not avaiable (the english version\n// of the text).\n//\n// We can define different types of settings configuration widgets:\n//\n// Widget:\n//   - type: which define the widget type.\n//   - label (and label_default): which define the main text of the setting.\n//   - isDisabled: a function which receive current config, the state of the page and the license.\n//   - isHidden: a function which receive current config, the state of the page and the license.\n//\n// Custom Widget (extends from Widget):\n//   - component: The component used to render the widget\n//\n// JobsTable Widget (extends from Widget):\n//   - job_type: The kind of job from Constants.JobTypes\n//   - render_job: Function to convert a job object into a react component.\n//\n// Banner Widget (extends from Widget):\n//   - banner_type: The type of banner (options: info or warning)\n//\n// Setting Widget (extends from Widget):\n//   - key: The key to store the configuration in the config file.\n//   - help_text (and help_text_default): Long description of the field.\n//   - help_text_markdown: True if the translation text contains markdown.\n//   - help_text_values: Values to fill the translation (if needed).\n//\n// Bool Widget (extends from Setting Widget)\n//\n// Number Widget (extends from Setting Widget)\n//\n// Color Widget (extends from Setting Widget)\n//\n// Text Widget (extends from Setting Widget)\n//   - placeholder (and placeholder_default): Placeholder text to show in the input.\n//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.\n//   - default_value: function that generate the default value of the field based on the config, the state and the license.\n//   - max_length: The maximun length allowed\n//\n// Button Widget (extends from Setting Widget)\n//   - action: A redux action to execute on click.\n//   - error_message (and error_message_default): Error to show if action doesn't work.\n//   - success_message (and success_message_default): Success message to show if action doesn't work.\n//\n// Language Widget (extends from Setting Widget)\n//   - multiple: If you can select multiple languages.\n//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).\n//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).\n//\n// Dropdown Widget (extends from Setting Widget)\n//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).\n//\n// Permissions Flag (extends from Setting Widget)\n//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.\n//\n// FileUpload (extends from Setting Widget)\n//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.\n//   - remove_help_text_markdown: True if the translation text contains markdown.\n//   - remove_help_text_values: Values to fill the translation (if needed).\n//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.\n//   - removing_text (and removing_text_default): Text shown while the system is removing the file.\n//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.\n//   - upload_action: An store action to upload the file.\n//   - remove_action: An store action to remove the file.\n//   - fileType: A list of extensions separated by \",\". E.g. \".jpg,.png,.gif\".\n\nexport const it = {\n    not: (func) => (config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) => {\n        return typeof func === 'function' ? !func(config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) : !func;\n    },\n    all: (...funcs) => (config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) => {\n        for (const func of funcs) {\n            if (typeof func === 'function' ? !func(config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) : !func) {\n                return false;\n            }\n        }\n        return true;\n    },\n    any: (...funcs) => (config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) => {\n        for (const func of funcs) {\n            if (typeof func === 'function' ? func(config, state, license, enterpriseReady, consoleAccess, cloud, isSystemAdmin) : func) {\n                return true;\n            }\n        }\n        return false;\n    },\n    stateMatches: (key, regex) => (config, state) => state[key].match(regex),\n    stateEquals: (key, value) => (config, state) => state[key] === value,\n    stateIsTrue: (key) => (config, state) => Boolean(state[key]),\n    stateIsFalse: (key) => (config, state) => !state[key],\n    configIsTrue: (group, setting) => (config) => Boolean(config[group][setting]),\n    configIsFalse: (group, setting) => (config) => !config[group][setting],\n    configContains: (group, setting, word) => (config) => Boolean(config[group][setting]?.includes(word)),\n    enterpriseReady: (config, state, license, enterpriseReady) => enterpriseReady,\n    licensed: (config, state, license) => license.IsLicensed === 'true',\n    licensedForFeature: (feature) => (config, state, license) => license.IsLicensed && license[feature] === 'true',\n    hidePaymentInfo: (config, state, license, enterpriseReady, consoleAccess, cloud) => {\n        return cloud?.subscription?.is_paid_tier !== 'true' || cloud?.subscription?.is_free_trial === 'true';\n    },\n    userHasReadPermissionOnResource: (key) => (config, state, license, enterpriseReady, consoleAccess) => consoleAccess?.read?.[key],\n    userHasReadPermissionOnSomeResources: (key) => Object.values(key).some((resource) => it.userHasReadPermissionOnResource(resource)),\n    userHasWritePermissionOnResource: (key) => (config, state, license, enterpriseReady, consoleAccess) => consoleAccess?.write?.[key],\n    isSystemAdmin: (config, state, license, enterpriseReady, consoleAccess, icloud, isSystemAdmin) => isSystemAdmin,\n};\n\nconst usesLegacyOauth = (config, state, license, enterpriseReady, consoleAccess, cloud) => {\n    if (!config.GitLabSettings || !config.GoogleSettings || !config.Office365Settings) {\n        return false;\n    }\n\n    return it.any(\n        it.all(\n            it.not(it.configContains('GitLabSettings', 'Scope', 'openid')),\n            it.any(\n                it.configIsTrue('GitLabSettings', 'Id'),\n                it.configIsTrue('GitLabSettings', 'Secret'),\n            ),\n        ),\n        it.all(\n            it.not(it.configContains('GoogleSettings', 'Scope', 'openid')),\n            it.any(\n                it.configIsTrue('GoogleSettings', 'Id'),\n                it.configIsTrue('GoogleSettings', 'Secret'),\n            ),\n        ),\n        it.all(\n            it.not(it.configContains('Office365Settings', 'Scope', 'openid')),\n            it.any(\n                it.configIsTrue('Office365Settings', 'Id'),\n                it.configIsTrue('Office365Settings', 'Secret'),\n            ),\n        ),\n    )(config, state, license, enterpriseReady, consoleAccess, cloud);\n};\n\nconst AdminDefinition = {\n    about: {\n        icon: 'fa-info-circle',\n        sectionTitle: t('admin.sidebar.about'),\n        sectionTitleDefault: 'About',\n        isHidden: it.any(\n            it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.ABOUT)),\n        ),\n        license: {\n            url: 'about/license',\n            title: t('admin.sidebar.license'),\n            title_default: 'Edition and License',\n            searchableStrings: [\n                'admin.license.title',\n                'admin.license.uploadDesc',\n                'admin.license.keyRemove',\n                'admin.license.edition',\n                'admin.license.type',\n                'admin.license.key',\n                'MatterFOSS. Unlock enterprise features in this software through the purchase of a subscription from ',\n                'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.',\n            ],\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n            schema: {\n                id: 'LicenseSettings',\n                component: LicenseSettings,\n            },\n        },\n    },\n    billing: {\n        icon: 'fa-credit-card', // TODO: Need compass icon\n        sectionTitle: t('admin.sidebar.billing'),\n        sectionTitleDefault: 'Billing & Account',\n        isHidden: it.any(\n            it.not(it.licensedForFeature('Cloud')),\n            it.configIsFalse('ExperimentalSettings', 'CloudBilling'),\n            it.not(it.userHasReadPermissionOnResource('billing')),\n        ),\n        subscription: {\n            url: 'billing/subscription',\n            title: t('admin.sidebar.subscription'),\n            title_default: 'Subscription',\n            searchableStrings: [\n                'admin.billing.subscription.title',\n            ],\n            schema: {\n                id: 'BillingSubscriptions',\n                component: BillingSubscriptions,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n        billing_history: {\n            url: 'billing/billing_history',\n            title: t('admin.sidebar.billing_history'),\n            title_default: 'Billing History',\n            searchableStrings: [\n                'admin.billing.history.title',\n            ],\n            schema: {\n                id: 'BillingHistory',\n                component: BillingHistory,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n        company_info: {\n            url: 'billing/company_info',\n            title: t('admin.sidebar.company_info'),\n            title_default: 'Company Information',\n            searchableStrings: [\n                'admin.billing.company_info.title',\n            ],\n            schema: {\n                id: 'CompanyInfo',\n                component: CompanyInfo,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n        company_info_edit: {\n            url: 'billing/company_info_edit',\n            schema: {\n                id: 'CompanyInfoEdit',\n                component: CompanyInfoEdit,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n        payment_info: {\n            url: 'billing/payment_info',\n            title: t('admin.sidebar.payment_info'),\n            title_default: 'Payment Information',\n            isHidden: it.hidePaymentInfo,\n            searchableStrings: [\n                'admin.billing.payment_info.title',\n            ],\n            schema: {\n                id: 'PaymentInfo',\n                component: PaymentInfo,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n        payment_info_edit: {\n            url: 'billing/payment_info_edit',\n            schema: {\n                id: 'PaymentInfoEdit',\n                component: PaymentInfoEdit,\n            },\n            isDisabled: it.not(it.userHasWritePermissionOnResource('billing')),\n        },\n    },\n    reporting: {\n        icon: 'fa-bar-chart',\n        sectionTitle: t('admin.sidebar.reporting'),\n        sectionTitleDefault: 'Reporting',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.REPORTING)),\n        system_analytics: {\n            url: 'reporting/system_analytics',\n            title: t('admin.sidebar.siteStatistics'),\n            title_default: 'Site Statistics',\n            searchableStrings: [\n                'analytics.system.title',\n                'analytics.system.totalPosts',\n                'analytics.system.activeUsers',\n                'analytics.system.totalSessions',\n                'analytics.system.totalCommands',\n                'analytics.system.totalIncomingWebhooks',\n                'analytics.system.totalOutgoingWebhooks',\n                'analytics.system.totalWebsockets',\n                'analytics.system.totalMasterDbConnections',\n                'analytics.system.totalReadDbConnections',\n                'analytics.system.postTypes',\n                'analytics.system.channelTypes',\n                'analytics.system.totalUsers',\n                'analytics.system.totalTeams',\n                'analytics.system.totalChannels',\n                'analytics.system.dailyActiveUsers',\n                'analytics.system.monthlyActiveUsers',\n            ],\n            schema: {\n                id: 'SystemAnalytics',\n                component: SystemAnalytics,\n            },\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.REPORTING.SITE_STATISTICS)),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.REPORTING.SITE_STATISTICS)),\n        },\n        team_statistics: {\n            url: 'reporting/team_statistics',\n            title: t('admin.sidebar.teamStatistics'),\n            title_default: 'Team Statistics',\n            searchableStrings: [\n                ['analytics.team.title', {team: ''}],\n                'analytics.system.info',\n                'analytics.team.totalPosts',\n                'analytics.team.activeUsers',\n                'analytics.team.totalUsers',\n                'analytics.team.publicChannels',\n                'analytics.team.privateGroups',\n                'analytics.team.recentUsers',\n                'analytics.team.newlyCreated',\n            ],\n            schema: {\n                id: 'TeamAnalytics',\n                component: TeamAnalytics,\n            },\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.REPORTING.TEAM_STATISTICS)),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.REPORTING.TEAM_STATISTICS)),\n        },\n        server_logs: {\n            url: 'reporting/server_logs',\n            title: t('admin.sidebar.logs'),\n            title_default: 'Server Logs',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.REPORTING.SERVER_LOGS)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.REPORTING.SERVER_LOGS)),\n            searchableStrings: [\n                'admin.logs.bannerDesc',\n                'admin.logs.title',\n            ],\n            schema: {\n                id: 'ServerLogs',\n                component: ServerLogs,\n            },\n        },\n    },\n    user_management: {\n        icon: 'fa-users',\n        sectionTitle: t('admin.sidebar.userManagement'),\n        sectionTitleDefault: 'User Management',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.USER_MANAGEMENT)),\n        system_users: {\n            url: 'user_management/users',\n            title: t('admin.sidebar.users'),\n            title_default: 'Users',\n            searchableStrings: [\n                ['admin.system_users.title', {siteName: ''}],\n            ],\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.USERS)),\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.USERS)),\n            schema: {\n                id: 'SystemUsers',\n                component: SystemUsers,\n            },\n        },\n        system_user_detail: {\n            url: 'user_management/user/:user_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.USERS)),\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.USERS)),\n            schema: {\n                id: 'SystemUserDetail',\n                component: SystemUserDetail,\n            },\n        },\n        group_detail: {\n            url: 'user_management/groups/:group_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.GROUPS)),\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.GROUPS)),\n            schema: {\n                id: 'GroupDetail',\n                component: GroupDetails,\n            },\n        },\n        groups: {\n            url: 'user_management/groups',\n            title: t('admin.sidebar.groups'),\n            title_default: 'Groups',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('LDAPGroups')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.GROUPS)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.GROUPS)),\n            schema: {\n                id: 'Groups',\n                component: GroupSettings,\n            },\n        },\n        groups_feature_discovery: {\n            url: 'user_management/groups',\n            isDiscovery: true,\n            title: t('admin.sidebar.groups'),\n            title_default: 'Groups',\n            isHidden: it.any(\n                it.licensedForFeature('LDAPGroups'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'Groups',\n                name: t('admin.group_settings.groupsPageTitle'),\n                name_default: 'Groups',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: GroupsFeatureDiscovery,\n                        key: 'GroupsFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        team_detail: {\n            url: 'user_management/teams/:team_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.TEAMS)),\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.TEAMS)),\n            schema: {\n                id: 'TeamDetail',\n                component: TeamDetails,\n            },\n        },\n        teams: {\n            url: 'user_management/teams',\n            title: t('admin.sidebar.teams'),\n            title_default: 'Teams',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('LDAPGroups')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.TEAMS)),\n            ),\n            schema: {\n                id: 'Teams',\n                component: TeamSettings,\n            },\n        },\n        channel_detail: {\n            url: 'user_management/channels/:channel_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.CHANNELS)),\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.CHANNELS)),\n            schema: {\n                id: 'ChannelDetail',\n                component: ChannelDetails,\n            },\n        },\n        channel: {\n            url: 'user_management/channels',\n            title: t('admin.sidebar.channels'),\n            title_default: 'Channels',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('LDAPGroups')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.CHANNELS)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.CHANNELS)),\n            schema: {\n                id: 'Channels',\n                component: ChannelSettings,\n            },\n        },\n        channels_feature_discovery: {\n            url: 'user_management/channels',\n            isDiscovery: true,\n            title: t('admin.sidebar.channels'),\n            title_default: 'Channels',\n            isHidden: it.any(\n                it.licensedForFeature('LDAPGroups'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'Channels',\n                name: t('admin.channel_settings.title'),\n                name_default: 'Channels',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: ChannelsFeatureDiscovery,\n                        key: 'ChannelsFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        systemScheme: {\n            url: 'user_management/permissions/system_scheme',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS)),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionSystemSchemeSettings,\n            },\n        },\n        teamSchemeDetail: {\n            url: 'user_management/permissions/team_override_scheme/:scheme_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS)),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionTeamSchemeSettings,\n            },\n        },\n        teamScheme: {\n            url: 'user_management/permissions/team_override_scheme',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS)),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionTeamSchemeSettings,\n            },\n        },\n        permissions: {\n            url: 'user_management/permissions/',\n            title: t('admin.sidebar.permissions'),\n            title_default: 'Permissions',\n            searchableStrings: [\n                'admin.permissions.documentationLinkText',\n                'admin.permissions.teamOverrideSchemesNoSchemes',\n                'admin.permissions.loadMoreSchemes',\n                'admin.permissions.introBanner',\n                'admin.permissions.systemSchemeBannerTitle',\n                'admin.permissions.systemSchemeBannerText',\n                'admin.permissions.systemSchemeBannerButton',\n                'admin.permissions.teamOverrideSchemesTitle',\n                'admin.permissions.teamOverrideSchemesBannerText',\n                'admin.permissions.teamOverrideSchemesNewButton',\n            ],\n            isHidden: it.any(\n                it.not(it.licensed),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.PERMISSIONS)),\n            schema: {\n                id: 'PermissionSchemes',\n                component: PermissionSchemesSettings,\n            },\n        },\n        permissions_feature_discovery: {\n            url: 'user_management/permissions/',\n            isDiscovery: true,\n            title: t('admin.sidebar.permissions'),\n            title_default: 'Permissions',\n            isHidden: it.any(\n                it.licensed,\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'PermissionSchemes',\n                name: t('admin.permissions.permissionSchemes'),\n                name_default: 'Permission Schemes',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: PermissionsFeatureDiscovery,\n                        key: 'PermissionsFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        system_role: {\n            url: 'user_management/system_roles/:role_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.SYSTEM_ROLES)),\n            schema: {\n                id: 'SystemRole',\n                component: SystemRole,\n            },\n        },\n        system_roles: {\n            url: 'user_management/system_roles',\n            title: t('admin.sidebar.systemRoles'),\n            title_default: 'System Roles (Beta)',\n            searchableStrings: [],\n            isHidden: it.any(\n                it.not(it.licensedForFeature('LDAPGroups')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.SYSTEM_ROLES)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.USER_MANAGEMENT.SYSTEM_ROLES)),\n            schema: {\n                id: 'SystemRoles',\n                component: SystemRoles,\n            },\n        },\n        system_roles_feature_discovery: {\n            url: 'user_management/system_roles',\n            isDiscovery: true,\n            title: t('admin.sidebar.systemRoles'),\n            title_default: 'System Roles (Beta)',\n            isHidden: it.any(\n                it.licensedForFeature('LDAPGroups'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'SystemRoles',\n                name: t('admin.permissions.systemRoles'),\n                name_default: 'System Roles (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: SystemRolesFeatureDiscovery,\n                        key: 'SystemRolesFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n    },\n    environment: {\n        icon: 'fa-server',\n        sectionTitle: t('admin.sidebar.environment'),\n        sectionTitleDefault: 'Environment',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.ENVIRONMENT)),\n        web_server: {\n            url: 'environment/web_server',\n            title: t('admin.sidebar.webServer'),\n            title_default: 'Web Server',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n            ),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.environment.webServer'),\n                name_default: 'Web Server',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.rate.noteDescription'),\n                        label_default: 'Changing properties in this section will require a server restart before taking effect.',\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.SiteURL',\n                        label: t('admin.service.siteURL'),\n                        label_default: 'Site URL:',\n                        help_text: t('admin.service.siteURLDescription'),\n                        help_text_default: 'The URL that users will use to access MatterFOSS. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\\n \\nMatterFOSS may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.service.siteURLExample'),\n                        placeholder_default: 'E.g.: \"http://example.com:8065\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'TestSiteURL',\n                        action: testSiteURL,\n                        label: t('admin.service.testSiteURL'),\n                        label_default: 'Test Live URL',\n                        loading: t('admin.service.testSiteURLTesting'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.service.testSiteURLFail'),\n                        error_message_default: 'Test unsuccessful: {error}',\n                        success_message: t('admin.service.testSiteURLSuccess'),\n                        success_message_default: 'Test successful. This is a valid URL.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.ListenAddress',\n                        label: t('admin.service.listenAddress'),\n                        label_default: 'Listen Address:',\n                        placeholder: t('admin.service.listenExample'),\n                        placeholder_default: 'E.g.: \":8065\"',\n                        help_text: t('admin.service.listenDescription'),\n                        help_text_default: 'The address and port to which to bind and listen. Specifying \":8065\" will bind to all network interfaces. Specifying \"127.0.0.1:8065\" will only bind to the network interface having that IP address. If you choose a port of a lower level (called \"system ports\" or \"well-known ports\", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: \"sudo setcap cap_net_bind_service=+ep ./bin/mattermost\" to allow MatterFOSS to bind to well-known ports.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.Forward80To443',\n                        label: t('admin.service.forward80To443'),\n                        label_default: 'Forward port 80 to 443:',\n                        help_text: t('admin.service.forward80To443Description'),\n                        help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',\n                        disabled_help_text: t('admin.service.forward80To443Description.disabled'),\n                        disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\\n \\nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',\n                        disabled_help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                            it.not(it.stateMatches('ServiceSettings.ListenAddress', /:443$/)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ServiceSettings.ConnectionSecurity',\n                        label: t('admin.connectionSecurityTitle'),\n                        label_default: 'Connection Security:',\n                        help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,\n                        options: [\n                            {\n                                value: '',\n                                display_name: t('admin.connectionSecurityNone'),\n                                display_name_default: 'None',\n                            },\n                            {\n                                value: 'TLS',\n                                display_name: t('admin.connectionSecurityTls'),\n                                display_name_default: 'TLS (Recommended)',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.TLSCertFile',\n                        label: t('admin.service.tlsCertFile'),\n                        label_default: 'TLS Certificate File:',\n                        help_text: t('admin.service.tlsCertFileDescription'),\n                        help_text_default: 'The certificate file to use.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                            it.stateIsTrue('ServiceSettings.UseLetsEncrypt'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.TLSKeyFile',\n                        label: t('admin.service.tlsKeyFile'),\n                        label_default: 'TLS Key File:',\n                        help_text: t('admin.service.tlsKeyFileDescription'),\n                        help_text_default: 'The private key file to use.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                            it.stateIsTrue('ServiceSettings.UseLetsEncrypt'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.UseLetsEncrypt',\n                        label: t('admin.service.useLetsEncrypt'),\n                        label_default: 'Use Let\\'s Encrypt:',\n                        help_text: t('admin.service.useLetsEncryptDescription'),\n                        help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',\n                        disabled_help_text: t('admin.service.useLetsEncryptDescription.disabled'),\n                        disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\\n \\nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',\n                        disabled_help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                            it.stateIsFalse('ServiceSettings.Forward80To443'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.LetsEncryptCertificateCacheFile',\n                        label: t('admin.service.letsEncryptCertificateCacheFile'),\n                        label_default: 'Let\\'s Encrypt Certificate Cache File:',\n                        help_text: t('admin.service.letsEncryptCertificateCacheFileDescription'),\n                        help_text_default: 'Certificates retrieved and other data about the Let\\'s Encrypt service will be stored in this file.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                            it.stateIsFalse('ServiceSettings.UseLetsEncrypt'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.ReadTimeout',\n                        label: t('admin.service.readTimeout'),\n                        label_default: 'Read Timeout:',\n                        help_text: t('admin.service.readTimeoutDescription'),\n                        help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.WriteTimeout',\n                        label: t('admin.service.writeTimeout'),\n                        label_default: 'Write Timeout:',\n                        help_text: t('admin.service.writeTimeoutDescription'),\n                        help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ServiceSettings.WebserverMode',\n                        label: t('admin.webserverModeTitle'),\n                        label_default: 'Webserver Mode:',\n                        help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,\n                        options: [\n                            {\n                                value: 'gzip',\n                                display_name: t('admin.webserverModeGzip'),\n                                display_name_default: 'gzip',\n                            },\n                            {\n                                value: 'uncompressed',\n                                display_name: t('admin.webserverModeUncompressed'),\n                                display_name_default: 'Uncompressed',\n                            },\n                            {\n                                value: 'disabled',\n                                display_name: t('admin.webserverModeDisabled'),\n                                display_name_default: 'Disabled',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableInsecureOutgoingConnections',\n                        label: t('admin.service.insecureTlsTitle'),\n                        label_default: 'Enable Insecure Outgoing Connections: ',\n                        help_text: t('admin.service.insecureTlsDesc'),\n                        help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.ManagedResourcePaths',\n                        label: t('admin.service.managedResourcePaths'),\n                        label_default: 'Managed Resource Paths:',\n                        help_text: t('admin.service.managedResourcePathsDescription'),\n                        help_text_default: 'A comma-separated list of paths on the MatterFOSS server that are managed by another service. See [here](!https://docs.mattermost.com/install/desktop-managed-resources.html) for more information.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: reloadConfig,\n                        key: 'ReloadConfigButton',\n                        label: t('admin.reload.button'),\n                        label_default: 'Reload Configuration From Disk',\n                        help_text: t('admin.reload.reloadDescription'),\n                        help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the MatterFOSS server by updating \"config.json\" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',\n                        help_text_values: {\n                            featureName: (\n                                <b>\n                                    <FormattedMessage\n                                        id='admin.reload.reloadDescription.featureName'\n                                        defaultMessage='Reload Configuration from Disk'\n                                    />\n                                </b>\n                            ),\n                            recycleDatabaseConnections: (\n                                <a href='../environment/database'>\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.reload.reloadDescription.recycleDatabaseConnections'\n                                            defaultMessage='Environment > Database > Recycle Database Connections'\n                                        />\n                                    </b>\n                                </a>\n                            ),\n                        },\n                        error_message: t('admin.reload.reloadFail'),\n                        error_message_default: 'Reload unsuccessful: {error}',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'PurgeButton',\n                        action: invalidateAllCaches,\n                        label: t('admin.purge.button'),\n                        label_default: 'Purge All Caches',\n                        help_text: t('admin.purge.purgeDescription'),\n                        help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',\n                        error_message: t('admin.purge.purgeFail'),\n                        error_message_default: 'Purging unsuccessful: {error}',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.WEB_SERVER)),\n                    },\n                ],\n            },\n        },\n        database: {\n            url: 'environment/database',\n            title: t('admin.sidebar.database'),\n            title_default: 'Database',\n            searchableStrings: [\n                'admin.database.title',\n                ['admin.recycle.recycleDescription', {featureName: '', reloadConfiguration: ''}],\n                'admin.recycle.recycleDescription.featureName',\n                'admin.recycle.recycleDescription.reloadConfiguration',\n                'admin.recycle.button',\n                'admin.sql.noteDescription',\n                'admin.sql.disableDatabaseSearchTitle',\n                'admin.sql.disableDatabaseSearchDescription',\n                'admin.sql.driverName',\n                'admin.sql.driverNameDescription',\n                'admin.sql.dataSource',\n                'admin.sql.dataSourceDescription',\n                'admin.sql.maxConnectionsTitle',\n                'admin.sql.maxConnectionsDescription',\n                'admin.sql.maxOpenTitle',\n                'admin.sql.maxOpenDescription',\n                'admin.sql.queryTimeoutTitle',\n                'admin.sql.queryTimeoutDescription',\n                'admin.sql.connMaxLifetimeTitle',\n                'admin.sql.connMaxLifetimeDescription',\n                'admin.sql.connMaxIdleTimeTitle',\n                'admin.sql.connMaxIdleTimeDescription',\n                'admin.sql.traceTitle',\n                'admin.sql.traceDescription',\n            ],\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DATABASE)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DATABASE)),\n            schema: {\n                id: 'DatabaseSettings',\n                component: DatabaseSettings,\n            },\n        },\n        elasticsearch: {\n            url: 'environment/elasticsearch',\n            title: t('admin.sidebar.elasticsearch'),\n            title_default: 'Elasticsearch',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('Elasticsearch')),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.ELASTICSEARCH)),\n            ),\n            searchableStrings: [\n                'admin.elasticsearch.title',\n                'admin.elasticsearch.enableIndexingTitle',\n                ['admin.elasticsearch.enableIndexingDescription', {documentationLink: ''}],\n                'admin.elasticsearch.enableIndexingDescription.documentationLinkText',\n                'admin.elasticsearch.connectionUrlTitle',\n                ['admin.elasticsearch.connectionUrlDescription', {documentationLink: ''}],\n                'admin.elasticsearch.connectionUrlExample.documentationLinkText',\n                'admin.elasticsearch.skipTLSVerificationTitle',\n                'admin.elasticsearch.skipTLSVerificationDescription',\n                'admin.elasticsearch.usernameTitle',\n                'admin.elasticsearch.usernameDescription',\n                'admin.elasticsearch.passwordTitle',\n                'admin.elasticsearch.passwordDescription',\n                'admin.elasticsearch.sniffTitle',\n                'admin.elasticsearch.sniffDescription',\n                'admin.elasticsearch.testHelpText',\n                'admin.elasticsearch.elasticsearch_test_button',\n                'admin.elasticsearch.bulkIndexingTitle',\n                'admin.elasticsearch.createJob.help',\n                'admin.elasticsearch.purgeIndexesHelpText',\n                'admin.elasticsearch.purgeIndexesButton',\n                'admin.elasticsearch.purgeIndexesButton.label',\n                'admin.elasticsearch.enableSearchingTitle',\n                'admin.elasticsearch.enableSearchingDescription',\n            ],\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.ELASTICSEARCH)),\n            schema: {\n                id: 'ElasticSearchSettings',\n                component: ElasticSearchSettings,\n            },\n        },\n        storage: {\n            url: 'environment/file_storage',\n            title: t('admin.sidebar.fileStorage'),\n            title_default: 'File Storage',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n            ),\n            schema: {\n                id: 'FileSettings',\n                name: t('admin.environment.fileStorage'),\n                name_default: 'File Storage',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'FileSettings.DriverName',\n                        label: t('admin.image.storeTitle'),\n                        label_default: 'File Storage System:',\n                        help_text: t('admin.image.storeDescription'),\n                        help_text_default: 'Storage system where files and image attachments are saved.\\n \\nSelecting \"Amazon S3\" enables fields to enter your Amazon credentials and bucket details.\\n \\nSelecting \"Local File System\" enables the field to specify a local file directory.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: FILE_STORAGE_DRIVER_LOCAL,\n                                display_name: t('admin.image.storeLocal'),\n                                display_name_default: 'Local File System',\n                            },\n                            {\n                                value: FILE_STORAGE_DRIVER_S3,\n                                display_name: t('admin.image.storeAmazonS3'),\n                                display_name_default: 'Amazon S3',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.Directory',\n                        label: t('admin.image.localTitle'),\n                        label_default: 'Local Storage Directory:',\n                        help_text: t('admin.image.localDescription'),\n                        help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',\n                        placeholder: t('admin.image.localExample'),\n                        placeholder_default: 'E.g.: \"./data/\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'FileSettings.MaxFileSize',\n                        label: t('admin.image.maxFileSizeTitle'),\n                        label_default: 'Maximum File Size:',\n                        help_text: t('admin.image.maxFileSizeDescription'),\n                        help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',\n                        placeholder: t('admin.image.maxFileSizeExample'),\n                        placeholder_default: '50',\n                        onConfigLoad: (configVal) => configVal / MEBIBYTE,\n                        onConfigSave: (displayVal) => displayVal * MEBIBYTE,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.ExtractContent',\n                        label: t('admin.image.extractContentTitle'),\n                        label_default: 'Enable document search by content:',\n                        help_text: t('admin.image.extractContentDescription'),\n                        help_text_markdown: true,\n                        help_text_default: 'When enabled, supported document types are searchable by their content. Search results for existing documents may be incomplete [until a data migration is executed](!https://www.example.com/file-content-extraction).',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.ArchiveRecursion',\n                        label: t('admin.image.archiveRecursionTitle'),\n                        label_default: 'Enable searching content of documents within ZIP files:',\n                        help_text: t('admin.image.archiveRecursionDescription'),\n                        help_text_default: 'When enabled, content of documents within ZIP files will be returned in search results. This may have an impact on server performance for large files. ',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.configIsFalse('FileSettings', 'ExtractContent'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Bucket',\n                        label: t('admin.image.amazonS3BucketTitle'),\n                        label_default: 'Amazon S3 Bucket:',\n                        help_text: t('admin.image.amazonS3BucketDescription'),\n                        help_text_default: 'Name you selected for your S3 bucket in AWS.',\n                        placeholder: t('admin.image.amazonS3BucketExample'),\n                        placeholder_default: 'E.g.: \"mattermost-media\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3PathPrefix',\n                        label: t('admin.image.amazonS3PathPrefixTitle'),\n                        label_default: 'Amazon S3 Path Prefix:',\n                        help_text: t('admin.image.amazonS3PathPrefixDescription'),\n                        help_text_default: 'Prefix you selected for your S3 bucket in AWS.',\n                        placeholder: t('admin.image.amazonS3PathPrefixExample'),\n                        placeholder_default: 'E.g.: \"subdir1/\" or you can leave it .',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Region',\n                        label: t('admin.image.amazonS3RegionTitle'),\n                        label_default: 'Amazon S3 Region:',\n                        help_text: t('admin.image.amazonS3RegionDescription'),\n                        help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, MatterFOSS attempts to get the appropriate region from AWS, or sets it to \"us-east-1\" if none found.',\n                        placeholder: t('admin.image.amazonS3RegionExample'),\n                        placeholder_default: 'E.g.: \"us-east-1\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3AccessKeyId',\n                        label: t('admin.image.amazonS3IdTitle'),\n                        label_default: 'Amazon S3 Access Key ID:',\n                        help_text: t('admin.image.amazonS3IdDescription'),\n                        help_text_markdown: true,\n                        help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',\n                        placeholder: t('admin.image.amazonS3IdExample'),\n                        placeholder_default: 'E.g.: \"AKIADTOVBGERKLCBV\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Endpoint',\n                        label: t('admin.image.amazonS3EndpointTitle'),\n                        label_default: 'Amazon S3 Endpoint:',\n                        help_text: t('admin.image.amazonS3EndpointDescription'),\n                        help_text_default: 'Hostname of your S3 Compatible Storage provider. Defaults to \"s3.amazonaws.com\".',\n                        placeholder: t('admin.image.amazonS3EndpointExample'),\n                        placeholder_default: 'E.g.: \"s3.amazonaws.com\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3SecretAccessKey',\n                        label: t('admin.image.amazonS3SecretTitle'),\n                        label_default: 'Amazon S3 Secret Access Key:',\n                        help_text: t('admin.image.amazonS3SecretDescription'),\n                        help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',\n                        placeholder: t('admin.image.amazonS3SecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3SSL',\n                        label: t('admin.image.amazonS3SSLTitle'),\n                        label_default: 'Enable Secure Amazon S3 Connections:',\n                        help_text: t('admin.image.amazonS3SSLDescription'),\n                        help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3SSE',\n                        label: t('admin.image.amazonS3SSETitle'),\n                        label_default: 'Enable Server-Side Encryption for Amazon S3:',\n                        help_text: t('admin.image.amazonS3SSEDescription'),\n                        help_text_markdown: true,\n                        help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3Trace',\n                        label: t('admin.image.amazonS3TraceTitle'),\n                        label_default: 'Enable Amazon S3 Debugging:',\n                        help_text: t('admin.image.amazonS3TraceDescription'),\n                        help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                            it.not(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: testS3Connection,\n                        key: 'TestS3Connection',\n                        label: t('admin.s3.connectionS3Test'),\n                        label_default: 'Test Connection',\n                        loading: t('admin.s3.testing'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.s3.s3Fail'),\n                        error_message_default: 'Connection unsuccessful: {error}',\n                        success_message: t('admin.s3.s3Success'),\n                        success_message_default: 'Connection was successful',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.FILE_STORAGE)),\n                    },\n                ],\n            },\n        },\n        image_proxy: {\n            url: 'environment/image_proxy',\n            title: t('admin.sidebar.imageProxy'),\n            title_default: 'Image Proxy',\n            isHidden: it.any(\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY)),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            ),\n            schema: {\n                id: 'ImageProxy',\n                name: t('admin.environment.imageProxy'),\n                name_default: 'Image Proxy',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ImageProxySettings.Enable',\n                        label: t('admin.image.enableProxy'),\n                        label_default: 'Enable Image Proxy:',\n                        help_text: t('admin.image.enableProxyDescription'),\n                        help_text_default: 'When true, enables an image proxy for loading all Markdown images.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ImageProxySettings.ImageProxyType',\n                        label: t('admin.image.proxyType'),\n                        label_default: 'Image Proxy Type:',\n                        help_text: t('admin.image.proxyTypeDescription'),\n                        help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'atmos/camo',\n                                display_name: t('atmos/camo'),\n                                display_name_default: 'atmos/camo',\n                            },\n                            {\n                                value: 'local',\n                                display_name: t('local'),\n                                display_name_default: 'local',\n                            },\n                        ],\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY)),\n                            it.stateIsFalse('ImageProxySettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ImageProxySettings.RemoteImageProxyURL',\n                        label: t('admin.image.proxyURL'),\n                        label_default: 'Remote Image Proxy URL:',\n                        help_text: t('admin.image.proxyURLDescription'),\n                        help_text_default: 'URL of your remote image proxy server.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY)),\n                            it.stateIsFalse('ImageProxySettings.Enable'),\n                            it.stateEquals('ImageProxySettings.ImageProxyType', 'local'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ImageProxySettings.RemoteImageProxyOptions',\n                        label: t('admin.image.proxyOptions'),\n                        label_default: 'Remote Image Proxy Options:',\n                        help_text: t('admin.image.proxyOptionsDescription'),\n                        help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.IMAGE_PROXY)),\n                            it.stateIsFalse('ImageProxySettings.Enable'),\n                            it.stateEquals('ImageProxySettings.ImageProxyType', 'local'),\n                        ),\n                    },\n                ],\n            },\n        },\n        smtp: {\n            url: 'environment/smtp',\n            title: t('admin.sidebar.smtp'),\n            title_default: 'SMTP',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n            ),\n            schema: {\n                id: 'SMTP',\n                name: t('admin.environment.smtp'),\n                name_default: 'SMTP',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPServer',\n                        label: t('admin.environment.smtp.smtpServer.title'),\n                        label_default: 'SMTP Server:',\n                        placeholder: t('admin.environment.smtp.smtpServer.placeholder'),\n                        placeholder_default: 'Ex: \"smtp.yourcompany.com\", \"email-smtp.us-east-1.amazonaws.com\"',\n                        help_text: t('admin.environment.smtp.smtpServer.description'),\n                        help_text_default: 'Location of SMTP email server.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPPort',\n                        label: t('admin.environment.smtp.smtpPort.title'),\n                        label_default: 'SMTP Server Port:',\n                        placeholder: t('admin.environment.smtp.smtpPort.placeholder'),\n                        placeholder_default: 'Ex: \"25\", \"465\", \"587\"',\n                        help_text: t('admin.environment.smtp.smtpPort.description'),\n                        help_text_default: 'Port of SMTP email server.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSMTPAuth',\n                        label: t('admin.environment.smtp.smtpAuth.title'),\n                        label_default: 'Enable SMTP Authentication:',\n                        help_text: t('admin.environment.smtp.smtpAuth.description'),\n                        help_text_default: 'When true, SMTP Authentication is enabled.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPUsername',\n                        label: t('admin.environment.smtp.smtpUsername.title'),\n                        label_default: 'SMTP Server Username:',\n                        placeholder: t('admin.environment.smtp.smtpUsername.placeholder'),\n                        placeholder_default: 'Ex: \"admin@yourcompany.com\", \"AKIADTOVBGERKLCBV\"',\n                        help_text: t('admin.environment.smtp.smtpUsername.description'),\n                        help_text_default: 'Obtain this credential from administrator setting up your email server.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                            it.stateIsFalse('EmailSettings.EnableSMTPAuth'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPPassword',\n                        label: t('admin.environment.smtp.smtpPassword.title'),\n                        label_default: 'SMTP Server Password:',\n                        placeholder: t('admin.environment.smtp.smtpPassword.placeholder'),\n                        placeholder_default: 'Ex: \"yourpassword\", \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        help_text: t('admin.environment.smtp.smtpPassword.description'),\n                        help_text_default: 'Obtain this credential from administrator setting up your email server.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                            it.stateIsFalse('EmailSettings.EnableSMTPAuth'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.ConnectionSecurity',\n                        label: t('admin.environment.smtp.connectionSecurity.title'),\n                        label_default: 'Connection Security:',\n                        help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_EMAIL,\n                        options: [\n                            {\n                                value: '',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.none'),\n                                display_name_default: 'None',\n                            },\n                            {\n                                value: 'TLS',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.tls'),\n                                display_name_default: 'TLS (Recommended)',\n                            },\n                            {\n                                value: 'STARTTLS',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.starttls'),\n                                display_name_default: 'STARTTLS',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: testSmtp,\n                        key: 'TestSmtpConnection',\n                        label: t('admin.environment.smtp.connectionSmtpTest'),\n                        label_default: 'Test Connection',\n                        loading: t('admin.environment.smtp.testing'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.environment.smtp.smtpFail'),\n                        error_message_default: 'Connection unsuccessful: {error}',\n                        success_message: t('admin.environment.smtp.smtpSuccess'),\n                        success_message_default: 'No errors were reported while sending an email. Please check your inbox to make sure.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.SkipServerCertificateVerification',\n                        label: t('admin.environment.smtp.skipServerCertificateVerification.title'),\n                        label_default: 'Skip Server Certificate Verification:',\n                        help_text: t('admin.environment.smtp.skipServerCertificateVerification.description'),\n                        help_text_default: 'When true, MatterFOSS will not verify the email server certificate.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableSecurityFixAlert',\n                        label: t('admin.environment.smtp.enableSecurityFixAlert.title'),\n                        label_default: 'Enable Security Alerts:',\n                        help_text: t('admin.environment.smtp.enableSecurityFixAlert.description'),\n                        help_text_default: 'When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SMTP)),\n                    },\n                ],\n            },\n        },\n        push_notification_server: {\n            url: 'environment/push_notification_server',\n            title: t('admin.sidebar.pushNotificationServer'),\n            title_default: 'Push Notification Server',\n            searchableStrings: [\n                'admin.environment.pushNotificationServer',\n                'admin.email.pushTitle',\n                'admin.email.pushServerTitle',\n                'admin.email.pushContentTitle',\n                'admin.email.pushContentDesc',\n            ],\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.PUSH_NOTIFICATION_SERVER)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.PUSH_NOTIFICATION_SERVER)),\n            schema: {\n                id: 'PushNotificationsSettings',\n                component: PushNotificationsSettings,\n            },\n        },\n        high_availability: {\n            url: 'environment/high_availability',\n            title: t('admin.sidebar.highAvailability'),\n            title_default: 'High Availability',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('Cluster')),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.HIGH_AVAILABILITY)),\n            ),\n            searchableStrings: [\n                'admin.advance.cluster',\n                'admin.cluster.noteDescription',\n                'admin.cluster.enableTitle',\n                'admin.cluster.enableDescription',\n                'admin.cluster.ClusterName',\n                'admin.cluster.ClusterNameDesc',\n                'admin.cluster.OverrideHostname',\n                'admin.cluster.OverrideHostnameDesc',\n                'admin.cluster.UseIpAddress',\n                'admin.cluster.UseIpAddressDesc',\n                'admin.cluster.EnableExperimentalGossipEncryption',\n                'admin.cluster.EnableExperimentalGossipEncryptionDesc',\n                'admin.cluster.EnableGossipCompression',\n                'admin.cluster.EnableGossipCompressionDesc',\n                'admin.cluster.GossipPort',\n                'admin.cluster.GossipPortDesc',\n                'admin.cluster.StreamingPort',\n                'admin.cluster.StreamingPortDesc',\n            ],\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.HIGH_AVAILABILITY)),\n            schema: {\n                id: 'ClusterSettings',\n                component: ClusterSettings,\n            },\n        },\n        rate_limiting: {\n            url: 'environment/rate_limiting',\n            title: t('admin.sidebar.rateLimiting'),\n            title_default: 'Rate Limiting',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n            ),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.rate.title'),\n                name_default: 'Rate Limiting',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.rate.noteDescription'),\n                        label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.Enable',\n                        label: t('admin.rate.enableLimiterTitle'),\n                        label_default: 'Enable Rate Limiting:',\n                        help_text: t('admin.rate.enableLimiterDescription'),\n                        help_text_default: 'When true, APIs are throttled at rates specified below.\\n \\nRate limiting prevents server overload from too many requests. This is useful to prevent third-party applications or malicous attacks from impacting your server.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.PerSec',\n                        label: t('admin.rate.queriesTitle'),\n                        label_default: 'Maximum Queries per Second:',\n                        placeholder: t('admin.rate.queriesExample'),\n                        placeholder_default: 'E.g.: \"10\"',\n                        help_text: t('admin.rate.queriesDescription'),\n                        help_text_default: 'Throttles API at this number of requests per second.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.MaxBurst',\n                        label: t('admin.rate.maxBurst'),\n                        label_default: 'Maximum Burst Size:',\n                        placeholder: t('admin.rate.maxBurstExample'),\n                        placeholder_default: 'E.g.: \"100\"',\n                        help_text: t('admin.rate.maxBurstDescription'),\n                        help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.MemoryStoreSize',\n                        label: t('admin.rate.memoryTitle'),\n                        label_default: 'Memory Store Size:',\n                        placeholder: t('admin.rate.memoryExample'),\n                        placeholder_default: 'E.g.: \"10000\"',\n                        help_text: t('admin.rate.memoryDescription'),\n                        help_text_default: 'Maximum number of users sessions connected to the system as determined by \"Vary rate limit by remote address\" and \"Vary rate limit by HTTP header\".',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.VaryByRemoteAddr',\n                        label: t('admin.rate.remoteTitle'),\n                        label_default: 'Vary rate limit by remote address:',\n                        help_text: t('admin.rate.remoteDescription'),\n                        help_text_default: 'When true, rate limit API access by IP address.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.VaryByUser',\n                        label: t('admin.rate.varyByUser'),\n                        label_default: 'Vary rate limit by user:',\n                        help_text: t('admin.rate.varyByUserDescription'),\n                        help_text_default: 'When true, rate limit API access by user athentication token.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'RateLimitSettings.VaryByHeader',\n                        label: t('admin.rate.httpHeaderTitle'),\n                        label_default: 'Vary rate limit by HTTP header:',\n                        placeholder: t('admin.rate.httpHeaderExample'),\n                        placeholder_default: 'E.g.: \"X-Real-IP\", \"X-Forwarded-For\"',\n                        help_text: t('admin.rate.httpHeaderDescription'),\n                        help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.RATE_LIMITING)),\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                            it.stateEquals('RateLimitSettings.VaryByRemoteAddr', true),\n                        ),\n                    },\n                ],\n            },\n        },\n        logging: {\n            url: 'environment/logging',\n            title: t('admin.sidebar.logging'),\n            title_default: 'Logging',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n            ),\n            schema: {\n                id: 'LogSettings',\n                name: t('admin.general.log'),\n                name_default: 'Logging',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableConsole',\n                        label: t('admin.log.consoleTitle'),\n                        label_default: 'Output logs to console: ',\n                        help_text: t('admin.log.consoleDescription'),\n                        help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'LogSettings.ConsoleLevel',\n                        label: t('admin.log.levelTitle'),\n                        label_default: 'Console Log Level:',\n                        help_text: t('admin.log.levelDescription'),\n                        help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                        options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                            it.stateIsFalse('LogSettings.EnableConsole'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.ConsoleJson',\n                        label: t('admin.log.consoleJsonTitle'),\n                        label_default: 'Output console logs as JSON:',\n                        help_text: t('admin.log.jsonDescription'),\n                        help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                            it.stateIsFalse('LogSettings.EnableConsole'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableFile',\n                        label: t('admin.log.fileTitle'),\n                        label_default: 'Output logs to file: ',\n                        help_text: t('admin.log.fileDescription'),\n                        help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'LogSettings.FileLevel',\n                        label: t('admin.log.fileLevelTitle'),\n                        label_default: 'File Log Level:',\n                        help_text: t('admin.log.fileLevelDescription'),\n                        help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                        options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                            it.stateIsFalse('LogSettings.EnableFile'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.FileJson',\n                        label: t('admin.log.fileJsonTitle'),\n                        label_default: 'Output file logs as JSON:',\n                        help_text: t('admin.log.jsonDescription'),\n                        help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                            it.stateIsFalse('LogSettings.EnableFile'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LogSettings.FileLocation',\n                        label: t('admin.log.locationTitle'),\n                        label_default: 'File Log Directory:',\n                        help_text: t('admin.log.locationDescription'),\n                        help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and MatterFOSS must have write permissions in it. Changing this setting requires a server restart before taking effect.',\n                        placeholder: t('admin.log.locationPlaceholder'),\n                        placeholder_default: 'Enter your file location',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                            it.stateIsFalse('LogSettings.EnableFile'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableWebhookDebugging',\n                        label: t('admin.log.enableWebhookDebugging'),\n                        label_default: 'Enable Webhook Debugging:',\n                        help_text: t('admin.log.enableWebhookDebuggingDescription'),\n                        help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to \"DEBUG\".',\n                        help_text_values: {\n                            boldedLogLevel: (\n                                <strong>\n                                    <FormattedMessage\n                                        id='admin.log.logLevel'\n                                        defaultMessage='Log Level'\n                                    />\n                                </strong>\n                            ),\n                        },\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableDiagnostics',\n                        label: t('admin.log.enableDiagnostics'),\n                        label_default: 'Enable Diagnostics and Error Reporting:',\n                        help_text: t('admin.log.enableDiagnosticsDescription'),\n                        help_text_default: 'Enable this feature to improve the quality and performance of MatterFOSS by sending error reporting and diagnostic information to MatterFOSS, Inc. Read our [privacy policy](!https://example.com/default-privacy-policy/) to learn more.',\n                        help_text_markdown: true,\n                        onConfigSave: (displayVal, previousVal) => {\n                            if (previousVal && previousVal !== displayVal) {\n                                trackEvent('ui', 'diagnostics_disabled');\n                            }\n                            return displayVal;\n                        },\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.LOGGING)),\n                    },\n                ],\n            },\n        },\n        session_lengths: {\n            url: 'environment/session_lengths',\n            title: t('admin.sidebar.sessionLengths'),\n            title_default: 'Session Lengths',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SESSION_LENGTHS)),\n            ),\n            searchableStrings: [\n                'admin.sessionLengths.title',\n                'admin.service.webSessionDaysDesc.extendLength',\n                'admin.service.mobileSessionDaysDesc.extendLength',\n                'admin.service.ssoSessionDaysDesc.extendLength',\n                'admin.service.webSessionDaysDesc',\n                'admin.service.mobileSessionDaysDesc',\n                'admin.service.ssoSessionDaysDesc',\n                'admin.service.sessionIdleTimeout',\n                'admin.service.sessionIdleTimeoutDesc',\n                'admin.service.extendSessionLengthActivity.label',\n                'admin.service.extendSessionLengthActivity.helpText',\n                'admin.service.webSessionDays',\n                'admin.service.sessionDaysEx',\n                'admin.service.mobileSessionDays',\n                'admin.service.ssoSessionDays',\n                'admin.service.sessionCache',\n                'admin.service.sessionCacheDesc',\n            ],\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.SESSION_LENGTHS)),\n            schema: {\n                id: 'SessionLengths',\n                component: SessionLengthSettings,\n            },\n        },\n        metrics: {\n            url: 'environment/performance_monitoring',\n            title: t('admin.sidebar.metrics'),\n            title_default: 'Performance Monitoring',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.PERFORMANCE_MONITORING)),\n            ),\n            schema: {\n                id: 'MetricsSettings',\n                name: t('admin.advance.metrics'),\n                name_default: 'Performance Monitoring',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'MetricsSettings.Enable',\n                        label: t('admin.metrics.enableTitle'),\n                        label_default: 'Enable Performance Monitoring:',\n                        help_text: t('admin.metrics.enableDescription'),\n                        help_text_default: 'When true, MatterFOSS will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for MatterFOSS.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.PERFORMANCE_MONITORING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'MetricsSettings.ListenAddress',\n                        label: t('admin.metrics.listenAddressTitle'),\n                        label_default: 'Listen Address:',\n                        placeholder: t('admin.metrics.listenAddressEx'),\n                        placeholder_default: 'E.g.: \":8067\"',\n                        help_text: t('admin.metrics.listenAddressDesc'),\n                        help_text_default: 'The address the server will listen on to expose performance metrics.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.PERFORMANCE_MONITORING)),\n                    },\n                ],\n            },\n        },\n        developer: {\n            url: 'environment/developer',\n            title: t('admin.sidebar.developer'),\n            title_default: 'Developer',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DEVELOPER)),\n            ),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.developer.title'),\n                name_default: 'Developer Settings',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableTesting',\n                        label: t('admin.service.testingTitle'),\n                        label_default: 'Enable Testing Commands:',\n                        help_text: t('admin.service.testingDescription'),\n                        help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DEVELOPER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableDeveloper',\n                        label: t('admin.service.developerTitle'),\n                        label_default: 'Enable Developer Mode: ',\n                        help_text: t('admin.service.developerDesc'),\n                        help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DEVELOPER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.AllowedUntrustedInternalConnections',\n                        label: t('admin.service.internalConnectionsTitle'),\n                        label_default: 'Allow untrusted internal connections to: ',\n                        placeholder: t('admin.service.internalConnectionsEx'),\n                        placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',\n                        help_text: t('admin.service.internalConnectionsDesc'),\n                        help_text_default: 'A whitelist of local network addresses that can be requested by the MatterFOSS server on behalf of a client. Care should be used when configuring this setting to prevent unintended access to your local network. See [documentation](!https://mattermost.com/pl/default-allow-untrusted-internal-connections) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ENVIRONMENT.DEVELOPER)),\n                    },\n                ],\n            },\n        },\n    },\n    site: {\n        icon: 'fa-cogs',\n        sectionTitle: t('admin.sidebar.site'),\n        sectionTitleDefault: 'Site Configuration',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.SITE)),\n        customization: {\n            url: 'site_config/customization',\n            title: t('admin.sidebar.customization'),\n            title_default: 'Customization',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n            schema: {\n                id: 'Customization',\n                name: t('admin.site.customization'),\n                name_default: 'Customization',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.SiteName',\n                        label: t('admin.team.siteNameTitle'),\n                        label_default: 'Site Name:',\n                        help_text: t('admin.team.siteNameDescription'),\n                        help_text_default: 'Name of service shown in login screens and UI. When not specified, it defaults to \"MatterFOSS\".',\n                        placeholder: t('admin.team.siteNameExample'),\n                        placeholder_default: 'E.g.: \"MatterFOSS\"',\n                        max_length: Constants.MAX_SITENAME_LENGTH,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.CustomDescriptionText',\n                        label: t('admin.team.brandDescriptionTitle'),\n                        label_default: 'Site Description: ',\n                        help_text: t('admin.team.brandDescriptionHelp'),\n                        help_text_default: 'Description of service shown in login screens and UI. When not specified, \"All team communication in one place, searchable and accessible anywhere\" is displayed.',\n                        placeholder: t('web.root.signup_info'),\n                        placeholder_default: 'All team communication in one place, searchable and accessible anywhere',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableCustomBrand',\n                        label: t('admin.team.brandTitle'),\n                        label_default: 'Enable Custom Branding: ',\n                        help_text: t('admin.team.brandDesc'),\n                        help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: BrandImageSetting,\n                        key: 'CustomBrandImage',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                            it.stateIsFalse('TeamSettings.EnableCustomBrand'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                        key: 'TeamSettings.CustomBrandText',\n                        label: t('admin.team.brandTextTitle'),\n                        label_default: 'Custom Brand Text:',\n                        help_text: t('admin.team.brandTextDescription'),\n                        help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',\n                        max_length: Constants.MAX_CUSTOM_BRAND_TEXT_LENGTH,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                            it.stateIsFalse('TeamSettings.EnableCustomBrand'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SupportSettings.EnableAskCommunityLink',\n                        label: t('admin.support.enableAskCommunityTitle'),\n                        label_default: 'Enable Ask Community Link:',\n                        help_text: t('admin.support.enableAskCommunityDesc'),\n                        help_text_default: 'When true, \"Ask the community\" link appears on the MatterFOSS user interface and Main Menu, which allows users to join the MatterFOSS Community to ask questions and help others troubleshoot issues. When false, the link is hidden from users.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.HelpLink',\n                        label: t('admin.support.helpTitle'),\n                        label_default: 'Help Link:',\n                        help_text: t('admin.support.helpDesc'),\n                        help_text_default: 'The URL for the Help link on the MatterFOSS login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.SupportEmail',\n                        label: t('admin.support.emailTitle'),\n                        label_default: 'Support Email:',\n                        help_text: t('admin.support.emailHelp'),\n                        help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.TermsOfServiceLink',\n                        label: t('admin.support.termsTitle'),\n                        label_default: 'Terms of Service Link:',\n                        help_text: t('admin.support.termsDesc'),\n                        help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the \"MatterFOSS Conditions of Use (End Users)\" explaining the terms under which MatterFOSS software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the MatterFOSS Conditions of Use (End User) for MatterFOSS software.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.PrivacyPolicyLink',\n                        label: t('admin.support.privacyTitle'),\n                        label_default: 'Privacy Policy Link:',\n                        help_text: t('admin.support.privacyDesc'),\n                        help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.AboutLink',\n                        label: t('admin.support.aboutTitle'),\n                        label_default: 'About Link:',\n                        help_text: t('admin.support.aboutDesc'),\n                        help_text_default: 'The URL for the About link on the MatterFOSS login and sign-up pages. If this field is empty, the About link is hidden from users.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.ReportAProblemLink',\n                        label: t('admin.support.problemTitle'),\n                        label_default: 'Report a Problem Link:',\n                        help_text: t('admin.support.problemDesc'),\n                        help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.AppDownloadLink',\n                        label: t('admin.customization.appDownloadLinkTitle'),\n                        label_default: 'MatterFOSS Apps Download Page Link:',\n                        help_text: t('admin.customization.appDownloadLinkDesc'),\n                        help_text_default: 'Add a link to a download page for the MatterFOSS apps. When a link is present, an option to \"Download MatterFOSS Apps\" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.AndroidAppDownloadLink',\n                        label: t('admin.customization.androidAppDownloadLinkTitle'),\n                        label_default: 'Android App Download Link:',\n                        help_text: t('admin.customization.androidAppDownloadLinkDesc'),\n                        help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.IosAppDownloadLink',\n                        label: t('admin.customization.iosAppDownloadLinkTitle'),\n                        label_default: 'iOS App Download Link:',\n                        help_text: t('admin.customization.iosAppDownloadLinkDesc'),\n                        help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.CUSTOMIZATION)),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                ],\n            },\n        },\n        localization: {\n            url: 'site_config/localization',\n            title: t('admin.sidebar.localization'),\n            title_default: 'Localization',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.LOCALIZATION)),\n            schema: {\n                id: 'LocalizationSettings',\n                name: t('admin.site.localization'),\n                name_default: 'Localization',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.DefaultServerLocale',\n                        label: t('admin.general.localization.serverLocaleTitle'),\n                        label_default: 'Default Server Language:',\n                        help_text: t('admin.general.localization.serverLocaleDescription'),\n                        help_text_default: 'Default language for system messages. Changing this will require a server restart before taking effect.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.LOCALIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.DefaultClientLocale',\n                        label: t('admin.general.localization.clientLocaleTitle'),\n                        label_default: 'Default Client Language:',\n                        help_text: t('admin.general.localization.clientLocaleDescription'),\n                        help_text_default: 'Default language for newly created users and pages where the user hasn\\'t logged in.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.LOCALIZATION)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.AvailableLocales',\n                        label: t('admin.general.localization.availableLocalesTitle'),\n                        label_default: 'Available Languages:',\n                        help_text: t('admin.general.localization.availableLocalesDescription'),\n                        help_text_markdown: true,\n                        help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\\n \\nWould like to help with translations? Join the [MatterFOSS Translation Server](!http://example.com/) to contribute.',\n                        multiple: true,\n                        no_result: t('admin.general.localization.availableLocalesNoResults'),\n                        no_result_default: 'No results found',\n                        not_present: t('admin.general.localization.availableLocalesNotPresent'),\n                        not_present_default: 'The default client language must be included in the available list',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.LOCALIZATION)),\n                    },\n                ],\n            },\n        },\n        users_and_teams: {\n            url: 'site_config/users_and_teams',\n            title: t('admin.sidebar.usersAndTeams'),\n            title_default: 'Users and Teams',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n            schema: {\n                id: 'UserAndTeamsSettings',\n                name: t('admin.site.usersAndTeams'),\n                name_default: 'Users and Teams',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'TeamSettings.EnableTeamCreation',\n                        label: t('admin.team.teamCreationTitle'),\n                        label_default: 'Enable Team Creation: ',\n                        help_text: t('admin.team.teamCreationDescription'),\n                        help_text_default: 'When false, only System Administrators can create teams.',\n                        permissions_mapping_name: 'enableTeamCreation',\n                        isHidden: it.licensed,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.MaxUsersPerTeam',\n                        label: t('admin.team.maxUsersTitle'),\n                        label_default: 'Max Users Per Team:',\n                        help_text: t('admin.team.maxUsersDescription'),\n                        help_text_default: 'Maximum total number of users per team, including both active and inactive users.',\n                        placeholder: t('admin.team.maxUsersExample'),\n                        placeholder_default: 'E.g.: \"25\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.MaxChannelsPerTeam',\n                        label: t('admin.team.maxChannelsTitle'),\n                        label_default: 'Max Channels Per Team:',\n                        help_text: t('admin.team.maxChannelsDescription'),\n                        help_text_default: 'Maximum total number of channels per team, including both active and archived channels.',\n                        placeholder: t('admin.team.maxChannelsExample'),\n                        placeholder_default: 'E.g.: \"100\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'TeamSettings.RestrictDirectMessage',\n                        label: t('admin.team.restrictDirectMessage'),\n                        label_default: 'Enable users to open Direct Message channels with:',\n                        help_text: t('admin.team.restrictDirectMessageDesc'),\n                        help_text_default: '\"Any user on the MatterFOSS server\" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. \"Any member of the team\" limits the ability in the Direct Messages \"More\" menu to only open Direct Message channels with users who are in the same team.\\n \\nNote: This setting only affects the UI, not permissions on the server.',\n                        options: [\n                            {\n                                value: 'any',\n                                display_name: t('admin.team.restrict_direct_message_any'),\n                                display_name_default: 'Any user on the MatterFOSS server',\n                            },\n                            {\n                                value: 'team',\n                                display_name: t('admin.team.restrict_direct_message_team'),\n                                display_name_default: 'Any member of the team',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'TeamSettings.TeammateNameDisplay',\n                        label: t('admin.team.teammateNameDisplay'),\n                        label_default: 'Teammate Name Display:',\n                        help_text: t('admin.team.teammateNameDisplayDesc'),\n                        help_text_default: 'Set how to display users\\' names in posts and the Direct Messages list.',\n                        options: [\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                                display_name: t('admin.team.showUsername'),\n                                display_name_default: 'Show username (default)',\n                            },\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                                display_name: t('admin.team.showNickname'),\n                                display_name_default: 'Show nickname if one exists, otherwise show first and last name',\n                            },\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                                display_name: t('admin.team.showFullname'),\n                                display_name_default: 'Show first and last name',\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.LockTeammateNameDisplay',\n                        label: t('admin.lockTeammateNameDisplay'),\n                        label_default: 'Lock Teammate Name Display for all users: ',\n                        help_text: t('admin.lockTeammateNameDisplayHelpText'),\n                        help_text_default: 'When true, disables users\\' ability to change settings under Main Menu > Account Settings > Display > Teammate Name Display.',\n                        isHidden: it.not(it.licensedForFeature('LockTeammateNameDisplay')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'TeamSettings.EditOthersPosts',\n                        label: t('admin.team.editOthersPostsTitle'),\n                        label_default: 'Allow Team Administrators to edit others\\' posts:',\n                        help_text: t('admin.team.editOthersPostsDesc'),\n                        help_text_default: 'When **true**, both Team Admins and System Admins can edit other users\\' posts.  When **false**, only System Admins can edit other users\\' posts. However, Team Admins and System Admins can always delete other users\\' posts.',\n                        help_text_markdown: true,\n                        permissions_mapping_name: 'editOthersPosts',\n                        isHidden: it.any(\n                            it.licensed,\n                            it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalViewArchivedChannels',\n                        label: t('admin.viewArchivedChannelsTitle'),\n                        label_default: 'Allow users to view archived channels: ',\n                        help_text: t('admin.viewArchivedChannelsHelpText'),\n                        help_text_default: '(Beta) When true, allows users to view, share and search for content of channels that have been archived. Users can only view the content in channels of which they were a member before the channel was archived.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'PrivacySettings.ShowEmailAddress',\n                        label: t('admin.privacy.showEmailTitle'),\n                        label_default: 'Show Email Address:',\n                        help_text: t('admin.privacy.showEmailDescription'),\n                        help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'PrivacySettings.ShowFullName',\n                        label: t('admin.privacy.showFullNameTitle'),\n                        label_default: 'Show Full Name:',\n                        help_text: t('admin.privacy.showFullNameDescription'),\n                        help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableCustomUserStatuses',\n                        label: t('admin.team.customUserStatusesTitle'),\n                        label_default: 'Enable Custom Statuses: ',\n                        help_text: t('admin.team.customUserStatusesDescription'),\n                        help_text_default: 'When true, users can set a descriptive status message and status emoji visible to all users.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.USERS_AND_TEAMS)),\n                    },\n                ],\n            },\n        },\n        notifications: {\n            url: 'environment/notifications',\n            title: t('admin.sidebar.notifications'),\n            title_default: 'Notifications',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n            schema: {\n                id: 'notifications',\n                name: t('admin.environment.notifications'),\n                name_default: 'Notifications',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableConfirmNotificationsToChannel',\n                        label: t('admin.environment.notifications.enableConfirmNotificationsToChannel.label'),\n                        label_default: 'Show @channel and @all and group mention confirmation dialog:',\n                        help_text: t('admin.environment.notifications.enableConfirmNotificationsToChannel.help'),\n                        help_text_default: 'When true, users will be prompted to confirm when posting @channel, @all and group mentions in channels with over five members. When false, no confirmation is required.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.SendEmailNotifications',\n                        label: t('admin.environment.notifications.enable.label'),\n                        label_default: 'Enable Email Notifications:',\n                        help_text: t('admin.environment.notifications.enable.help'),\n                        help_text_default: 'Typically set to true in production. When true, MatterFOSS attempts to send email notifications. When false, email invitations and user account setting change emails are still sent as long as the SMTP server is configured. Developers may set this field to false to skip email setup for faster development.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnablePreviewModeBanner',\n                        label: t('admin.environment.notifications.enablePreviewModeBanner.label'),\n                        label_default: 'Enable Preview Mode Banner:',\n                        help_text: t('admin.environment.notifications.enablePreviewModeBanner.help'),\n                        help_text_default: 'When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsTrue('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableEmailBatching',\n                        label: t('admin.environment.notifications.enableEmailBatching.label'),\n                        label_default: 'Enable Email Batching:',\n                        help_text: t('admin.environment.notifications.enableEmailBatching.help'),\n                        help_text_default: 'When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                            it.configIsTrue('ClusterSettings', 'Enable'),\n                            it.configIsFalse('ServiceSettings', 'SiteURL'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.EmailNotificationContentsType',\n                        label: t('admin.environment.notifications.contents.label'),\n                        label_default: 'Email Notification Contents:',\n                        help_text: t('admin.environment.notifications.contents.help'),\n                        help_text_default: '**Send full message contents** - Sender name and channel are included in email notifications. Typically used for compliance reasons if MatterFOSS contains confidential information and policy dictates it cannot be stored in email.\\n  **Send generic description with only sender name** - Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications. Typically used for compliance reasons if MatterFOSS contains confidential information and policy dictates it cannot be stored in email.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.contents.full'),\n                                display_name_default: 'Send full message contents',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.contents.generic'),\n                                display_name_default: 'Send generic description with only sender name',\n                            },\n                        ],\n                        isHidden: it.not(it.licensedForFeature('EmailNotificationContents')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackName',\n                        label: t('admin.environment.notifications.notificationDisplay.label'),\n                        label_default: 'Notification Display Name:',\n                        placeholder: t('admin.environment.notifications.notificationDisplay.placeholder'),\n                        placeholder_default: 'Ex: \"MatterFOSS Notification\", \"System\", \"No-Reply\"',\n                        help_text: t('admin.environment.notifications.notificationDisplay.help'),\n                        help_text_default: 'Display name on email account used when sending notification emails from MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackEmail',\n                        label: t('admin.environment.notifications.feedbackEmail.label'),\n                        label_default: 'Notification From Address:',\n                        placeholder: t('admin.environment.notifications.feedbackEmail.placeholder'),\n                        placeholder_default: 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"',\n                        help_text: t('admin.environment.notifications.feedbackEmail.help'),\n                        help_text_default: 'Email address displayed on email account used when sending notification emails from MatterFOSS.',\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.ReplyToAddress',\n                        label: t('admin.environment.notifications.replyToAddress.label'),\n                        label_default: 'Notification Reply-To Address:',\n                        placeholder: t('admin.environment.notifications.replyToAddress.placeholder'),\n                        placeholder_default: 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"',\n                        help_text: t('admin.environment.notifications.replyToAddress.help'),\n                        help_text_default: 'Email address used in the Reply-To header when sending notification emails from MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackOrganization',\n                        label: t('admin.environment.notifications.feedbackOrganization.label'),\n                        label_default: 'Notification Footer Mailing Address:',\n                        placeholder: t('admin.environment.notifications.feedbackOrganization.placeholder'),\n                        placeholder_default: 'Ex: \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\"',\n                        help_text: t('admin.environment.notifications.feedbackOrganization.help'),\n                        help_text_default: 'Organization name and address displayed on email notifications from MatterFOSS, such as \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\". If the field is left empty, the organization name and address will not be displayed.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.PushNotificationContents',\n                        label: t('admin.environment.notifications.pushContents.label'),\n                        label_default: 'Push Notification Contents:',\n                        help_text: t('admin.environment.notifications.pushContents.help'),\n                        help_text_default: '**Generic description with only sender name** - Includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n **Generic description with sender and channel names** - Includes the name of the person who sent the message and the channel it was sent in, but not the message contents.\\n **Full message content sent in the notification payload** - Includes the message contents in the push notification payload that is relayed through Apple\\'s Push Notification Service (APNS) or Google\\'s Firebase Cloud Messaging (FCM). It is **highly recommended** this option only be used with an \"https\" protocol to encrypt the connection and protect confidential information sent in messages.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'generic_no_channel',\n                                display_name: t('admin.environment.notifications.pushContents.genericNoChannel'),\n                                display_name_default: 'Generic description with only sender name',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.pushContents.generic'),\n                                display_name_default: 'Generic description with sender and channel names',\n                            },\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.pushContents.full'),\n                                display_name_default: 'Full message content sent in the notification payload',\n                            },\n                        ],\n                        isHidden: it.licensedForFeature('IDLoadedPushNotifications'),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.PushNotificationContents',\n                        label: t('admin.environment.notifications.pushContents.label'),\n                        label_default: 'Push Notification Contents:',\n                        help_text: t('admin.environment.notifications.pushContents.withIdLoaded.help'),\n                        help_text_default: '**Generic description with only sender name** - Includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n **Generic description with sender and channel names** - Includes the name of the person who sent the message and the channel it was sent in, but not the message contents.\\n **Full message content sent in the notification payload** - Includes the message contents in the push notification payload that is relayed through Apple\\'s Push Notification Service (APNS) or Google\\'s Firebase Cloud Messaging (FCM). It is **highly recommended** this option only be used with an \"https\" protocol to encrypt the connection and protect confidential information sent in messages.\\n **Full message content fetched from the server on receipt** - The notification payload relayed through APNS or FCM contains no message content, instead it contains a unique message ID used to fetch message content from the server when a push notification is received by a device. If the server cannot be reached, a generic notification will be displayed.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'generic_no_channel',\n                                display_name: t('admin.environment.notifications.pushContents.genericNoChannel'),\n                                display_name_default: 'Generic description with only sender name',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.pushContents.generic'),\n                                display_name_default: 'Generic description with sender and channel names',\n                            },\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.pushContents.full'),\n                                display_name_default: 'Full message content sent in the notification payload',\n                            },\n                            {\n                                value: 'id_loaded',\n                                display_name: t('admin.environment.notifications.pushContents.idLoaded'),\n                                display_name_default: 'Full message content fetched from the server on receipt',\n                            },\n                        ],\n                        isHidden: it.not(it.licensedForFeature('IDLoadedPushNotifications')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTIFICATIONS)),\n                    },\n                ],\n            },\n        },\n        announcement_banner: {\n            url: 'site_config/announcement_banner',\n            title: t('admin.sidebar.announcement'),\n            title_default: 'Announcement Banner',\n            isHidden: it.any(\n                it.not(it.licensed),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n            ),\n            schema: {\n                id: 'AnnouncementSettings',\n                name: t('admin.site.announcementBanner'),\n                name_default: 'Announcement Banner',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.EnableBanner',\n                        label: t('admin.customization.announcement.enableBannerTitle'),\n                        label_default: 'Enable Announcement Banner:',\n                        help_text: t('admin.customization.announcement.enableBannerDesc'),\n                        help_text_default: 'Enable an announcement banner across all teams.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'AnnouncementSettings.BannerText',\n                        label: t('admin.customization.announcement.bannerTextTitle'),\n                        label_default: 'Banner Text:',\n                        help_text: t('admin.customization.announcement.bannerTextDesc'),\n                        help_text_default: 'Text that will appear in the announcement banner.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n                            it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'AnnouncementSettings.BannerColor',\n                        label: t('admin.customization.announcement.bannerColorTitle'),\n                        label_default: 'Banner Color:',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n                            it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'AnnouncementSettings.BannerTextColor',\n                        label: t('admin.customization.announcement.bannerTextColorTitle'),\n                        label_default: 'Banner Text Color:',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n                            it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.AllowBannerDismissal',\n                        label: t('admin.customization.announcement.allowBannerDismissalTitle'),\n                        label_default: 'Allow Banner Dismissal:',\n                        help_text: t('admin.customization.announcement.allowBannerDismissalDesc'),\n                        help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.ANNOUNCEMENT_BANNER)),\n                            it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                        ),\n                    },\n                ],\n            },\n        },\n        announcement_banner_feature_discovery: {\n            url: 'site_config/announcement_banner',\n            isDiscovery: true,\n            title: t('admin.sidebar.announcement'),\n            title_default: 'Announcement Banner',\n            isHidden: it.any(\n                it.licensed,\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'AnnouncementSettings',\n                name: t('admin.site.announcementBanner'),\n                name_default: 'Announcement Banner',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: AnnouncementBannerFeatureDiscovery,\n                        key: 'AnnouncementBannerFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        emoji: {\n            url: 'site_config/emoji',\n            title: t('admin.sidebar.emoji'),\n            title_default: 'Emoji',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.EMOJI)),\n            schema: {\n                id: 'EmojiSettings',\n                name: t('admin.site.emoji'),\n                name_default: 'Emoji',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableEmojiPicker',\n                        label: t('admin.customization.enableEmojiPickerTitle'),\n                        label_default: 'Enable Emoji Picker:',\n                        help_text: t('admin.customization.enableEmojiPickerDesc'),\n                        help_text_default: 'The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.EMOJI)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableCustomEmoji',\n                        label: t('admin.customization.enableCustomEmojiTitle'),\n                        label_default: 'Enable Custom Emoji:',\n                        help_text: t('admin.customization.enableCustomEmojiDesc'),\n                        help_text_default: 'Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting \"Custom Emoji\".',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.EMOJI)),\n                    },\n                ],\n            },\n        },\n        posts: {\n            url: 'site_config/posts',\n            title: t('admin.sidebar.posts'),\n            title_default: 'Posts',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n            schema: {\n                id: 'PostSettings',\n                name: t('admin.site.posts'),\n                name_default: 'Posts',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableLinkPreviews',\n                        label: t('admin.customization.enableLinkPreviewsTitle'),\n                        label_default: 'Enable Link Previews:',\n                        help_text: t('admin.customization.enableLinkPreviewsDesc'),\n                        help_text_default: 'Display a preview of website content, image links and YouTube links below the message when available. The server must be connected to the internet and have access through the firewall (if applicable) to the websites from which previews are expected. Users can disable these previews from Account Settings > Display > Website Link Previews.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.RestrictLinkPreviews',\n                        label: t('admin.customization.restrictLinkPreviewsTitle'),\n                        label_default: 'Disable link previews from these domains:',\n                        help_text: t('admin.customization.restrictLinkPreviewsDesc'),\n                        help_text_default: 'Link previews and image link previews will not be shown for the above list of comma-separated domains.',\n                        placeholder: t('admin.customization.restrictLinkPreviewsExample'),\n                        placeholder_default: 'E.g.: \"internal.mycompany.com, images.example.com\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                            it.configIsFalse('ServiceSettings', 'EnableLinkPreviews'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableSVGs',\n                        label: t('admin.customization.enableSVGsTitle'),\n                        label_default: 'Enable SVGs:',\n                        help_text: t('admin.customization.enableSVGsDesc'),\n                        help_text_default: 'Enable previews for SVG file attachments and allow them to appear in messages.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableLatex',\n                        label: t('admin.customization.enableLatexTitle'),\n                        label_default: 'Enable Latex Rendering:',\n                        help_text: t('admin.customization.enableLatexDesc'),\n                        help_text_default: 'Enable rendering of Latex code. If false, Latex code will be highlighted only.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: CustomUrlSchemesSetting,\n                        key: 'DisplaySettings.CustomUrlSchemes',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GoogleDeveloperKey',\n                        label: t('admin.service.googleTitle'),\n                        label_default: 'Google API Key:',\n                        placeholder: t('admin.service.googleExample'),\n                        placeholder_default: 'E.g.: \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV\"',\n                        help_text: t('admin.service.googleDescription'),\n                        help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',\n                        help_text_markdown: true,\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.POSTS)),\n                    },\n                ],\n            },\n        },\n        file_sharing_downloads: {\n            url: 'site_config/file_sharing_downloads',\n            title: t('admin.sidebar.fileSharingDownloads'),\n            title_default: 'File Sharing and Downloads',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.FILE_SHARING_AND_DOWNLOADS)),\n            schema: {\n                id: 'FileSharingDownloads',\n                name: t('admin.site.fileSharingDownloads'),\n                name_default: 'File Sharing and Downloads',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableFileAttachments',\n                        label: t('admin.file.enableFileAttachments'),\n                        label_default: 'Allow File Sharing:',\n                        help_text: t('admin.file.enableFileAttachmentsDesc'),\n                        help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.FILE_SHARING_AND_DOWNLOADS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableMobileUpload',\n                        label: t('admin.file.enableMobileUploadTitle'),\n                        label_default: 'Allow File Uploads on Mobile:',\n                        help_text: t('admin.file.enableMobileUploadDesc'),\n                        help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.FILE_SHARING_AND_DOWNLOADS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableMobileDownload',\n                        label: t('admin.file.enableMobileDownloadTitle'),\n                        label_default: 'Allow File Downloads on Mobile:',\n                        help_text: t('admin.file.enableMobileDownloadDesc'),\n                        help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.FILE_SHARING_AND_DOWNLOADS)),\n                    },\n                ],\n            },\n        },\n        public_links: {\n            url: 'site_config/public_links',\n            title: t('admin.sidebar.publicLinks'),\n            title_default: 'Public Links',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.PUBLIC_LINKS)),\n            ),\n            schema: {\n                id: 'PublicLinkSettings',\n                name: t('admin.site.public_links'),\n                name_default: 'Public Links',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnablePublicLink',\n                        label: t('admin.image.shareTitle'),\n                        label_default: 'Enable Public File Links: ',\n                        help_text: t('admin.image.shareDescription'),\n                        help_text_default: 'Allow users to share public links to files and images.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.PUBLIC_LINKS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_GENERATED,\n                        key: 'FileSettings.PublicLinkSalt',\n                        label: t('admin.image.publicLinkTitle'),\n                        label_default: 'Public Link Salt:',\n                        help_text: t('admin.image.publicLinkDescription'),\n                        help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.PUBLIC_LINKS)),\n                    },\n                ],\n            },\n        },\n        notices: {\n            url: 'site_config/notices',\n            title: t('admin.sidebar.notices'),\n            title_default: 'Notices',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.SITE.NOTICES)),\n            schema: {\n                id: 'NoticesSettings',\n                name: t('admin.site.notices'),\n                name_default: 'Notices',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.AdminNoticesEnabled',\n                        label: t('admin.notices.enableAdminNoticesTitle'),\n                        label_default: 'Enable Admin Notices: ',\n                        help_text: t('admin.notices.enableAdminNoticesDescription'),\n                        help_text_default: 'When enabled, System Admins will receive notices about available server upgrades and relevant system administration features. [Learn more about notices](!https://about.mattermost.com/default-notices) in our documentation.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTICES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.UserNoticesEnabled',\n                        label: t('admin.notices.enableEndUserNoticesTitle'),\n                        label_default: 'Enable End User Notices: ',\n                        help_text: t('admin.notices.enableEndUserNoticesDescription'),\n                        help_text_default: 'When enabled, all users will receive notices about available client upgrades and relevant end user features to improve user experience. [Learn more about notices](!https://about.mattermost.com/default-notices) in our documentation.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.SITE.NOTICES)),\n                    },\n                ],\n            },\n        },\n    },\n    authentication: {\n        icon: 'fa-shield',\n        sectionTitle: t('admin.sidebar.authentication'),\n        sectionTitleDefault: 'Authentication',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.AUTHENTICATION)),\n        signup: {\n            url: 'authentication/signup',\n            title: t('admin.sidebar.signup'),\n            title_default: 'Signup',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n            schema: {\n                id: 'SignupSettings',\n                name: t('admin.authentication.signup'),\n                name_default: 'Signup',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableUserCreation',\n                        label: t('admin.team.userCreationTitle'),\n                        label_default: 'Enable Account Creation: ',\n                        help_text: t('admin.team.userCreationDescription'),\n                        help_text_default: 'When false, the ability to create accounts is disabled. The create account button displays error when pressed.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.RestrictCreationToDomains',\n                        label: t('admin.team.restrictTitle'),\n                        label_default: 'Restrict new system and team members to specified email domains:',\n                        help_text: t('admin.team.restrictDescription'),\n                        help_text_default: 'New user accounts are restricted to the above specified email domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\"). New teams can only be created by users from the above domain(s). This setting only affects email login for users.',\n                        placeholder: t('admin.team.restrictExample'),\n                        placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        isHidden: it.licensed,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.RestrictCreationToDomains',\n                        label: t('admin.team.restrictTitle'),\n                        label_default: 'Restrict new system and team members to specified email domains:',\n                        help_text: t('admin.team.restrictGuestDescription'),\n                        help_text_default: 'New user accounts are restricted to the above specified email domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\"). New teams can only be created by users from the above domain(s). This setting affects email login for users. For Guest users, please add domains under Signup > Guest Access.',\n                        placeholder: t('admin.team.restrictExample'),\n                        placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        isHidden: it.not(it.licensed),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableOpenServer',\n                        label: t('admin.team.openServerTitle'),\n                        label_default: 'Enable Open Server: ',\n                        help_text: t('admin.team.openServerDescription'),\n                        help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableEmailInvitations',\n                        label: t('admin.team.emailInvitationsTitle'),\n                        label_default: 'Enable Email Invitations: ',\n                        help_text: t('admin.team.emailInvitationsDescription'),\n                        help_text_default: 'When true users can invite others to the system using email.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'InvalidateEmailInvitesButton',\n                        action: invalidateAllEmailInvites,\n                        label: t('admin.team.invalidateEmailInvitesTitle'),\n                        label_default: 'Invalidate pending email invites',\n                        help_text: t('admin.team.invalidateEmailInvitesDescription'),\n                        help_text_default: 'This will invalidate active email invitations that have not been accepted by the user.  By default email invitations expire after 48 hours.',\n                        error_message: t('admin.team.invalidateEmailInvitesFail'),\n                        error_message_default: 'Unable to invalidate pending email invites: {error}',\n                        success_message: t('admin.team.invalidateEmailInvitesSuccess'),\n                        success_message_default: 'Pending email invitations invalidated successfully',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SIGNUP)),\n                    },\n                ],\n            },\n        },\n        email: {\n            url: 'authentication/email',\n            title: t('admin.sidebar.email'),\n            title_default: 'Email',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.EMAIL)),\n            schema: {\n                id: 'EmailSettings',\n                name: t('admin.authentication.email'),\n                name_default: 'Email',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignUpWithEmail',\n                        label: t('admin.email.allowSignupTitle'),\n                        label_default: 'Enable account creation with email:',\n                        help_text: t('admin.email.allowSignupDescription'),\n                        help_text_default: 'When true, MatterFOSS allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.EMAIL)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.RequireEmailVerification',\n                        label: t('admin.email.requireVerificationTitle'),\n                        label_default: 'Require Email Verification: ',\n                        help_text: t('admin.email.requireVerificationDescription'),\n                        help_text_default: 'Typically set to true in production. When true, MatterFOSS requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.EMAIL)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignInWithEmail',\n                        label: t('admin.email.allowEmailSignInTitle'),\n                        label_default: 'Enable sign-in with email:',\n                        help_text: t('admin.email.allowEmailSignInDescription'),\n                        help_text_default: 'When true, MatterFOSS allows users to sign in using their email and password.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.EMAIL)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignInWithUsername',\n                        label: t('admin.email.allowUsernameSignInTitle'),\n                        label_default: 'Enable sign-in with username:',\n                        help_text: t('admin.email.allowUsernameSignInDescription'),\n                        help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.EMAIL)),\n                    },\n                ],\n            },\n        },\n        password: {\n            url: 'authentication/password',\n            title: t('admin.sidebar.password'),\n            title_default: 'Password',\n            searchableStrings: [\n                'user.settings.security.passwordMinLength',\n                'admin.security.password',\n                ['admin.password.minimumLength', {max: '', min: ''}],\n                ['admin.password.minimumLengthDescription', {max: '', min: ''}],\n                'passwordRequirements',\n                'admin.password.lowercase',\n                'admin.password.uppercase',\n                'admin.password.number',\n                'admin.password.symbol',\n                'admin.password.preview',\n                'admin.service.attemptTitle',\n                'admin.service.attemptDescription',\n            ],\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.PASSWORD)),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.PASSWORD)),\n            schema: {\n                id: 'PasswordSettings',\n                component: PasswordSettings,\n            },\n        },\n        mfa: {\n            url: 'authentication/mfa',\n            title: t('admin.sidebar.mfa'),\n            title_default: 'MFA',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.MFA)),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.authentication.mfa'),\n                name_default: 'Multi-factor Authentication',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.mfa.bannerDesc'),\n                        label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',\n                        label_markdown: true,\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableMultifactorAuthentication',\n                        label: t('admin.service.mfaTitle'),\n                        label_default: 'Enable Multi-factor Authentication:',\n                        help_text: t('admin.service.mfaDesc'),\n                        help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.MFA)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.service.enforceMfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication:',\n                        help_text: t('admin.service.enforceMfaDesc'),\n                        help_text_markdown: true,\n                        help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of MatterFOSS.',\n                        isHidden: it.not(it.licensedForFeature('MFA')),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.MFA)),\n                            it.stateIsFalse('ServiceSettings.EnableMultifactorAuthentication'),\n                        ),\n                    },\n                ],\n            },\n        },\n        ldap: {\n            url: 'authentication/ldap',\n            title: t('admin.sidebar.ldap'),\n            title_default: 'AD/LDAP',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('LDAP')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n            ),\n            schema: {\n                id: 'LdapSettings',\n                name: t('admin.authentication.ldap'),\n                name_default: 'AD/LDAP',\n                sections: [\n                    {\n                        title: 'Connection',\n                        subtitle: 'Connection and security level to your AD/LDAP server.',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_BOOL,\n                                key: 'LdapSettings.Enable',\n                                label: t('admin.ldap.enableTitle'),\n                                label_default: 'Enable sign-in with AD/LDAP:',\n                                help_text: t('admin.ldap.enableDesc'),\n                                help_text_default: 'When true, MatterFOSS allows login using AD/LDAP',\n                                isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_BOOL,\n                                key: 'LdapSettings.EnableSync',\n                                label: t('admin.ldap.enableSyncTitle'),\n                                label_default: 'Enable Synchronization with AD/LDAP:',\n                                help_text: t('admin.ldap.enableSyncDesc'),\n                                help_text_default: 'When true, MatterFOSS periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',\n                                isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.LoginFieldName',\n                                label: t('admin.ldap.loginNameTitle'),\n                                label_default: 'Login Field Name:',\n                                placeholder: t('admin.ldap.loginNameEx'),\n                                placeholder_default: 'E.g.: \"AD/LDAP Username\"',\n                                help_text: t('admin.ldap.loginNameDesc'),\n                                help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to \"AD/LDAP Username\".',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.LdapServer',\n                                label: t('admin.ldap.serverTitle'),\n                                label_default: 'AD/LDAP Server:',\n                                help_text: t('admin.ldap.serverDesc'),\n                                help_text_default: 'The domain or IP address of AD/LDAP server.',\n                                placeholder: t('admin.ldap.serverEx'),\n                                placeholder_default: 'E.g.: \"10.0.0.23\"',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_NUMBER,\n                                key: 'LdapSettings.LdapPort',\n                                label: t('admin.ldap.portTitle'),\n                                label_default: 'AD/LDAP Port:',\n                                help_text: t('admin.ldap.portDesc'),\n                                help_text_default: 'The port MatterFOSS will use to connect to the AD/LDAP server. Default is 389.',\n                                placeholder: t('admin.ldap.portEx'),\n                                placeholder_default: 'E.g.: \"389\"',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                                key: 'LdapSettings.ConnectionSecurity',\n                                label: t('admin.connectionSecurityTitle'),\n                                label_default: 'Connection Security:',\n                                help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,\n                                options: [\n                                    {\n                                        value: '',\n                                        display_name: t('admin.connectionSecurityNone'),\n                                        display_name_default: 'None',\n                                    },\n                                    {\n                                        value: 'TLS',\n                                        display_name: t('admin.connectionSecurityTls'),\n                                        display_name_default: 'TLS (Recommended)',\n                                    },\n                                    {\n                                        value: 'STARTTLS',\n                                        display_name: t('admin.connectionSecurityStart'),\n                                        display_name_default: 'STARTTLS',\n                                    },\n                                ],\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_BOOL,\n                                key: 'LdapSettings.SkipCertificateVerification',\n                                label: t('admin.ldap.skipCertificateVerification'),\n                                label_default: 'Skip Certificate Verification:',\n                                help_text: t('admin.ldap.skipCertificateVerificationDesc'),\n                                help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Skipping certificate verification is not recommended for production environments where TLS is required.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.stateIsFalse('LdapSettings.ConnectionSecurity'),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                                key: 'LdapSettings.PrivateKeyFile',\n                                label: t('admin.ldap.privateKeyFileTitle'),\n                                label_default: 'Private Key:',\n                                help_text: t('admin.ldap.privateKeyFileFileDesc'),\n                                help_text_default: 'The private key file for TLS Certificate. If using TLS client certificates as primary authentication mechanism. This will be provided by your LDAP Authentication Provider.',\n                                remove_help_text: t('admin.ldap.privateKeyFileFileRemoveDesc'),\n                                remove_help_text_default: 'Remove the private key file for TLS Certificate.',\n                                remove_button_text: t('admin.ldap.remove.privKey'),\n                                remove_button_text_default: 'Remove TLS Certificate Private Key',\n                                removing_text: t('admin.ldap.removing.privKey'),\n                                removing_text_default: 'Removing Private Key...',\n                                uploading_text: t('admin.ldap.uploading.privateKey'),\n                                uploading_text_default: 'Uploading Private Key...',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                                fileType: '.key',\n                                upload_action: uploadPrivateLdapCertificate,\n                                remove_action: removePrivateLdapCertificate,\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                                key: 'LdapSettings.PublicCertificateFile',\n                                label: t('admin.ldap.publicCertificateFileTitle'),\n                                label_default: 'Public Certificate:',\n                                help_text: t('admin.ldap.publicCertificateFileDesc'),\n                                help_text_default: 'The public certificate file for TLS Certificate. If using TLS client certificates as primary authentication mechanism.  This will be provided by your LDAP Authentication Provider.',\n                                remove_help_text: t('admin.ldap.publicCertificateFileRemoveDesc'),\n                                remove_help_text_default: 'Remove the public certificate file for TLS Certificate.',\n                                remove_button_text: t('admin.ldap.remove.sp_certificate'),\n                                remove_button_text_default: 'Remove Service Provider Certificate',\n                                removing_text: t('admin.ldap.removing.certificate'),\n                                removing_text_default: 'Removing Certificate...',\n                                uploading_text: t('admin.ldap.uploading.certificate'),\n                                uploading_text_default: 'Uploading Certificate...',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                                fileType: '.crt,.cer',\n                                upload_action: uploadPublicLdapCertificate,\n                                remove_action: removePublicLdapCertificate,\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.BindUsername',\n                                label: t('admin.ldap.bindUserTitle'),\n                                label_default: 'Bind Username:',\n                                help_text: t('admin.ldap.bindUserDesc'),\n                                help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with MatterFOSS. It should have access limited to read the portion of the AD/LDAP tree specified in the Base DN field.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.BindPassword',\n                                label: t('admin.ldap.bindPwdTitle'),\n                                label_default: 'Bind Password:',\n                                help_text: t('admin.ldap.bindPwdDesc'),\n                                help_text_default: 'Password of the user given in \"Bind Username\".',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                        ],\n                    },\n                    {\n                        title: 'Base DN & Filters',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.BaseDN',\n                                label: t('admin.ldap.baseTitle'),\n                                label_default: 'Base DN:',\n                                help_text: t('admin.ldap.baseDesc'),\n                                help_text_default: 'The Base DN is the Distinguished Name of the location where MatterFOSS should start its search for user and group objects in the AD/LDAP tree.',\n                                placeholder: t('admin.ldap.baseEx'),\n                                placeholder_default: 'E.g.: \"ou=Unit Name,dc=corp,dc=example,dc=com\"',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.UserFilter',\n                                label: t('admin.ldap.userFilterTitle'),\n                                label_default: 'User Filter:',\n                                help_text: t('admin.ldap.userFilterDisc'),\n                                help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for user objects. Only the users selected by the query will be able to access MatterFOSS. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',\n                                placeholder: t('admin.ldap.userFilterEx'),\n                                placeholder_default: 'Ex. \"(objectClass=user)\"',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.GroupFilter',\n                                label: t('admin.ldap.groupFilterTitle'),\n                                label_default: 'Group Filter:',\n                                help_text: t('admin.ldap.groupFilterFilterDesc'),\n                                help_text_markdown: true,\n                                help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for group objects. Only the groups selected by the query will be available to MatterFOSS. From [User Management > Groups]({siteURL}/admin_console/user_management/groups), select which AD/LDAP groups should be linked and configured.',\n                                help_text_values: {siteURL: getSiteURL()},\n                                placeholder: t('admin.ldap.groupFilterEx'),\n                                placeholder_default: 'E.g.: \"(objectClass=group)\"',\n                                isHidden: it.not(it.licensedForFeature('LDAPGroups')),\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.stateIsFalse('LdapSettings.EnableSync'),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_BOOL,\n                                key: 'LdapSettings.EnableAdminFilter',\n                                label: t('admin.ldap.enableAdminFilterTitle'),\n                                label_default: 'Enable Admin Filter:',\n                                isDisabled: it.any(\n                                    it.not(it.isSystemAdmin),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.AdminFilter',\n                                label: t('admin.ldap.adminFilterTitle'),\n                                label_default: 'Admin Filter:',\n                                help_text: t('admin.ldap.adminFilterFilterDesc'),\n                                help_text_default: '(Optional) Enter an AD/LDAP filter to use for designating System Admins. The users selected by the query will have access to your MatterFOSS server as System Admins. By default, System Admins have complete access to the MatterFOSS System Console.\\n \\nExisting members that are identified by this attribute will be promoted from member to System Admin upon next login. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to members in **System Console > User Management** to ensure access is restricted immediately.\\n \\nNote: If this filter is removed/changed, System Admins that were promoted via this filter will be demoted to members and will not retain access to the System Console. When this filter is not in use, System Admins can be manually promoted/demoted in **System Console > User Management**.',\n                                help_text_markdown: true,\n                                placeholder: t('admin.ldap.adminFilterEx'),\n                                placeholder_default: 'E.g.: \"(objectClass=user)\"',\n                                isDisabled: it.any(\n                                    it.not(it.isSystemAdmin),\n                                    it.stateIsFalse('LdapSettings.EnableAdminFilter'),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.GuestFilter',\n                                label: t('admin.ldap.guestFilterTitle'),\n                                label_default: 'Guest Filter:',\n                                help_text: t('admin.ldap.guestFilterFilterDesc'),\n                                help_text_default: '(Optional) Requires Guest Access to be enabled before being applied. Enter an AD/LDAP filter to use when searching for guest objects. Only the users selected by the query will be able to access MatterFOSS as Guests. Guests are prevented from accessing teams or channels upon logging in until they are assigned a team and at least one channel.\\n \\nNote: If this filter is removed/changed, active guests will not be promoted to a member and will retain their Guest role. Guests can be promoted in **System Console > User Management**.\\n \\n \\nExisting members that are identified by this attribute as a guest will be demoted from a member to a guest when they are asked to login next. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to guests in **System Console > User Management ** to ensure access is restricted immediately.',\n                                help_text_markdown: true,\n                                placeholder: t('admin.ldap.guestFilterEx'),\n                                placeholder_default: 'E.g.: \"(objectClass=user)\"',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.configIsFalse('GuestAccountsSettings', 'Enable'),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                        ],\n                    },\n                    {\n                        title: 'Account Synchronization',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.IdAttribute',\n                                label: t('admin.ldap.idAttrTitle'),\n                                label_default: 'ID Attribute: ',\n                                placeholder: t('admin.ldap.idAttrEx'),\n                                placeholder_default: 'E.g.: \"objectGUID\" or \"uid\"',\n                                help_text: t('admin.ldap.idAttrDesc'),\n                                help_text_markdown: true,\n                                help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in MatterFOSS. It should be an AD/LDAP attribute with a value that does not change such as `uid` for LDAP or `objectGUID` for Active Directory. If a user\\'s ID Attribute changes, it will create a new MatterFOSS account unassociated with their old one.\\n \\nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateEquals('LdapSettings.Enable', false),\n                                        it.stateEquals('LdapSettings.EnableSync', false),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.LoginIdAttribute',\n                                label: t('admin.ldap.loginAttrTitle'),\n                                label_default: 'Login ID Attribute: ',\n                                placeholder: t('admin.ldap.loginIdAttrEx'),\n                                placeholder_default: 'E.g.: \"sAMAccountName\"',\n                                help_text: t('admin.ldap.loginAttrDesc'),\n                                help_text_markdown: true,\n                                help_text_default: 'The attribute in the AD/LDAP server used to log in to MatterFOSS. Normally this attribute is the same as the \"Username Attribute\" field above.\\n \\nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.UsernameAttribute',\n                                label: t('admin.ldap.usernameAttrTitle'),\n                                label_default: 'Username Attribute:',\n                                placeholder: t('admin.ldap.usernameAttrEx'),\n                                placeholder_default: 'E.g.: \"sAMAccountName\"',\n                                help_text: t('admin.ldap.usernameAttrDesc'),\n                                help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in MatterFOSS. This may be the same as the Login ID Attribute.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.EmailAttribute',\n                                label: t('admin.ldap.emailAttrTitle'),\n                                label_default: 'Email Attribute:',\n                                placeholder: t('admin.ldap.emailAttrEx'),\n                                placeholder_default: 'E.g.: \"mail\" or \"userPrincipalName\"',\n                                help_text: t('admin.ldap.emailAttrDesc'),\n                                help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in MatterFOSS.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.FirstNameAttribute',\n                                label: t('admin.ldap.firstnameAttrTitle'),\n                                label_default: 'First Name Attribute:',\n                                placeholder: t('admin.ldap.firstnameAttrEx'),\n                                placeholder_default: 'E.g.: \"givenName\"',\n                                help_text: t('admin.ldap.firstnameAttrDesc'),\n                                help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in MatterFOSS. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.LastNameAttribute',\n                                label: t('admin.ldap.lastnameAttrTitle'),\n                                label_default: 'Last Name Attribute:',\n                                placeholder: t('admin.ldap.lastnameAttrEx'),\n                                placeholder_default: 'E.g.: \"sn\"',\n                                help_text: t('admin.ldap.lastnameAttrDesc'),\n                                help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in MatterFOSS. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.NicknameAttribute',\n                                label: t('admin.ldap.nicknameAttrTitle'),\n                                label_default: 'Nickname Attribute:',\n                                placeholder: t('admin.ldap.nicknameAttrEx'),\n                                placeholder_default: 'E.g.: \"nickname\"',\n                                help_text: t('admin.ldap.nicknameAttrDesc'),\n                                help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in MatterFOSS. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.PositionAttribute',\n                                label: t('admin.ldap.positionAttrTitle'),\n                                label_default: 'Position Attribute:',\n                                placeholder: t('admin.ldap.positionAttrEx'),\n                                placeholder_default: 'E.g.: \"title\"',\n                                help_text: t('admin.ldap.positionAttrDesc'),\n                                help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in MatterFOSS. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.PictureAttribute',\n                                label: t('admin.ldap.pictureAttrTitle'),\n                                label_default: 'Profile Picture Attribute:',\n                                placeholder: t('admin.ldap.pictureAttrEx'),\n                                placeholder_default: 'E.g.: \"thumbnailPhoto\" or \"jpegPhoto\"',\n                                help_text: t('admin.ldap.pictureAttrDesc'),\n                                help_text_default: 'The attribute in the AD/LDAP server used to populate the profile picture in MatterFOSS.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                        ],\n                    },\n                    {\n                        title: 'Group Synchronization',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.GroupDisplayNameAttribute',\n                                label: t('admin.ldap.groupDisplayNameAttributeTitle'),\n                                label_default: 'Group Display Name Attribute:',\n                                help_text: t('admin.ldap.groupDisplayNameAttributeDesc'),\n                                help_text_default: 'The attribute in the AD/LDAP server used to populate the group display names.',\n                                placeholder: t('admin.ldap.groupDisplayNameAttributeEx'),\n                                placeholder_default: 'E.g.: \"cn\"',\n                                isHidden: it.not(it.licensedForFeature('LDAPGroups')),\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.stateIsFalse('LdapSettings.EnableSync'),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_TEXT,\n                                key: 'LdapSettings.GroupIdAttribute',\n                                label: t('admin.ldap.groupIdAttributeTitle'),\n                                label_default: 'Group ID Attribute:',\n                                help_text: t('admin.ldap.groupIdAttributeDesc'),\n                                help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier for Groups. This should be a AD/LDAP attribute with a value that does not change such as `entryUUID` for LDAP or `objectGUID` for Active Directory.',\n                                help_text_markdown: true,\n                                placeholder: t('admin.ldap.groupIdAttributeEx'),\n                                placeholder_default: 'E.g.: \"objectGUID\" or \"entryUUID\"',\n                                isHidden: it.not(it.licensedForFeature('LDAPGroups')),\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.stateIsFalse('LdapSettings.EnableSync'),\n                                ),\n                            },\n                        ],\n                    },\n                    {\n                        title: 'Synchronization Performance',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_NUMBER,\n                                key: 'LdapSettings.SyncIntervalMinutes',\n                                label: t('admin.ldap.syncIntervalTitle'),\n                                label_default: 'Synchronization Interval (minutes):',\n                                help_text: t('admin.ldap.syncIntervalHelpText'),\n                                help_text_default: 'AD/LDAP Synchronization updates MatterFOSS user information to reflect updates on the AD/LDAP server. For example, when a user\\'s name changes on the AD/LDAP server, the change updates in MatterFOSS when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their MatterFOSS accounts set to \"Inactive\" and have their account sessions revoked. MatterFOSS performs synchronization on the interval entered. For example, if 60 is entered, MatterFOSS synchronizes every 60 minutes.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_NUMBER,\n                                key: 'LdapSettings.MaxPageSize',\n                                label: t('admin.ldap.maxPageSizeTitle'),\n                                label_default: 'Maximum Page Size:',\n                                placeholder: t('admin.ldap.maxPageSizeEx'),\n                                placeholder_default: 'E.g.: \"2000\"',\n                                help_text: t('admin.ldap.maxPageSizeHelpText'),\n                                help_text_default: 'The maximum number of users the MatterFOSS server will request from the AD/LDAP server at one time. 0 is unlimited.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_NUMBER,\n                                key: 'LdapSettings.QueryTimeout',\n                                label: t('admin.ldap.queryTitle'),\n                                label_default: 'Query Timeout (seconds):',\n                                placeholder: t('admin.ldap.queryEx'),\n                                placeholder_default: 'E.g.: \"60\"',\n                                help_text: t('admin.ldap.queryDesc'),\n                                help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                            {\n                                type: Constants.SettingsTypes.TYPE_BUTTON,\n                                action: ldapTest,\n                                key: 'LdapSettings.LdapTest',\n                                label: t('admin.ldap.ldap_test_button'),\n                                label_default: 'AD/LDAP Test',\n                                help_text: t('admin.ldap.testHelpText'),\n                                help_text_markdown: true,\n                                help_text_default: 'Tests if the MatterFOSS server can connect to the AD/LDAP server specified. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                                error_message: t('admin.ldap.testFailure'),\n                                error_message_default: 'AD/LDAP Test Failure: {error}',\n                                success_message: t('admin.ldap.testSuccess'),\n                                success_message_default: 'AD/LDAP Test Successful',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.all(\n                                        it.stateIsFalse('LdapSettings.Enable'),\n                                        it.stateIsFalse('LdapSettings.EnableSync'),\n                                    ),\n                                ),\n                            },\n                        ],\n                    },\n                    {\n                        title: 'Synchronization History',\n                        subtitle: 'See the table below for the status of each synchronization',\n                        settings: [\n                            {\n                                type: Constants.SettingsTypes.TYPE_JOBSTABLE,\n                                job_type: Constants.JobTypes.LDAP_SYNC,\n                                label: t('admin.ldap.sync_button'),\n                                label_default: 'AD/LDAP Synchronize Now',\n                                help_text: t('admin.ldap.syncNowHelpText'),\n                                help_text_markdown: true,\n                                help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                                isDisabled: it.any(\n                                    it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.LDAP)),\n                                    it.stateIsFalse('LdapSettings.EnableSync'),\n                                ),\n                                render_job: (job) => {\n                                    let ldapUsers = 0;\n                                    let deleteCount = 0;\n                                    let updateCount = 0;\n                                    let linkedLdapGroupsCount; // Deprecated.\n                                    let totalLdapGroupsCount = 0;\n                                    let groupDeleteCount = 0;\n                                    let groupMemberDeleteCount = 0;\n                                    let groupMemberAddCount = 0;\n\n                                    if (job && job.data) {\n                                        if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {\n                                            ldapUsers = job.data.ldap_users_count;\n                                        }\n\n                                        if (job.data.delete_count && job.data.delete_count.length > 0) {\n                                            deleteCount = job.data.delete_count;\n                                        }\n\n                                        if (job.data.update_count && job.data.update_count.length > 0) {\n                                            updateCount = job.data.update_count;\n                                        }\n\n                                        // Deprecated groups count representing the number of linked LDAP groups.\n                                        if (job.data.ldap_groups_count) {\n                                            linkedLdapGroupsCount = job.data.ldap_groups_count;\n                                        }\n\n                                        // Groups count representing the total number of LDAP groups available based on\n                                        // the configured based DN and groups filter.\n                                        if (job.data.total_ldap_groups_count) {\n                                            totalLdapGroupsCount = job.data.total_ldap_groups_count;\n                                        }\n\n                                        if (job.data.group_delete_count) {\n                                            groupDeleteCount = job.data.group_delete_count;\n                                        }\n\n                                        if (job.data.group_member_delete_count) {\n                                            groupMemberDeleteCount = job.data.group_member_delete_count;\n                                        }\n\n                                        if (job.data.group_member_add_count) {\n                                            groupMemberAddCount = job.data.group_member_add_count;\n                                        }\n                                    }\n\n                                    return (\n                                        <span>\n                                            <FormattedMessage\n                                                id={linkedLdapGroupsCount ? 'admin.ldap.jobExtraInfo' : 'admin.ldap.jobExtraInfoTotal'}\n                                                defaultMessage={linkedLdapGroupsCount ? 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} linked groups.' : 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} groups.'}\n                                                values={{\n                                                    ldapUsers,\n                                                    ldapGroups: linkedLdapGroupsCount || totalLdapGroupsCount, // Show the old count for jobs records containing the old JSON key.\n                                                }}\n                                            />\n                                            <ul>\n                                                {updateCount > 0 &&\n                                                <li>\n                                                    <FormattedMessage\n                                                        id='admin.ldap.jobExtraInfo.updatedUsers'\n                                                        defaultMessage='Updated {updateCount, number} users.'\n                                                        values={{\n                                                            updateCount,\n                                                        }}\n                                                    />\n                                                </li>\n                                                }\n                                                {deleteCount > 0 &&\n                                                <li>\n                                                    <FormattedMessage\n                                                        id='admin.ldap.jobExtraInfo.deactivatedUsers'\n                                                        defaultMessage='Deactivated {deleteCount, number} users.'\n                                                        values={{\n                                                            deleteCount,\n                                                        }}\n                                                    />\n                                                </li>\n                                                }\n                                                {groupDeleteCount > 0 &&\n                                                <li>\n                                                    <FormattedMessage\n                                                        id='admin.ldap.jobExtraInfo.deletedGroups'\n                                                        defaultMessage='Deleted {groupDeleteCount, number} groups.'\n                                                        values={{\n                                                            groupDeleteCount,\n                                                        }}\n                                                    />\n                                                </li>\n                                                }\n                                                {groupMemberDeleteCount > 0 &&\n                                                <li>\n                                                    <FormattedMessage\n                                                        id='admin.ldap.jobExtraInfo.deletedGroupMembers'\n                                                        defaultMessage='Deleted {groupMemberDeleteCount, number} group members.'\n                                                        values={{\n                                                            groupMemberDeleteCount,\n                                                        }}\n                                                    />\n                                                </li>\n                                                }\n                                                {groupMemberAddCount > 0 &&\n                                                <li>\n                                                    <FormattedMessage\n                                                        id='admin.ldap.jobExtraInfo.addedGroupMembers'\n                                                        defaultMessage='Added {groupMemberAddCount, number} group members.'\n                                                        values={{\n                                                            groupMemberAddCount,\n                                                        }}\n                                                    />\n                                                </li>\n                                                }\n                                            </ul>\n                                        </span>\n                                    );\n                                },\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        ldap_feature_discovery: {\n            url: 'authentication/ldap',\n            isDiscovery: true,\n            title: t('admin.sidebar.ldap'),\n            title_default: 'AD/LDAP',\n            isHidden: it.any(\n                it.licensedForFeature('LDAP'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'LdapSettings',\n                name: t('admin.authentication.ldap'),\n                name_default: 'AD/LDAP',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: LDAPFeatureDiscovery,\n                        key: 'LDAPFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        saml: {\n            url: 'authentication/saml',\n            title: t('admin.sidebar.saml'),\n            title_default: 'SAML 2.0',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('SAML')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n            ),\n            schema: {\n                id: 'SamlSettings',\n                name: t('admin.authentication.saml'),\n                name_default: 'SAML 2.0',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Enable',\n                        label: t('admin.saml.enableTitle'),\n                        label_default: 'Enable Login With SAML 2.0:',\n                        help_text: t('admin.saml.enableDescription'),\n                        help_text_default: 'When true, MatterFOSS allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for MatterFOSS.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableSyncWithLdap',\n                        label: t('admin.saml.enableSyncWithLdapTitle'),\n                        label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                        help_text: t('admin.saml.enableSyncWithLdapDescription'),\n                        help_text_default: 'When true, MatterFOSS periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.IgnoreGuestsLdapSync',\n                        label: t('admin.saml.ignoreGuestsLdapSyncTitle'),\n                        label_default: 'Ignore Guest Users when  Synchronizing with AD/LDAP',\n                        help_text: t('admin.saml.ignoreGuestsLdapSyncDesc'),\n                        help_text_default: 'When true, MatterFOSS will ignore Guest Users who are identified by the Guest Attribute, when synchronizing with AD/LDAP for user deactivation and removal and Guest deactivation will need to be managed manually via System Console > Users.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.configIsFalse('GuestAccountsSettings', 'Enable'),\n                            it.stateIsFalse('SamlSettings.EnableSyncWithLdap'),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',\n                        label: t('admin.saml.enableSyncWithLdapIncludeAuthTitle'),\n                        label_default: 'Override SAML bind data with AD/LDAP information:',\n                        help_text: t('admin.saml.enableSyncWithLdapIncludeAuthDescription'),\n                        help_text_default: 'When true, MatterFOSS will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\\n \\n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',\n                        help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.EnableSyncWithLdap'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpMetadataUrl',\n                        label: t('admin.saml.idpMetadataUrlTitle'),\n                        label_default: 'Identity Provider Metadata URL:',\n                        help_text: t('admin.saml.idpMetadataUrlDesc'),\n                        help_text_default: 'The Metadata URL for the Identity Provider you use for SAML requests',\n                        placeholder: t('admin.saml.idpMetadataUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/saml/metadata\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'getSamlMetadataFromIDPButton',\n                        action: getSamlMetadataFromIdp,\n                        label: t('admin.saml.getSamlMetadataFromIDPUrl'),\n                        label_default: 'Get SAML Metadata from IdP',\n                        loading: t('admin.saml.getSamlMetadataFromIDPFetching'),\n                        loading_default: 'Fetching...',\n                        error_message: t('admin.saml.getSamlMetadataFromIDPFail'),\n                        error_message_default: 'SAML Metadata URL did not connect and pull data successfully',\n                        success_message: t('admin.saml.getSamlMetadataFromIDPSuccess'),\n                        success_message_default: 'SAML Metadata retrieved successfully. Two fields below have been updated',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateEquals('SamlSettings.IdpMetadataUrl', ''),\n                        ),\n                        sourceUrlKey: 'SamlSettings.IdpMetadataUrl',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpUrl',\n                        label: t('admin.saml.idpUrlTitle'),\n                        label_default: 'SAML SSO URL:',\n                        help_text: t('admin.saml.idpUrlDesc'),\n                        help_text_default: 'The URL where MatterFOSS sends a SAML request to start login sequence.',\n                        placeholder: t('admin.saml.idpUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/SSO/Login\"',\n                        setFromMetadataField: 'idp_url',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpDescriptorUrl',\n                        label: t('admin.saml.idpDescriptorUrlTitle'),\n                        label_default: 'Identity Provider Issuer URL:',\n                        help_text: t('admin.saml.idpDescriptorUrlDesc'),\n                        help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',\n                        placeholder: t('admin.saml.idpDescriptorUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/issuer\"',\n                        setFromMetadataField: 'idp_descriptor_url',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.IdpCertificateFile',\n                        label: t('admin.saml.idpCertificateFileTitle'),\n                        label_default: 'Identity Provider Public Certificate:',\n                        help_text: t('admin.saml.idpCertificateFileDesc'),\n                        help_text_default: 'The public authentication certificate issued by your Identity Provider.',\n                        remove_help_text: t('admin.saml.idpCertificateFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',\n                        remove_button_text: t('admin.saml.remove.idp_certificate'),\n                        remove_button_text_default: 'Remove Identity Provider Certificate',\n                        removing_text: t('admin.saml.removing.certificate'),\n                        removing_text_default: 'Removing Certificate...',\n                        uploading_text: t('admin.saml.uploading.certificate'),\n                        uploading_text_default: 'Uploading Certificate...',\n                        fileType: '.crt,.cer,.cert,.pem',\n                        upload_action: uploadIdpSamlCertificate,\n                        set_action: setSamlIdpCertificateFromMetadata,\n                        remove_action: removeIdpSamlCertificate,\n                        setFromMetadataField: 'idp_public_certificate',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Verify',\n                        label: t('admin.saml.verifyTitle'),\n                        label_default: 'Verify Signature:',\n                        help_text: t('admin.saml.verifyDescription'),\n                        help_text_default: 'When false, MatterFOSS will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Disabling verification is not recommended for production environments.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.AssertionConsumerServiceURL',\n                        label: t('admin.saml.assertionConsumerServiceURLTitle'),\n                        label_default: 'Service Provider Login URL:',\n                        help_text: t('admin.saml.assertionConsumerServiceURLPopulatedDesc'),\n                        help_text_default: 'This field is also known as the Assertion Consumer Service URL.',\n                        placeholder: t('admin.saml.assertionConsumerServiceURLEx'),\n                        placeholder_default: 'E.g.: \"https://<your-mattermost-url>/login/sso/saml\"',\n                        onConfigLoad: (value, config) => {\n                            const siteUrl = config.ServiceSettings.SiteURL;\n                            if (siteUrl.length > 0 && value.length === 0) {\n                                const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';\n                                return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;\n                            }\n                            return value;\n                        },\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.ServiceProviderIdentifier',\n                        label: t('admin.saml.serviceProviderIdentifierTitle'),\n                        label_default: 'Service Provider Identifier:',\n                        help_text: t('admin.saml.serviceProviderIdentifierDesc'),\n                        help_text_default: 'The unique identifier for the Service Provider, usually the same as Service Provider Login URL. In ADFS, this MUST match the Relying Party Identifier.',\n                        placeholder: t('admin.saml.serviceProviderIdentifierEx'),\n                        placeholder_default: \"E.g.: \\\"https://'<your-mattermost-url>'/login/sso/saml\\\"\",\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Encrypt',\n                        label: t('admin.saml.encryptTitle'),\n                        label_default: 'Enable Encryption:',\n                        help_text: t('admin.saml.encryptDescription'),\n                        help_text_default: 'When false, MatterFOSS will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Disabling encryption is not recommended for production environments.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.PrivateKeyFile',\n                        label: t('admin.saml.privateKeyFileTitle'),\n                        label_default: 'Service Provider Private Key:',\n                        help_text: t('admin.saml.privateKeyFileFileDesc'),\n                        help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',\n                        remove_help_text: t('admin.saml.privateKeyFileFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',\n                        remove_button_text: t('admin.saml.remove.privKey'),\n                        remove_button_text_default: 'Remove Service Provider Private Key',\n                        removing_text: t('admin.saml.removing.privKey'),\n                        removing_text_default: 'Removing Private Key...',\n                        uploading_text: t('admin.saml.uploading.privateKey'),\n                        uploading_text_default: 'Uploading Private Key...',\n                        fileType: '.key',\n                        upload_action: uploadPrivateSamlCertificate,\n                        remove_action: removePrivateSamlCertificate,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.PublicCertificateFile',\n                        label: t('admin.saml.publicCertificateFileTitle'),\n                        label_default: 'Service Provider Public Certificate:',\n                        help_text: t('admin.saml.publicCertificateFileDesc'),\n                        help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when MatterFOSS is the Service Provider.',\n                        remove_help_text: t('admin.saml.publicCertificateFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when MatterFOSS is the Service Provider.',\n                        remove_button_text: t('admin.saml.remove.sp_certificate'),\n                        remove_button_text_default: 'Remove Service Provider Certificate',\n                        removing_text: t('admin.saml.removing.certificate'),\n                        removing_text_default: 'Removing Certificate...',\n                        uploading_text: t('admin.saml.uploading.certificate'),\n                        uploading_text_default: 'Uploading Certificate...',\n                        fileType: '.crt,.cer',\n                        upload_action: uploadPublicSamlCertificate,\n                        remove_action: removePublicSamlCertificate,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.SignRequest',\n                        label: t('admin.saml.signRequestTitle'),\n                        label_default: 'Sign Request:',\n                        help_text: t('admin.saml.signRequestDescription'),\n                        help_text_default: 'When true, MatterFOSS will sign the SAML request using your private key. When false, MatterFOSS will not sign the SAML request.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.PrivateKeyFile'),\n                            it.stateIsFalse('SamlSettings.PublicCertificateFile'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'SamlSettings.SignatureAlgorithm',\n                        label: t('admin.saml.signatureAlgorithmTitle'),\n                        label_default: 'Signature Algorithm',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.SignRequest'),\n                        ),\n                        options: [\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha1'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha1'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA1). Please see more information provided at http://www.w3.org/2000/09/xmldsig#rsa-sha1',\n                            },\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha256'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha256'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA256). Please see more information provided at http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 [section 6.4.2 RSA (PKCS#1 v1.5)]',\n                            },\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha512'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha512'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA512). Please see more information provided at http://www.w3.org/2001/04/xmldsig-more#rsa-sha512',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'SamlSettings.CanonicalAlgorithm',\n                        label: t('admin.saml.canonicalAlgorithmTitle'),\n                        label_default: 'Canonicalization Algorithm',\n                        options: [\n                            {\n                                value: SAML_SETTINGS_CANONICAL_ALGORITHM_C14N,\n                                display_name: t('admin.saml.canonicalAlgorithmDisplay.n10'),\n                                display_name_default: 'Exclusive XML Canonicalization 1.0 (omit comments)',\n                                help_text: t('admin.saml.canonicalAlgorithmDescription.exc'),\n                                help_text_default: 'Specify the Canonicalization algorithm (Exclusive XML Canonicalization 1.0).  Please see more information provided at http://www.w3.org/2001/10/xml-exc-c14n#',\n                            },\n                            {\n                                value: SAML_SETTINGS_CANONICAL_ALGORITHM_C14N11,\n                                display_name: t('admin.saml.canonicalAlgorithmDisplay.n11'),\n                                display_name_default: 'Canonical XML 1.1 (omit comments)',\n                                help_text: t('admin.saml.canonicalAlgorithmDescription.c14'),\n                                help_text_default: 'Specify the Canonicalization algorithm (Canonical XML 1.1).  Please see more information provided at http://www.w3.org/2006/12/xml-c14n11',\n                            },\n                        ],\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.SignRequest'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.EmailAttribute',\n                        label: t('admin.saml.emailAttrTitle'),\n                        label_default: 'Email Attribute:',\n                        placeholder: t('admin.saml.emailAttrEx'),\n                        placeholder_default: 'E.g.: \"Email\" or \"PrimaryEmail\"',\n                        help_text: t('admin.saml.emailAttrDesc'),\n                        help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.UsernameAttribute',\n                        label: t('admin.saml.usernameAttrTitle'),\n                        label_default: 'Username Attribute:',\n                        placeholder: t('admin.saml.usernameAttrEx'),\n                        placeholder_default: 'E.g.: \"Username\"',\n                        help_text: t('admin.saml.usernameAttrDesc'),\n                        help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdAttribute',\n                        label: t('admin.saml.idAttrTitle'),\n                        label_default: 'Id Attribute:',\n                        placeholder: t('admin.saml.idAttrEx'),\n                        placeholder_default: 'E.g.: \"Id\"',\n                        help_text: t('admin.saml.idAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.GuestAttribute',\n                        label: t('admin.saml.guestAttrTitle'),\n                        label_default: 'Guest Attribute:',\n                        placeholder: t('admin.saml.guestAttrEx'),\n                        placeholder_default: 'E.g.: \"usertype=Guest\" or \"isGuest=true\"',\n                        help_text: t('admin.saml.guestAttrDesc'),\n                        help_text_default: '(Optional) Requires Guest Access to be enabled before being applied. The attribute in the SAML Assertion that will be used to apply a guest role to users in MatterFOSS. Guests are prevented from accessing teams or channels upon logging in until they are assigned a team and at least one channel.\\n \\nNote: If this attribute is removed/changed from your guest user in SAML and the user is still active, they will not be promoted to a member and will retain their Guest role. Guests can be promoted in **System Console > User Management**.\\n \\n \\nExisting members that are identified by this attribute as a guest will be demoted from a member to a guest when they are asked to login next. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to guests in **System Console > User Management ** to ensure access is restricted immediately.',\n                        help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.configIsFalse('GuestAccountsSettings', 'Enable'),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableAdminAttribute',\n                        label: t('admin.saml.enableAdminAttrTitle'),\n                        label_default: 'Enable Admin Attribute:',\n                        isDisabled: it.any(\n                            it.not(it.isSystemAdmin),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.AdminAttribute',\n                        label: t('admin.saml.adminAttrTitle'),\n                        label_default: 'Admin Attribute:',\n                        placeholder: t('admin.saml.adminAttrEx'),\n                        placeholder_default: 'E.g.: \"usertype=Admin\" or \"isAdmin=true\"',\n                        help_text: t('admin.saml.adminAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion for designating System Admins. The users selected by the query will have access to your MatterFOSS server as System Admins. By default, System Admins have complete access to the MatterFOSS System Console.\\n \\nExisting members that are identified by this attribute will be promoted from member to System Admin upon next login. The next login is based upon Session lengths set in **System Console > Session Lengths.** It is highly recommend to manually demote users to members in **System Console > User Management** to ensure access is restricted immediately.\\n \\nNote: If this filter is removed/changed, System Admins that were promoted via this filter will be demoted to members and will not retain access to the System Console. When this filter is not in use, System Admins can be manually promoted/demoted in **System Console > User Management**.',\n                        help_text_markdown: true,\n                        isDisabled: it.any(\n                            it.not(it.isSystemAdmin),\n                            it.stateIsFalse('SamlSettings.EnableAdminAttribute'),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.FirstNameAttribute',\n                        label: t('admin.saml.firstnameAttrTitle'),\n                        label_default: 'First Name Attribute:',\n                        placeholder: t('admin.saml.firstnameAttrEx'),\n                        placeholder_default: 'E.g.: \"FirstName\"',\n                        help_text: t('admin.saml.firstnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LastNameAttribute',\n                        label: t('admin.saml.lastnameAttrTitle'),\n                        label_default: 'Last Name Attribute:',\n                        placeholder: t('admin.saml.lastnameAttrEx'),\n                        placeholder_default: 'E.g.: \"LastName\"',\n                        help_text: t('admin.saml.lastnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.NicknameAttribute',\n                        label: t('admin.saml.nicknameAttrTitle'),\n                        label_default: 'Nickname Attribute:',\n                        placeholder: t('admin.saml.nicknameAttrEx'),\n                        placeholder_default: 'E.g.: \"Nickname\"',\n                        help_text: t('admin.saml.nicknameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.PositionAttribute',\n                        label: t('admin.saml.positionAttrTitle'),\n                        label_default: 'Position Attribute:',\n                        placeholder: t('admin.saml.positionAttrEx'),\n                        placeholder_default: 'E.g.: \"Role\"',\n                        help_text: t('admin.saml.positionAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LocaleAttribute',\n                        label: t('admin.saml.localeAttrTitle'),\n                        label_default: 'Preferred Language Attribute:',\n                        placeholder: t('admin.saml.localeAttrEx'),\n                        placeholder_default: 'E.g.: \"Locale\" or \"PrimaryLanguage\"',\n                        help_text: t('admin.saml.localeAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in MatterFOSS.',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LoginButtonText',\n                        label: t('admin.saml.loginButtonTextTitle'),\n                        label_default: 'Login Button Text:',\n                        placeholder: t('admin.saml.loginButtonTextEx'),\n                        placeholder_default: 'E.g.: \"OKTA\"',\n                        help_text: t('admin.saml.loginButtonTextDesc'),\n                        help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to \"SAML\".',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.SAML)),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                ],\n            },\n        },\n        saml_feature_discovery: {\n            url: 'authentication/saml',\n            isDiscovery: true,\n            title: t('admin.sidebar.saml'),\n            title_default: 'SAML 2.0',\n            isHidden: it.any(\n                it.licensedForFeature('SAML'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'SamlSettings',\n                name: t('admin.authentication.saml'),\n                name_default: 'SAML 2.0',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: SAMLFeatureDiscovery,\n                        key: 'SAMLFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        gitlab: {\n            url: 'authentication/gitlab',\n            title: t('admin.sidebar.gitlab'),\n            title_default: 'GitLab',\n            isHidden: it.any(\n                it.licensed,\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n            ),\n            schema: {\n                id: 'GitLabSettings',\n                name: t('admin.authentication.gitlab'),\n                name_default: 'GitLab',\n                onConfigLoad: (config) => {\n                    const newState = {};\n                    newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n                    return newState;\n                },\n                onConfigSave: (config) => {\n                    const newConfig = {...config};\n                    newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n                    return newConfig;\n                },\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GitLabSettings.Enable',\n                        label: t('admin.gitlab.enableTitle'),\n                        label_default: 'Enable authentication with GitLab: ',\n                        help_text: t('admin.gitlab.enableDescription'),\n                        help_text_default: \"When true, MatterFOSS allows team creation and account signup using GitLab OAuth.\\n \\n1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \\\"'<your-mattermost-url>'/login/gitlab/complete\\\" (example: http://localhost:8065/login/gitlab/complete) and \\\"<your-mattermost-url>/signup/gitlab/complete\\\".\\n3. Then use \\\"Application Secret Key\\\" and \\\"Application ID\\\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.\",\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Id',\n                        label: t('admin.gitlab.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.gitlab.clientIdDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientIdExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                            it.stateIsFalse('GitLabSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Secret',\n                        label: t('admin.gitlab.clientSecretTitle'),\n                        label_default: 'Application Secret Key:',\n                        help_text: t('admin.gitlab.clientSecretDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                            it.stateIsFalse('GitLabSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Url',\n                        label: t('admin.gitlab.siteUrl'),\n                        label_default: 'GitLab Site URL:',\n                        help_text: t('admin.gitlab.siteUrlDescription'),\n                        help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                        placeholder: t('admin.gitlab.siteUrlExample'),\n                        placeholder_default: 'E.g.: https://',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                            it.stateIsFalse('GitLabSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.UserApiEndpoint',\n                        label: t('admin.gitlab.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.AuthEndpoint',\n                        label: t('admin.gitlab.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.TokenEndpoint',\n                        label: t('admin.gitlab.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                ],\n            },\n        },\n        oauth: {\n            url: 'authentication/oauth',\n            title: t('admin.sidebar.oauth'),\n            title_default: 'OAuth 2.0',\n            tag: {\n                value: (\n                    <FormattedMessage\n                        id='admin.sidebar.oauth.tag'\n                        defaultMessage='deprecated'\n                    />\n                ),\n                shouldDisplay: (license) => license.IsLicensed && license.OpenId === 'true',\n            },\n            isHidden: it.any(\n                it.not(it.licensed),\n                it.all(\n                    it.licensedForFeature('OpenId'),\n                    it.not(usesLegacyOauth),\n                ),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n            ),\n            schema: {\n                id: 'OAuthSettings',\n                name: t('admin.authentication.oauth'),\n                name_default: 'OAuth 2.0',\n                onConfigLoad: (config) => {\n                    const newState = {};\n                    if (config.GitLabSettings && config.GitLabSettings.Enable) {\n                        newState.oauthType = Constants.GITLAB_SERVICE;\n                    }\n                    if (config.Office365Settings && config.Office365Settings.Enable) {\n                        newState.oauthType = Constants.OFFICE365_SERVICE;\n                    }\n                    if (config.GoogleSettings && config.GoogleSettings.Enable) {\n                        newState.oauthType = Constants.GOOGLE_SERVICE;\n                    }\n\n                    newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n\n                    return newState;\n                },\n                onConfigSave: (config) => {\n                    const newConfig = {...config};\n                    newConfig.GitLabSettings = config.GitLabSettings || {};\n                    newConfig.Office365Settings = config.Office365Settings || {};\n                    newConfig.GoogleSettings = config.GoogleSettings || {};\n                    newConfig.OpenIdSettings = config.OpenIdSettings || {};\n\n                    newConfig.GitLabSettings.Enable = false;\n                    newConfig.Office365Settings.Enable = false;\n                    newConfig.GoogleSettings.Enable = false;\n                    newConfig.OpenIdSettings.Enable = false;\n                    newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n\n                    if (config.oauthType === Constants.GITLAB_SERVICE) {\n                        newConfig.GitLabSettings.Enable = true;\n                    }\n                    if (config.oauthType === Constants.OFFICE365_SERVICE) {\n                        newConfig.Office365Settings.Enable = true;\n                    }\n                    if (config.oauthType === Constants.GOOGLE_SERVICE) {\n                        newConfig.GoogleSettings.Enable = true;\n                    }\n                    delete newConfig.oauthType;\n                    return newConfig;\n                },\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: OpenIdConvert,\n                        key: 'OpenIdConvert',\n                        isHidden: it.any(\n                            it.not(it.licensedForFeature('OpenId')),\n                            it.not(usesLegacyOauth),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'oauthType',\n                        label: t('admin.openid.select'),\n                        label_default: 'Select service provider:',\n                        options: [\n                            {\n                                value: 'off',\n                                display_name: t('admin.oauth.off'),\n                                display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.',\n                            },\n                            {\n                                value: Constants.GITLAB_SERVICE,\n                                display_name: t('admin.oauth.gitlab'),\n                                display_name_default: 'GitLab',\n                                help_text: t('admin.gitlab.EnableMarkdownDesc'),\n                                help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.GOOGLE_SERVICE,\n                                display_name: t('admin.oauth.google'),\n                                display_name_default: 'Google Apps',\n                                isHidden: it.not(it.licensedForFeature('GoogleOAuth')),\n                                help_text: t('admin.google.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter \"MatterFOSS - your-company-name\" as the **Project Name**, then click **Create**.\\n3. Click the **OAuth consent screen** header and enter \"MatterFOSS\" as the **Product name shown to users**, then click **Save**.\\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\\n7. Go to the [Google People API](!https://console.developers.google.com/apis/library/people.googleapis.com) and click *Enable*.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.OFFICE365_SERVICE,\n                                display_name: t('admin.oauth.office365'),\n                                display_name_default: 'Office 365',\n                                isHidden: it.not(it.licensedForFeature('Office365OAuth')),\n                                help_text: t('admin.office365.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use \"MatterFOSS - your-company-name\" as the **Application Name**.\\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\\n5. Finally, click **Save** and then paste the **Application ID** below.',\n                                help_text_markdown: true,\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Id',\n                        label: t('admin.gitlab.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.gitlab.clientIdDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientIdExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Secret',\n                        label: t('admin.gitlab.clientSecretTitle'),\n                        label_default: 'Application Secret Key:',\n                        help_text: t('admin.gitlab.clientSecretDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Url',\n                        label: t('admin.gitlab.siteUrl'),\n                        label_default: 'GitLab Site URL:',\n                        help_text: t('admin.gitlab.siteUrlDescription'),\n                        help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                        placeholder: t('admin.gitlab.siteUrlExample'),\n                        placeholder_default: 'E.g.: https://',\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.UserApiEndpoint',\n                        label: t('admin.gitlab.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.AuthEndpoint',\n                        label: t('admin.gitlab.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.TokenEndpoint',\n                        label: t('admin.gitlab.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Id',\n                        label: t('admin.google.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.google.clientIdDescription'),\n                        help_text_default: 'The Client ID you received when registering your application with Google.',\n                        placeholder: t('admin.google.clientIdExample'),\n                        placeholder_default: 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'google')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Secret',\n                        label: t('admin.google.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.google.clientSecretDescription'),\n                        help_text_default: 'The Client Secret you received when registering your application with Google.',\n                        placeholder: t('admin.google.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'google')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.UserApiEndpoint',\n                        label: t('admin.google.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: () => 'https://people.googleapis.com/v1/people/me?personFields=names,emailAddresses,nicknames,metadata',\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.AuthEndpoint',\n                        label: t('admin.google.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.TokenEndpoint',\n                        label: t('admin.google.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Id',\n                        label: t('admin.office365.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.office365.clientIdDescription'),\n                        help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.clientIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Secret',\n                        label: t('admin.office365.clientSecretTitle'),\n                        label_default: 'Application Secret Password:',\n                        help_text: t('admin.office365.clientSecretDescription'),\n                        help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"shAieM47sNBfgl20f8ci294\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.DirectoryId',\n                        label: t('admin.office365.directoryIdTitle'),\n                        label_default: 'Directory (tenant) ID:',\n                        help_text: t('admin.office365.directoryIdDescription'),\n                        help_text_default: 'The Directory (tenant) ID you received when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.directoryIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.UserApiEndpoint',\n                        label: t('admin.office365.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.AuthEndpoint',\n                        label: t('admin.office365.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['Office365Settings.DirectoryId']) {\n                                return 'https://login.microsoftonline.com/' + state['Office365Settings.DirectoryId'] + '/oauth2/v2.0/authorize';\n                            }\n                            return 'https://login.microsoftonline.com/{directoryId}/oauth2/v2.0/authorize';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.TokenEndpoint',\n                        label: t('admin.office365.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['Office365Settings.DirectoryId']) {\n                                return 'https://login.microsoftonline.com/' + state['Office365Settings.DirectoryId'] + '/oauth2/v2.0/token';\n                            }\n                            return 'https://login.microsoftonline.com/{directoryId}/oauth2/v2.0/token';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('oauthType', 'office365')),\n                    },\n                ],\n            },\n        },\n        openid: {\n            url: 'authentication/openid',\n            title: t('admin.sidebar.openid'),\n            title_default: 'OpenID Connect',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('OpenId')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n            ),\n            schema: {\n                id: 'OpenIdSettings',\n                name: t('admin.authentication.openid'),\n                name_default: 'OpenID Connect',\n                onConfigLoad: (config) => {\n                    const newState = {};\n                    if (config.Office365Settings && config.Office365Settings.Enable) {\n                        newState.openidType = Constants.OFFICE365_SERVICE;\n                    }\n                    if (config.GoogleSettings && config.GoogleSettings.Enable) {\n                        newState.openidType = Constants.GOOGLE_SERVICE;\n                    }\n                    if (config.GitLabSettings && config.GitLabSettings.Enable) {\n                        newState.openidType = Constants.GITLAB_SERVICE;\n                    }\n                    if (config.OpenIdSettings && config.OpenIdSettings.Enable) {\n                        newState.openidType = Constants.OPENID_SERVICE;\n                    }\n                    if (config.GitLabSettings.UserApiEndpoint) {\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n                    } else if (config.GitLabSettings.DiscoveryEndpoint) {\n                        newState['GitLabSettings.Url'] = config.GitLabSettings.DiscoveryEndpoint.replace('/.well-known/openid-configuration', '');\n                    }\n\n                    return newState;\n                },\n                onConfigSave: (config) => {\n                    const newConfig = {...config};\n                    newConfig.Office365Settings = config.Office365Settings || {};\n                    newConfig.GoogleSettings = config.GoogleSettings || {};\n                    newConfig.GitLabSettings = config.GitLabSettings || {};\n                    newConfig.OpenIdSettings = config.OpenIdSettings || {};\n\n                    newConfig.Office365Settings.Enable = false;\n                    newConfig.GoogleSettings.Enable = false;\n                    newConfig.GitLabSettings.Enable = false;\n                    newConfig.OpenIdSettings.Enable = false;\n\n                    let configSetting = '';\n                    if (config.openidType === Constants.OFFICE365_SERVICE) {\n                        configSetting = 'Office365Settings';\n                    } else if (config.openidType === Constants.GOOGLE_SERVICE) {\n                        configSetting = 'GoogleSettings';\n                    } else if (config.openidType === Constants.GITLAB_SERVICE) {\n                        configSetting = 'GitLabSettings';\n                    } else if (config.openidType === Constants.OPENID_SERVICE) {\n                        configSetting = 'OpenIdSettings';\n                    }\n\n                    if (configSetting !== '') {\n                        newConfig[configSetting].Enable = true;\n                        newConfig[configSetting].Scope = Constants.OPENID_SCOPES;\n                        newConfig[configSetting].UserApiEndpoint = '';\n                        newConfig[configSetting].AuthEndpoint = '';\n                        newConfig[configSetting].TokenEndpoint = '';\n                    }\n\n                    delete newConfig.openidType;\n                    return newConfig;\n                },\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: OpenIdConvert,\n                        key: 'OpenIdConvert',\n                        isHidden: it.any(\n                            it.not(usesLegacyOauth),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'openidType',\n                        label: t('admin.openid.select'),\n                        label_default: 'Select service provider:',\n                        options: [\n                            {\n                                value: 'off',\n                                display_name: t('admin.openid.off'),\n                                display_name_default: 'Do not allow sign-in via an OpenID provider.',\n                            },\n                            {\n                                value: Constants.GITLAB_SERVICE,\n                                display_name: t('admin.openid.gitlab'),\n                                display_name_default: 'GitLab',\n                                help_text: t('admin.gitlab.EnableMarkdownDesc'),\n                                help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.GOOGLE_SERVICE,\n                                display_name: t('admin.openid.google'),\n                                display_name_default: 'Google Apps',\n                                help_text: t('admin.google.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand side.\\n 3. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\\n 4. Enter \"MatterFOSS - your-company-name\" as the **Name**.\\n 5. Under **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\\n 6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\\n 7. Go to the [Google People API](!https://console.developers.google.com/apis/library/people.googleapis.com) and click *Enable*.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.OFFICE365_SERVICE,\n                                display_name: t('admin.openid.office365'),\n                                display_name_default: 'Office 365',\n                                help_text: t('admin.office365.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to Azure Portal** > click **New Registration**.\\n3. Use \"MatterFOSS - your-company-name\" as the **Application Name**, click **Registration**, paste **Client ID** and **Tenant ID** below.\\n4. Click **Authentication**, under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\\n5. Click **Certificates & secrets**, Generate **New client secret** and paste secret value in **Client Secret** field below.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.OPENID_SERVICE,\n                                display_name: t('admin.oauth.openid'),\n                                display_name_default: 'OpenID Connect (Other)',\n                                help_text: t('admin.openid.EnableMarkdownDesc'),\n                                help_text_default: 'Follow provider directions for creating an OpenID Application. Most OpenID Connect providers require authorization of all redirect URIs. In the appropriate field, enter your-mattermost-url/signup/openid/complete (example: http://domain.com/signup/openid/complete)',\n                                help_text_markdown: true,\n                            },\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Url',\n                        label: t('admin.gitlab.siteUrl'),\n                        label_default: 'GitLab Site URL:',\n                        help_text: t('admin.gitlab.siteUrlDescription'),\n                        help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                        placeholder: t('admin.gitlab.siteUrlExample'),\n                        placeholder_default: 'E.g.: https://',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GITLAB_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.DiscoveryEndpoint',\n                        label: t('admin.openid.discoveryEndpointTitle'),\n                        label_default: 'Discovery Endpoint:',\n                        help_text: t('admin.gitlab.discoveryEndpointDesc'),\n                        help_text_default: 'The URL of the discovery document for OpenID Connect with GitLab.',\n                        help_text_markdown: false,\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/.well-known/openid-configuration';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GITLAB_SERVICE)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Id',\n                        label: t('admin.openid.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.openid.clientIdDescription'),\n                        help_text_default: 'Obtaining the Client ID differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.gitlab.clientIdExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GITLAB_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Secret',\n                        label: t('admin.openid.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.openid.clientSecretDescription'),\n                        help_text_default: 'Obtaining the Client Secret differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.gitlab.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx442pnqMxQY\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GITLAB_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.DiscoveryEndpoint',\n                        label: t('admin.openid.discoveryEndpointTitle'),\n                        label_default: 'Discovery Endpoint:',\n                        help_text: t('admin.google.discoveryEndpointDesc'),\n                        help_text_default: 'The URL of the discovery document for OpenID Connect with Google.',\n                        help_text_markdown: false,\n                        dynamic_value: () => 'https://accounts.google.com/.well-known/openid-configuration',\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GOOGLE_SERVICE)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Id',\n                        label: t('admin.openid.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.openid.clientIdDescription'),\n                        help_text_default: 'Obtaining the Client ID differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.google.clientIdExample'),\n                        placeholder_default: 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GOOGLE_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Secret',\n                        label: t('admin.openid.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.openid.clientSecretDescription'),\n                        help_text_default: 'Obtaining the Client Secret differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.google.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.GOOGLE_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.DirectoryId',\n                        label: t('admin.office365.directoryIdTitle'),\n                        label_default: 'Directory (tenant) ID:',\n                        help_text: t('admin.office365.directoryIdDescription'),\n                        help_text_default: 'The Directory (tenant) ID you received when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.directoryIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OFFICE365_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.DiscoveryEndpoint',\n                        label: t('admin.openid.discoveryEndpointTitle'),\n                        label_default: 'Discovery Endpoint:',\n                        help_text: t('admin.office365.discoveryEndpointDesc'),\n                        help_text_default: 'The URL of the discovery document for OpenID Connect with Office 365.',\n                        help_text_markdown: false,\n                        dynamic_value: (value, config, state) => {\n                            if (state['Office365Settings.DirectoryId']) {\n                                return 'https://login.microsoftonline.com/' + state['Office365Settings.DirectoryId'] + '/v2.0/.well-known/openid-configuration';\n                            }\n                            return 'https://login.microsoftonline.com/common/v2.0/.well-known/openid-configuration';\n                        },\n                        isDisabled: true,\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OFFICE365_SERVICE)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Id',\n                        label: t('admin.openid.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.openid.clientIdDescription'),\n                        help_text_default: 'Obtaining the Client ID differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.office365.clientIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OFFICE365_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Secret',\n                        label: t('admin.openid.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.openid.clientSecretDescription'),\n                        help_text_default: 'Obtaining the Client Secret differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.office365.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"shAieM47sNBfgl20f8ci294\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OFFICE365_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'OpenIdSettings.ButtonText',\n                        label: t('admin.openid.buttonTextTitle'),\n                        label_default: 'Button Name:',\n                        placeholder: t('admin.openid.buttonTextEx'),\n                        placeholder_default: 'Custom Button Name',\n                        help_text: t('admin.openid.buttonTextDesc'),\n                        help_text_default: 'The text that will show on the login button.',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OPENID_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'OpenIdSettings.ButtonColor',\n                        label: t('admin.openid.buttonColorTitle'),\n                        label_default: 'Button Color:',\n                        help_text: t('admin.openid.buttonColorDesc'),\n                        help_text_default: 'Specify the color of the OpenID login button for white labeling purposes. Use a hex code with a #-sign before the code.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OPENID_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'OpenIdSettings.DiscoveryEndpoint',\n                        label: t('admin.openid.discoveryEndpointTitle'),\n                        label_default: 'Discovery Endpoint:',\n                        placeholder: t('admin.openid.discovery.placeholder'),\n                        placeholder_default: 'https://id.mydomain.com/.well-known/openid-configuration',\n                        help_text: t('admin.openid.discoveryEndpointDesc'),\n                        help_text_default: 'Enter the URL of the discovery document of the OpenID Connect provider you want to connect with.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OPENID_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'OpenIdSettings.Id',\n                        label: t('admin.openid.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.openid.clientIdDescription'),\n                        help_text_default: 'Obtaining the Client ID differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.openid.clientIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OPENID_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'OpenIdSettings.Secret',\n                        label: t('admin.openid.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.openid.clientSecretDescription'),\n                        help_text_default: 'Obtaining the Client Secret differs across providers. Please check you provider\\'s documentation',\n                        placeholder: t('admin.openid.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                        isHidden: it.not(it.stateEquals('openidType', Constants.OPENID_SERVICE)),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.OPENID)),\n                    },\n                ],\n            },\n        },\n        openid_feature_discovery: {\n            url: 'authentication/openid',\n            isDiscovery: true,\n            title: t('admin.sidebar.openid'),\n            title_default: 'OpenID Connect',\n            isHidden: it.any(\n                it.licensedForFeature('OpenId'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'OpenIdSettings',\n                name: t('admin.authentication.openid'),\n                name_default: 'OpenID Connect',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: OpenIDFeatureDiscovery,\n                        key: 'OpenIDFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        guest_access: {\n            url: 'authentication/guest_access',\n            title: t('admin.sidebar.guest_access'),\n            title_default: 'Guest Access (Beta)',\n            isHidden: it.any(\n                it.not(it.licensed),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.GUEST_ACCESS)),\n            ),\n            schema: {\n                id: 'GuestAccountsSettings',\n                name: t('admin.authentication.guest_access'),\n                name_default: 'Guest Access (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: CustomEnableDisableGuestAccountsSetting,\n                        key: 'GuestAccountsSettings.Enable',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.GUEST_ACCESS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GuestAccountsSettings.RestrictCreationToDomains',\n                        label: t('admin.guest_access.whitelistedDomainsTitle'),\n                        label_default: 'Whitelisted Guest Domains:',\n                        help_text: t('admin.guest_access.whitelistedDomainsDescription'),\n                        help_text_default: '(Optional) Guest accounts can be created at the system level from this list of allowed guest domains.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.guest_access.whitelistedDomainsExample'),\n                        placeholder_default: 'E.g.: \"company.com, othercorp.org\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.GUEST_ACCESS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescriptionMFANotEnabled'),\n                        help_text_default: '[Multi-factor authentication](./mfa) is currently not enabled.',\n                        help_text_markdown: true,\n                        isHidden: it.configIsTrue('ServiceSettings', 'EnableMultifactorAuthentication'),\n                        isDisabled: () => true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescriptionMFANotEnforced'),\n                        help_text_default: '[Multi-factor authentication](./mfa) is currently not enforced.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.configIsFalse('ServiceSettings', 'EnableMultifactorAuthentication'),\n                            it.configIsTrue('ServiceSettings', 'EnforceMultifactorAuthentication'),\n                        ),\n                        isDisabled: () => true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescription'),\n                        help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) for guests is required for login. New guest users will be required to configure MFA on signup. Logged in guest users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has guest users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of MatterFOSS.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.configIsFalse('ServiceSettings', 'EnableMultifactorAuthentication'),\n                            it.configIsFalse('ServiceSettings', 'EnforceMultifactorAuthentication'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.AUTHENTICATION.GUEST_ACCESS)),\n                    },\n                ],\n            },\n        },\n        guest_access_feature_discovery: {\n            isDiscovery: true,\n            url: 'authentication/guest_access',\n            title: t('admin.sidebar.guest_access'),\n            title_default: 'Guest Access (Beta)',\n            isHidden: it.any(\n                it.licensed,\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'GuestAccountsSettings',\n                name: t('admin.authentication.guest_access'),\n                name_default: 'Guest Access (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: GuestAccessFeatureDiscovery,\n                        key: 'GuestAccessFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n    },\n    plugins: {\n        icon: 'fa-plug',\n        sectionTitle: t('admin.sidebar.plugins'),\n        sectionTitleDefault: 'Plugins (Beta)',\n        id: 'plugins',\n        isHidden: it.not(it.userHasReadPermissionOnResource('plugins')),\n        plugin_management: {\n            url: 'plugins/plugin_management',\n            title: t('admin.plugins.pluginManagement'),\n            title_default: 'Plugin Management',\n            searchableStrings: [\n                'admin.plugin.management.title',\n                'admin.plugins.settings.enable',\n                'admin.plugins.settings.enableDesc',\n                'admin.plugin.uploadTitle',\n                'admin.plugin.installedTitle',\n                'admin.plugin.installedDesc',\n                'admin.plugin.uploadDesc',\n                'admin.plugin.uploadDisabledDesc',\n                'admin.plugins.settings.enableMarketplace',\n                'admin.plugins.settings.enableMarketplaceDesc',\n                'admin.plugins.settings.enableRemoteMarketplace',\n                'admin.plugins.settings.enableRemoteMarketplaceDesc',\n                'admin.plugins.settings.automaticPrepackagedPlugins',\n                'admin.plugins.settings.automaticPrepackagedPluginsDesc',\n                'admin.plugins.settings.marketplaceUrl',\n                'admin.plugins.settings.marketplaceUrlDesc',\n            ],\n            isDisabled: it.not(it.userHasWritePermissionOnResource('plugins')),\n            schema: {\n                id: 'PluginManagementSettings',\n                component: PluginManagement,\n            },\n        },\n        custom: {\n            url: 'plugins/plugin_:plugin_id',\n            isDisabled: it.not(it.userHasWritePermissionOnResource('plugins')),\n            schema: {\n                id: 'CustomPluginSettings',\n                component: CustomPluginSettings,\n            },\n        },\n    },\n    integrations: {\n        icon: 'fa-sitemap',\n        sectionTitle: t('admin.sidebar.integrations'),\n        sectionTitleDefault: 'Integrations',\n        id: 'integrations',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.INTEGRATIONS)),\n        integration_management: {\n            url: 'integrations/integration_management',\n            title: t('admin.integrations.integrationManagement'),\n            title_default: 'Integration Management',\n            isHidden: it.all(\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n            ),\n            schema: {\n                id: 'CustomIntegrationSettings',\n                name: t('admin.integrations.integrationManagement.title'),\n                name_default: 'Integration Management',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableIncomingWebhooks',\n                        label: t('admin.service.webhooksTitle'),\n                        label_default: 'Enable Incoming Webhooks: ',\n                        help_text: t('admin.service.webhooksDescription'),\n                        help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableOutgoingWebhooks',\n                        label: t('admin.service.outWebhooksTitle'),\n                        label_default: 'Enable Outgoing Webhooks: ',\n                        help_text: t('admin.service.outWebhooksDesc'),\n                        help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableCommands',\n                        label: t('admin.service.cmdsTitle'),\n                        label_default: 'Enable Custom Slash Commands: ',\n                        help_text: t('admin.service.cmdsDesc'),\n                        help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableOAuthServiceProvider',\n                        label: t('admin.oauth.providerTitle'),\n                        label_default: 'Enable OAuth 2.0 Service Provider: ',\n                        help_text: t('admin.oauth.providerDescription'),\n                        help_text_default: 'When true, MatterFOSS can act as an OAuth 2.0 service provider allowing MatterFOSS to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'ServiceSettings.EnableOnlyAdminIntegrations',\n                        label: t('admin.service.integrationAdmin'),\n                        label_default: 'Restrict managing integrations to Admins:',\n                        help_text: t('admin.service.integrationAdminDesc'),\n                        help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',\n                        permissions_mapping_name: 'enableOnlyAdminIntegrations',\n                        isHidden: it.licensed,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePostUsernameOverride',\n                        label: t('admin.service.overrideTitle'),\n                        label_default: 'Enable integrations to override usernames:',\n                        help_text: t('admin.service.overrideDescription'),\n                        help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePostIconOverride',\n                        label: t('admin.service.iconTitle'),\n                        label_default: 'Enable integrations to override profile picture icons:',\n                        help_text: t('admin.service.iconDescription'),\n                        help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableUserAccessTokens',\n                        label: t('admin.service.userAccessTokensTitle'),\n                        label_default: 'Enable User Access Tokens: ',\n                        help_text: t('admin.service.userAccessTokensDescription'),\n                        help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\\n\\n To manage who can create personal access tokens or to search users by token ID, go to the **User Management > Users** page.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.INTEGRATION_MANAGEMENT)),\n                    },\n                ],\n            },\n        },\n        bot_accounts: {\n            url: 'integrations/bot_accounts',\n            title: t('admin.integrations.botAccounts'),\n            title_default: 'Bot Accounts',\n            isHidden: it.all(\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.BOT_ACCOUNTS)),\n            ),\n            schema: {\n                id: 'BotAccountSettings',\n                name: t('admin.integrations.botAccounts.title'),\n                name_default: 'Bot Accounts',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableBotAccountCreation',\n                        label: t('admin.service.enableBotTitle'),\n                        label_default: 'Enable Bot Account Creation: ',\n                        help_text: t('admin.service.enableBotAccountCreation'),\n                        help_text_default: 'When true, System Admins can create bot accounts for integrations in [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots). Bot accounts are similar to user accounts except they cannot be used to log in. See [documentation](https://mattermost.com/pl/default-bot-accounts) to learn more.',\n                        help_text_markdown: true,\n                        help_text_values: {siteURL: getSiteURL()},\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.BOT_ACCOUNTS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.DisableBotsWhenOwnerIsDeactivated',\n                        label: t('admin.service.disableBotOwnerDeactivatedTitle'),\n                        label_default: 'Disable bot accounts when owner is deactivated:',\n                        help_text: t('admin.service.disableBotWhenOwnerIsDeactivated'),\n                        help_text_default: 'When a user is deactivated, disables all bot accounts managed by the user. To re-enable bot accounts, go to [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots).',\n                        help_text_markdown: true,\n                        help_text_values: {siteURL: getSiteURL()},\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.BOT_ACCOUNTS)),\n                    },\n                ],\n            },\n        },\n        gif: {\n            url: 'integrations/gif',\n            title: t('admin.sidebar.gif'),\n            title_default: 'GIF (Beta)',\n            isHidden: it.all(\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.GIF)),\n            ),\n            schema: {\n                id: 'GifSettings',\n                name: t('admin.integrations.gif'),\n                name_default: 'GIF (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableGifPicker',\n                        label: t('admin.customization.enableGifPickerTitle'),\n                        label_default: 'Enable GIF Picker:',\n                        help_text: t('admin.customization.enableGifPickerDesc'),\n                        help_text_default: 'Allow users to select GIFs from the emoji picker via a Gfycat integration.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.GIF)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GfycatApiKey',\n                        label: t('admin.customization.gfycatApiKey'),\n                        label_default: 'Gfycat API Key:',\n                        help_text: t('admin.customization.gfycatApiKeyDescription'),\n                        help_text_default: 'Request an API key at [https://developers.gfycat.com/signup/#](!https://developers.gfycat.com/signup/#). Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.GIF)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GfycatApiSecret',\n                        label: t('admin.customization.gfycatApiSecret'),\n                        label_default: 'Gfycat API Secret:',\n                        help_text: t('admin.customization.gfycatApiSecretDescription'),\n                        help_text_default: 'The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.GIF)),\n                    },\n                ],\n            },\n        },\n        cors: {\n            url: 'integrations/cors',\n            title: t('admin.sidebar.cors'),\n            title_default: 'CORS',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.CORS)),\n            ),\n            schema: {\n                id: 'CORS',\n                name: t('admin.integrations.cors'),\n                name_default: 'CORS',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.AllowCorsFrom',\n                        label: t('admin.service.corsTitle'),\n                        label_default: 'Enable cross-origin requests from:',\n                        placeholder: t('admin.service.corsEx'),\n                        placeholder_default: 'http://example.com',\n                        help_text: t('admin.service.corsDescription'),\n                        help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use \"*\" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to \"*\" in production.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.CORS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.CorsExposedHeaders',\n                        label: t('admin.service.corsExposedHeadersTitle'),\n                        label_default: 'CORS Exposed Headers:',\n                        placeholder: t('admin.service.corsHeadersEx'),\n                        placeholder_default: 'X-My-Header',\n                        help_text: t('admin.service.corsExposedHeadersDescription'),\n                        help_text_default: 'Whitelist of headers that will be accessible to the requester.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.CORS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CorsAllowCredentials',\n                        label: t('admin.service.corsAllowCredentialsLabel'),\n                        label_default: 'CORS Allow Credentials:',\n                        help_text: t('admin.service.corsAllowCredentialsDescription'),\n                        help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.CORS)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CorsDebug',\n                        label: t('admin.service.CorsDebugLabel'),\n                        label_default: 'CORS Debug:',\n                        help_text: t('admin.service.corsDebugDescription'),\n                        help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair \"source\":\"cors\".',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.INTEGRATIONS.CORS)),\n                    },\n                ],\n            },\n        },\n    },\n    compliance: {\n        icon: 'fa-list',\n        sectionTitle: t('admin.sidebar.compliance'),\n        sectionTitleDefault: 'Compliance',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.COMPLIANCE)),\n        custom_policy_form_edit: {\n            url: 'compliance/data_retention_settings/custom_policy/:policy_id',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('DataRetention')),\n                it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n                it.configIsFalse('FeatureFlags', 'CustomDataRetentionEnabled'),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n            schema: {\n                id: 'CustomDataRetentionForm',\n                component: CustomDataRetentionForm,\n            },\n\n        },\n        custom_policy_form: {\n            url: 'compliance/data_retention_settings/custom_policy',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('DataRetention')),\n                it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n                it.configIsFalse('FeatureFlags', 'CustomDataRetentionEnabled'),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n            schema: {\n                id: 'CustomDataRetentionForm',\n                component: CustomDataRetentionForm,\n            },\n\n        },\n        global_policy_form: {\n            url: 'compliance/data_retention_settings/global_policy',\n            isHidden: it.any(\n                it.not(it.licensedForFeature('DataRetention')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n                it.configIsFalse('FeatureFlags', 'CustomDataRetentionEnabled'),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n            schema: {\n                id: 'GlobalDataRetentionForm',\n                component: GlobalDataRetentionForm,\n            },\n        },\n        data_retention: {\n            url: 'compliance/data_retention_settings',\n            title: t('admin.sidebar.dataRetentionSettingsPolicies'),\n            title_default: 'Data Retention Policies',\n            searchableStrings: [\n                'admin.data_retention.title',\n                'admin.data_retention.messageRetentionDays.description',\n                'admin.data_retention.fileRetentionDays.description',\n                ['admin.data_retention.note.description', {documentationLink: ''}],\n                'admin.data_retention.enableMessageDeletion.title',\n                'admin.data_retention.enableMessageDeletion.description',\n                'admin.data_retention.enableFileDeletion.title',\n                'admin.data_retention.enableFileDeletion.description',\n                'admin.data_retention.deletionJobStartTime.title',\n                'admin.data_retention.deletionJobStartTime.description',\n                'admin.data_retention.createJob.title',\n                'admin.data_retention.createJob.help',\n            ],\n            isHidden: it.any(\n                it.not(it.licensedForFeature('DataRetention')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n                it.configIsFalse('FeatureFlags', 'CustomDataRetentionEnabled'),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n            schema: {\n                id: 'DataRetentionSettings',\n                component: DataRetentionSettings,\n            },\n        },\n        data_retention_old: {\n            url: 'compliance/data_retention',\n            title: t('admin.sidebar.dataRetentionPolicy'),\n            title_default: 'Data Retention Policy',\n            searchableStrings: [\n                'admin.data_retention.title',\n                'admin.data_retention.messageRetentionDays.description',\n                'admin.data_retention.fileRetentionDays.description',\n                ['admin.data_retention.note.description', {documentationLink: ''}],\n                'admin.data_retention.enableMessageDeletion.title',\n                'admin.data_retention.enableMessageDeletion.description',\n                'admin.data_retention.enableFileDeletion.title',\n                'admin.data_retention.enableFileDeletion.description',\n                'admin.data_retention.deletionJobStartTime.title',\n                'admin.data_retention.deletionJobStartTime.description',\n                'admin.data_retention.createJob.title',\n                'admin.data_retention.createJob.help',\n            ],\n            isHidden: it.any(\n                it.not(it.licensedForFeature('DataRetention')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n                it.configIsTrue('FeatureFlags', 'CustomDataRetentionEnabled'),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.DATA_RETENTION_POLICY)),\n            schema: {\n                id: 'DataRetentionSettings',\n                component: DataRetentionSettingsOld,\n            },\n        },\n        data_retention_feature_discovery: {\n            url: 'compliance/data_retention',\n            isDiscovery: true,\n            title: t('admin.sidebar.dataRetentionPolicy'),\n            title_default: 'Data Retention Policy',\n            isHidden: it.any(\n                it.licensedForFeature('DataRetention'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'DataRetentionSettings',\n                name: t('admin.data_retention.title'),\n                name_default: 'Data Retention Policy',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: DataRetentionFeatureDiscovery,\n                        key: 'DataRetentionFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        message_export: {\n            url: 'compliance/export',\n            title: t('admin.sidebar.complianceExport'),\n            title_default: 'Compliance Export (Beta)',\n            searchableStrings: [\n                'admin.service.complianceExportTitle',\n                'admin.service.complianceExportDesc',\n                'admin.complianceExport.exportJobStartTime.title',\n                'admin.complianceExport.exportJobStartTime.description',\n                'admin.complianceExport.exportFormat.title',\n                ['admin.complianceExport.exportFormat.description', {siteURL: ''}],\n                'admin.complianceExport.createJob.title',\n                'admin.complianceExport.createJob.help',\n                'admin.complianceExport.globalRelayCustomerType.title',\n                'admin.complianceExport.globalRelayCustomerType.description',\n                'admin.complianceExport.globalRelaySmtpUsername.title',\n                'admin.complianceExport.globalRelaySmtpUsername.description',\n                'admin.complianceExport.globalRelaySmtpPassword.title',\n                'admin.complianceExport.globalRelaySmtpPassword.description',\n                'admin.complianceExport.globalRelayEmailAddress.title',\n                'admin.complianceExport.globalRelayEmailAddress.description',\n            ],\n            isHidden: it.any(\n                it.not(it.licensedForFeature('MessageExport')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_EXPORT)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_EXPORT)),\n            schema: {\n                id: 'MessageExportSettings',\n                component: MessageExportSettings,\n            },\n        },\n        compliance_export_feature_discovery: {\n            isDiscovery: true,\n            url: 'compliance/export',\n            title: t('admin.sidebar.complianceExport'),\n            title_default: 'Compliance Export (Beta)',\n            isHidden: it.any(\n                it.licensedForFeature('MessageExport'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'MessageExportSettings',\n                name: t('admin.complianceExport.title'),\n                name_default: 'Compliance Export (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: ComplianceExportFeatureDiscovery,\n                        key: 'ComplianceExportFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n        audits: {\n            url: 'compliance/monitoring',\n            title: t('admin.sidebar.complianceMonitoring'),\n            title_default: 'Compliance Monitoring',\n            isHidden: it.any(\n                it.not(it.licensed),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING)),\n            searchableStrings: [\n                'admin.audits.title',\n                'admin.audits.reload',\n            ],\n            schema: {\n                id: 'Audits',\n                name: t('admin.compliance.complianceMonitoring'),\n                name_default: 'Compliance Monitoring',\n                component: Audits,\n                isHidden: it.not(it.licensedForFeature('Compliance')),\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.compliance.newComplianceExportBanner'),\n                        label_markdown: true,\n                        label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/export) feature, and will be removed in a future release. We recommend migrating to the new system.',\n                        label_values: {siteURL: getSiteURL()},\n                        banner_type: 'info',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ComplianceSettings.Enable',\n                        label: t('admin.compliance.enableTitle'),\n                        label_default: 'Enable Compliance Reporting:',\n                        help_text: t('admin.compliance.enableDesc'),\n                        help_text_default: 'When true, MatterFOSS allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',\n                        help_text_markdown: true,\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ComplianceSettings.Directory',\n                        label: t('admin.compliance.directoryTitle'),\n                        label_default: 'Compliance Report Directory:',\n                        help_text: t('admin.compliance.directoryDescription'),\n                        help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',\n                        placeholder: t('admin.compliance.directoryExample'),\n                        placeholder_default: 'E.g.: \"./data/\"',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING)),\n                            it.stateIsFalse('ComplianceSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ComplianceSettings.EnableDaily',\n                        label: t('admin.compliance.enableDailyTitle'),\n                        label_default: 'Enable Daily Report:',\n                        help_text: t('admin.compliance.enableDailyDesc'),\n                        help_text_default: 'When true, MatterFOSS will generate a daily compliance report.',\n                        isHidden: it.not(it.licensedForFeature('Compliance')),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.COMPLIANCE_MONITORING)),\n                            it.stateIsFalse('ComplianceSettings.Enable'),\n                        ),\n                    },\n                ],\n            },\n        },\n        custom_terms_of_service: {\n            url: 'compliance/custom_terms_of_service',\n            title: t('admin.sidebar.customTermsOfService'),\n            title_default: 'Custom Terms of Service (Beta)',\n            searchableStrings: [\n                'admin.support.termsOfServiceTitle',\n                'admin.support.enableTermsOfServiceTitle',\n                'admin.support.enableTermsOfServiceHelp',\n                'admin.support.termsOfServiceTextTitle',\n                'admin.support.termsOfServiceTextHelp',\n                'admin.support.termsOfServiceReAcceptanceTitle',\n                'admin.support.termsOfServiceReAcceptanceHelp',\n            ],\n            isHidden: it.any(\n                it.not(it.licensedForFeature('CustomTermsOfService')),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.COMPLIANCE.CUSTOM_TERMS_OF_SERVICE)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.COMPLIANCE.CUSTOM_TERMS_OF_SERVICE)),\n            schema: {\n                id: 'TermsOfServiceSettings',\n                component: CustomTermsOfServiceSettings,\n            },\n        },\n        custom_terms_of_service_feature_discovery: {\n            url: 'compliance/custom_terms_of_service',\n            isDiscovery: true,\n            title: t('admin.sidebar.customTermsOfService'),\n            title_default: 'Custom Terms of Service (Beta)',\n            isHidden: it.any(\n                it.licensedForFeature('CustomTermsOfService'),\n                it.not(it.enterpriseReady),\n            ),\n            schema: {\n                id: 'TermsOfServiceSettings',\n                name: t('admin.support.termsOfServiceTitle'),\n                name_default: 'Custom Terms of Service (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: CustomTermsOfServiceFeatureDiscovery,\n                        key: 'CustomTermsOfServiceFeatureDiscovery',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.ABOUT.EDITION_AND_LICENSE)),\n                    },\n                ],\n            },\n        },\n    },\n    experimental: {\n        icon: 'fa-flask',\n        sectionTitle: t('admin.sidebar.experimental'),\n        sectionTitleDefault: 'Experimental',\n        isHidden: it.not(it.userHasReadPermissionOnSomeResources(RESOURCE_KEYS.EXPERIMENTAL)),\n        experimental_features: {\n            url: 'experimental/features',\n            title: t('admin.sidebar.experimentalFeatures'),\n            title_default: 'Features',\n            isHidden: it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n            schema: {\n                id: 'ExperimentalSettings',\n                name: t('admin.experimental.experimentalFeatures'),\n                name_default: 'Experimental Features',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'LdapSettings.LoginButtonColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonColor.title'),\n                        label_default: 'AD/LDAP Login Button Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('LDAP')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'LdapSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonBorderColor.title'),\n                        label_default: 'AD/LDAP Login Button Border Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('LDAP')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'LdapSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonTextColor.title'),\n                        label_default: 'AD/LDAP Login Button Text Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('LDAP')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableAuthenticationTransfer',\n                        label: t('admin.experimental.experimentalEnableAuthenticationTransfer.title'),\n                        label_default: 'Allow Authentication Transfer:',\n                        help_text: t('admin.experimental.experimentalEnableAuthenticationTransfer.desc'),\n                        help_text_default: 'When true, users can change their sign-in method to any that is enabled on the server, any via Account Settings or the APIs. When false, Users cannot change their sign-in method, regardless of which authentication options are enabled.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensed), // documented as E20 and higher, but only E10 in the code\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ExperimentalSettings.LinkMetadataTimeoutMilliseconds',\n                        label: t('admin.experimental.linkMetadataTimeoutMilliseconds.title'),\n                        label_default: 'Link Metadata Timeout:',\n                        help_text: t('admin.experimental.linkMetadataTimeoutMilliseconds.desc'),\n                        help_text_default: 'The number of milliseconds to wait for metadata from a third-party link. Used with Post Metadata.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.linkMetadataTimeoutMilliseconds.example'),\n                        placeholder_default: 'E.g.: \"5000\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'EmailSettings.EmailBatchingBufferSize',\n                        label: t('admin.experimental.emailBatchingBufferSize.title'),\n                        label_default: 'Email Batching Buffer Size:',\n                        help_text: t('admin.experimental.emailBatchingBufferSize.desc'),\n                        help_text_default: 'Specify the maximum number of notifications batched into a single email.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.emailBatchingBufferSize.example'),\n                        placeholder_default: 'E.g.: \"256\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'EmailSettings.EmailBatchingInterval',\n                        label: t('admin.experimental.emailBatchingInterval.title'),\n                        label_default: 'Email Batching Interval:',\n                        help_text: t('admin.experimental.emailBatchingInterval.desc'),\n                        help_text_default: 'Specify the maximum frequency, in seconds, which the batching job checks for new notifications. Longer batching intervals will increase performance.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.emailBatchingInterval.example'),\n                        placeholder_default: 'E.g.: \"30\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'EmailSettings.LoginButtonColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonColor.title'),\n                        label_default: 'Email Login Button Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the email login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'EmailSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonBorderColor.title'),\n                        label_default: 'Email Login Button Border Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the email login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'EmailSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonTextColor.title'),\n                        label_default: 'Email Login Button Text Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the email login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableUserDeactivation',\n                        label: t('admin.experimental.enableUserDeactivation.title'),\n                        label_default: 'Enable Account Deactivation:',\n                        help_text: t('admin.experimental.enableUserDeactivation.desc'),\n                        help_text_default: 'When true, users may deactivate their own account from **Account Settings > Advanced**. If a user deactivates their own account, they will get an email notification confirming they were deactivated. When false, users may not deactivate their own account.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalEnableAutomaticReplies',\n                        label: t('admin.experimental.experimentalEnableAutomaticReplies.title'),\n                        label_default: 'Enable Automatic Replies:',\n                        help_text: t('admin.experimental.experimentalEnableAutomaticReplies.desc'),\n                        help_text_default: 'When true, users can enable Automatic Replies in **Account Settings > Notifications**. Users set a custom message that will be automatically sent in response to Direct Messages. When false, disables the Automatic Direct Message Replies feature and hides it from Account Settings.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableChannelViewedMessages',\n                        label: t('admin.experimental.enableChannelViewedMessages.title'),\n                        label_default: 'Enable Channel Viewed WebSocket Messages:',\n                        help_text: t('admin.experimental.enableChannelViewedMessages.desc'),\n                        help_text_default: 'This setting determines whether `channel_viewed` WebSocket events are sent, which synchronize unread notifications across clients and devices. Disabling the setting in larger deployments may improve server performance.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ExperimentalSettings.ClientSideCertEnable',\n                        label: t('admin.experimental.clientSideCertEnable.title'),\n                        label_default: 'Enable Client-Side Certification:',\n                        help_text: t('admin.experimental.clientSideCertEnable.desc'),\n                        help_text_default: 'Enables client-side certification for your MatterFOSS server. See [documentation](!https://docs.mattermost.com/deployment/certificate-based-authentication.html) to learn more.',\n                        help_text_markdown: true,\n                        isHidden: it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ExperimentalSettings.ClientSideCertCheck',\n                        label: t('admin.experimental.clientSideCertCheck.title'),\n                        label_default: 'Client-Side Certification Login Method:',\n                        help_text: t('admin.experimental.clientSideCertCheck.desc'),\n                        help_text_default: 'When **primary**, after the client side certificate is verified, user’s email is retrieved from the certificate and is used to log in without a password. When **secondary**, after the client side certificate is verified, user’s email is retrieved from the certificate and matched against the one supplied by the user. If they match, the user logs in with regular email/password credentials.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'primary',\n                                display_name: 'primary',\n                                display_name_default: 'primary',\n                            },\n                            {\n                                value: 'secondary',\n                                display_name: 'secondary',\n                                display_name_default: 'secondary',\n                            },\n                        ],\n                        isHidden: it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                            it.stateIsFalse('ExperimentalSettings.ClientSideCertEnable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableDefaultChannelLeaveJoinMessages',\n                        label: t('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.title'),\n                        label_default: 'Enable Default Channel Leave/Join System Messages:',\n                        help_text: t('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.desc'),\n                        help_text_default: 'This setting determines whether team leave/join system messages are posted in the default town-square channel.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableHardenedMode',\n                        label: t('admin.experimental.experimentalEnableHardenedMode.title'),\n                        label_default: 'Enable Hardened Mode:',\n                        help_text: t('admin.experimental.experimentalEnableHardenedMode.desc'),\n                        help_text_default: 'Enables a hardened mode for MatterFOSS that makes user experience trade-offs in the interest of security. See [documentation](!https://docs.mattermost.com/administration/config-settings.html#enable-hardened-mode-experimental) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePreviewFeatures',\n                        label: t('admin.experimental.enablePreviewFeatures.title'),\n                        label_default: 'Enable Preview Features:',\n                        help_text: t('admin.experimental.enablePreviewFeatures.desc'),\n                        help_text_default: 'When true, preview features can be enabled from **Account Settings > Advanced > Preview pre-release features**. When false, disables and hides preview features from **Account Settings > Advanced > Preview pre-release features**.',\n                        help_text_markdown: true,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ThemeSettings.EnableThemeSelection',\n                        label: t('admin.experimental.enableThemeSelection.title'),\n                        label_default: 'Enable Theme Selection:',\n                        help_text: t('admin.experimental.enableThemeSelection.desc'),\n                        help_text_default: 'Enables the **Display > Theme** tab in Account Settings so users can select their theme.',\n                        help_text_markdown: true,\n                        isHidden: it.not(it.licensed), // E10 and higher\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ThemeSettings.AllowCustomThemes',\n                        label: t('admin.experimental.allowCustomThemes.title'),\n                        label_default: 'Allow Custom Themes:',\n                        help_text: t('admin.experimental.allowCustomThemes.desc'),\n                        help_text_default: 'Enables the **Display > Theme > Custom Theme** section in Account Settings.',\n                        help_text_markdown: true,\n                        isHidden: it.not(it.licensed), // E10 and higher\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                            it.stateIsFalse('ThemeSettings.EnableThemeSelection'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ThemeSettings.DefaultTheme',\n                        label: t('admin.experimental.defaultTheme.title'),\n                        label_default: 'Default Theme:',\n                        help_text: t('admin.experimental.defaultTheme.desc'),\n                        help_text_default: 'Set a default theme that applies to all new users on the system.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'default',\n                                display_name: 'Mattermost',\n                                display_name_default: 'Mattermost',\n                            },\n                            {\n                                value: 'organization',\n                                display_name: 'Organization',\n                                display_name_default: 'Organization',\n                            },\n                            {\n                                value: 'mattermostDark',\n                                display_name: 'Mattermost Dark',\n                                display_name_default: 'Mattermost Dark',\n                            },\n                            {\n                                value: 'windows10',\n                                display_name: 'Windows Dark',\n                                display_name_default: 'Windows Dark',\n                            },\n                        ],\n                        isHidden: it.not(it.licensed), // E10 and higher\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableTutorial',\n                        label: t('admin.experimental.enableTutorial.title'),\n                        label_default: 'Enable Tutorial:',\n                        help_text: t('admin.experimental.enableTutorial.desc'),\n                        help_text_default: 'When true, users are prompted with a tutorial when they open MatterFOSS for the first time after account creation. When false, the tutorial is disabled, and users are placed in Town Square when they open MatterFOSS for the first time after account creation.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableUserTypingMessages',\n                        label: t('admin.experimental.enableUserTypingMessages.title'),\n                        label_default: 'Enable User Typing Messages:',\n                        help_text: t('admin.experimental.enableUserTypingMessages.desc'),\n                        help_text_default: 'This setting determines whether \"user is typing...\" messages are displayed below the message box. Disabling the setting in larger deployments may improve server performance.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.TimeBetweenUserTypingUpdatesMilliseconds',\n                        label: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.title'),\n                        label_default: 'User Typing Timeout:',\n                        help_text: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.desc'),\n                        help_text_default: 'The number of milliseconds to wait between emitting user typing websocket events.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.example'),\n                        placeholder_default: 'E.g.: \"5000\"',\n                        isDisabled: it.any(\n                            it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                            it.stateIsFalse('ServiceSettings.EnableUserTypingMessages'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.ExperimentalPrimaryTeam',\n                        label: t('admin.experimental.experimentalPrimaryTeam.title'),\n                        label_default: 'Primary Team:',\n                        help_text: t('admin.experimental.experimentalPrimaryTeam.desc'),\n                        help_text_default: 'The primary team of which users on the server are members. When a primary team is set, the options to join other teams or leave the primary team are disabled.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.experimental.experimentalPrimaryTeam.example'),\n                        placeholder_default: 'E.g.: \"teamname\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ExperimentalSettings.UseNewSAMLLibrary',\n                        label: t('admin.experimental.experimentalUseNewSAMLLibrary.title'),\n                        label_default: 'Use Improved SAML Library (Beta):',\n                        help_text: t('admin.experimental.experimentalUseNewSAMLLibrary.desc'),\n                        help_text_default: 'Enable an updated SAML Library, which does not require the XML Security Library (xmlsec1) to be installed. Warning: Not all providers have been tested. If you experience issues, please contact support: [https://about.mattermost.com/support/](!https://about.mattermost.com/support/). Changing this setting requires a server restart before taking effect.',\n                        help_text_markdown: true,\n                        isHidden: true || it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'SamlSettings.LoginButtonColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonColor.title'),\n                        label_default: 'SAML Login Button Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'SamlSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonBorderColor.title'),\n                        label_default: 'SAML Login Button Border Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'SamlSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonTextColor.title'),\n                        label_default: 'SAML Login Button Text Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('SAML')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableLegacySidebar',\n                        label: t('admin.experimental.enableLegacySidebar.title'),\n                        label_default: 'Enable Legacy Sidebar',\n                        help_text: t('admin.experimental.enableLegacySidebar.desc'),\n                        help_text_default: 'When enabled, users cannot access new sidebar features including custom, collapsible categories and unread channel filtering. We recommend only enabling the legacy sidebar if users are experiencing breaking changes or bugs.',\n                        help_text_markdown: true,\n                        isHidden: it.licensedForFeature('Cloud'),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ServiceSettings.CollapsedThreads',\n                        label: t('admin.experimental.collapsedThreads.title'),\n                        label_default: 'Collapsed Reply Threads',\n                        help_text: t('admin.experimental.collapsedThreads.desc'),\n                        help_text_default: 'When enabled (default on), this setting enables collapsed reply threads for all users on this server. Users can disable the feature in Account Settings > Display > Collapsed Reply Threads (Beta). When enabled (default off), users must enable collapsed reply threads in Account Settings. When disabled, users cannot access collapsed reply threads. [Learn more about collapsed reply threads](!https://about.mattermost.com/default-threads).',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'disabled',\n                                display_name: t('admin.experimental.collapsedThreads.off'),\n                                display_name_default: 'Disabled',\n                            },\n                            {\n                                value: 'default_on',\n                                display_name: t('admin.experimental.collapsedThreads.default_on'),\n                                display_name_default: 'Enabled (Default On)',\n                            },\n                            {\n                                value: 'default_off',\n                                display_name: t('admin.experimental.collapsedThreads.default_off'),\n                                display_name_default: 'Enabled (Default Off)',\n                            },\n\n                            /* {\n                                value: 'always_on',\n                                display_name: t('admin.experimental.collapsedThreads.alwaysOn'),\n                                display_name_default: 'Always On',\n                            }, */\n                        ],\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                        isHidden: it.configIsFalse('FeatureFlags', 'CollapsedThreads'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalChannelOrganization',\n                        label: t('admin.experimental.experimentalChannelOrganization.title'),\n                        label_default: 'Channel Grouping and Sorting',\n                        help_text: t('admin.experimental.experimentalChannelOrganization.desc'),\n                        help_text_default: 'Enables channel sidebar organization options in **Account Settings > Sidebar > Channel grouping and sorting** including options for grouping unread channels, sorting channels by most recent post and combining all channel types into a single list. These settings are only available if **Enable Legacy Sidebar** is **Enabled**.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.licensedForFeature('Cloud'),\n                            it.configIsFalse('ServiceSettings', 'EnableLegacySidebar'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableXToLeaveChannelsFromLHS',\n                        label: t('admin.experimental.enableXToLeaveChannelsFromLHS.title'),\n                        label_default: 'Enable X to Leave Channels from Left-Hand Sidebar:',\n                        help_text: t('admin.experimental.enableXToLeaveChannelsFromLHS.desc'),\n                        help_text_default: 'When true, users can leave Public and Private Channels by clicking the “x” beside the channel name. When false, users must use the **Leave Channel** option from the channel menu to leave channels. These settings are only available if **Enable Legacy Sidebar** is **Enabled**.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.licensedForFeature('Cloud'),\n                            it.configIsFalse('ServiceSettings', 'EnableLegacySidebar'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CloseUnusedDirectMessages',\n                        label: t('admin.experimental.closeUnusedDirectMessages.title'),\n                        label_default: 'Autoclose Direct Messages in Sidebar:',\n                        help_text: t('admin.experimental.closeUnusedDirectMessages.desc'),\n                        help_text_default: 'When true, direct message conversations with no activity for 7 days will be hidden from the sidebar. When false, conversations remain in the sidebar until they are manually closed. These settings are only available if **Enable Legacy Sidebar** is **Enabled**.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.licensedForFeature('Cloud'),\n                            it.configIsFalse('ServiceSettings', 'EnableLegacySidebar'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalHideTownSquareinLHS',\n                        label: t('admin.experimental.experimentalHideTownSquareinLHS.title'),\n                        label_default: 'Town Square is Hidden in Left-Hand Sidebar:',\n                        help_text: t('admin.experimental.experimentalHideTownSquareinLHS.desc'),\n                        help_text_default: 'When true, hides Town Square in the left-hand sidebar if there are no unread messages in the channel. When false, Town Square is always visible in the left-hand sidebar even if all messages have been read. These settings are only available if **Enable Legacy Sidebar** is **Enabled**.',\n                        help_text_markdown: true,\n                        isHidden: it.any(\n                            it.not(it.licensed), // E10 and higher\n                            it.licensedForFeature('Cloud'),\n                            it.configIsFalse('ServiceSettings', 'EnableLegacySidebar'),\n                        ),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'DisplaySettings.ExperimentalTimezone',\n                        label: t('admin.experimental.experimentalTimezone.title'),\n                        label_default: 'Timezone:',\n                        help_text: t('admin.experimental.experimentalTimezone.desc'),\n                        help_text_default: 'Select the timezone used for timestamps in the user interface and email notifications. When true, the Timezone setting is visible in the Account Settings and a time zone is automatically assigned in the next active session. When false, the Timezone setting is hidden in the Account Settings.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalTownSquareIsReadOnly',\n                        label: t('admin.experimental.experimentalTownSquareIsReadOnly.title'),\n                        label_default: 'Town Square is Read-Only:',\n                        help_text: t('admin.experimental.experimentalTownSquareIsReadOnly.desc'),\n                        help_text_default: 'When true, only System Admins can post in Town Square. Other members are not able to post, reply, upload files, emoji react or pin messages to Town Square, nor are they able to change the channel name, header or purpose. When false, anyone can post in Town Square.',\n                        help_text_markdown: true,\n                        isHidden: it.not(it.licensed), // E10 and higher\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.UseChannelInEmailNotifications',\n                        label: t('admin.experimental.useChannelInEmailNotifications.title'),\n                        label_default: 'Use Channel Name in Email Notifications:',\n                        help_text: t('admin.experimental.useChannelInEmailNotifications.desc'),\n                        help_text_default: 'When true, channel and team name appears in email notification subject lines. Useful for servers using only one team. When false, only team name appears in email notification subject line.',\n                        help_text_markdown: false,\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.UserStatusAwayTimeout',\n                        label: t('admin.experimental.userStatusAwayTimeout.title'),\n                        label_default: 'User Status Away Timeout:',\n                        help_text: t('admin.experimental.userStatusAwayTimeout.desc'),\n                        help_text_default: 'This setting defines the number of seconds after which the user’s status indicator changes to \"Away\", when they are away from MatterFOSS.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.userStatusAwayTimeout.example'),\n                        placeholder_default: 'E.g.: \"300\"',\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ExperimentalSettings.EnableSharedChannels',\n                        label: t('admin.experimental.enableSharedChannels.title'),\n                        label_default: 'Enable Shared Channels:',\n                        help_text: t('admin.experimental.enableSharedChannels.desc'),\n                        help_text_default: 'Toggles Shared Channels',\n                        help_text_markdown: false,\n                        isHidden: it.not(it.licensedForFeature('SharedChannels')),\n                        isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURES)),\n                    },\n                ],\n            },\n        },\n        feature_flags: {\n            url: 'experimental/feature_flags',\n            title: t('admin.feature_flags.title'),\n            title_default: 'Feature Flags',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.FEATURE_FLAGS)),\n            ),\n            isDisabled: true,\n            searchableStrings: [\n                'admin.feature_flags.title',\n            ],\n            schema: {\n                id: 'Feature Flags',\n                component: FeatureFlags,\n            },\n        },\n        bleve: {\n            url: 'experimental/blevesearch',\n            title: t('admin.sidebar.blevesearch'),\n            title_default: 'Bleve',\n            isHidden: it.any(\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                it.not(it.userHasReadPermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.BLEVE)),\n            ),\n            isDisabled: it.not(it.userHasWritePermissionOnResource(RESOURCE_KEYS.EXPERIMENTAL.BLEVE)),\n            searchableStrings: [\n                'admin.bleve.title',\n                'admin.bleve.enableIndexingTitle',\n                ['admin.bleve.enableIndexingDescription', {documentationLink: ''}],\n                'admin.bleve.enableIndexingDescription.documentationLinkText',\n                'admin.bleve.bulkIndexingTitle',\n                'admin.bleve.createJob.help',\n                'admin.bleve.purgeIndexesHelpText',\n                'admin.bleve.purgeIndexesButton',\n                'admin.bleve.purgeIndexesButton.label',\n                'admin.bleve.enableSearchingTitle',\n                'admin.bleve.enableSearchingDescription',\n            ],\n            schema: {\n                id: 'BleveSettings',\n                component: BleveSettings,\n            },\n        },\n    },\n};\n\nt('admin.field_names.allowBannerDismissal');\nt('admin.field_names.bannerColor');\nt('admin.field_names.bannerText');\nt('admin.field_names.bannerTextColor');\nt('admin.field_names.enableBanner');\nt('admin.field_names.enableCommands');\nt('admin.field_names.enableConfirmNotificationsToChannel');\nt('admin.field_names.enableIncomingWebhooks');\nt('admin.field_names.enableOAuthServiceProvider');\nt('admin.field_names.enableOutgoingWebhooks');\nt('admin.field_names.enablePostIconOverride');\nt('admin.field_names.enablePostUsernameOverride');\nt('admin.field_names.enableUserAccessTokens');\nt('admin.field_names.enableUserCreation');\nt('admin.field_names.maxChannelsPerTeam');\nt('admin.field_names.maxNotificationsPerChannel');\nt('admin.field_names.maxUsersPerTeam');\nt('admin.field_names.postEditTimeLimit');\nt('admin.field_names.restrictCreationToDomains');\nt('admin.field_names.restrictDirectMessage');\nt('admin.field_names.teammateNameDisplay');\n\nexport default AdminDefinition;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useStore, useSelector} from 'react-redux';\n\nimport {getStandardAnalytics} from 'matterfoss-redux/actions/admin';\nimport {getCloudSubscription, getCloudProducts, getCloudCustomer} from 'matterfoss-redux/actions/cloud';\nimport {savePreferences} from 'matterfoss-redux/actions/preferences';\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\nimport {makeGetCategory} from 'matterfoss-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\nimport {DispatchFunc} from 'matterfoss-redux/types/actions';\nimport {PreferenceType} from 'matterfoss-redux/types/preferences';\n\nimport {Product} from 'matterfoss-redux/types/cloud';\n\nimport {pageVisited, trackEvent} from 'actions/telemetry_actions';\nimport {openModal} from 'actions/views/modals';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport PurchaseModal from 'components/purchase_modal';\n\nimport {getCloudContactUsLink, InquiryType, InquiryIssue} from 'selectors/cloud';\nimport {GlobalState} from 'types/store';\nimport {\n    Preferences,\n    CloudBanners,\n    TELEMETRY_CATEGORIES,\n    ModalIdentifiers,\n    CloudProducts,\n} from 'utils/constants';\nimport {isCustomerCardExpired} from 'utils/cloud_utils';\nimport {getRemainingDaysFromFutureTimestamp} from 'utils/utils.jsx';\n\nimport BillingSummary from '../billing_summary';\nimport PlanDetails from '../plan_details';\n\nimport {\n    contactSalesCard,\n    cancelSubscription,\n    infoBanner,\n    creditCardExpiredBanner,\n    paymentFailedBanner,\n} from './billing_subscriptions';\n\nimport './billing_subscriptions.scss';\n\nconst WARNING_THRESHOLD = 3;\n\nconst BillingSubscriptions: React.FC = () => {\n    const dispatch = useDispatch<DispatchFunc>();\n    const store = useStore();\n    const userLimit = useSelector((state: GlobalState) => parseInt(getConfig(state).ExperimentalCloudUserLimit!, 10));\n    const analytics = useSelector((state: GlobalState) => state.entities.admin.analytics);\n    const currentUser = useSelector((state: GlobalState) => getCurrentUser(state));\n    const isCloud = useSelector((state: GlobalState) => getLicense(state).Cloud === 'true');\n    const subscription = useSelector((state: GlobalState) => state.entities.cloud.subscription);\n\n    const products = useSelector((state: GlobalState) => state.entities.cloud.products);\n    const isCardExpired = useSelector((state: GlobalState) => isCustomerCardExpired(state.entities.cloud.customer));\n    const getCategory = makeGetCategory();\n    const preferences = useSelector<GlobalState, PreferenceType[]>((state) => getCategory(state, Preferences.ADMIN_CLOUD_UPGRADE_PANEL));\n\n    const contactSalesLink = useSelector((state: GlobalState) => getCloudContactUsLink(state, InquiryType.Sales));\n    const cancelAccountLink = useSelector((state: GlobalState) => getCloudContactUsLink(state, InquiryType.Sales, InquiryIssue.CancelAccount));\n    const trialQuestionsLink = useSelector((state: GlobalState) => getCloudContactUsLink(state, InquiryType.Sales, InquiryIssue.TrialQuestions));\n\n    const [showCreditCardBanner, setShowCreditCardBanner] = useState(true);\n\n    const product = useSelector((state: GlobalState) => {\n        const products = state.entities.cloud.products!;\n        if (!products) {\n            return null;\n        }\n        const keys = Object.keys(products);\n        let product: Product;\n        if (products && subscription) {\n            product = products[subscription?.product_id];\n            if (!product) {\n                keys.forEach((key) => {\n                    if (products[key].name.toLowerCase().includes('professional')) {\n                        product = products[key];\n                    }\n                });\n            }\n            if (product) {\n                return product;\n            }\n        }\n        return products[keys[0]];\n    });\n\n    const subscriptionPlan = product?.sku || CloudProducts.PROFESSIONAL;\n\n    let isFreeTrial = false;\n    let daysLeftOnTrial = 0;\n    if (subscription?.is_free_trial === 'true') {\n        isFreeTrial = true;\n        daysLeftOnTrial = getRemainingDaysFromFutureTimestamp(subscription.trial_end_at);\n    }\n\n    useEffect(() => {\n        getCloudSubscription()(dispatch, store.getState());\n        getCloudProducts()(dispatch, store.getState());\n        getCloudCustomer()(dispatch, store.getState());\n\n        if (!analytics) {\n            (async function getAllAnalytics() {\n                await dispatch(getStandardAnalytics());\n            }());\n        }\n\n        pageVisited('cloud_admin', 'pageview_billing_subscription');\n\n        if (analytics && shouldShowInfoBanner()) {\n            trackEvent(TELEMETRY_CATEGORIES.CLOUD_ADMIN, 'bannerview_user_limit_warning');\n        }\n    }, []);\n\n    const shouldShowInfoBanner = (): boolean => {\n        if (!analytics || !isCloud || !userLimit || !preferences || !subscription || subscription.is_paid_tier === 'true' || preferences.some((pref: PreferenceType) => pref.name === CloudBanners.HIDE && pref.value === 'true')) {\n            return false;\n        }\n\n        if ((userLimit - Number(analytics.TOTAL_USERS)) <= WARNING_THRESHOLD && (userLimit - Number(analytics.TOTAL_USERS) > 0)) {\n            return true;\n        }\n\n        return false;\n    };\n\n    const shouldShowPaymentFailedBanner = () => {\n        return subscription?.last_invoice?.status === 'failed';\n    };\n\n    const handleHide = async () => {\n        trackEvent(\n            TELEMETRY_CATEGORIES.CLOUD_ADMIN,\n            'click_close_banner_user_limit_warning',\n        );\n        dispatch(savePreferences(currentUser.id, [\n            {\n                category: Preferences.ADMIN_CLOUD_UPGRADE_PANEL,\n                user_id: currentUser.id,\n                name: CloudBanners.HIDE,\n                value: 'true',\n            },\n        ]));\n    };\n\n    // show the upgrade section when is a free tier customer\n    const onUpgradeMattermostCloud = () => {\n        trackEvent('cloud_admin', 'click_upgrade_mattermost_cloud');\n        dispatch(openModal({\n            modalId: ModalIdentifiers.CLOUD_PURCHASE,\n            dialogType: PurchaseModal,\n        }));\n    };\n\n    if (!subscription || !products) {\n        return null;\n    }\n\n    const isPaidTier = Boolean(subscription?.is_paid_tier === 'true');\n\n    return (\n        <div className='wrapper--fixed BillingSubscriptions'>\n            <FormattedAdminHeader\n                id='admin.billing.subscription.title'\n                defaultMessage='Subscriptions'\n            />\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    {shouldShowPaymentFailedBanner() && paymentFailedBanner()}\n                    {shouldShowInfoBanner() && infoBanner(handleHide)}\n                    {showCreditCardBanner && isCardExpired && creditCardExpiredBanner(setShowCreditCardBanner)}\n                    <div className='BillingSubscriptions__topWrapper'>\n                        <PlanDetails\n                            isFreeTrial={isFreeTrial}\n                            subscriptionPlan={subscriptionPlan}\n                        />\n                        <BillingSummary\n                            isPaidTier={isPaidTier}\n                            isFreeTrial={isFreeTrial}\n                            daysLeftOnTrial={daysLeftOnTrial}\n                            onUpgradeMattermostCloud={onUpgradeMattermostCloud}\n                        />\n                    </div>\n                    {contactSalesCard(contactSalesLink, isFreeTrial, trialQuestionsLink, subscriptionPlan, onUpgradeMattermostCloud)}\n                    {cancelSubscription(cancelAccountLink, isFreeTrial, isPaidTier)}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default BillingSubscriptions;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/telemetry_actions';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport AlertBanner from 'components/alert_banner';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport privateCloudImage from 'images/private-cloud-image.svg';\nimport freeTrialPrivateCloudImage from 'images/free-trial-private-cloud-image.svg';\n\nimport {CloudProducts} from 'utils/constants';\n\nexport const contactSalesCard = (\n    contactSalesLink: any,\n    isFreeTrial: boolean,\n    trialQuestionsLink: any,\n    subscriptionPlan: string | null,\n    onUpgradeMattermostCloud: () => void,\n) => {\n    let title;\n    let description;\n\n    if (isFreeTrial) {\n        title = (\n            <FormattedMessage\n                id='admin.billing.subscription.privateCloudCard.freeTrial.title'\n                defaultMessage='Questions about your trial?'\n            />\n        );\n        description = (\n            <FormattedMessage\n                id='admin.billing.subscription.privateCloudCard.freeTrial.description'\n                defaultMessage='We love to work with our customers and their needs. Contact sales for subscription, billing or trial-specific questions.'\n            />\n        );\n    } else {\n        switch (subscriptionPlan) {\n        case CloudProducts.STARTER:\n            title = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudStarter.title'\n                    defaultMessage='Upgrade to Cloud Professional'\n                />\n            );\n            description = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudStarter.description'\n                    defaultMessage='Optimize your processes with Guest Accounts, Office365 suite integrations, Gitlab SSO and advanced permissions.'\n                />\n            );\n            break;\n        case CloudProducts.PROFESSIONAL:\n            title = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudProfessional.title'\n                    defaultMessage='Upgrade to Cloud Enterprise'\n                />\n            );\n            description = (\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudProfessional.description'\n                    defaultMessage='Advanced security and compliance features with premium support. See [https://mattermost.com/pricing-cloud/](https://mattermost.com/pricing-cloud/) for more details.'\n                />\n            );\n            break;\n        case CloudProducts.ENTERPRISE:\n            title = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudEnterprise.title'\n                    defaultMessage='Looking for an annual discount? '\n                />\n            );\n            description = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudEnterprise.description'\n                    defaultMessage='At Mattermost, we work with you and your team to meet your needs throughout the product. If you are looking for an annual discount, please reach out to our sales team.'\n                />\n            );\n            break;\n        default:\n            title = (\n                <FormattedMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudProfessional.title'\n                    defaultMessage='Upgrade to Cloud Enterprise'\n                />\n            );\n            description = (\n                <FormattedMarkdownMessage\n                    id='admin.billing.subscription.privateCloudCard.cloudProfessional.description'\n                    defaultMessage='Advanced security and compliance features with premium support. See [https://mattermost.com/pricing-cloud/](https://mattermost.com/pricing-cloud/) for more details.'\n                />\n            );\n            break;\n        }\n    }\n\n    return (\n        <div className='PrivateCloudCard'>\n            <div className='PrivateCloudCard__text'>\n                <div className='PrivateCloudCard__text-title'>\n                    {title}\n                </div>\n                <div className='PrivateCloudCard__text-description'>\n                    {description}\n                </div>\n                {(isFreeTrial || subscriptionPlan === CloudProducts.ENTERPRISE) &&\n                    <a\n                        href={isFreeTrial ? trialQuestionsLink : contactSalesLink}\n                        rel='noopener noreferrer'\n                        target='_new'\n                        className='PrivateCloudCard__actionButton'\n                        onClick={() => trackEvent('cloud_admin', 'click_contact_sales')}\n                    >\n                        <FormattedMessage\n                            id='admin.billing.subscription.privateCloudCard.contactSales'\n                            defaultMessage='Contact Sales'\n                        />\n\n                    </a>\n                }\n                {(!isFreeTrial && subscriptionPlan !== CloudProducts.ENTERPRISE) &&\n                    <button\n                        type='button'\n                        onClick={onUpgradeMattermostCloud}\n                        className='PrivateCloudCard__actionButton'\n                    >\n                        <FormattedMessage\n                            id='admin.billing.subscription.privateCloudCard.upgradeNow'\n                            defaultMessage='Upgrade Now'\n                        />\n                    </button>\n                }\n            </div>\n            <div className='PrivateCloudCard__image'>\n                <img src={isFreeTrial ? freeTrialPrivateCloudImage : privateCloudImage}/>\n            </div>\n        </div>\n    );\n};\n\nexport const cancelSubscription = (cancelAccountLink: any, isFreeTrial: boolean, isPaidTier: boolean) => {\n    if (isFreeTrial || !isPaidTier) {\n        return null;\n    }\n    return (\n        <div className='cancelSubscriptionSection'>\n            <div className='cancelSubscriptionSection__text'>\n                <div className='cancelSubscriptionSection__text-title'>\n                    <FormattedMessage\n                        id='admin.billing.subscription.cancelSubscriptionSection.title'\n                        defaultMessage='Cancel your subscription'\n                    />\n                </div>\n                <div className='cancelSubscriptionSection__text-description'>\n                    <FormattedMessage\n                        id='admin.billing.subscription.cancelSubscriptionSection.description'\n                        defaultMessage='At this time, deleting a workspace can only be done with the help of a customer support representative.'\n                    />\n                </div>\n                <a\n                    href={cancelAccountLink}\n                    rel='noopener noreferrer'\n                    target='_new'\n                    className='cancelSubscriptionSection__contactUs'\n                    onClick={() => trackEvent('cloud_admin', 'click_contact_us')}\n                >\n                    <FormattedMessage\n                        id='admin.billing.subscription.cancelSubscriptionSection.contactUs'\n                        defaultMessage='Contact Us'\n                    />\n                </a>\n            </div>\n        </div>\n    );\n};\n\nexport const infoBanner = (handleHide: () => void) => {\n    return (\n        <AlertBanner\n            mode='info'\n            title={\n                <FormattedMessage\n                    id='billing.subscription.info.headsup'\n                    defaultMessage='Just a heads up'\n                />\n            }\n            message={\n                <FormattedMessage\n                    id='billing.subscription.info.headsup.description'\n                    defaultMessage='You’re nearing the user limit with the free tier of MatterFOSS. We’ll let you know if you hit that limit.'\n                />\n            }\n            onDismiss={() => handleHide()}\n        />\n    );\n};\n\nexport const creditCardExpiredBanner = (setShowCreditCardBanner: (value: boolean) => void) => {\n    return (\n        <AlertBanner\n            mode='danger'\n            title={\n                <FormattedMessage\n                    id='admin.billing.subscription.creditCardHasExpired'\n                    defaultMessage='Your credit card has expired'\n                />\n            }\n            message={\n                <>\n                    <FormattedMessage\n                        id='admin.billing.subscription.creditCardHasExpired.please'\n                        defaultMessage='Please '\n                    />\n                    <BlockableLink\n                        to='/admin_console/billing/payment_info'\n                    >\n                        <FormattedMessage\n                            id='admin.billing.subscription.creditCardHasExpired.description.updatePaymentInformation'\n                            defaultMessage='update your payment information'\n                        />\n                    </BlockableLink>\n                    <FormattedMessage\n                        id='admin.billing.subscription.creditCardHasExpired.description.avoidAnyDisruption'\n                        defaultMessage=' to avoid any disruption.'\n                    />\n                </>\n            }\n            onDismiss={() => setShowCreditCardBanner(false)}\n        />\n    );\n};\n\nexport const paymentFailedBanner = () => {\n    return (\n        <AlertBanner\n            mode='danger'\n            title={\n                <FormattedMessage\n                    id='billing.subscription.info.mostRecentPaymentFailed'\n                    defaultMessage='Your most recent payment failed'\n                />\n            }\n            message={\n                <>\n                    <FormattedMessage\n                        id='billing.subscription.info.mostRecentPaymentFailed.description.mostRecentPaymentFailed'\n                        defaultMessage='It looks your most recent payment failed because the credit card on your account has expired. Please '\n                    />\n                    <BlockableLink\n                        to='/admin_console/billing/payment_info'\n                    >\n                        <FormattedMessage\n                            id='billing.subscription.info.mostRecentPaymentFailed.description.updatePaymentInformation'\n                            defaultMessage='update your payment information'\n                        />\n                    </BlockableLink>\n                    <FormattedMessage\n                        id='billing.subscription.info.mostRecentPaymentFailed.description.avoidAnyDisruption'\n                        defaultMessage=' to avoid any disruption.'\n                    />\n                </>\n            }\n        />\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {useDispatch} from 'react-redux';\n\nimport {DispatchFunc} from 'matterfoss-redux/types/actions';\nimport {getCloudCustomer} from 'matterfoss-redux/actions/cloud';\n\nimport {pageVisited} from 'actions/telemetry_actions';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport CompanyInfoDisplay from './company_info_display';\n\ntype Props = {\n\n};\n\nconst CompanyInfo: React.FC<Props> = () => {\n    const dispatch = useDispatch<DispatchFunc>();\n\n    useEffect(() => {\n        dispatch(getCloudCustomer());\n\n        pageVisited('cloud_admin', 'pageview_billing_company_info');\n    }, []);\n\n    return (\n        <div className='wrapper--fixed CompanyInfo'>\n            <FormattedAdminHeader\n                id='admin.billing.company_info.title'\n                defaultMessage='Company Information'\n            />\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <CompanyInfoDisplay/>\n                    { /* Billing Admins section\n                        <div style={{border: '1px solid #000', width: '100%', height: '194px', marginTop: '20px'}}>\n                        {'Billing Admins Card'}\n                        </div>\n                    */}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CompanyInfo;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getName} from 'country-list';\n\nimport {getCloudCustomer, updateCloudCustomer, updateCloudCustomerAddress} from 'matterfoss-redux/actions/cloud';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport DropdownInput from 'components/dropdown_input';\nimport StateSelector from 'components/payment_form/state_selector';\nimport Input from 'components/input';\nimport SaveButton from 'components/save_button';\nimport {GlobalState} from 'types/store';\nimport {browserHistory} from 'utils/browser_history';\nimport {COUNTRIES} from 'utils/countries';\nimport * as Utils from 'utils/utils';\n\nimport './company_info_edit.scss';\n\ntype Props = {\n\n};\n\nconst CompanyInfoEdit: React.FC<Props> = () => {\n    const dispatch = useDispatch();\n    const companyInfo = useSelector((state: GlobalState) => state.entities.cloud.customer);\n\n    if (!companyInfo) {\n        return null;\n    }\n\n    const [companyName, setCompanyName] = useState(companyInfo?.name);\n    const [numEmployees, setNumEmployees] = useState<number | undefined>(companyInfo?.num_employees || undefined);\n\n    const [address, setAddress] = useState(companyInfo?.company_address?.line1);\n    const [address2, setAddress2] = useState(companyInfo?.company_address?.line2);\n    const [city, setCity] = useState(companyInfo?.company_address?.city);\n    const [postalCode, setPostalCode] = useState(companyInfo?.company_address?.postal_code);\n    const [country, setCountry] = useState(companyInfo?.company_address?.country || getName('US'));\n    const [state, setState] = useState(companyInfo?.company_address?.state);\n\n    const [sameAsBillingAddress, setSameAsBillingAddress] = useState(Boolean(!companyInfo?.company_address?.line1 && companyInfo?.billing_address?.line1));\n    const [isValid, setIsValid] = useState<boolean | undefined>(undefined);\n    const [isSaving, setIsSaving] = useState(false);\n\n    const setValidation = () => {\n        if (sameAsBillingAddress) {\n            setIsValid(Boolean(companyName));\n        } else {\n            setIsValid(Boolean(companyName && address && city && postalCode && country && state));\n        }\n    };\n\n    const updateState = (setStateFunc: (value: any) => void) => {\n        return (event: React.ChangeEvent<HTMLInputElement>) => {\n            setStateFunc(event.target.value);\n            setValidation();\n        };\n    };\n\n    const updateNumEmployees = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (event.target.value) {\n            setNumEmployees(parseInt(event.target.value, 10));\n        } else {\n            setNumEmployees(undefined);\n        }\n    };\n\n    useEffect(() => {\n        dispatch(getCloudCustomer());\n    }, []);\n\n    useEffect(() => {\n        setValidation();\n    }, [sameAsBillingAddress, companyName, address, city, postalCode, country, state]);\n\n    const handleSubmit = async () => {\n        setIsSaving(true);\n        await dispatch(updateCloudCustomer({name: companyName, num_employees: numEmployees || 0}));\n\n        if (sameAsBillingAddress) {\n            await dispatch(updateCloudCustomerAddress({\n                city: '',\n                country: '',\n                line1: '',\n                line2: '',\n                postal_code: '',\n                state: '',\n            }));\n        } else {\n            await dispatch(updateCloudCustomerAddress({\n                city: city || '',\n                country: country || '',\n                line1: address || '',\n                line2: address2 || '',\n                postal_code: postalCode || '',\n                state: state || '',\n            }));\n        }\n\n        setIsSaving(false);\n        browserHistory.push('/admin_console/billing/company_info');\n    };\n\n    const billingAddressDisplay = (\n        <>\n            <div className='CompanyInfoEdit__companyInfo-addressTitle'>\n                <FormattedMessage\n                    id='admin.billing.company_info.billingAddress'\n                    defaultMessage='Billing Address'\n                />\n            </div>\n            <div className='CompanyInfoEdit__companyInfo-address'>\n                <div>{companyInfo?.billing_address?.line1}</div>\n                {companyInfo?.billing_address?.line2 && <div>{companyInfo?.billing_address?.line2}</div>}\n                <div>{`${companyInfo?.billing_address?.city}, ${companyInfo?.billing_address?.state}, ${companyInfo?.billing_address?.postal_code}`}</div>\n                <div>{companyInfo?.billing_address?.country}</div>\n            </div>\n        </>\n    );\n\n    const companyAddressInput = (\n        <>\n            <DropdownInput\n                onChange={(option) => setCountry(option.value)}\n                value={country ? {value: country, label: country} : undefined}\n                options={COUNTRIES.map((c) => ({value: c.name, label: c.name}))}\n                legend={Utils.localizeMessage('admin.billing.company_info.country', 'Country')}\n                placeholder={Utils.localizeMessage('admin.billing.company_info.country', 'Country')}\n                name={'country_dropdown'}\n            />\n            <div className='form-row'>\n                <Input\n                    name='address'\n                    type='text'\n                    value={address}\n                    onChange={updateState(setAddress)}\n                    placeholder={Utils.localizeMessage('admin.billing.company_info.address', 'Address')}\n                    required={true}\n                />\n            </div>\n            <div className='form-row'>\n                <Input\n                    name='address2'\n                    type='text'\n                    value={address2}\n                    onChange={updateState(setAddress2)}\n                    placeholder={Utils.localizeMessage('admin.billing.company_info.address_2', 'Address 2')}\n                />\n            </div>\n            <div className='form-row'>\n                <Input\n                    name='city'\n                    type='text'\n                    value={city}\n                    onChange={updateState(setCity)}\n                    placeholder={Utils.localizeMessage('admin.billing.company_info.city', 'City')}\n                    required={true}\n                />\n            </div>\n            <div className='form-row'>\n                <div className='form-row-third-1 selector'>\n                    <StateSelector\n                        country={country!}\n                        state={state!}\n                        onChange={(stateValue) => setState(stateValue)}\n                    />\n                </div>\n                <div className='form-row-third-2'>\n                    <Input\n                        name='postalCode'\n                        type='text'\n                        value={postalCode}\n                        onChange={updateState(setPostalCode)}\n                        placeholder={Utils.localizeMessage('admin.billing.company_info.zipcode', 'Zip/Postal Code')}\n                        required={true}\n                    />\n                </div>\n            </div>\n        </>\n    );\n\n    return (\n        <div className='wrapper--fixed CompanyInfoEdit'>\n            <div className='admin-console__header with-back'>\n                <div>\n                    <BlockableLink\n                        to='/admin_console/billing/company_info'\n                        className='fa fa-angle-left back'\n                    />\n                    <FormattedMessage\n                        id='admin.billing.company_info_edit.title'\n                        defaultMessage='Edit Company Information'\n                    />\n                </div>\n            </div>\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <div className='CompanyInfoEdit__card'>\n                        <div className='CompanyInfoEdit__form'>\n                            <div className='section-title'>\n                                <FormattedMessage\n                                    id='admin.billing.company_info_edit.companyDetails'\n                                    defaultMessage='Company Details'\n                                />\n                            </div>\n                            <div className='form-row'>\n                                <Input\n                                    name='companyName'\n                                    type='text'\n                                    value={companyName}\n                                    onChange={updateState(setCompanyName)}\n                                    placeholder={Utils.localizeMessage('admin.billing.company_info.companyName', 'Company name')}\n                                    required={true}\n                                />\n                            </div>\n                            <div className='form-row'>\n                                <Input\n                                    name='numEmployees'\n                                    type='number'\n                                    value={numEmployees}\n                                    onChange={updateNumEmployees}\n                                    placeholder={Utils.localizeMessage('admin.billing.company_info.numEmployees', 'Number of employees (optional)')}\n                                />\n                            </div>\n                            <div className='section-title'>\n                                <FormattedMessage\n                                    id='admin.billing.company_info_edit.company_address'\n                                    defaultMessage='Company Address'\n                                />\n                            </div>\n                            {companyInfo?.billing_address?.line1 &&\n                                <div className='checkbox'>\n                                    <label>\n                                        <input\n                                            type='checkbox'\n                                            checked={sameAsBillingAddress}\n                                            onChange={(event) => setSameAsBillingAddress(event.target.checked)}\n                                        />\n                                        <FormattedMessage\n                                            id='admin.billing.company_info_edit.sameAsBillingAddress'\n                                            defaultMessage='Same as Billing Address'\n                                        />\n                                    </label>\n                                </div>\n                            }\n                            {sameAsBillingAddress && companyInfo?.billing_address?.line1 ? billingAddressDisplay : companyAddressInput}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className='admin-console-save'>\n                <SaveButton\n                    saving={isSaving}\n                    disabled={!isValid}\n                    onClick={handleSubmit}\n                    defaultMessage={(\n                        <FormattedMessage\n                            id='admin.billing.company_info_edit.save'\n                            defaultMessage='Save info'\n                        />\n                    )}\n                />\n                <BlockableLink\n                    className='cancel-button'\n                    to='/admin_console/billing/company_info'\n                >\n                    <FormattedMessage\n                        id='admin.billing.company_info_edit.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </BlockableLink>\n            </div>\n        </div>\n    );\n};\n\nexport default CompanyInfoEdit;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {FormattedMessage} from 'react-intl';\n\nimport {DispatchFunc} from 'matterfoss-redux/types/actions';\nimport {getCloudCustomer} from 'matterfoss-redux/actions/cloud';\nimport {GlobalState} from 'matterfoss-redux/types/store';\n\nimport {pageVisited} from 'actions/telemetry_actions';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport AlertBanner from 'components/alert_banner';\n\nimport PaymentInfoDisplay from './payment_info_display';\n\nimport './payment_info.scss';\n\ntype Props = {\n\n};\n\nconst PaymentInfo: React.FC<Props> = () => {\n    const dispatch = useDispatch<DispatchFunc>();\n\n    const isCardAboutToExpire = useSelector((state: GlobalState) => {\n        const {customer} = state.entities.cloud;\n        if (!customer) {\n            return false;\n        }\n\n        const expiryYear = customer.payment_method.exp_year;\n\n        // If not expiry year, or its 0, it's not expired (because it probably isn't set)\n        if (!expiryYear) {\n            return false;\n        }\n\n        // This works because we store the expiry month as the actual 1-12 base month, but Date uses a 0-11 base month\n        // But credit cards expire at the end of their expiry month, so we can just use that number.\n        const lastExpiryDate = new Date(expiryYear, customer.payment_method.exp_month, 1);\n        const currentDatePlus10Days = new Date();\n        currentDatePlus10Days.setDate(currentDatePlus10Days.getDate() + 10);\n        return lastExpiryDate <= currentDatePlus10Days;\n    });\n\n    const [showCreditCardBanner, setShowCreditCardBanner] = useState(true);\n\n    useEffect(() => {\n        dispatch(getCloudCustomer());\n\n        pageVisited('cloud_admin', 'pageview_billing_payment_info');\n    }, []);\n\n    return (\n        <div className='wrapper--fixed PaymentInfo'>\n            <FormattedAdminHeader\n                id='admin.billing.payment_info.title'\n                defaultMessage='Payment Information'\n            />\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    {showCreditCardBanner && isCardAboutToExpire && (\n                        <AlertBanner\n                            mode='info'\n                            title={\n                                <FormattedMessage\n                                    id='admin.billing.payment_info.creditCardAboutToExpire'\n                                    defaultMessage='Your credit card is about to expire'\n                                />\n                            }\n                            message={\n                                <FormattedMessage\n                                    id='admin.billing.payment_info.creditCardAboutToExpire.description'\n                                    defaultMessage='Please update your payment information to avoid any disruption.'\n                                />\n                            }\n                            onDismiss={() => setShowCreditCardBanner(false)}\n                        />\n                    )}\n                    <PaymentInfoDisplay/>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default PaymentInfo;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport {recycleDatabaseConnection} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class DatabaseSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        // driverName and dataSource are read-only from the UI\n\n        config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);\n        config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);\n        config.SqlSettings.Trace = this.state.trace;\n        config.SqlSettings.DisableDatabaseSearch = this.state.disableDatabaseSearch;\n        config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);\n        config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);\n        config.SqlSettings.ConnMaxIdleTimeMilliseconds = this.parseIntNonNegative(this.state.connMaxIdleTimeMilliseconds);\n        config.ServiceSettings.MinimumHashtagLength = this.parseIntNonZero(this.state.minimumHashtagLength, 3, 2);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            driverName: config.SqlSettings.DriverName,\n            dataSource: config.SqlSettings.DataSource,\n            maxIdleConns: config.SqlSettings.MaxIdleConns,\n            maxOpenConns: config.SqlSettings.MaxOpenConns,\n            trace: config.SqlSettings.Trace,\n            disableDatabaseSearch: config.SqlSettings.DisableDatabaseSearch,\n            queryTimeout: config.SqlSettings.QueryTimeout,\n            connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,\n            connMaxIdleTimeMilliseconds: config.SqlSettings.ConnMaxIdleTimeMilliseconds,\n            minimumHashtagLength: config.ServiceSettings.MinimumHashtagLength,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.database.title'\n                defaultMessage='Database Settings'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));\n\n        let recycleDbButton = <div/>;\n        if (this.props.license.IsLicensed === 'true') {\n            recycleDbButton = (\n                <RequestButton\n                    requestAction={recycleDatabaseConnection}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.recycle.recycleDescription'\n                            defaultMessage='Deployments using multiple databases can switch from one master database to another without restarting the MatterFOSS server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.'\n                            values={{\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.recycle.recycleDescription.featureName'\n                                            defaultMessage='Recycle Database Connections'\n                                        />\n                                    </b>\n                                ),\n                                reloadConfiguration: (\n                                    <a href='../environment/web_server'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.recycle.recycleDescription.reloadConfiguration'\n                                                defaultMessage='Environment > Web Server > Reload Configuration from Disk'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.recycle.button'\n                            defaultMessage='Recycle Database Connections'\n                        />\n                    }\n                    showSuccessMessage={false}\n                    errorMessage={{\n                        id: t('admin.recycle.reloadFail'),\n                        defaultMessage: 'Recycling unsuccessful: {error}',\n                    }}\n                    includeDetailedError={true}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.sql.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DriverName'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.driverName'\n                            defaultMessage='Driver Name:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={this.state.driverName}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.driverNameDescription'\n                                defaultMessage='Set the database driver in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DataSource'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.dataSource'\n                            defaultMessage='Data Source:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={dataSource}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.dataSourceDescription'\n                                defaultMessage='Set the database source in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <TextSetting\n                    id='maxIdleConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsTitle'\n                            defaultMessage='Maximum Idle Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxConnectionsExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsDescription'\n                            defaultMessage='Maximum number of idle connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxIdleConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxIdleConns')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='maxOpenConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenTitle'\n                            defaultMessage='Maximum Open Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxOpenExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenDescription'\n                            defaultMessage='Maximum number of open connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxOpenConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxOpenConns')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='queryTimeout'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutTitle'\n                            defaultMessage='Query Timeout:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.queryTimeoutExample', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutDescription'\n                            defaultMessage='The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query.'\n                        />\n                    }\n                    value={this.state.queryTimeout}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.QueryTimeout')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='connMaxLifetimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeTitle'\n                            defaultMessage='Maximum Connection Lifetime:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxLifetimeExample', 'E.g.: \"3600000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeDescription'\n                            defaultMessage='Maximum lifetime for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxLifetimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='connMaxIdleTimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxIdleTimeTitle'\n                            defaultMessage='Maximum Connection Idle Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxIdleTimeExample', 'E.g.: \"300000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxIdleTimeDescription'\n                            defaultMessage='Maximum idle time for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxIdleTimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxIdleTimeMilliseconds')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='minimumHashtagLength'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.minimumHashtagLengthTitle'\n                            defaultMessage='Minimum Hashtag Length:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.minimumHashtagLengthExample', 'E.g.: \"3\"')}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.minimumHashtagLengthDescription'\n                            defaultMessage='Minimum number of characters in a hashtag. This must be greater than or equal to 2. MySQL databases must be configured to support searching strings shorter than three characters, [see documentation](!https://dev.mysql.com/doc/refman/8.0/en/fulltext-fine-tuning.html).'\n                        />\n                    }\n                    value={this.state.minimumHashtagLength}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MinimumHashtagLength')}\n                    disabled={this.props.isDisabled}\n                />\n                <BooleanSetting\n                    id='trace'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.traceTitle'\n                            defaultMessage='SQL Statement Logging: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.traceDescription'\n                            defaultMessage='(Development Mode) When true, executing SQL statements are written to the log.'\n                        />\n                    }\n                    value={this.state.trace}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.Trace')}\n                    disabled={this.props.isDisabled}\n                />\n                {recycleDbButton}\n                <BooleanSetting\n                    id='disableDatabaseSearch'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.disableDatabaseSearchTitle'\n                            defaultMessage='Disable database search: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.sql.disableDatabaseSearchDescription'\n                            defaultMessage='Disables the use of the database to perform searches. Should only be used when other [search engines](!https://mattermost.com/pl/default-search-engine) are configured.'\n                        />\n                    }\n                    value={this.state.disableDatabaseSearch}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.DisableDatabaseSearch')}\n                    disabled={this.props.isDisabled}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {elasticsearchPurgeIndexes, elasticsearchTest} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class ElasticsearchSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;\n        config.ElasticsearchSettings.SkipTLSVerification = this.state.skipTLSVerification;\n        config.ElasticsearchSettings.Username = this.state.username;\n        config.ElasticsearchSettings.Password = this.state.password;\n        config.ElasticsearchSettings.Sniff = this.state.sniff;\n        config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;\n        config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;\n        config.ElasticsearchSettings.EnableAutocomplete = this.state.enableAutocomplete;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            connectionUrl: config.ElasticsearchSettings.ConnectionUrl,\n            skipTLSVerification: config.ElasticsearchSettings.SkipTLSVerification,\n            username: config.ElasticsearchSettings.Username,\n            password: config.ElasticsearchSettings.Password,\n            sniff: config.ElasticsearchSettings.Sniff,\n            enableIndexing: config.ElasticsearchSettings.EnableIndexing,\n            enableSearching: config.ElasticsearchSettings.EnableSearching,\n            enableAutocomplete: config.ElasticsearchSettings.EnableAutocomplete,\n            configTested: true,\n            canSave: true,\n            canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing,\n        };\n    }\n\n    handleSettingChanged = (id, value) => {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                    enableAutocomplete: false,\n                });\n            } else {\n                this.setState({\n                    canSave: false,\n                    configTested: false,\n                });\n            }\n        }\n\n        if (id === 'connectionUrl' || id === 'skipTLSVerification' || id === 'username' || id === 'password' || id === 'sniff') {\n            this.setState({\n                configTested: false,\n                canSave: false,\n            });\n        }\n\n        if (id !== 'enableSearching' && id !== 'enableAutocomplete') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        this.handleChange(id, value);\n    }\n\n    handleSaved = () => {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing,\n        });\n    }\n\n    canSave = () => {\n        return this.state.canSave;\n    }\n\n    doTestConfig = (success, error) => {\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.getConfigFromState(config);\n\n        elasticsearchTest(\n            config,\n            () => {\n                this.setState({\n                    configTested: true,\n                    canSave: true,\n                });\n                success();\n            },\n            (err) => {\n                this.setState({\n                    configTested: false,\n                    canSave: false,\n                });\n                error(err);\n            },\n        );\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.elasticsearch.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.elasticsearch.title'\n                defaultMessage='Elasticsearch'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingTitle'\n                            defaultMessage='Enable Elasticsearch Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Elasticsearch in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableIndexing')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='connectionUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlTitle'\n                            defaultMessage='Server Connection Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.connectionUrlExample', 'E.g.: \"https://elasticsearch.example.org:9200\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlDescription'\n                            defaultMessage='The address of the Elasticsearch server. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-server-setup/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.connectionUrlExample.documentationLinkText'\n                                            defaultMessage='Please see documentation with server setup instructions.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.connectionUrl}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')}\n                />\n                <BooleanSetting\n                    id='skipTLSVerification'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.skipTLSVerificationTitle'\n                            defaultMessage='Skip TLS Verification:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.skipTLSVerificationDescription'\n                            defaultMessage='When true, MatterFOSS will not require the Elasticsearch certificate to be signed by a trusted Certificate Authority.'\n                        />\n                    }\n                    value={this.state.skipTLSVerification}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.SkipTLSVerification')}\n                />\n                <TextSetting\n                    id='username'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameTitle'\n                            defaultMessage='Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.usernameExample', 'E.g.: \"elastic\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameDescription'\n                            defaultMessage='(Optional) The username to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.username}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Username')}\n                />\n                <TextSetting\n                    id='password'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordTitle'\n                            defaultMessage='Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.password', 'E.g.: \"yourpassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordDescription'\n                            defaultMessage='(Optional) The password to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.password}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Password')}\n                />\n                <BooleanSetting\n                    id='sniff'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffTitle'\n                            defaultMessage='Enable Cluster Sniffing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffDescription'\n                            defaultMessage='When true, sniffing finds and connects to all data nodes in your cluster automatically.'\n                        />\n                    }\n                    value={this.state.sniff}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Sniff')}\n                />\n                <RequestButton\n                    id='testConfig'\n                    requestAction={this.doTestConfig}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.testHelpText'\n                            defaultMessage='Tests if the MatterFOSS server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.elasticsearch_test_button'\n                            defaultMessage='Test Connection'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.testConfigSuccess'),\n                        defaultMessage: 'Test successful. Configuration saved.',\n                    }}\n                    disabled={!this.state.enableIndexing}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.elasticsearch.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.ELASTICSEARCH_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex || this.props.isDisabled}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.help'\n                                        defaultMessage='All users, channels and posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    id='purgeIndexesSection'\n                    requestAction={elasticsearchPurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the indexes on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.success'),\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.error'),\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={this.props.isDisabled || !this.state.canPurgeAndIndex}\n                    label={(\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingTitle'\n                            defaultMessage='Enable Elasticsearch for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableSearching')}\n                />\n                <BooleanSetting\n                    id='enableAutocomplete'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableAutocompleteTitle'\n                            defaultMessage='Enable Elasticsearch for autocomplete queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableAutocompleteDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all autocompletion queries on users and channels using the latest index. Autocompletion results may be incomplete until a bulk index of the existing users and channels database is finished. When false, database autocomplete is used.'\n                        />\n                    }\n                    value={this.state.enableAutocomplete}\n                    disabled={this.props.isDisabled || !this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableAutocomplete')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport * as Utils from 'utils/utils.jsx';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class SessionLengthSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        const MINIMUM_IDLE_TIMEOUT = 5;\n\n        config.ServiceSettings.ExtendSessionLengthWithActivity = this.state.extendSessionLengthWithActivity;\n        config.ServiceSettings.SessionLengthWebInDays = this.parseIntNonZero(this.state.sessionLengthWebInDays);\n        config.ServiceSettings.SessionLengthMobileInDays = this.parseIntNonZero(this.state.sessionLengthMobileInDays);\n        config.ServiceSettings.SessionLengthSSOInDays = this.parseIntNonZero(this.state.sessionLengthSSOInDays);\n        config.ServiceSettings.SessionCacheInMinutes = this.parseIntNonZero(this.state.sessionCacheInMinutes);\n        config.ServiceSettings.SessionIdleTimeoutInMinutes = this.parseIntZeroOrMin(this.state.sessionIdleTimeoutInMinutes, MINIMUM_IDLE_TIMEOUT);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            extendSessionLengthWithActivity: config.ServiceSettings.ExtendSessionLengthWithActivity,\n            sessionLengthWebInDays: config.ServiceSettings.SessionLengthWebInDays,\n            sessionLengthMobileInDays: config.ServiceSettings.SessionLengthMobileInDays,\n            sessionLengthSSOInDays: config.ServiceSettings.SessionLengthSSOInDays,\n            sessionCacheInMinutes: config.ServiceSettings.SessionCacheInMinutes,\n            sessionIdleTimeoutInMinutes: config.ServiceSettings.SessionIdleTimeoutInMinutes,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.sessionLengths.title'\n                defaultMessage='Session Lengths'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        let sessionLengthWebHelpText;\n        let sessionLengthMobileHelpText;\n        let sessionLengthSSOHelpText;\n        let sessionTimeoutSetting;\n        if (this.state.extendSessionLengthWithActivity) {\n            sessionLengthWebHelpText = (\n                <FormattedMessage\n                    id='admin.service.webSessionDaysDesc.extendLength'\n                    defaultMessage='Set the number of days from the last activity in MatterFOSS to the expiry of the user’s session when using email and AD/LDAP authentication. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                />\n            );\n            sessionLengthMobileHelpText = (\n                <FormattedMessage\n                    id='admin.service.mobileSessionDaysDesc.extendLength'\n                    defaultMessage='Set the number of days from the last activity in MatterFOSS to the expiry of the user’s session on mobile. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                />\n            );\n            sessionLengthSSOHelpText = (\n                <FormattedMessage\n                    id='admin.service.ssoSessionDaysDesc.extendLength'\n                    defaultMessage='Set the number of days from the last activity in MatterFOSS to the expiry of the user’s session for SSO authentication, such as SAML, GitLab and OAuth 2.0. If the authentication method is SAML or GitLab, the user may automatically be logged back in to MatterFOSS if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.'\n                />\n            );\n        } else {\n            sessionLengthWebHelpText = (\n                <FormattedMessage\n                    id='admin.service.webSessionDaysDesc'\n                    defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                />\n            );\n            sessionLengthMobileHelpText = (\n                <FormattedMessage\n                    id='admin.service.mobileSessionDaysDesc'\n                    defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.'\n                />\n            );\n            sessionLengthSSOHelpText = (\n                <FormattedMessage\n                    id='admin.service.ssoSessionDaysDesc'\n                    defaultMessage='The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to MatterFOSS if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.'\n                />\n            );\n        }\n        if (this.props.license.Compliance && !this.state.extendSessionLengthWithActivity) {\n            sessionTimeoutSetting = (\n                <TextSetting\n                    id='sessionIdleTimeoutInMinutes'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.sessionIdleTimeout'\n                            defaultMessage='Session Idle Timeout (minutes):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionIdleTimeoutEx', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.sessionIdleTimeoutDesc'\n                            defaultMessage=\"The number of minutes from the last time a user was active on the system to the expiry of the user\\'s session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.\\n \\nApplies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.\"\n                        />\n                    }\n                    value={this.state.sessionIdleTimeoutInMinutes}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionIdleTimeoutInMinutes')}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='extendSessionLengthWithActivity'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.extendSessionLengthActivity.label'\n                            defaultMessage='Extend session length with activity: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.extendSessionLengthActivity.helpText'\n                            defaultMessage='When true, sessions will be automatically extended when the user is active in their MatterFOSS client. Users sessions will only expire if they are not active in their MatterFOSS client for the entire duration of the session lengths defined in the fields below. When false, sessions will not extend with activity in MatterFOSS. User sessions will immediately expire at the end of the session length or idle timeouts defined below. '\n                        />\n                    }\n                    value={this.state.extendSessionLengthWithActivity}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.ExtendSessionLengthWithActivity')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='sessionLengthWebInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.webSessionDays'\n                            defaultMessage='Session Length AD/LDAP and Email (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={sessionLengthWebHelpText}\n                    value={this.state.sessionLengthWebInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthWebInDays')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='sessionLengthMobileInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.mobileSessionDays'\n                            defaultMessage='Session Length Mobile (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={sessionLengthMobileHelpText}\n                    value={this.state.sessionLengthMobileInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthMobileInDays')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='sessionLengthSSOInDays'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.ssoSessionDays'\n                            defaultMessage='Session Length SSO (days):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionDaysEx', 'E.g.: \"30\"')}\n                    helpText={sessionLengthSSOHelpText}\n                    value={this.state.sessionLengthSSOInDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionLengthSSOInDays')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='sessionCacheInMinutes'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.sessionCache'\n                            defaultMessage='Session Cache (minutes):'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.sessionMinutesEx', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.sessionCacheDesc'\n                            defaultMessage='The number of minutes to cache a session in memory:'\n                        />\n                    }\n                    value={this.state.sessionCacheInMinutes}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.SessionCacheInMinutes')}\n                    disabled={this.props.isDisabled}\n                />\n                {sessionTimeoutSetting}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport Setting from './setting';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class PasswordSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.state, {\n            passwordMinimumLength: props.config.PasswordSettings.MinimumLength,\n            passwordLowercase: props.config.PasswordSettings.Lowercase,\n            passwordNumber: props.config.PasswordSettings.Number,\n            passwordUppercase: props.config.PasswordSettings.Uppercase,\n            passwordSymbol: props.config.PasswordSettings.Symbol,\n            maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts,\n        });\n\n        // Update sample message from config settings\n        t('user.settings.security.passwordErrorLowercase');\n        t('user.settings.security.passwordErrorLowercaseUppercase');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseUppercaseSymbol');\n        t('user.settings.security.passwordErrorLowercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseSymbol');\n        t('user.settings.security.passwordErrorUppercase');\n        t('user.settings.security.passwordErrorUppercaseNumber');\n        t('user.settings.security.passwordErrorUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorUppercaseSymbol');\n        t('user.settings.security.passwordErrorNumber');\n        t('user.settings.security.passwordErrorNumberSymbol');\n        t('user.settings.security.passwordErrorSymbol');\n\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (props.config.PasswordSettings.Lowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (props.config.PasswordSettings.Uppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (props.config.PasswordSettings.Number) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (props.config.PasswordSettings.Symbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        this.sampleErrorMsg = (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    getConfigFromState = (config) => {\n        config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, Constants.MIN_PASSWORD_LENGTH);\n        config.PasswordSettings.Lowercase = this.state.passwordLowercase;\n        config.PasswordSettings.Uppercase = this.state.passwordUppercase;\n        config.PasswordSettings.Number = this.state.passwordNumber;\n        config.PasswordSettings.Symbol = this.state.passwordSymbol;\n\n        config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts, Constants.MAXIMUM_LOGIN_ATTEMPTS_DEFAULT);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            passwordMinimumLength: config.PasswordSettings.MinimumLength,\n            passwordLowercase: config.PasswordSettings.Lowercase,\n            passwordNumber: config.PasswordSettings.Number,\n            passwordUppercase: config.PasswordSettings.Uppercase,\n            passwordSymbol: config.PasswordSettings.Symbol,\n            maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts,\n        };\n    }\n\n    getSampleErrorMsg = () => {\n        if (this.props.config.PasswordSettings.MinimumLength > Constants.MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < Constants.MIN_PASSWORD_LENGTH) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.passwordMinLength'\n                    default='Invalid minimum length, cannot show preview.'\n                />\n            );\n        }\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (this.state.passwordLowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (this.state.passwordUppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (this.state.passwordNumber) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (this.state.passwordSymbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        return (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    handlePasswordLengthChange = (id, value) => {\n        this.handleChange(id, value);\n    }\n\n    handleCheckboxChange = (id) => {\n        return ({target: {checked}}) => {\n            this.handleChange(id, checked);\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.password'\n                defaultMessage='Password'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        return (\n            <SettingsGroup>\n                <div>\n                    <TextSetting\n                        id='passwordMinimumLength'\n                        label={\n                            <FormattedMessage\n                                id='admin.password.minimumLength'\n                                defaultMessage='Minimum Password Length:'\n                            />\n                        }\n                        placeholder={Utils.localizeMessage('admin.password.minimumLengthExample', 'E.g.: \"5\"')}\n                        helpText={\n                            <FormattedMessage\n                                id='admin.password.minimumLengthDescription'\n                                defaultMessage='Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.'\n                                values={{\n                                    min: Constants.MIN_PASSWORD_LENGTH,\n                                    max: Constants.MAX_PASSWORD_LENGTH,\n                                }}\n                            />\n                        }\n                        value={this.state.passwordMinimumLength}\n                        onChange={this.handlePasswordLengthChange}\n                        setByEnv={this.isSetByEnv('PasswordSettings.MinimumLength')}\n                        disabled={this.props.isDisabled}\n                    />\n                    <Setting\n                        label={\n                            <FormattedMessage\n                                id='passwordRequirements'\n                                defaultMessage='Password Requirements:'\n                            />\n                        }\n                    >\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref={this.lowercase}\n                                    defaultChecked={this.state.passwordLowercase}\n                                    name='admin.password.lowercase'\n                                    disabled={this.props.isDisabled}\n                                    onChange={this.handleCheckboxChange('passwordLowercase')}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.lowercase'\n                                    defaultMessage='At least one lowercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref={this.uppercase}\n                                    defaultChecked={this.state.passwordUppercase}\n                                    name='admin.password.uppercase'\n                                    disabled={this.props.isDisabled}\n                                    onChange={this.handleCheckboxChange('passwordUppercase')}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.uppercase'\n                                    defaultMessage='At least one uppercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref={this.number}\n                                    defaultChecked={this.state.passwordNumber}\n                                    name='admin.password.number'\n                                    disabled={this.props.isDisabled}\n                                    onChange={this.handleCheckboxChange('passwordNumber')}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.number'\n                                    defaultMessage='At least one number'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref={this.symbol}\n                                    defaultChecked={this.state.passwordSymbol}\n                                    name='admin.password.symbol'\n                                    disabled={this.props.isDisabled}\n                                    onChange={this.handleCheckboxChange('passwordSymbol')}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.symbol'\n                                    defaultMessage='At least one symbol (e.g. \"~!@#$%^&*()\")'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <br/>\n                            <label>\n                                <FormattedMessage\n                                    id='admin.password.preview'\n                                    defaultMessage='Error message preview:'\n                                />\n                            </label>\n                            <br/>\n                            {this.getSampleErrorMsg()}\n                        </div>\n                    </Setting>\n                </div>\n                <TextSetting\n                    id='maximumLoginAttempts'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.attemptTitle'\n                            defaultMessage='Maximum Login Attempts:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.attemptExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.attemptDescription'\n                            defaultMessage='Login attempts allowed before user is locked out and required to reset password via email.'\n                        />\n                    }\n                    value={this.state.maximumLoginAttempts}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')}\n                    disabled={this.props.isDisabled}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal';\n\nimport AdminSettings from './admin_settings';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class DataRetentionSettingsOld extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';\n        config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';\n        config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);\n        config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);\n        config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),\n            enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),\n            messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,\n            fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,\n            deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,\n            showConfirmModal: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.setState({showConfirmModal: true});\n    };\n\n    handleSaveConfirmed = () => {\n        this.setState({showConfirmModal: false});\n\n        this.doSubmit();\n    };\n\n    handleSaveCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.title'\n                defaultMessage='Confirm data retention policy'\n            />\n        );\n\n        const messageList = [];\n\n        if (this.state.enableMessageDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageDeletion'\n                    defaultMessage='All messages will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.messageRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />,\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageIndefinite'\n                    defaultMessage='All messages will be retained indefinitely.'\n                />,\n            );\n        }\n\n        if (this.state.enableFileDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileDeletion'\n                    defaultMessage='All files will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.fileRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />,\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileIndefinite'\n                    defaultMessage='All files will be retained indefinitely.'\n                />,\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.description'\n                        defaultMessage='Are you sure you want to apply the following data retention policy:'\n                    />\n                </p>\n                <ul>\n                    {messageList.map((item, index) => {\n                        return <li key={index}>{item}</li>;\n                    })}\n                </ul>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.clarification'\n                        defaultMessage='Once deleted, messages and files cannot be retrieved.'\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.confirm'\n                defaultMessage='Confirm Settings'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleSaveConfirmed}\n                onCancel={this.handleSaveCanceled}\n            />\n        );\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.data_retention.title'\n                defaultMessage='Data Retention Policy'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const enableMessageDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')},\n        ];\n\n        const enableFileDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')},\n        ];\n\n        let messageRetentionDaysSetting = '';\n        if (this.state.enableMessageDeletion === 'true') {\n            messageRetentionDaysSetting = (\n                <TextSetting\n                    id='messageRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.messageRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.messageRetentionDays.description'\n                            defaultMessage='Set how many days messages are kept in MatterFOSS. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.messageRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n\n        let fileRetentionDaysSetting = '';\n        if (this.state.enableFileDeletion === 'true') {\n            fileRetentionDaysSetting = (\n                <TextSetting\n                    id='fileRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.fileRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.fileRetentionDays.description'\n                            defaultMessage='Set how many days file uploads are kept in MatterFOSS. Files older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.fileRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.FileRetentionDays')}\n                    disabled={this.props.isDisabled}\n                />\n            );\n        }\n\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <SettingsGroup>\n                {confirmModal}\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.data_retention.note.description'\n                            defaultMessage='Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-dataretention-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.data_retention.note.description.documentationLinkText'\n                                            defaultMessage='documentation'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n                <DropdownSetting\n                    id='enableMessageDeletion'\n                    values={enableMessageDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.title'\n                            defaultMessage='Message Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.description'\n                            defaultMessage='Set how long MatterFOSS keeps messages in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableMessageDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')}\n                    disabled={this.props.isDisabled}\n                />\n                {messageRetentionDaysSetting}\n                <DropdownSetting\n                    id='enableFileDeletion'\n                    values={enableFileDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.title'\n                            defaultMessage='File Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.description'\n                            defaultMessage='Set how long MatterFOSS keeps file uploads in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableFileDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')}\n                    disabled={this.props.isDisabled}\n                />\n                {fileRetentionDaysSetting}\n                <TextSetting\n                    id='deletionJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.title'\n                            defaultMessage='Data Deletion Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.data_retention.deletionJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.deletionJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')}\n                    disabled={this.props.isDisabled}\n                />\n                <JobsTable\n                    jobType={JobTypes.DATA_RETENTION}\n                    disabled={(this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true') || this.props.isDisabled}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.title'\n                            defaultMessage='Run Deletion Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.help'\n                            defaultMessage='Initiates a Data Retention deletion job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {JobTypes, exportFormats} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getSiteURL} from 'utils/url';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\nimport RadioSetting from './radio_setting';\n\nexport default class MessageExportSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;\n        config.MessageExportSettings.ExportFormat = this.state.exportFormat;\n        config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;\n\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            config.MessageExportSettings.GlobalRelaySettings = {\n                CustomerType: this.state.globalRelayCustomerType,\n                SmtpUsername: this.state.globalRelaySmtpUsername,\n                SmtpPassword: this.state.globalRelaySmtpPassword,\n                EmailAddress: this.state.globalRelayEmailAddress,\n\n            };\n        }\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enableComplianceExport: config.MessageExportSettings.EnableExport,\n            exportFormat: config.MessageExportSettings.ExportFormat,\n            exportJobStartTime: config.MessageExportSettings.DailyRunTime,\n        };\n        if (config.MessageExportSettings.GlobalRelaySettings) {\n            state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;\n            state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;\n            state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;\n            state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;\n        }\n        return state;\n    }\n\n    getJobDetails = (job) => {\n        if (job.data) {\n            const message = [];\n            if (job.data.messages_exported) {\n                message.push(\n                    <FormattedMessage\n                        id='admin.complianceExport.messagesExportedCount'\n                        defaultMessage='{count} messages exported.'\n                        values={{\n                            count: job.data.messages_exported,\n                        }}\n                    />,\n                );\n            }\n            if (job.data.warning_count > 0) {\n                if (job.data.export_type === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n                    message.push(\n                        <div>\n                            <FormattedMessage\n                                id='admin.complianceExport.warningCount.globalrelay'\n                                defaultMessage='{count} warning(s) encountered, see log for details'\n                                values={{\n                                    count: job.data.warning_count,\n                                }}\n                            />\n                        </div>,\n                    );\n                } else {\n                    message.push(\n                        <div>\n                            <FormattedMessage\n                                id='admin.complianceExport.warningCount'\n                                defaultMessage='{count} warning(s) encountered, see warning.txt for details'\n                                values={{\n                                    count: job.data.warning_count,\n                                }}\n                            />\n                        </div>,\n                    );\n                }\n            }\n            return message;\n        }\n        return null;\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.complianceExport.title'\n                defaultMessage='Compliance Export (Beta)'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const exportFormatOptions = [\n            {value: exportFormats.EXPORT_FORMAT_ACTIANCE, text: Utils.localizeMessage('admin.complianceExport.exportFormat.actiance', 'Actiance XML')},\n            {value: exportFormats.EXPORT_FORMAT_CSV, text: Utils.localizeMessage('admin.complianceExport.exportFormat.csv', 'CSV')},\n            {value: exportFormats.EXPORT_FORMAT_GLOBALRELAY, text: Utils.localizeMessage('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')},\n        ];\n\n        // if the export format is globalrelay, the user needs to set some additional parameters\n        let globalRelaySettings;\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            const globalRelayCustomerType = (\n                <RadioSetting\n                    id='globalRelayCustomerType'\n                    values={[\n                        {value: 'A9', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')},\n                        {value: 'A10', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.title'\n                            defaultMessage='Customer Type:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.description'\n                            defaultMessage='The type of GlobalRelay customer account that your organization has.'\n                        />\n                    }\n                    value={this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : ''}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n            );\n\n            const globalRelaySmtpUsername = (\n                <TextSetting\n                    id='globalRelaySmtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.title'\n                            defaultMessage='SMTP Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: \"globalRelayUser\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.description'\n                            defaultMessage='The username that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : ''}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n            );\n\n            const globalRelaySmtpPassword = (\n                <TextSetting\n                    id='globalRelaySmtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.title'\n                            defaultMessage='SMTP Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: \"globalRelayPassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.description'\n                            defaultMessage='The password that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : ''}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n            );\n\n            const globalRelayEmail = (\n                <TextSetting\n                    id='globalRelayEmailAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.title'\n                            defaultMessage='Email Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: \"globalrelay@matterfoss.com\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.description'\n                            defaultMessage='The email address that your GlobalRelay server monitors for incoming Compliance Exports.'\n                        />\n                    }\n                    value={this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : ''}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n            );\n\n            globalRelaySettings = (\n                <SettingsGroup id={'globalRelaySettings'} >\n                    {globalRelayCustomerType}\n                    {globalRelaySmtpUsername}\n                    {globalRelaySmtpPassword}\n                    {globalRelayEmail}\n                </SettingsGroup>\n            );\n        }\n\n        const dropdownHelpText = (\n            <FormattedMarkdownMessage\n                id='admin.complianceExport.exportFormat.description'\n                defaultMessage='Format of the compliance export. Corresponds to the system that you want to import the data into.\\n \\nFor Actiance XML, compliance export files are written to the \\\"exports\\\" subdirectory of the configured [Local Storage Directory]({siteURL}/admin_console/environment/file_storage). For Global Relay EML, they are emailed to the configured email address.'\n                values={{siteURL: getSiteURL()}}\n            />\n        );\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableComplianceExport'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.complianceExportTitle'\n                            defaultMessage='Enable Compliance Export:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.complianceExportDesc'\n                            defaultMessage='When true, MatterFOSS will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See [the documentation](!https://about.mattermost.com/default-compliance-export-documentation) to learn more.'\n                        />\n                    }\n                    value={this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableExport')}\n                    disabled={this.props.isDisabled}\n                />\n\n                <TextSetting\n                    id='exportJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.title'\n                            defaultMessage='Compliance Export Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.exportJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.exportJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DailyRunTime')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n\n                <DropdownSetting\n                    id='exportFormat'\n                    values={exportFormatOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportFormat.title'\n                            defaultMessage='Export Format:'\n                        />\n                    }\n                    helpText={dropdownHelpText}\n                    value={this.state.exportFormat}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.ExportFormat')}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n\n                {globalRelaySettings}\n\n                <JobsTable\n                    jobType={JobTypes.MESSAGE_EXPORT}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.title'\n                            defaultMessage='Run Compliance Export Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.help'\n                            defaultMessage='Initiates a Compliance Export job immediately.'\n                        />\n                    }\n                    getExtraInfoText={this.getJobDetails}\n                    disabled={this.props.isDisabled || !this.state.enableComplianceExport}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {blevePurgeIndexes} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport TextSetting from './text_setting';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\n\nexport default class BleveSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.BleveSettings.IndexDir = this.state.indexDir;\n        config.BleveSettings.EnableIndexing = this.state.enableIndexing;\n        config.BleveSettings.EnableSearching = this.state.enableSearching;\n        config.BleveSettings.EnableAutocomplete = this.state.enableAutocomplete;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableIndexing: config.BleveSettings.EnableIndexing,\n            indexDir: config.BleveSettings.IndexDir,\n            enableSearching: config.BleveSettings.EnableSearching,\n            enableAutocomplete: config.BleveSettings.EnableAutocomplete,\n            canSave: true,\n            canPurgeAndIndex: config.BleveSettings.EnableIndexing,\n        };\n    }\n\n    handleSettingChanged = (id, value) => {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                    enableAutocomplete: false,\n                });\n            }\n        }\n\n        if (id !== 'enableSearching' && id !== 'enableAutocomplete') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        this.handleChange(id, value);\n    }\n\n    handleSaved = () => {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing && this.state.indexDir !== '',\n        });\n    }\n\n    canSave = () => {\n        return this.state.canSave;\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.bleve.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.bleve.title'\n                defaultMessage='Bleve'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.bleve.enableIndexingTitle'\n                            defaultMessage='Enable Bleve Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.bleve.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Bleve for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-bleve-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.bleve.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Bleve in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('BleveSettings.EnableIndexing')}\n                    disabled={this.props.isDisabled}\n                />\n                <TextSetting\n                    id='indexDir'\n                    label={\n                        <FormattedMessage\n                            id='admin.bleve.indexDirTitle'\n                            defaultMessage='Index Directory:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.bleve.indexDirDescription'\n                            defaultMessage='Directory path to use for store bleve indexes.'\n                        />\n                    }\n                    value={this.state.indexDir}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('BleveSettings.IndexDir')}\n                    disabled={this.props.isDisabled}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.bleve.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.BLEVE_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex || this.props.isDisabled}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.bleve.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.bleve.createJob.help'\n                                        defaultMessage='All users, channels and posts in the database will be indexed from oldest to newest. Bleve is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    id='purgeIndexesSection'\n                    requestAction={blevePurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.bleve.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the content of the Bleve index directory. Search results may be incomplete until a bulk index of the existing database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.bleve.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.bleve.purgeIndexesButton.success'),\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: t('admin.bleve.purgeIndexesButton.error'),\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={!this.state.canPurgeAndIndex || this.props.isDisabled}\n                    label={(\n                        <FormattedMessage\n                            id='admin.bleve.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.bleve.enableSearchingTitle'\n                            defaultMessage='Enable Bleve for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.bleve.enableSearchingDescription'\n                            defaultMessage='When true, Bleve will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={!this.state.enableIndexing || this.props.isDisabled}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('BleveSettings.EnableSearching')}\n                />\n                <BooleanSetting\n                    id='enableAutocomplete'\n                    label={\n                        <FormattedMessage\n                            id='admin.bleve.enableAutocompleteTitle'\n                            defaultMessage='Enable Bleve for autocomplete queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.bleve.enableAutocompleteDescription'\n                            defaultMessage='When true, Bleve will be used for all autocompletion queries on users and channels using the latest index. Autocompletion results may be incomplete until a bulk index of the existing users and channels database is finished. When false, database autocomplete is used.'\n                        />\n                    }\n                    value={this.state.enableAutocomplete}\n                    disabled={!this.state.enableIndexing || this.props.isDisabled}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('BleveSettings.EnableAutocomplete')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\nimport {cloneDeep} from 'lodash';\n\nimport {getMySystemPermissions} from 'matterfoss-redux/selectors/entities/roles_helpers';\nimport {ResourceToSysConsolePermissionsTable, RESOURCE_KEYS} from 'matterfoss-redux/constants/permissions_sysconsole';\n\nimport AdminDefinition from 'components/admin_console/admin_definition.jsx';\n\nexport const getAdminDefinition = createSelector(\n    () => AdminDefinition,\n    (state) => state.plugins.adminConsoleReducers,\n    (adminDefinition, reducers) => {\n        let result = cloneDeep(AdminDefinition);\n        for (const reducer of Object.values(reducers)) {\n            result = reducer(result);\n        }\n        return result;\n    },\n);\n\nexport const getAdminConsoleCustomComponents = (state, pluginId) =>\n    state.plugins.adminConsoleCustomComponents[pluginId] || {};\n\nexport const getConsoleAccess = createSelector(\n    getAdminDefinition,\n    getMySystemPermissions,\n    (adminDefinition, mySystemPermissions) => {\n        const consoleAccess = {read: {}, write: {}};\n        const addEntriesForKey = (entryKey) => {\n            const permissions = ResourceToSysConsolePermissionsTable[entryKey].filter((x) => mySystemPermissions.has(x));\n            consoleAccess.read[entryKey] = permissions.length !== 0;\n            consoleAccess.write[entryKey] = permissions.some((permission) => permission.startsWith('sysconsole_write_'));\n        };\n        const mapAccessValuesForKey = ([key]) => {\n            if (typeof RESOURCE_KEYS[key.toUpperCase()] === 'object') {\n                Object.values(RESOURCE_KEYS[key.toUpperCase()]).forEach((entry) => {\n                    addEntriesForKey(entry);\n                });\n            } else {\n                addEntriesForKey(key);\n            }\n        };\n        Object.entries(adminDefinition).forEach(mapAccessValuesForKey);\n        return consoleAccess;\n    },\n);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal';\n\ntype Props = {\n    show: boolean;\n    onConfirm: (checked: boolean) => void;\n    onCancel: (checked: boolean) => void;\n}\n\nexport default class DiscardChangesModal extends React.PureComponent<Props> {\n    public render(): JSX.Element {\n        const title: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.title'\n                defaultMessage='Discard Changes?'\n            />\n        );\n\n        const message: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.message'\n                defaultMessage='You have unsaved changes, are you sure you want to discard them?'\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.leave'\n                defaultMessage='Yes, Discard'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {stripMarkdown} from 'utils/markdown';\nimport getEnablePluginSetting from 'components/admin_console/custom_plugin_settings/enable_plugin_setting';\n\nfunction extractTextsFromPlugin(plugin) {\n    const texts = extractTextFromSetting(getEnablePluginSetting(plugin));\n    if (plugin.name) {\n        texts.push(plugin.name);\n    }\n    if (plugin.id) {\n        texts.push(plugin.id);\n    }\n    if (plugin.settings_schema) {\n        if (plugin.settings_schema.footer) {\n            texts.push(stripMarkdown(plugin.settings_schema.footer));\n        }\n        if (plugin.settings_schema.header) {\n            texts.push(stripMarkdown(plugin.settings_schema.header));\n        }\n\n        if (plugin.settings_schema.settings) {\n            const settings = Object.values(plugin.settings_schema.settings);\n\n            for (const setting of settings) {\n                const settingsTexts = extractTextFromSetting(setting, texts);\n                texts.push(...settingsTexts);\n            }\n        }\n    }\n    return texts;\n}\n\nfunction extractTextFromSetting(setting) {\n    const texts = [];\n    if (setting.label) {\n        texts.push(setting.label);\n    }\n    if (setting.display_name) {\n        texts.push(setting.display_name);\n    }\n    if (setting.help_text) {\n        texts.push(stripMarkdown(setting.help_text));\n    }\n    if (setting.key) {\n        texts.push(setting.key);\n    }\n    return texts;\n}\n\nexport function getPluginEntries(pluginsObj = {}) {\n    const entries = {};\n    const plugins = pluginsObj || {};\n    for (const pluginId of Object.keys(plugins)) {\n        const url = `plugin_${pluginId}`;\n        entries[url] = extractTextsFromPlugin(plugins[pluginId]);\n    }\n    return entries;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport FlexSearch from 'flexsearch/dist/flexsearch.es5';\n\nimport {getPluginEntries} from './admin_console_plugin_index';\n\nfunction extractTextsFromSection(section, intl) {\n    const texts = [];\n    if (section.title) {\n        texts.push(intl.formatMessage({id: section.title, defaultMessage: section.title_default}));\n    }\n    if (section.schema && section.schema.name) {\n        texts.push(section.schema.name);\n    }\n    if (section.searchableStrings) {\n        for (const searchableString of section.searchableStrings) {\n            if (typeof searchableString === 'string') {\n                texts.push(intl.formatMessage({id: searchableString, defaultMessage: searchableString}));\n            } else {\n                texts.push(intl.formatMessage({id: searchableString[0], defaultMessage: ''}, searchableString[1]));\n            }\n        }\n    }\n\n    if (section.schema) {\n        if (section.schema.settings) {\n            texts.push(extractTextFromSettings(section.schema.settings, intl));\n        } else if (section.schema.sections) {\n            section.schema.sections.forEach((schemaSection) => {\n                texts.push(...extractTextFromSettings(schemaSection.settings, intl));\n            });\n        }\n    }\n\n    return texts;\n}\n\nfunction extractTextFromSettings(settings, intl) {\n    const texts = [];\n\n    for (const setting of Object.values(settings)) {\n        if (setting.label) {\n            texts.push(intl.formatMessage({id: setting.label, defaultMessage: setting.label_default}, setting.label_values));\n        }\n        if (setting.help_text && typeof setting.help_text === 'string') {\n            texts.push(intl.formatMessage({id: setting.help_text, defaultMessage: setting.help_text_default}, setting.help_text_values));\n        }\n        if (setting.remove_help_text) {\n            texts.push(intl.formatMessage({id: setting.remove_help_text, defaultMessage: setting.remove_help_text_default}));\n        }\n        if (setting.remove_button_text) {\n            texts.push(intl.formatMessage({id: setting.remove_button_text, defaultMessage: setting.remove_button_text_default}));\n        }\n    }\n\n    return texts;\n}\n\nexport function adminDefinitionsToUrlsAndTexts(adminDefinition, intl) {\n    const entries = {};\n    const sections = [\n        adminDefinition.about,\n        adminDefinition.reporting,\n        adminDefinition.user_management,\n        adminDefinition.environment,\n        adminDefinition.site,\n        adminDefinition.authentication,\n        adminDefinition.plugins,\n        adminDefinition.integrations,\n        adminDefinition.compliance,\n        adminDefinition.experimental,\n    ];\n    for (const section of sections) {\n        for (const item of Object.values(section)) {\n            if (!item.isDiscovery) {\n                entries[item.url] = extractTextsFromSection(item, intl);\n            }\n        }\n    }\n    return entries;\n}\n\nexport function generateIndex(AdminDefinition, plugins, intl) {\n    const idx = new FlexSearch();\n\n    addToIndex(adminDefinitionsToUrlsAndTexts(AdminDefinition, intl), idx);\n\n    addToIndex(getPluginEntries(plugins), idx);\n\n    return idx;\n}\n\nfunction addToIndex(entries, idx) {\n    for (const key of Object.keys(entries)) {\n        let text = '';\n        for (const str of entries[key]) {\n            text += ' ' + str;\n        }\n        idx.add(key, text);\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\n\nexport default class AdminSidebarCategory extends React.PureComponent {\n    static get propTypes() {\n        return {\n            name: PropTypes.string,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            sectionClass: PropTypes.string,\n            parentLink: PropTypes.string,\n            children: PropTypes.node,\n            action: PropTypes.node,\n            definitionKey: PropTypes.string,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n        };\n    }\n\n    render() {\n        let link = this.props.parentLink;\n        let title = (\n            <div className='category-title category-title--active'>\n                <i className={'category-icon fa ' + this.props.icon}/>\n                <span className='category-title__text'>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </div>\n        );\n\n        if (this.props.name) {\n            link += '/' + name;\n            title = (\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title category-title--active'\n                >\n                    {title}\n                </NavLink>\n            );\n        }\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <Route\n                    path={link}\n                    render={() => (\n                        <ul className={'sections ' + this.props.sectionClass}>\n                            {\n                                React.Children.map(this.props.children, (child) => {\n                                    if (child === null) {\n                                        return null;\n                                    }\n\n                                    return React.cloneElement(child, {\n                                        parentLink: link,\n                                    });\n                                })\n                            }\n                        </ul>\n                    )}\n                />\n            );\n        }\n\n        return (\n            <li\n                className='sidebar-category'\n                data-testid={this.props.definitionKey}\n            >\n                {title}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport AlertBanner from 'components/alert_banner';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport './commercial_support_modal.scss';\n\ntype Props = {\n\n    /**\n     * Function that is called when the modal is dismissed\n     */\n    onHide: () => void;\n\n    show?: boolean;\n\n    showBannerWarning: boolean;\n\n    isCloud: boolean;\n\n    currentUser: UserProfile;\n};\n\ntype State = {\n    show: boolean;\n    showBannerWarning: boolean;\n};\n\nexport default class CommercialSupportModal extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n            showBannerWarning: props.showBannerWarning,\n        };\n    }\n\n    componentDidUpdate = (prevProps: Props) => {\n        if (this.props.showBannerWarning !== prevProps.showBannerWarning) {\n            this.updateBannerWarning(this.props.showBannerWarning);\n        }\n    }\n\n    doHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        this.props.onHide();\n    }\n\n    updateBannerWarning = (showBannerWarning: boolean) => {\n        this.setState({showBannerWarning});\n    }\n\n    hideBannerWarning = () => {\n        this.updateBannerWarning(false);\n    }\n\n    render() {\n        const {showBannerWarning} = this.state;\n        const {isCloud, currentUser} = this.props;\n\n        const supportLink = isCloud ? `https://customers.mattermost.com/cloud/contact-us?name=${currentUser.first_name} ${currentUser.last_name}&email=${currentUser.email}&inquiry=technical` :\n            'https://support.mattermost.com/hc/en-us/requests/new';\n        return (\n            <Modal\n                id='commercialSupportModal'\n                dialogClassName='a11y__modal more-modal more-direct-channels'\n                show={this.state.show}\n                onHide={this.doHide}\n                onExited={this.handleExit}\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title>\n                        <FormattedMessage\n                            id='commercial_support.title'\n                            defaultMessage='Commercial Support'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='CommercialSupportModal'>\n                        <FormattedMarkdownMessage\n                            id='commercial_support.description'\n                            defaultMessage={'There is no commercial support for MatterFOSS at the moment.'}\n                            values={{\n                                supportLink,\n                            }}\n                        />\n                        <a\n                            className='btn btn-primary DownloadSupportPacket'\n                            href={`${Client4.getBaseRoute()}/system/support_packet`}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='commercial_support.download_support_packet'\n                                defaultMessage='Download Support Packet'\n                            />\n                        </a>\n                        {showBannerWarning &&\n                            <AlertBanner\n                                mode='info'\n                                message={\n                                    <FormattedMarkdownMessage\n                                        id='commercial_support.warning.banner'\n                                        defaultMessage='Before downloading the support packet, set **Output Logs to File** to **true** and set **File Log Level** to **DEBUG** [here](!/admin_console/environment/logging).'\n                                    />\n                                }\n                                onDismiss={this.hideBannerWarning}\n                            />\n                        }\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\n\nimport {ModalIdentifiers} from 'utils/constants';\nimport {isModalOpen} from 'selectors/views/modals';\n\nimport {GlobalState} from 'types/store';\n\nimport CommercialSupportModal from './commercial_support_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    const modalId = ModalIdentifiers.COMMERCIAL_SUPPORT;\n    const config = getConfig(state);\n    const license = getLicense(state);\n    const isCloud = license.Cloud === 'true';\n    const currentUser = getCurrentUser(state);\n    const showBannerWarning = (config.EnableFile !== 'true' || config.FileLevel !== 'DEBUG') && !(isCloud);\n\n    return {\n        show: isModalOpen(state, modalId),\n        isCloud,\n        currentUser,\n        showBannerWarning,\n    };\n}\n\nexport default connect(mapStateToProps)(CommercialSupportModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport menuItem from 'components/widgets/menu/menu_items/menu_item';\n\ntype Props = {\n    to: string;\n    text: string | React.ReactNode;\n};\n\nexport const MenuItemBlockableLinkImpl: React.SFC<Props> = (props: Props): JSX.Element => {\n    const {to, text} = props;\n    return (\n        <BlockableLink to={to}>{text}</BlockableLink>\n    );\n};\n\nconst MenuItemBlockableLink = menuItem(MenuItemBlockableLinkImpl);\nMenuItemBlockableLink.displayName = 'MenuItemBlockableLinkImpl';\n\nexport default MenuItemBlockableLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage, injectIntl, IntlShape} from 'react-intl';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport {ModalIdentifiers} from 'utils/constants';\n\nimport AboutBuildModal from 'components/about_build_modal';\nimport CommercialSupportModal from 'components/commercial_support_modal';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport MenuItemBlockableLink from './menu_item_blockable_link';\n\ntype Props = {\n    intl: IntlShape;\n    locale: string;\n    siteName?: string;\n    navigationBlocked?: boolean;\n    teams: Team[];\n    actions: {\n        deferNavigation: (onNavigationConfirmed: any) => any;\n    };\n    isLicensed: boolean;\n    isCloud: boolean;\n};\n\nclass AdminNavbarDropdown extends React.PureComponent<Props> {\n    private handleLogout = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (this.props.navigationBlocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(GlobalActions.emitUserLoggedOutEvent);\n        } else {\n            GlobalActions.emitUserLoggedOutEvent();\n        }\n    };\n\n    render(): JSX.Element {\n        const {locale, teams, siteName, isLicensed, isCloud} = this.props;\n        const {formatMessage} = this.props.intl;\n        const teamToRender = []; // Array of team components\n        let switchTeams;\n        if (teams && teams.length > 0) {\n            const teamsArray = filterAndSortTeamsByDisplayName(teams, locale);\n\n            for (const team of teamsArray) {\n                teamToRender.push(\n                    <MenuItemBlockableLink\n                        key={'team_' + team.name}\n                        to={'/' + team.name}\n                        text={formatMessage({id: 'navbar_dropdown.switchTo', defaultMessage: 'Switch to '}) + ' ' + team.display_name}\n                    />,\n                );\n            }\n        } else {\n            switchTeams = (\n                <MenuItemBlockableLink\n                    to={'/select_team'}\n                    icon={\n                        <FormattedMessage\n                            id='select_team.icon'\n                            defaultMessage='Select Team Icon'\n                        >\n                            {(title) => {\n                                return (\n                                    <i\n                                        className='fa fa-exchange'\n                                        title={title as string}\n                                    />\n                                );\n                            }}\n                        </FormattedMessage>\n                    }\n                    text={formatMessage({id: 'admin.nav.switch', defaultMessage: 'Team Selection'})}\n                />\n            );\n        }\n\n        let commercialSupport = (\n            <Menu.ItemExternalLink\n                onClick={() => trackEvent('admin', 'click_administrators_support')}\n                url='https://about.mattermost.com/commercial-support/'\n                text={formatMessage({id: 'admin.nav.commercialSupport', defaultMessage: 'Commercial Support'})}\n            />\n        );\n\n        if (isLicensed) {\n            commercialSupport = (\n                <Menu.ItemToggleModalRedux\n                    modalId={ModalIdentifiers.COMMERCIAL_SUPPORT}\n                    dialogType={CommercialSupportModal}\n                    text={formatMessage({id: 'admin.nav.commercialSupport', defaultMessage: 'Commercial Support'})}\n                />\n            );\n        }\n\n        let adminGuideLink = 'https://about.mattermost.com/administrators-guide/';\n        if (isCloud) {\n            adminGuideLink = 'https://docs.mattermost.com/guides/cloud-admin-guide.html';\n        }\n\n        return (\n            <Menu ariaLabel={formatMessage({id: 'admin.nav.menuAriaLabel', defaultMessage: 'Admin Console Menu'})}>\n                <Menu.Group>\n                    {teamToRender}\n                    {switchTeams}\n                </Menu.Group>\n                <Menu.Group>\n                    <Menu.ItemExternalLink\n                        onClick={() => trackEvent('admin', 'click_administrators_guide')}\n                        url={adminGuideLink}\n                        text={formatMessage({id: 'admin.nav.administratorsGuide', defaultMessage: 'Administrator Guide'})}\n                    />\n                    <Menu.ItemExternalLink\n                        onClick={() => trackEvent('admin', 'click_administrators_forum')}\n                        url={'https://about.mattermost.com/troubleshooting-forum/'}\n                        text={formatMessage({id: 'admin.nav.troubleshootingForum', defaultMessage: 'Troubleshooting Forum'})}\n                    />\n                    {commercialSupport}\n                    <Menu.ItemToggleModalRedux\n                        onClick={() => trackEvent('admin', 'click_administrators_about')}\n                        modalId={ModalIdentifiers.ABOUT}\n                        dialogType={AboutBuildModal}\n                        text={formatMessage({id: 'navbar_dropdown.about', defaultMessage: 'About {appTitle}'}, {appTitle: siteName || 'MatterFOSS'})}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    <Menu.ItemAction\n                        onClick={this.handleLogout}\n                        text={formatMessage({id: 'navbar_dropdown.logout', defaultMessage: 'Log Out'})}\n                    />\n                </Menu.Group>\n            </Menu>\n        );\n    }\n}\n\nexport default injectIntl(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {getMyTeams} from 'matterfoss-redux/selectors/entities/teams';\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport {GlobalState} from 'types/store';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown';\n\nfunction mapStateToProps(state: GlobalState) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n    const isCloud = license.Cloud === 'true';\n\n    return {\n        locale: getCurrentLocale(state),\n        teams: getMyTeams(state),\n        siteName: getConfig(state).SiteName,\n        navigationBlocked: getNavigationBlocked(state),\n        isLicensed,\n        isCloud,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {UserProfile} from 'matterfoss-redux/types/users';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport AdminNavbarDropdown from 'components/admin_console/admin_navbar_dropdown';\n\ntype Props = {\n    currentUser: UserProfile;\n}\n\nexport default class SidebarHeader extends React.PureComponent<Props> {\n    public render() {\n        const me = this.props.currentUser;\n        let profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <Avatar\n                    username={me.username}\n                    url={Client4.getProfilePictureUrl(me.id, me.last_picture_update)}\n                    size='lg'\n                />\n            );\n        }\n\n        return (\n            <MenuWrapper className='AdminSidebarHeader'>\n                <div>\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='team__name'>\n                            <FormattedMessage\n                                id='admin.sidebarHeader.systemConsole'\n                                defaultMessage='System Console'\n                            />\n                        </div>\n                        <div className='user__name overflow--ellipsis whitespace--nowrap'>{'@' + me.username}</div>\n                    </div>\n                    <button\n                        type='button'\n                        className='style--none'\n                        aria-label={Utils.localizeMessage('generic_icons.menu', 'Menu Icon')}\n                    >\n                        <MenuIcon className='menu-icon'/>\n                    </button>\n                </div>\n                <AdminNavbarDropdown/>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport AdminSidebarHeader from './admin_sidebar_header';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUser: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AdminSidebarHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class AdminSidebarSection extends React.PureComponent {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            type: PropTypes.string,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.node,\n            action: PropTypes.node,\n            definitionKey: PropTypes.string,\n            tag: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <ul className='nav nav__sub-menu subsections'>\n                    {\n                        React.Children.map(this.props.children, (child) => {\n                            if (child === null) {\n                                return null;\n                            }\n\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'sidebar-section';\n        if (this.props.subsection) {\n            className += ' sidebar-subsection';\n        }\n        let tag = '';\n        if (this.props.tag) {\n            tag = (\n                <span className={`${className}-tag`}>\n                    {this.props.tag}\n                </span>\n            );\n        }\n        const sidebarItemSafeId = Utils.createSafeId(this.props.name);\n        let sidebarItem = (\n            <BlockableLink\n                id={sidebarItemSafeId}\n                className={`${className}-title`}\n                activeClassName={`${className}-title ${className}-title--active`}\n                to={link}\n                onClick={() => trackEvent('admin', sidebarItemSafeId)}\n            >\n                <span className={`${className}-title__text`}>\n                    {this.props.title}{tag}\n                </span>\n                {this.props.action}\n            </BlockableLink>\n        );\n\n        if (this.props.type === 'text') {\n            sidebarItem = (\n                <div\n                    className={`${className}-title`}\n                >\n                    <span className={`${className}-title__text`}>\n                        {this.props.title}\n                    </span>\n                    {this.props.action}\n                </div>\n            );\n        }\n\n        return (\n            <li\n                className={className}\n                data-testid={this.props.definitionKey}\n            >\n                {sidebarItem}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport Mark from 'mark.js';\nimport debounce from 'lodash/debounce';\n\ntype Props = {\n    filter: string;\n    children: React.ReactNode;\n}\n\nexport default class Highlight extends React.PureComponent<Props> {\n    private markInstance?: Mark;\n    private ref: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.ref = React.createRef<HTMLDivElement>();\n    }\n\n    private redrawHighlight = debounce(() => {\n        if (this.markInstance) {\n            this.markInstance.unmark();\n        }\n\n        if (!this.props.filter) {\n            return;\n        }\n\n        if (!this.ref.current) {\n            return;\n        }\n\n        // Is necesary to recreate the instances to get again the DOM elements after the re-render\n        this.markInstance = new Mark(this.ref.current);\n        this.markInstance.mark(this.props.filter, {accuracy: 'complementary'});\n    }, 100, {leading: true, trailing: true});\n\n    public render() {\n        // Run on next frame\n        setTimeout(this.redrawHighlight, 0);\n        return (\n            <div ref={this.ref}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport Scrollbars from 'react-custom-scrollbars';\nimport isEqual from 'lodash/isEqual';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {generateIndex} from 'utils/admin_console_index.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {intlShape} from 'utils/react_intl';\n\nimport AdminSidebarCategory from 'components/admin_console/admin_sidebar_category.jsx';\nimport AdminSidebarHeader from 'components/admin_console/admin_sidebar_header';\nimport AdminSidebarSection from 'components/admin_console/admin_sidebar_section.jsx';\nimport Highlight from 'components/admin_console/highlight';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport QuickInput from 'components/quick_input';\n\nconst renderScrollView = (props) => (\n    <div\n        {...props}\n        className='scrollbar--view'\n    />\n);\n\nconst renderScrollThumbHorizontal = (props) => (\n    <div\n        {...props}\n        className='scrollbar--horizontal'\n    />\n);\n\nconst renderScrollThumbVertical = (props) => (\n    <div\n        {...props}\n        className='scrollbar--vertical'\n    />\n);\n\nclass AdminSidebar extends React.PureComponent {\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        plugins: PropTypes.object,\n        adminDefinition: PropTypes.object,\n        cloud: PropTypes.object,\n        buildEnterpriseReady: PropTypes.bool,\n        siteName: PropTypes.string,\n        onFilterChange: PropTypes.func.isRequired,\n        navigationBlocked: PropTypes.bool.isRequired,\n        consoleAccess: PropTypes.object,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get installed plugins\n             */\n            getPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        plugins: {},\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            sections: null,\n            filter: '',\n        };\n        this.idx = null;\n        this.searchRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPlugins();\n        }\n\n        if (this.searchRef.current) {\n            this.searchRef.current.focus();\n        }\n\n        this.updateTitle();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.idx !== null &&\n            (!isEqual(this.props.plugins, prevProps.plugins) ||\n                !isEqual(this.props.adminDefinition, prevProps.adminDefinition))) {\n            this.idx = generateIndex(this.props.adminDefinition, this.props.plugins, this.props.intl);\n        }\n    }\n\n    onFilterChange = (e) => {\n        const filter = e.target.value;\n        if (filter === '') {\n            this.setState({sections: null, filter});\n            this.props.onFilterChange(filter);\n            return;\n        }\n\n        if (this.idx === null) {\n            this.idx = generateIndex(this.props.adminDefinition, this.props.plugins, this.props.intl);\n        }\n        let query = '';\n        for (const term of filter.split(' ')) {\n            term.trim();\n            if (term !== '') {\n                query += term + ' ';\n                query += term + '* ';\n            }\n        }\n        const sections = this.idx.search(query);\n        this.setState({sections, filter});\n        this.props.onFilterChange(filter);\n\n        if (this.props.navigationBlocked) {\n            return;\n        }\n\n        const validSection = sections.indexOf(browserHistory.location.pathname.replace('/admin_console/', '')) !== -1;\n        if (!validSection) {\n            const visibleSections = this.visibleSections();\n            for (const section of sections) {\n                if (visibleSections.has(section)) {\n                    browserHistory.replace('/admin_console/' + section);\n                    break;\n                }\n            }\n        }\n    }\n\n    updateTitle = () => {\n        let currentSiteName = '';\n        if (this.props.siteName) {\n            currentSiteName = ' - ' + this.props.siteName;\n        }\n\n        document.title = Utils.localizeMessage('sidebar_right_menu.console', 'System Console') + currentSiteName;\n    }\n\n    visibleSections = () => {\n        const {config, license, buildEnterpriseReady, consoleAccess, adminDefinition, cloud} = this.props;\n        const isVisible = (item) => {\n            if (!item.schema) {\n                return false;\n            }\n\n            if (!item.title) {\n                return false;\n            }\n\n            if (item.isHidden && item.isHidden(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud)) {\n                return false;\n            }\n            return true;\n        };\n        const result = new Set();\n        for (const section of Object.values(adminDefinition)) {\n            for (const item of Object.values(section)) {\n                if (isVisible(item)) {\n                    result.add(item.url);\n                }\n            }\n        }\n        return result;\n    }\n\n    renderRootMenu = (definition) => {\n        const {config, license, buildEnterpriseReady, consoleAccess, cloud} = this.props;\n        const sidebarSections = [];\n        Object.entries(definition).forEach(([key, section]) => {\n            let isSectionHidden = false;\n            if (section.isHidden) {\n                isSectionHidden = typeof section.isHidden === 'function' ? section.isHidden(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud) : Boolean(section.isHidden);\n            }\n            if (!isSectionHidden) {\n                const sidebarItems = [];\n                Object.entries(section).forEach(([subKey, item]) => {\n                    if (!item.title) {\n                        return;\n                    }\n\n                    if (item.isHidden) {\n                        if (typeof item.isHidden === 'function' ? item.isHidden(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud) : Boolean(item.isHidden)) {\n                            return;\n                        }\n                    }\n\n                    if (this.state.sections !== null) {\n                        let active = false;\n                        for (const url of this.state.sections) {\n                            if (url === item.url) {\n                                active = true;\n                            }\n                        }\n                        if (!active) {\n                            return;\n                        }\n                    }\n                    const subDefinitionKey = `${key}.${subKey}`;\n                    let tag = '';\n                    if (item.tag?.shouldDisplay(license)) {\n                        tag = item.tag.value;\n                    }\n                    sidebarItems.push((\n                        <AdminSidebarSection\n                            key={subDefinitionKey}\n                            definitionKey={subDefinitionKey}\n                            name={item.url}\n                            tag={tag}\n                            title={\n                                <FormattedMessage\n                                    id={item.title}\n                                    defaultMessage={item.title_default}\n                                />\n                            }\n                        />\n                    ));\n                });\n\n                // Special case for plugins entries\n                let moreSidebarItems = [];\n                if (section.id === 'plugins') {\n                    moreSidebarItems = this.renderPluginsMenu();\n                }\n\n                // If no visible items, don't display this section\n                if (sidebarItems.length === 0 && moreSidebarItems.length === 0) {\n                    return null;\n                }\n\n                if (sidebarItems.length || moreSidebarItems.length) {\n                    sidebarSections.push((\n                        <AdminSidebarCategory\n                            key={key}\n                            definitionKey={key}\n                            parentLink='/admin_console'\n                            icon={section.icon}\n                            sectionClass=''\n                            title={\n                                <FormattedMessage\n                                    id={section.sectionTitle}\n                                    defaultMessage={section.sectionTitleDefault}\n                                />\n                            }\n                        >\n                            {sidebarItems}\n                            {moreSidebarItems}\n                        </AdminSidebarCategory>\n                    ));\n                }\n            }\n            return null;\n        });\n        return sidebarSections;\n    }\n\n    isPluginPresentInSections = (plugin) => {\n        return this.state.sections && this.state.sections.indexOf(`plugin_${plugin.id}`) !== -1;\n    }\n\n    renderPluginsMenu = () => {\n        if (this.props.config.PluginSettings.Enable) {\n            return Object.values(this.props.plugins).sort((a, b) => {\n                const nameCompare = a.name.localeCompare(b.name);\n                if (nameCompare !== 0) {\n                    return nameCompare;\n                }\n\n                return a.id.localeCompare(b.id);\n            }).\n                filter((plugin) => this.state.sections === null || this.isPluginPresentInSections(plugin)).\n                map((plugin) => {\n                    return (\n                        <AdminSidebarSection\n                            key={'customplugin' + plugin.id}\n                            name={'plugins/plugin_' + plugin.id}\n                            title={plugin.name}\n                        />\n                    );\n                });\n        }\n\n        return [];\n    }\n\n    handleClearFilter = () => {\n        this.setState({sections: null, filter: ''});\n        this.props.onFilterChange('');\n    }\n\n    render() {\n        return (\n            <div className='admin-sidebar'>\n                <AdminSidebarHeader/>\n                <div className='filter-container'>\n                    <SearchIcon\n                        className='search__icon'\n                        aria-hidden='true'\n                    />\n                    <QuickInput\n                        className={'filter ' + (this.state.filter ? 'active' : '')}\n                        type='text'\n                        onChange={this.onFilterChange}\n                        value={this.state.filter}\n                        placeholder={Utils.localizeMessage('admin.sidebar.filter', 'Find settings')}\n                        ref={this.searchRef}\n                        id='adminSidebarFilter'\n                        clearable={true}\n                        onClear={this.handleClearFilter}\n                    />\n                </div>\n                <Scrollbars\n                    ref='scrollbar'\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderScrollThumbHorizontal}\n                    renderThumbVertical={renderScrollThumbVertical}\n                    renderView={renderScrollView}\n                >\n                    <div className='nav-pills__container'>\n                        <Highlight filter={this.state.filter}>\n                            <ul className='nav nav-pills nav-stacked'>\n                                {this.renderRootMenu(this.props.adminDefinition)}\n                            </ul>\n                        </Highlight>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(AdminSidebar);\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getPlugins} from 'matterfoss-redux/actions/admin';\nimport {getConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\n\nimport {getNavigationBlocked} from 'selectors/views/admin';\nimport {getAdminDefinition, getConsoleAccess} from 'selectors/admin_console';\n\nimport AdminSidebar from './admin_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const siteName = config.SiteName;\n    const adminDefinition = getAdminDefinition(state);\n    const consoleAccess = getConsoleAccess(state);\n\n    return {\n        license,\n        config: state.entities.admin.config,\n        plugins: state.entities.admin.plugins,\n        navigationBlocked: getNavigationBlocked(state),\n        buildEnterpriseReady,\n        siteName,\n        adminDefinition,\n        consoleAccess,\n        cloud: state.entities.cloud,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport 'bootstrap';\n\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\nimport {AdminConfig, EnvironmentConfig, ClientLicense} from 'matterfoss-redux/types/config';\nimport {Role} from 'matterfoss-redux/types/roles';\nimport {ConsoleAccess} from 'matterfoss-redux/types/admin';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {CloudState} from 'matterfoss-redux/types/cloud';\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport ModalController from 'components/modal_controller';\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings';\nimport DiscardChangesModal from 'components/discard_changes_modal';\n\nimport BackstageNavbar from 'components/backstage/components/backstage_navbar';\n\nimport AdminSidebar from './admin_sidebar';\nimport Highlight from './highlight';\nimport AdminDefinition from './admin_definition';\n\ntype Props = {\n    config: DeepPartial<AdminConfig>;\n    adminDefinition: typeof AdminDefinition;\n    environmentConfig?: Partial<EnvironmentConfig>;\n    license: ClientLicense;\n    unauthorizedRoute: string;\n    buildEnterpriseReady: boolean;\n    roles: Dictionary<Role>;\n    match: {url: string};\n    showNavigationPrompt: boolean;\n    isCurrentUserSystemAdmin: boolean;\n    currentUserHasAnAdminRole: boolean;\n    consoleAccess: ConsoleAccess;\n    cloud: CloudState;\n    team: Team;\n    actions: {\n        getConfig: () => ActionFunc;\n        getEnvironmentConfig: () => ActionFunc;\n        setNavigationBlocked: () => void;\n        confirmNavigation: () => void;\n        cancelNavigation: () => void;\n        loadRolesIfNeeded: (roles: Iterable<string>) => ActionFunc;\n        selectChannel: (channelId: string) => void;\n        selectTeam: (teamId: string) => void;\n        editRole: (role: Role) => void;\n        updateConfig?: (config: AdminConfig) => ActionFunc;\n    };\n}\n\ntype State = {\n    filter: string;\n}\n\n// not every page in the system console will need the license and config, but the vast majority will\ntype ExtraProps = {\n    enterpriseReady: boolean;\n    license?: Record<string, any>;\n    config?: DeepPartial<AdminConfig>;\n    environmentConfig?: Partial<EnvironmentConfig>;\n    setNavigationBlocked?: () => void;\n    roles?: Dictionary<Role>;\n    editRole?: (role: Role) => void;\n    updateConfig?: (config: AdminConfig) => ActionFunc;\n    cloud: CloudState;\n    isCurrentUserSystemAdmin: boolean;\n}\n\ntype Item = {\n    isHidden?: (config?: Record<string, any>, state?: Record<string, any>, license?: Record<string, any>, buildEnterpriseReady?: boolean, consoleAccess?: ConsoleAccess, cloud?: CloudState, isCurrentUserSystemAdmin?: boolean) => boolean;\n    isDisabled?: (config?: Record<string, any>, state?: Record<string, any>, license?: Record<string, any>, buildEnterpriseReady?: boolean, consoleAccess?: ConsoleAccess, cloud?: CloudState, isCurrentUserSystemAdmin?: boolean) => boolean;\n    schema: Record<string, any>;\n    url: string;\n}\n\nexport default class AdminConsole extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        this.state = {\n            filter: '',\n        };\n    }\n\n    public componentDidMount(): void {\n        this.props.actions.getConfig();\n        this.props.actions.getEnvironmentConfig();\n        this.props.actions.loadRolesIfNeeded(['channel_user', 'team_user', 'system_user', 'channel_admin', 'team_admin', 'system_admin', 'system_user_manager', 'system_read_only_admin', 'system_manager']);\n        this.props.actions.selectChannel('');\n        this.props.actions.selectTeam('');\n    }\n\n    private onFilterChange = (filter: string) => {\n        this.setState({filter});\n    }\n\n    private mainRolesLoaded(roles: Dictionary<Role>) {\n        return (\n            roles &&\n            roles.channel_admin &&\n            roles.channel_user &&\n            roles.team_admin &&\n            roles.team_user &&\n            roles.system_admin &&\n            roles.system_user &&\n            roles.system_user_manager &&\n            roles.system_read_only_admin &&\n            roles.system_manager\n        );\n    }\n\n    private renderRoutes = (extraProps: ExtraProps) => {\n        const {adminDefinition, config, license, buildEnterpriseReady, consoleAccess, cloud, isCurrentUserSystemAdmin} = this.props;\n\n        const schemas: Item[] = Object.values(adminDefinition).reduce((acc, section) => {\n            let items: Item[] = [];\n\n            let isSectionHidden = false;\n            Object.entries(section).find(([key, value]) => {\n                if (key === 'isHidden') {\n                    if (typeof value === 'function') {\n                        isSectionHidden = value(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud, isCurrentUserSystemAdmin);\n                    } else {\n                        isSectionHidden = Boolean(value);\n                    }\n                }\n                return null;\n            });\n\n            if (!isSectionHidden) {\n                items = Object.values(section).filter((item: Item) => Boolean(item.schema));\n            }\n            return acc.concat(items);\n        }, [] as Item[]);\n\n        let defaultUrl = '';\n\n        const schemaRoutes = schemas.map((item: Item, index: number) => {\n            if (typeof item.isHidden !== 'undefined') {\n                const isHidden = (typeof item.isHidden === 'function') ? item.isHidden(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud, isCurrentUserSystemAdmin) : Boolean(item.isHidden);\n                if (isHidden) {\n                    return false;\n                }\n            }\n\n            let isItemDisabled: boolean;\n\n            if (typeof item.isDisabled === 'function') {\n                isItemDisabled = item.isDisabled(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud, isCurrentUserSystemAdmin);\n            } else {\n                isItemDisabled = Boolean(item.isDisabled);\n            }\n\n            if (!isItemDisabled && defaultUrl === '') {\n                const {url} = schemas[index];\n\n                // Don't use a url as default if it requires an additional ID\n                // in the path.\n                if (!url.includes(':')) {\n                    defaultUrl = url;\n                }\n            }\n\n            return (\n                <Route\n                    key={item.url}\n                    path={`${this.props.match.url}/${item.url}`}\n                    render={(props) => (\n                        <SchemaAdminSettings\n                            {...extraProps}\n                            {...props}\n                            consoleAccess={this.props.consoleAccess}\n                            schema={item.schema}\n                            isDisabled={isItemDisabled}\n                        />\n                    )}\n                />\n            );\n        });\n\n        return (\n            <Switch>\n                {schemaRoutes}\n                {<Redirect to={`${this.props.match.url}/${defaultUrl}`}/>}\n            </Switch>\n        );\n    }\n\n    public render(): JSX.Element | null {\n        const {\n            license,\n            config,\n            environmentConfig,\n            showNavigationPrompt,\n            roles,\n        } = this.props;\n        const {setNavigationBlocked, cancelNavigation, confirmNavigation, editRole, updateConfig} = this.props.actions;\n\n        if (!this.props.currentUserHasAnAdminRole) {\n            return (\n                <Redirect to={this.props.unauthorizedRoute}/>\n            );\n        }\n\n        if (!this.mainRolesLoaded(this.props.roles)) {\n            return null;\n        }\n\n        if (Object.keys(config).length === 0) {\n            return <div/>;\n        }\n\n        if (config && Object.keys(config).length === 0 && config.constructor === Object) {\n            return (\n                <div className='admin-console__wrapper'>\n                    <AnnouncementBar/>\n                    <div className='admin-console'/>\n                </div>\n            );\n        }\n\n        const discardChangesModal: JSX.Element = (\n            <DiscardChangesModal\n                show={showNavigationPrompt}\n                onConfirm={confirmNavigation}\n                onCancel={cancelNavigation}\n            />\n        );\n\n        const extraProps: ExtraProps = {\n            enterpriseReady: this.props.buildEnterpriseReady,\n            license,\n            config,\n            environmentConfig,\n            setNavigationBlocked,\n            roles,\n            editRole,\n            updateConfig,\n            cloud: this.props.cloud,\n            isCurrentUserSystemAdmin: this.props.isCurrentUserSystemAdmin,\n        };\n        return (\n            <div\n                className='admin-console__wrapper'\n                id='adminConsoleWrapper'\n            >\n                <AnnouncementBar/>\n                <BackstageNavbar\n                    team={this.props.team}\n                />\n                <SystemNotice/>\n                <AdminSidebar onFilterChange={this.onFilterChange}/>\n                <div className='admin-console'>\n                    <Highlight filter={this.state.filter}>\n                        {this.renderRoutes(extraProps)}\n                    </Highlight>\n                </div>\n                {discardChangesModal}\n                <ModalController/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\n\nimport {withRouter} from 'react-router-dom';\n\nimport {getConfig, getEnvironmentConfig, updateConfig} from 'matterfoss-redux/actions/admin';\nimport {loadRolesIfNeeded, editRole} from 'matterfoss-redux/actions/roles';\nimport * as Selectors from 'matterfoss-redux/selectors/entities/admin';\nimport {getConfig as getGeneralConfig, getLicense} from 'matterfoss-redux/selectors/entities/general';\nimport {getRoles} from 'matterfoss-redux/selectors/entities/roles';\nimport {selectChannel} from 'matterfoss-redux/actions/channels';\nimport {selectTeam} from 'matterfoss-redux/actions/teams';\nimport {isCurrentUserSystemAdmin, currentUserHasAnAdminRole, getCurrentUserId} from 'matterfoss-redux/selectors/entities/users';\nimport {getTeam} from 'matterfoss-redux/selectors/entities/teams';\nimport {ConsoleAccess} from 'matterfoss-redux/types/admin';\n\nimport {General} from 'matterfoss-redux/constants';\nimport {GenericAction} from 'matterfoss-redux/types/actions';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\nimport {getAdminDefinition, getConsoleAccess} from 'selectors/admin_console';\n\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {GlobalState} from 'types/store';\n\nimport AdminConsole from './admin_console';\n\nfunction mapStateToProps(state: GlobalState) {\n    const generalConfig = getGeneralConfig(state);\n    const buildEnterpriseReady = generalConfig.BuildEnterpriseReady === 'true';\n    const adminDefinition = getAdminDefinition(state);\n    const teamId = LocalStorageStore.getPreviousTeamId(getCurrentUserId(state));\n    const team = getTeam(state, teamId || '');\n    const unauthorizedRoute = team ? `/${team.name}/channels/${General.DEFAULT_CHANNEL}` : '/';\n    const consoleAccess: ConsoleAccess = getConsoleAccess(state);\n\n    return {\n        config: Selectors.getConfig(state),\n        environmentConfig: Selectors.getEnvironmentConfig(state),\n        license: getLicense(state),\n        buildEnterpriseReady,\n        unauthorizedRoute,\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n        isCurrentUserSystemAdmin: isCurrentUserSystemAdmin(state),\n        currentUserHasAnAdminRole: currentUserHasAnAdminRole(state),\n        roles: getRoles(state),\n        adminDefinition,\n        consoleAccess,\n        cloud: state.entities.cloud,\n        team,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getConfig,\n            getEnvironmentConfig,\n            updateConfig,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n            loadRolesIfNeeded,\n            editRole,\n            selectChannel,\n            selectTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminConsole));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nexport default class BackstageNavbar extends React.PureComponent {\n    static get propTypes() {\n        return {\n            team: PropTypes.object.isRequired,\n            siteName: PropTypes.string,\n        };\n    }\n\n    render() {\n        if (!this.props.team) {\n            return null;\n        }\n\n        return (\n            <div className='backstage-navbar'>\n                <Link\n                    className='backstage-navbar__back'\n                    to={`/${this.props.team.name}`}\n                >\n                    <BackIcon/>\n                    <span>\n                        <FormattedMessage\n                            id='backstage_navbar.backToMatterFOSS'\n                            defaultMessage='Back to {siteName}'\n                            values={{\n                                siteName: this.props.siteName ? this.props.siteName : this.props.team.name,\n                            }}\n                        />\n                    </span>\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport {t} from 'utils/i18n';\n\nexport default function SearchIcon() {\n    return (\n        <LocalizedIcon\n            className='fa fa-search'\n            title={{id: t('generic_icons.search'), defaultMessage: 'Search Icon'}}\n        />\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Client4} from 'matterfoss-redux/client';\nimport {BotTypes} from 'matterfoss-redux/action_types';\n\nimport {ActionFunc} from 'matterfoss-redux/types/actions';\nimport {Bot, BotPatch} from 'matterfoss-redux/types/bots';\n\nimport {bindClientFunc} from './helpers';\n\nconst BOTS_PER_PAGE_DEFAULT = 20;\n\nexport function createBot(bot: Bot): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.createBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            bot,\n        ],\n    });\n}\n\nexport function patchBot(botUserId: string, botPatch: BotPatch): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.patchBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            botPatch,\n        ],\n    });\n}\n\nexport function loadBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function loadBots(page = 0, perPage = BOTS_PER_PAGE_DEFAULT): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.getBotsIncludeDeleted,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNTS,\n        params: [\n            page,\n            perPage,\n        ],\n    });\n}\n\nexport function disableBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.disableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function enableBot(botUserId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.enableBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n        ],\n    });\n}\n\nexport function assignBot(botUserId: string, newOwnerId: string): ActionFunc {\n    return bindClientFunc({\n        clientFunc: Client4.assignBot,\n        onSuccess: BotTypes.RECEIVED_BOT_ACCOUNT,\n        params: [\n            botUserId,\n            newOwnerId,\n        ],\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\n\nimport {Bot} from 'matterfoss-redux/types/bots';\nimport {GlobalState} from 'matterfoss-redux/types/store';\nimport {Dictionary} from 'matterfoss-redux/types/utilities';\nimport {getUsers} from 'matterfoss-redux/selectors/entities/common';\n\nexport const ExternalBotAccountNames: string[] = ['mattermost-advisor'];\n\nexport function getBotAccounts(state: GlobalState) {\n    return state.entities.bots.accounts;\n}\n\nexport const getExternalBotAccounts: (state: GlobalState) => Dictionary<Bot> = createSelector(\n    getBotAccounts,\n    getUsers,\n    (botAccounts, userProfiles) => {\n        const nextState: Dictionary<Bot> = {};\n        Object.values(botAccounts).forEach((botAccount) => {\n            const botUser = userProfiles[botAccount.user_id];\n            if (botUser && !ExternalBotAccountNames.includes(botUser.username)) {\n                nextState[botAccount.user_id] = botAccount;\n            }\n        });\n\n        return nextState;\n    },\n);\n"],"sourceRoot":""}