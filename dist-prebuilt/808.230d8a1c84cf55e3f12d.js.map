{"version":3,"sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/common/site_name_and_description.tsx","webpack://mattermost-webapp/./components/common/infinite_scroll.tsx","webpack://mattermost-webapp/./components/widgets/icons/team_info_icon.tsx","webpack://mattermost-webapp/./components/select_team/components/select_team_item.tsx","webpack://mattermost-webapp/./components/select_team/select_team.tsx","webpack://mattermost-webapp/./components/select_team/index.ts","webpack://mattermost-webapp/./components/widgets/icons/fa_logout_icon.tsx","webpack://mattermost-webapp/./images/logo.png"],"names":["BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","InfiniteScroll","constructor","super","buffer","Math","abs","total","freq","ceil","isFetching","isEndofData","state","callBack","bufferValue","totalItems","itemsPerPage","pageNumber","node","current","validBuffer","validateBuffer","toScroll","scrollHeight","clientHeight","scrollTop","setState","async","amountOfPages","getAmountOfPages","debounce","handleScroll","componentDidMount","addEventListener","debounceHandleScroll","componentWillUnmount","removeEventListener","children","endOfDataMessage","styleClass","loaderStyle","showLoader","ref","style","message","TeamInfoIcon","formatMessage","useIntl","width","height","viewBox","role","aria-label","transform","d","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","SelectTeamItem","e","preventDefault","onTeamClick","team","descriptionTooltip","Tooltip","delayShow","placement","overlay","rootClose","container","canJoinPublicTeams","canJoinPrivateTeams","loading","icon","component","t","canJoin","allow_open_invite","renderDescriptionTooltip","href","Utils","display_name","handleTeamClick","undefined","SelectTeam","currentPage","actions","response","getTeams","error","Error","prevState","siteURL","currentUserRoles","loadingTeamId","data","addUserToTeam","currentUserId","history","push","name","Constants","errorMsg","server_error_id","includes","values","trackEvent","emitUserLoggedOutEvent","endofTeamsData","currentListableTeams","listableTeams","length","slice","userId","fetchMoreTeams","loadRolesIfNeeded","split","currentUserIsGuest","canManageSystem","isMemberOfTeam","canCreateTeams","totalTeamsCount","openContent","joinableTeamContents","forEach","listableTeam","key","permissions","Permissions","invert","padding","teamSignUp","marginTop","adminConsoleLink","headerButton","UserAgent","clearError","handleLogoutClick","alt","src","logoImage","withRouter","connect","config","getConfig","currentUser","getCurrentUser","myTeamMemberships","Object","getTeamMemberships","roles","isGuest","CustomDescriptionText","getSortedListableTeams","locale","SiteName","haveISystemPermission","permission","SiteURL","entities","teams","totalCount","dispatch","bindActionCreators","LogoutIcon"],"mappings":"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","file":"808.230d8a1c84cf55e3f12d.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'MatterFOSS',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\nimport debounce from 'lodash/debounce';\n\nimport LoadingScreen from 'components/loading_screen';\n\nconst SCROLL_BUFFER = 100;\nconst DEBOUNCE_WAIT_TIME = 200;\n\ntype Props = {\n    children: React.ReactNode;\n\n    /**\n     * Function that is called to load more items\n     */\n    callBack: () => void;\n\n    /**\n     * Message to display when all the data has been scrolled through\n     */\n    endOfDataMessage?: string;\n\n    /**\n     * A wrapper class to define styling of the infinite scroll\n     */\n    styleClass?: string;\n\n    /**\n     * A number that determines how far the scroll is near the bottom before\n     * loading more items. The bigger this value the more items will be loaded\n     * much earlier as you scroll to the bottom.\n     */\n    bufferValue: number;\n\n    /**\n     * The total number of items to be scrolled through\n     */\n    totalItems: number;\n\n    /**\n     * The number of items to load in a single fetch\n     */\n    itemsPerPage: number;\n\n    /**\n     * The current page that has been scrolled to\n     */\n    pageNumber: number;\n\n    /**\n     * Optional style object that's passed on to the underlying loader\n     * component\n     */\n\n    loaderStyle?: CSSProperties;\n};\n\ntype State = {\n    isFetching: boolean;\n    isEndofData: boolean;\n};\n\nexport default class InfiniteScroll extends React.PureComponent<Props, State> {\n    node: React.RefObject<HTMLDivElement>;\n\n    static defaultProps = {\n        bufferValue: SCROLL_BUFFER,\n        endOfDataMessage: '',\n        styleClass: '',\n        loaderStyle: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isFetching: false,\n            isEndofData: false,\n        };\n        this.node = React.createRef();\n    }\n\n    componentDidMount(): void {\n        this.node.current?.addEventListener('scroll', this.debounceHandleScroll);\n    }\n\n    componentWillUnmount(): void {\n        this.node.current?.removeEventListener('scroll', this.debounceHandleScroll);\n    }\n\n    validateBuffer = (buffer: number): number => {\n        if (buffer < SCROLL_BUFFER) {\n            return SCROLL_BUFFER;\n        }\n        return Math.abs(buffer);\n    }\n\n    getAmountOfPages = (total: number, freq: number): number => {\n        return Math.ceil(total / freq);\n    }\n\n    handleScroll = (): void => {\n        const {isFetching, isEndofData} = this.state;\n        const {callBack, bufferValue, totalItems, itemsPerPage, pageNumber} = this.props;\n\n        const node = this.node.current;\n        const validBuffer = this.validateBuffer(bufferValue);\n\n        const toScroll = node!.scrollHeight - node!.clientHeight - validBuffer;\n        const nearBottom = node!.scrollTop > toScroll;\n\n        if (nearBottom && !isEndofData && !isFetching) {\n            this.setState({isFetching: true},\n                async () => {\n                    await callBack();\n\n                    this.setState({\n                        isFetching: false,\n                    });\n\n                    if (totalItems === 0) {\n                        this.setState({\n                            isEndofData: true,\n                        });\n                        return;\n                    }\n\n                    const amountOfPages = this.getAmountOfPages(totalItems, itemsPerPage);\n\n                    if (pageNumber === amountOfPages) {\n                        this.setState({\n                            isEndofData: true,\n                        });\n                    }\n                });\n        }\n    }\n\n    debounceHandleScroll = debounce(this.handleScroll, DEBOUNCE_WAIT_TIME);\n\n    render(): React.ReactNode {\n        const {children, endOfDataMessage, styleClass, loaderStyle} = this.props;\n        const {isEndofData, isFetching} = this.state;\n        const showLoader = !isEndofData && isFetching; // show loader if fetching and end of data is not reached.\n        return (\n            <>\n                <div\n                    className={`infinite-scroll ${styleClass}`}\n                    ref={this.node}\n                >\n                    {children}\n                    {showLoader && (\n                        <LoadingScreen\n                            style={loaderStyle}\n                            message=' '\n                        />\n                    )}\n                    {!showLoader && endOfDataMessage}\n                </div>\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {CSSProperties} from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function TeamInfoIcon(props: React.HTMLAttributes<HTMLSpanElement>) {\n    const {formatMessage} = useIntl();\n    return (\n        <span {...props}>\n            <svg\n                width='100%'\n                height='100%'\n                viewBox='0 0 20 20'\n                style={style}\n                role='img'\n                aria-label={formatMessage({id: 'generic_icons.info', defaultMessage: 'Info Icon'})}\n            >\n                <g transform='matrix(1.17647,0,0,1.17647,-1.55431e-15,-1.00573e-14)'>\n                    <path d='M8.5,0C3.797,0 0,3.797 0,8.5C0,13.203 3.797,17 8.5,17C13.203,17 17,13.203 17,8.5C17,3.797 13.203,0 8.5,0ZM10,8.5C10,7.672 9.328,7 8.5,7C7.672,7 7,7.672 7,8.5L7,12.45C7,13.278 7.672,13.95 8.5,13.95C9.328,13.95 10,13.278 10,12.45L10,8.5ZM8.5,3C9.328,3 10,3.672 10,4.5C10,5.328 9.328,6 8.5,6C7.672,6 7,5.328 7,4.5C7,3.672 7.672,3 8.5,3Z'/>\n                </g>\n            </svg>\n        </span>\n    );\n}\n\nconst style: CSSProperties = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode, MouseEvent} from 'react';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport TeamInfoIcon from 'components/widgets/icons/team_info_icon';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils.jsx';\n\ntype Props = {\n    team: Team;\n    onTeamClick: (team: Team) => void;\n    loading: boolean;\n    canJoinPublicTeams: boolean;\n    canJoinPrivateTeams: boolean;\n};\n\nexport default class SelectTeamItem extends React.PureComponent<Props> {\n    handleTeamClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        this.props.onTeamClick(this.props.team);\n    }\n\n    renderDescriptionTooltip = (): ReactNode => {\n        const team = this.props.team;\n        if (!team.description) {\n            return null;\n        }\n\n        const descriptionTooltip = (\n            <Tooltip id='team-description__tooltip'>\n                {team.description}\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={1000}\n                placement='top'\n                overlay={descriptionTooltip}\n                rootClose={true}\n                container={this}\n            >\n                <TeamInfoIcon className='icon icon--info'/>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        const {canJoinPublicTeams, canJoinPrivateTeams, loading, team} = this.props;\n        let icon;\n        if (loading) {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-refresh fa-spin right signup-team__icon'\n                    component='span'\n                    title={{id: t('generic_icons.loading'), defaultMessage: 'Loading Icon'}}\n                />\n            );\n        } else {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-angle-right right signup-team__icon'\n                    component='span'\n                    title={{id: t('select_team.join.icon'), defaultMessage: 'Join Team Icon'}}\n                />\n            );\n        }\n\n        const canJoin = (team.allow_open_invite && canJoinPublicTeams) || (!team.allow_open_invite && canJoinPrivateTeams);\n\n        return (\n            <div className='signup-team-dir'>\n                {this.renderDescriptionTooltip()}\n                <a\n                    href='#'\n                    id={Utils.createSafeId(team.display_name)}\n                    onClick={canJoin ? this.handleTeamClick : undefined}\n                    className={canJoin ? '' : 'disabled'}\n                >\n                    <span className='signup-team-dir__name'>{team.display_name}</span>\n                    {!team.allow_open_invite &&\n                        <LocalizedIcon\n                            className='fa fa-lock light'\n                            title={{id: t('select_team.private.icon'), defaultMessage: 'Private team'}}\n                        />}\n                    {canJoin && icon}\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode, MouseEvent} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Permissions} from 'matterfoss-redux/constants';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions';\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport * as UserAgent from 'utils/user_agent';\nimport Constants from 'utils/constants';\n\nimport logoImage from 'images/logo.png';\n\nimport AnnouncementBar from 'components/announcement_bar';\n\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\n\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport InfiniteScroll from '../common/infinite_scroll';\n\nimport SelectTeamItem from './components/select_team_item';\n\nexport const TEAMS_PER_PAGE = 30;\nconst TEAM_MEMBERSHIP_DENIAL_ERROR_ID = 'api.team.add_members.user_denied';\n\ntype Actions = {\n    getTeams: (page?: number, perPage?: number, includeTotalCount?: boolean) => any;\n    loadRolesIfNeeded: (roles: Iterable<string>) => any;\n    addUserToTeam: (teamId: string, userId?: string) => any;\n}\n\ntype Props = {\n    currentUserId: string;\n    currentUserRoles: string;\n    currentUserIsGuest?: boolean;\n    customDescriptionText?: string;\n    isMemberOfTeam: boolean;\n    listableTeams: Team[];\n    siteName?: string;\n    canCreateTeams: boolean;\n    canManageSystem: boolean;\n    canJoinPublicTeams: boolean;\n    canJoinPrivateTeams: boolean;\n    history?: any;\n    siteURL?: string;\n    actions: Actions;\n    totalTeamsCount: number;\n};\n\ntype State = {\n    loadingTeamId?: string;\n    error: any;\n    endofTeamsData: boolean;\n    currentPage: number;\n    currentListableTeams: Team[];\n}\n\nexport default class SelectTeam extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            loadingTeamId: '',\n            error: null,\n            endofTeamsData: false,\n            currentPage: 0,\n            currentListableTeams: [],\n        };\n    }\n\n    static getDerivedStateFromProps(props: Props, state: State) {\n        if (props.listableTeams.length !== state.currentListableTeams.length) {\n            return {\n                currentListableTeams: props.listableTeams.slice(0, TEAMS_PER_PAGE * state.currentPage),\n            };\n        }\n        return null;\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_select_team', {userId: this.props.currentUserId});\n        this.fetchMoreTeams();\n        if (this.props.currentUserRoles !== undefined) {\n            this.props.actions.loadRolesIfNeeded(this.props.currentUserRoles.split(' '));\n        }\n    }\n\n    fetchMoreTeams = async () => {\n        const {currentPage} = this.state;\n        const {actions} = this.props;\n\n        const response = await actions.getTeams(currentPage, TEAMS_PER_PAGE, true);\n\n        // We don't want to increase the page number if no data came back previously\n        if (!response.error && !(response.error instanceof Error)) {\n            this.setState((prevState) => (\n                {\n                    currentPage: prevState.currentPage + 1,\n                }\n            ),\n            );\n        }\n    }\n\n    handleTeamClick = async (team: Team) => {\n        const {siteURL, currentUserRoles} = this.props;\n        this.setState({loadingTeamId: team.id});\n\n        const {data, error} = await this.props.actions.addUserToTeam(team.id, this.props.currentUserId);\n        if (data && this.props.history !== undefined) {\n            this.props.history.push(`/${team.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            let errorMsg = error.message;\n\n            if (error.server_error_id === TEAM_MEMBERSHIP_DENIAL_ERROR_ID) {\n                if (currentUserRoles !== undefined && currentUserRoles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN)) {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied_admin'\n                            defaultMessage={`You need to be a member of a linked group to join this team. You can add a group to this team [here](${siteURL}/admin_console/user_management/groups).`}\n                            values={{siteURL}}\n                        />\n                    );\n                } else {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied'\n                            defaultMessage='You need to be a member of a linked group to join this team.'\n                        />\n                    );\n                }\n            }\n\n            this.setState({\n                error: errorMsg,\n                loadingTeamId: '',\n            });\n        }\n    };\n\n    handleLogoutClick = (e: MouseEvent): void => {\n        e.preventDefault();\n        trackEvent('select_team', 'click_logout');\n        emitUserLoggedOutEvent('/login');\n    };\n\n    clearError = (e: MouseEvent): void => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n        });\n    };\n\n    render(): ReactNode {\n        const {currentPage, currentListableTeams} = this.state;\n        const {\n            currentUserIsGuest,\n            canManageSystem,\n            customDescriptionText,\n            isMemberOfTeam,\n            siteName,\n            canCreateTeams,\n            canJoinPublicTeams,\n            canJoinPrivateTeams,\n            totalTeamsCount,\n        } = this.props;\n\n        let openContent;\n        if (this.state.loadingTeamId) {\n            openContent = <LoadingScreen/>;\n        } else if (this.state.error) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>{this.state.error}</label>\n                    </div>\n                </div>\n            );\n        } else if (currentUserIsGuest) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>\n                            <FormattedMessage\n                                id='signup_team.guest_without_channels'\n                                defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        } else {\n            let joinableTeamContents: any = [];\n            currentListableTeams.forEach((listableTeam) => {\n                if ((listableTeam.allow_open_invite && canJoinPublicTeams) || (!listableTeam.allow_open_invite && canJoinPrivateTeams)) {\n                    joinableTeamContents.push(\n                        <SelectTeamItem\n                            key={'team_' + listableTeam.name}\n                            team={listableTeam}\n                            onTeamClick={this.handleTeamClick}\n                            loading={this.state.loadingTeamId === listableTeam.id}\n                            canJoinPublicTeams={canJoinPublicTeams}\n                            canJoinPrivateTeams={canJoinPrivateTeams}\n                        />,\n                    );\n                }\n            });\n\n            if (joinableTeamContents.length === 0 && (canCreateTeams || canManageSystem)) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <FormattedMessage\n                                id='signup_team.no_open_teams_canCreate'\n                                defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (joinableTeamContents.length === 0) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams_canCreate'\n                                    defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                            <SystemPermissionGate\n                                permissions={[Permissions.CREATE_TEAM]}\n                                invert={true}\n                            >\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams'\n                                    defaultMessage='No teams are available to join. Please ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                        </div>\n                    </div>\n                );\n            }\n\n            openContent = (\n                <div\n                    id='teamsYouCanJoinContent'\n                    className='signup__content'\n                >\n                    <h4>\n                        <FormattedMessage\n                            id='signup_team.join_open'\n                            defaultMessage='Teams you can join: '\n                        />\n                    </h4>\n                    <InfiniteScroll\n                        callBack={this.fetchMoreTeams}\n                        styleClass='signup-team-all'\n                        totalItems={totalTeamsCount}\n                        itemsPerPage={TEAMS_PER_PAGE}\n                        bufferValue={280}\n                        pageNumber={currentPage}\n                        loaderStyle={{padding: '0px', height: '40px'}}\n                    >\n                        {joinableTeamContents}\n                    </InfiniteScroll>\n                </div>\n            );\n        }\n\n        const teamSignUp = (\n            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                <div\n                    className='margin--extra'\n                    style={{marginTop: '0.5em'}}\n                >\n                    <Link\n                        id='createNewTeamLink'\n                        to='/create_team'\n                        onClick={() => trackEvent('select_team', 'click_create_team')}\n                        className='signup-team-login'\n                    >\n                        <FormattedMessage\n                            id='login.createTeam'\n                            defaultMessage='Create a team'\n                        />\n                    </Link>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        let adminConsoleLink;\n        if (!UserAgent.isMobileApp()) {\n            adminConsoleLink = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                    <div className='mt-8 hidden-xs'>\n                        <Link\n                            to='/admin_console'\n                            className='signup-team-login'\n                            onClick={() => trackEvent('select_team', 'click_system_console')}\n                        >\n                            <FormattedMessage\n                                id='signup_team_system_console'\n                                defaultMessage='Go to System Console'\n                            />\n                        </Link>\n                    </div>\n                </SystemPermissionGate>\n            );\n        }\n\n        let headerButton;\n        if (this.state.error) {\n            headerButton = <BackButton onClick={this.clearError}/>;\n        } else if (isMemberOfTeam) {\n            headerButton = <BackButton/>;\n        } else {\n            headerButton = (\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        id='logout'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                {headerButton}\n                <div className='col-sm-12'>\n                    <div\n                        className={'select-team__container signup-team__container'}\n                    >\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        {openContent}\n                        {teamSignUp}\n                        {adminConsoleLink}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {getTeams} from 'matterfoss-redux/actions/teams';\nimport {loadRolesIfNeeded} from 'matterfoss-redux/actions/roles';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {Permissions} from 'matterfoss-redux/constants';\nimport {haveISystemPermission} from 'matterfoss-redux/selectors/entities/roles';\nimport {getSortedListableTeams, getTeamMemberships} from 'matterfoss-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\n\nimport {GlobalState} from 'types/store';\n\nimport {addUserToTeam} from 'actions/team_actions';\nimport {isGuest} from 'utils/utils';\n\nimport SelectTeam from './select_team';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n    const myTeamMemberships = Object.values(getTeamMemberships(state));\n\n    return {\n        currentUserId: currentUser.id,\n        currentUserRoles: currentUser.roles || '',\n        currentUserIsGuest: isGuest(currentUser),\n        customDescriptionText: config.CustomDescriptionText,\n        isMemberOfTeam: myTeamMemberships && myTeamMemberships.length > 0,\n        listableTeams: getSortedListableTeams(state, currentUser.locale),\n        siteName: config.SiteName,\n        canCreateTeams: haveISystemPermission(state, {permission: Permissions.CREATE_TEAM}),\n        canManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        canJoinPublicTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PUBLIC_TEAMS}),\n        canJoinPrivateTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PRIVATE_TEAMS}),\n        siteURL: config.SiteURL,\n        totalTeamsCount: state.entities.teams.totalCount || 0,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            loadRolesIfNeeded,\n            addUserToTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SelectTeam));\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {useIntl} from 'react-intl';\n\nexport default function LogoutIcon() {\n    const {formatMessage} = useIntl();\n    return (\n        <i\n            className='fa fa-1x fa-angle-left'\n            title={formatMessage({id: 'generic_icons.logout', defaultMessage: 'Logout Icon'})}\n        />\n    );\n}\n","export default __webpack_public_path__ + \"files/a0a7d819869d6545c06500f0d8179b41.png\";"],"sourceRoot":""}