{"version":3,"sources":["webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/common/site_name_and_description.tsx","webpack://mattermost-webapp/./components/create_team/components/display_name.tsx","webpack://mattermost-webapp/./components/create_team/components/team_url/team_url.tsx","webpack://mattermost-webapp/./components/create_team/components/team_url/index.ts","webpack://mattermost-webapp/./components/create_team/create_team.tsx","webpack://mattermost-webapp/./components/create_team/index.js","webpack://mattermost-webapp/./images/logo.png"],"names":["BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","TeamSignupDisplayNamePage","constructor","super","e","preventDefault","trackEvent","displayName","state","teamDisplayName","trim","setState","nameError","length","Constants","values","min","max","newState","wizard","team","display_name","name","cleanUpUrlable","updateParent","currentTarget","select","target","value","componentDidMount","nameDivClass","alt","src","logoImage","type","placeholder","maxLength","autoFocus","onFocus","handleFocus","onChange","handleDisplayNameChange","spellCheck","submitNext","TeamUrl","async","teamURL","cleanedName","URL","actions","checkIfTeamExists","createTeam","test","index","indexOf","isLoading","teamSignup","JSON","parse","stringify","exists","createTeamData","data","error","history","push","message","urlTooltip","Tooltip","finishMessage","delayShow","placement","overlay","handleTeamURLInputChange","Button","bsStyle","disabled","href","submitBack","connect","dispatch","bindActionCreators","CreateTeam","currentChannel","currentTeam","match","path","config","getConfig","getCurrentChannel","getCurrentTeam","CustomDescriptionText","SiteName"],"mappings":"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","file":"594.920eca001e83a7e902d9.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'MatterFOSS',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {cleanUpUrlable} from 'utils/url';\nimport logoImage from 'images/logo.png';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\n\ntype CreateTeamState = {\n    team?: Partial<Team>;\n    wizard: string;\n};\n\ntype Props = {\n\n    /*\n     * Object containing team's display_name and name\n     */\n    state: CreateTeamState;\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: CreateTeamState) => void;\n}\n\ntype State = {\n    teamDisplayName: string;\n    nameError?: React.ReactNode;\n}\n\nexport default class TeamSignupDisplayNamePage extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            teamDisplayName: this.props.state.team?.display_name || '', // eslint-disable-line camelcase\n        };\n    }\n\n    componentDidMount(): void {\n        trackEvent('signup', 'signup_team_01_name');\n    }\n\n    submitNext = (e: React.MouseEvent): void => {\n        e.preventDefault();\n        trackEvent('display_name', 'click_next');\n        const displayName = this.state.teamDisplayName.trim();\n        if (!displayName) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        } else if (displayName.length < Constants.MIN_TEAMNAME_LENGTH || displayName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.display_name.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}. You can add a longer team description later.'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        const newState = this.props.state;\n        newState.wizard = 'team_url';\n        newState.team!.display_name = displayName;\n        newState.team!.name = cleanUpUrlable(displayName);\n        this.props.updateParent(newState);\n    }\n\n    handleFocus = (e: React.FocusEvent<HTMLInputElement>): void => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    handleDisplayNameChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        this.setState({teamDisplayName: e.target.value});\n    }\n\n    render(): React.ReactNode {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.display_name.teamName'\n                            defaultMessage='Team Name'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-9'>\n                                <input\n                                    id='teamNameInput'\n                                    type='text'\n                                    className='form-control'\n                                    placeholder=''\n                                    maxLength={128}\n                                    value={this.state.teamDisplayName}\n                                    autoFocus={true}\n                                    onFocus={this.handleFocus}\n                                    onChange={this.handleDisplayNameChange}\n                                    spellCheck='false'\n                                />\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <div>\n                        <FormattedMessage\n                            id='create_team.display_name.nameHelp'\n                            defaultMessage='Name your team in any language. Your team name shows in menus and headings.'\n                        />\n                    </div>\n                    <button\n                        id='teamNameNextButton'\n                        type='submit'\n                        className='btn btn-primary mt-8'\n                        onClick={this.submitNext}\n                    >\n                        <FormattedMessage\n                            id='create_team.display_name.next'\n                            defaultMessage='Next'\n                        />\n                        <NextIcon/>\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n/* eslint-disable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport React from 'react';\nimport {Button, Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Team} from 'matterfoss-redux/types/teams';\nimport {Client4Error} from 'matterfoss-redux/types/client4';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport * as URL from 'utils/url';\nimport logoImage from 'images/logo.png';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\n\ntype State = {\n    isLoading: boolean;\n    nameError: string | JSX.Element;\n    teamURL?: string;\n}\n\ntype Props = {\n\n    /*\n     * Object containing team's display_name and name\n     */\n    state: {team?: Partial<Team>; wizard: string};\n\n    /*\n     * Function that updates parent component with state props\n     */\n    updateParent: (state: Props['state']) => void;\n\n    /*\n     * Object with redux action creators\n     */\n    actions: {\n\n        /*\n         * Action creator to check if a team already exists\n         */\n        checkIfTeamExists: (teamName: string) => Promise<{exists: boolean}>;\n\n        /*\n     * Action creator to create a new team\n     */\n        createTeam: (team: Team) => Promise<{data: Team; error: Client4Error}>;\n    };\n    history: {\n        push(path: string): void;\n    };\n}\n\nexport default class TeamUrl extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            nameError: '',\n            isLoading: false,\n            teamURL: props.state.team?.name,\n        };\n    }\n\n    public componentDidMount() {\n        trackEvent('signup', 'signup_team_02_url');\n    }\n\n    public submitBack = (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_back');\n        const newState = this.props.state;\n        newState.wizard = 'display_name';\n        this.props.updateParent(newState);\n    }\n\n    public submitNext = async (e: React.MouseEvent<Button, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('signup', 'click_finish');\n\n        const name = this.state.teamURL!.trim();\n        const cleanedName = URL.cleanUpUrlable(name);\n        const urlRegex = /^[a-z]+([a-z\\-0-9]+|(__)?)[a-z0-9]+$/g;\n        const {actions: {checkIfTeamExists, createTeam}} = this.props;\n\n        if (!name) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.required'\n                    defaultMessage='This field is required'\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName.length < Constants.MIN_TEAMNAME_LENGTH || cleanedName.length > Constants.MAX_TEAMNAME_LENGTH) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.charLength'\n                    defaultMessage='Name must be {min} or more characters up to a maximum of {max}'\n                    values={{\n                        min: Constants.MIN_TEAMNAME_LENGTH,\n                        max: Constants.MAX_TEAMNAME_LENGTH,\n                    }}\n                />),\n            });\n            return;\n        }\n\n        if (cleanedName !== name || !urlRegex.test(name)) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.regex'\n                    defaultMessage=\"Use only lower case letters, numbers and dashes. Must start with a letter and can't end in a dash.\"\n                />),\n            });\n            return;\n        }\n\n        for (let index = 0; index < Constants.RESERVED_TEAM_NAMES.length; index++) {\n            if (cleanedName.indexOf(Constants.RESERVED_TEAM_NAMES[index]) === 0) {\n                this.setState({nameError: (\n                    <FormattedMarkdownMessage\n                        id='create_team.team_url.taken'\n                        defaultMessage='This URL [starts with a reserved word](!https://docs.mattermost.com/help/getting-started/creating-teams.html#team-url) or is unavailable. Please try another.'\n                    />),\n                });\n                return;\n            }\n        }\n\n        this.setState({isLoading: true});\n        const teamSignup = JSON.parse(JSON.stringify(this.props.state));\n        teamSignup.team.type = 'O';\n        teamSignup.team.name = name;\n\n        const checkIfTeamExistsData: { exists: boolean } = await checkIfTeamExists(name);\n        const exists = checkIfTeamExistsData.exists;\n\n        if (exists) {\n            this.setState({nameError: (\n                <FormattedMessage\n                    id='create_team.team_url.unavailable'\n                    defaultMessage='This URL is taken or unavailable. Please try another.'\n                />),\n            });\n            this.setState({isLoading: false});\n            return;\n        }\n\n        const createTeamData: { data: Team; error: any } = await createTeam(teamSignup.team);\n        const data = createTeamData.data;\n        const error = createTeamData.error;\n\n        if (data) {\n            this.props.history.push('/' + data.name + '/channels/' + Constants.DEFAULT_CHANNEL);\n            trackEvent('signup', 'signup_team_03_complete');\n        } else if (error) {\n            this.setState({nameError: error.message});\n            this.setState({isLoading: false});\n        }\n    }\n\n    public handleFocus = (e: React.FocusEvent<HTMLInputElement>) => {\n        e.preventDefault();\n        e.currentTarget.select();\n    }\n\n    public handleTeamURLInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({teamURL: e.target.value});\n    }\n\n    render() {\n        let nameError = null;\n        let nameDivClass = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameDivClass += ' has-error';\n        }\n\n        const title = `${URL.getSiteURL()}/`;\n        const urlTooltip = (\n            <Tooltip id='urlTooltip'>{title}</Tooltip>\n        );\n\n        let finishMessage = (\n            <FormattedMessage\n                id='create_team.team_url.finish'\n                defaultMessage='Finish'\n            />\n        );\n\n        if (this.state.isLoading) {\n            finishMessage = (\n                <FormattedMessage\n                    id='create_team.team_url.creatingTeam'\n                    defaultMessage='Creating team...'\n                />\n            );\n        }\n\n        return (\n            <div>\n                <form>\n                    <img\n                        alt={'signup team logo'}\n                        className='signup-team-logo'\n                        src={logoImage}\n                    />\n                    <h2>\n                        <FormattedMessage\n                            id='create_team.team_url.teamUrl'\n                            defaultMessage='Team URL'\n                        />\n                    </h2>\n                    <div className={nameDivClass}>\n                        <div className='row'>\n                            <div className='col-sm-11'>\n                                <div className='input-group input-group--limit'>\n                                    <OverlayTrigger\n                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                        placement='top'\n                                        overlay={urlTooltip}\n                                    >\n                                        <span className='input-group-addon'>\n                                            {title}\n                                        </span>\n                                    </OverlayTrigger>\n                                    <input\n                                        id='teamURLInput'\n                                        type='text'\n                                        className='form-control'\n                                        placeholder=''\n                                        maxLength={128}\n                                        value={this.state.teamURL}\n                                        autoFocus={true}\n                                        onFocus={this.handleFocus}\n                                        onChange={this.handleTeamURLInputChange}\n                                        spellCheck='false'\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                        {nameError}\n                    </div>\n                    <p>\n                        <FormattedMessage\n                            id='create_team.team_url.webAddress'\n                            defaultMessage='Choose the web address of your new team:'\n                        />\n                    </p>\n                    <ul className='color--light'>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint1'\n                                defaultMessage='Short and memorable is best'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint2'\n                                defaultMessage='Use lowercase letters, numbers and dashes'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='create_team.team_url.hint3'\n                                defaultMessage=\"Must start with a letter and can't end in a dash\"\n                            />\n                        </li>\n                    </ul>\n                    <div className='mt-8'>\n                        <Button\n                            id='teamURLFinishButton'\n                            type='submit'\n                            bsStyle='primary'\n                            disabled={this.state.isLoading}\n                            onClick={(e: React.MouseEvent<Button, MouseEvent>) => this.submitNext(e)}\n                        >\n                            {finishMessage}\n                        </Button>\n                    </div>\n                    <div className='mt-8'>\n                        <a\n                            href='#'\n                            onClick={this.submitBack}\n                        >\n                            <FormattedMessage\n                                id='create_team.team_url.back'\n                                defaultMessage='Back to previous step'\n                            />\n                        </a>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {ActionFunc, GenericAction} from 'matterfoss-redux/types/actions';\nimport {checkIfTeamExists, createTeam} from 'matterfoss-redux/actions/teams';\n\nimport {Team} from 'matterfoss-redux/types/teams';\nimport {Client4Error} from 'matterfoss-redux/types/client4';\n\nimport TeamUrl from './team_url';\n\ntype Actions = {\n    checkIfTeamExists: (teamName: string) => Promise<{exists: boolean}>;\n    createTeam: (team: Team) => Promise<{data: Team; error: Client4Error}>;\n};\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            checkIfTeamExists,\n            createTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(TeamUrl);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Route, Switch, Redirect, RouteComponentProps} from 'react-router-dom';\n\nimport {Channel} from 'matterfoss-redux/types/channels';\n\nimport {Team} from 'matterfoss-redux/types/teams';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport DisplayName from 'components/create_team/components/display_name';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport TeamUrl from 'components/create_team/components/team_url';\n\ntype Props = {\n\n    /*\n   * Object containing information on the current team, used to define BackButton's url\n   */\n    currentTeam: Team;\n\n    /*\n   * Object containing information on the current selected channel, used to define BackButton's url\n   */\n    currentChannel: Channel;\n\n    /*\n    * String containing the custom branding's text\n    */\n    customDescriptionText: string;\n\n    /*\n   * String containing the custom branding's Site Name\n   */\n    siteName: string;\n\n    /*\n   * Object from react-router\n   */\n    match: {\n        url: string;\n    };\n};\n\ntype State = {\n    team?: Partial<Team>;\n    wizard: string;\n};\n\nexport default class CreateTeam extends React.PureComponent<Props & RouteComponentProps, State> {\n    public constructor(props: Props & RouteComponentProps) {\n        super(props);\n\n        this.state = {\n            team: {},\n            wizard: 'display_name',\n        };\n    }\n\n    public updateParent = (state: State) => {\n        this.setState(state);\n        this.props.history.push('/create_team/' + state.wizard);\n    };\n\n    render() {\n        const {\n            currentChannel,\n            currentTeam,\n            customDescriptionText,\n            match,\n            siteName,\n        } = this.props;\n\n        let url = '/select_team';\n        if (currentTeam) {\n            url = `/${currentTeam.name}`;\n            if (currentChannel) {\n                url += `/channels/${currentChannel.name}`;\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                <BackButton url={url}/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <div className='signup__content'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/display_name`}\n                                    render={(props) => (\n                                        <DisplayName\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/team_url`}\n                                    render={(props) => (\n                                        <TeamUrl\n                                            state={this.state}\n                                            updateParent={this.updateParent}\n                                            {...props}\n                                        />\n                                    )}\n                                />\n                                <Redirect to={`${match.url}/display_name`}/>\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentChannel} from 'matterfoss-redux/selectors/entities/channels';\nimport {getCurrentTeam} from 'matterfoss-redux/selectors/entities/teams';\n\nimport CreateTeam from './create_team';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentChannel = getCurrentChannel(state);\n    const currentTeam = getCurrentTeam(state);\n\n    const customDescriptionText = config.CustomDescriptionText;\n    const siteName = config.SiteName;\n\n    return {\n        currentChannel,\n        currentTeam,\n        customDescriptionText,\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(CreateTeam);\n","export default __webpack_public_path__ + \"files/a0a7d819869d6545c06500f0d8179b41.png\";"],"sourceRoot":""}