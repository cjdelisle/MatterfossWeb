{"version":3,"sources":["webpack://mattermost-webapp/./components/logged_in/logged_in.jsx","webpack://mattermost-webapp/./components/logged_in/index.js","webpack://mattermost-webapp/./packages/matterfoss-redux/src/actions/timezone.ts"],"names":["dispatch","store","getState","LoggedIn","React","constructor","props","super","origin","data","type","message","this","currentUser","window","location","version","desktop","semver","userIsActive","manual","WebSocketClient","channel","teamId","focus","actions","getChannelURLAction","e","which","includes","target","tagName","toLowerCase","preventDefault","removeEventListener","handleBeforeUnload","document","cookie","indexOf","viewChannel","currentChannelId","WebSocketActions","root","getElementById","className","isValidState","componentDidMount","enableTimezone","autoUpdateTimezone","getBrowserTimezone","addEventListener","onFocusListener","onBlurListener","hasFocus","GlobalActions","onDesktopMessageListener","postMessage","UserAgent","body","classList","add","rootEl","setAttribute","encodeURIComponent","pathname","handleBackSpace","BrowserStore","componentWillUnmount","render","mfaRequired","to","showTermsOfService","children","PropTypes","isRequired","browserHistory","getChannelURL","connect","state","ownProps","license","getLicense","config","getConfig","shouldShowTermsOfService","getCurrentUser","getCurrentChannelId","checkIfMFARequired","match","url","ExperimentalTimezone","bindActionCreators","deviceTimezone","async","currentUer","currentTimezone","getUserTimezone","id","newTimezoneExists","automaticTimezone","useAutomaticTimezone","timezone","manualTimezone","updatedUser","updateMe"],"mappings":"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","file":"865.6e8d6a2149ba80d24bda.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Redirect} from 'react-router';\n\nimport semver from 'semver';\n\nimport {viewChannel} from 'matterfoss-redux/actions/channels';\n\nimport * as GlobalActions from 'actions/global_actions';\nimport * as WebSocketActions from 'actions/websocket_actions.jsx';\nimport * as UserAgent from 'utils/user_agent';\nimport LoadingScreen from 'components/loading_screen';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\nimport store from 'stores/redux_store.jsx';\nimport WebSocketClient from 'client/web_websocket_client.jsx';\nimport BrowserStore from 'stores/browser_store';\n\nconst dispatch = store.dispatch;\nconst getState = store.getState;\n\nconst BACKSPACE_CHAR = 8;\n\nexport default class LoggedIn extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object,\n        currentChannelId: PropTypes.string,\n        children: PropTypes.object,\n        mfaRequired: PropTypes.bool.isRequired,\n        enableTimezone: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            getChannelURLAction: PropTypes.func.isRequired,\n        }).isRequired,\n        showTermsOfService: PropTypes.bool.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const root = document.getElementById('root');\n        if (root) {\n            root.className += ' channel-view';\n        }\n    }\n\n    isValidState() {\n        return this.props.currentUser != null;\n    }\n\n    componentDidMount() {\n        // Initialize websocket\n        WebSocketActions.initialize();\n\n        if (this.props.enableTimezone) {\n            this.props.actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n\n        // Make sure the websockets close and reset version\n        window.addEventListener('beforeunload', this.handleBeforeUnload);\n\n        // Listen for focused tab/window state\n        window.addEventListener('focus', this.onFocusListener);\n        window.addEventListener('blur', this.onBlurListener);\n        if (!document.hasFocus()) {\n            GlobalActions.emitBrowserFocus(false);\n        }\n\n        // Listen for messages from the desktop app\n        window.addEventListener('message', this.onDesktopMessageListener);\n\n        // Tell the desktop app the webapp is ready\n        window.postMessage(\n            {\n                type: 'webapp-ready',\n            },\n            window.location.origin,\n        );\n\n        // Device tracking setup\n        if (UserAgent.isIos()) {\n            document.body.classList.add('ios');\n        } else if (UserAgent.isAndroid()) {\n            document.body.classList.add('android');\n        }\n\n        if (!this.props.currentUser) {\n            const rootEl = document.getElementById('root');\n            if (rootEl) {\n                rootEl.setAttribute('class', '');\n            }\n            GlobalActions.emitUserLoggedOutEvent('/login?redirect_to=' + encodeURIComponent(this.props.location.pathname), true, false);\n        }\n\n        // Prevent backspace from navigating back a page\n        window.addEventListener('keydown', this.handleBackSpace);\n\n        if (this.isValidState()) {\n            BrowserStore.signalLogin();\n        }\n    }\n\n    componentWillUnmount() {\n        WebSocketActions.close();\n\n        window.removeEventListener('keydown', this.handleBackSpace);\n\n        window.removeEventListener('focus', this.onFocusListener);\n        window.removeEventListener('blur', this.onBlurListener);\n        window.removeEventListener('message', this.onDesktopMessageListener);\n    }\n\n    render() {\n        if (!this.isValidState()) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.props.mfaRequired) {\n            if (this.props.location.pathname !== '/mfa/setup') {\n                return <Redirect to={'/mfa/setup'}/>;\n            }\n        } else if (this.props.location.pathname === '/mfa/confirm') {\n            // Nothing to do. Wait for MFA flow to complete before prompting TOS.\n        } else if (this.props.showTermsOfService) {\n            if (this.props.location.pathname !== '/terms_of_service') {\n                return <Redirect to={'/terms_of_service?redirect_to=' + encodeURIComponent(this.props.location.pathname)}/>;\n            }\n        }\n\n        return this.props.children;\n    }\n\n    onFocusListener() {\n        GlobalActions.emitBrowserFocus(true);\n    }\n\n    onBlurListener() {\n        GlobalActions.emitBrowserFocus(false);\n    }\n\n    // listen for messages from the desktop app\n    onDesktopMessageListener = ({origin, data: {type, message = {}} = {}} = {}) => {\n        if (!this.props.currentUser) {\n            return;\n        }\n        if (origin !== window.location.origin) {\n            return;\n        }\n\n        switch (type) {\n        case 'register-desktop': {\n            const {version} = message;\n            if (!window.desktop) {\n                window.desktop = {};\n            }\n            window.desktop.version = semver.valid(semver.coerce(version));\n            break;\n        }\n        case 'user-activity-update': {\n            const {userIsActive, manual} = message;\n\n            // update the server with the users current away status\n            if (userIsActive === true || userIsActive === false) {\n                WebSocketClient.userUpdateActiveStatus(userIsActive, manual);\n            }\n            break;\n        }\n        case 'notification-clicked': {\n            const {channel, teamId} = message;\n            window.focus();\n\n            // navigate to the appropriate channel\n            this.props.actions.getChannelURLAction(channel, teamId);\n            break;\n        }\n        }\n    }\n\n    handleBackSpace = (e) => {\n        const excludedElements = ['input', 'textarea'];\n\n        if (e.which === BACKSPACE_CHAR && !(excludedElements.includes(e.target.tagName.toLowerCase()))) {\n            e.preventDefault();\n        }\n    }\n\n    handleBeforeUnload = () => {\n        // remove the event listener to prevent getting stuck in a loop\n        window.removeEventListener('beforeunload', this.handleBeforeUnload);\n        if (document.cookie.indexOf('MMUSERID=') > -1) {\n            viewChannel('', this.props.currentChannelId || '')(dispatch, getState);\n        }\n        WebSocketActions.close();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {autoUpdateTimezone} from 'matterfoss-redux/actions/timezone';\nimport {getCurrentChannelId} from 'matterfoss-redux/selectors/entities/channels';\nimport {getLicense, getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUser, shouldShowTermsOfService} from 'matterfoss-redux/selectors/entities/users';\n\nimport {browserHistory} from 'utils/browser_history';\nimport {checkIfMFARequired} from 'utils/route';\nimport {getChannelURL} from 'utils/utils';\n\nimport LoggedIn from './logged_in.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const showTermsOfService = shouldShowTermsOfService(state);\n\n    return {\n        currentUser: getCurrentUser(state),\n        currentChannelId: getCurrentChannelId(state),\n        mfaRequired: checkIfMFARequired(getCurrentUser(state), license, config, ownProps.match.url),\n        enableTimezone: config.ExperimentalTimezone === 'true',\n        showTermsOfService,\n    };\n}\n\n// NOTE: suggestions where to keep this welcomed\nconst getChannelURLAction = (channel, teamId) => (dispatch, getState) => browserHistory.push(getChannelURL(getState(), channel, teamId));\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autoUpdateTimezone,\n            getChannelURLAction,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoggedIn);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/users';\nimport {getUserTimezone} from 'matterfoss-redux/selectors/entities/timezone';\n\nimport {DispatchFunc, GetStateFunc} from 'matterfoss-redux/types/actions';\n\nimport {updateMe} from './users';\nexport function autoUpdateTimezone(deviceTimezone: string) {\n    return async (dispatch: DispatchFunc, getState: GetStateFunc) => {\n        const currentUer = getCurrentUser(getState());\n        const currentTimezone = getUserTimezone(getState(), currentUer.id);\n        const newTimezoneExists = currentTimezone.automaticTimezone !== deviceTimezone;\n\n        if (currentTimezone.useAutomaticTimezone && newTimezoneExists) {\n            const timezone = {\n                useAutomaticTimezone: 'true',\n                automaticTimezone: deviceTimezone,\n                manualTimezone: currentTimezone.manualTimezone,\n            };\n\n            const updatedUser = {\n                ...currentUer,\n                timezone,\n            };\n\n            updateMe(updatedUser)(dispatch, getState);\n        }\n    };\n}\n"],"sourceRoot":""}