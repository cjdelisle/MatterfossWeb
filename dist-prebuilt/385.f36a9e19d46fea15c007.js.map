{"version":3,"sources":["webpack://mattermost-webapp/./components/error_page/error_title.tsx","webpack://mattermost-webapp/./components/error_page/error_message.tsx","webpack://mattermost-webapp/./images/cloud/computer-with-alert.svg","webpack://mattermost-webapp/./components/error_page/workspace_user_limit_reached.tsx","webpack://mattermost-webapp/./components/error_page/error_page.tsx","webpack://mattermost-webapp/./components/error_page/index.tsx"],"names":["ErrorTitle","type","title","errorTitle","ErrorPageTypes","id","defaultMessage","Utils","ErrorMessage","message","service","isGuest","errorMessage","values","link","url","messageId","t","useEffect","Client4","className","src","mattermostCloud","computerWithAlert","wavesBackground","blueDots","ErrorPage","React","componentDidMount","document","body","setAttribute","componentWillUnmount","removeAttribute","render","this","props","params","URLSearchParams","location","search","signature","get","trustParams","delete","keyPEM","asymmetricSigningPublicKey","verify","crypto","update","toString","returnTo","backButton","Link","to","siteName","defaultChannelName","Constants","errorPage","data-testid","connect","state","config","getConfig","user","getCurrentUser","SiteName","AsymmetricSigningPublicKey","Boolean"],"mappings":"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","file":"385.f36a9e19d46fea15c007.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\ntype Props = {\n    type?: string | null;\n    title: string;\n}\n\nconst ErrorTitle: React.FC<Props> = ({type, title}: Props) => {\n    let errorTitle = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.local_storage.title'\n                    defaultMessage='Cannot Load MatterFOSS'\n                />\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='permalink.error.title'\n                    defaultMessage='Message Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_access_denied.title'\n                    defaultMessage='Authorization Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_missing_code.title'\n                    defaultMessage='MatterFOSS Needs Your Help'\n                />\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.oauth_invalid_param.title'\n                    defaultMessage='OAuth Parameter Error'\n                />\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.team_not_found.title'\n                    defaultMessage='Team Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.channel_not_found.title'\n                    defaultMessage='Channel Not Found'\n                />\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorTitle = (\n                <FormattedMessage\n                    id='error.not_found.title'\n                    defaultMessage='Page Not Found'\n                />\n            );\n        }\n    } else if (title) {\n        errorTitle = title;\n    } else {\n        errorTitle = Utils.localizeMessage('error.generic.title', 'Error');\n    }\n\n    return errorTitle;\n};\n\nexport default ErrorTitle;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ErrorPageTypes} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nimport ErrorLink from './error_link';\n\ntype Props = {\n    type?: string | null;\n    message?: string;\n    service?: string;\n    isGuest?: boolean;\n}\n\nconst ErrorMessage: React.FC<Props> = ({type, message, service, isGuest}: Props) => {\n    let errorMessage = null;\n    if (type) {\n        switch (type) {\n        case ErrorPageTypes.LOCAL_STORAGE:\n            errorMessage = (\n                <div>\n                    <FormattedMessage\n                        id='error.local_storage.message'\n                        defaultMessage='MatterFOSS was unable to load because a setting in your browser prevents the use of its local storage features. To allow MatterFOSS to load, try the following actions:'\n                    />\n                    <ul>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help1'\n                                defaultMessage='Enable cookies'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help2'\n                                defaultMessage='Turn off private browsing'\n                            />\n                        </li>\n                        <li>\n                            <FormattedMessage\n                                id='error.local_storage.help3'\n                                defaultMessage='Use a supported browser (IE 11, Chrome 61+, Firefox 60+, Safari 12+, Edge 42+)'\n                            />\n                        </li>\n                    </ul>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.PERMALINK_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='permalink.error.access'\n                        defaultMessage='Permalink belongs to a deleted message or to a channel to which you do not have access.'\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.TEAM_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.team_not_found.message'\n                        defaultMessage=\"The team you're requesting is private or does not exist. Please contact your Administrator for an invitation.\"\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.CHANNEL_NOT_FOUND:\n            errorMessage = (\n                <p>\n                    {isGuest ? (\n                        <FormattedMessage\n                            id='error.channel_not_found.message_guest'\n                            defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id='error.channel_not_found.message'\n                            defaultMessage=\"The channel you're requesting is private or does not exist. Please contact an Administrator to be added to the channel.\"\n                        />\n\n                    )}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_MISSING_CODE:\n            errorMessage = (\n                <div>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code'\n                            defaultMessage='The service provider {service} did not provide an authorization code in the redirect URL.'\n                            values={{\n                                service,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.google'\n                            defaultMessage='For {link} make sure your administrator enabled the Google+ API.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.matterfoss.com/deployment/sso-google.html'}\n                                        messageId={t('error.oauth_missing_code.google.link')}\n                                        defaultMessage={'Google Apps'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.office365'\n                            defaultMessage='For {link} make sure the administrator of your Microsoft organization has enabled the MatterFOSS app.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.matterfoss.com/deployment/sso-office.html'}\n                                        messageId={t('error.oauth_missing_code.office365.link')}\n                                        defaultMessage={'Office 365'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.gitlab'\n                            defaultMessage='For {link} please make sure you followed the setup instructions.'\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://docs.matterfoss.com/deployment/sso-gitlab.html'}\n                                        messageId={t('error.oauth_missing_code.gitlab.link')}\n                                        defaultMessage={'GitLab'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='error.oauth_missing_code.forum'\n                            defaultMessage=\"If you reviewed the above and are still having trouble with configuration, you may post in our {link} where we'll be happy to help with issues during setup.\"\n                            values={{\n                                link: (\n                                    <ErrorLink\n                                        url={'https://forum.matterfoss.org/c/trouble-shoot'}\n                                        messageId={t('error.oauth_missing_code.forum.link')}\n                                        defaultMessage={'Troubleshooting forum'}\n                                    />\n                                ),\n                            }}\n                        />\n                    </p>\n                </div>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_ACCESS_DENIED:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.oauth_access_denied'\n                        defaultMessage='You must authorize MatterFOSS to log in with {service}.'\n                        values={{\n                            service,\n                        }}\n                    />\n                </p>\n            );\n            break;\n        case ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL:\n        case ErrorPageTypes.OAUTH_INVALID_PARAM:\n            errorMessage = (\n                <p>\n                    {message}\n                </p>\n            );\n            break;\n        case ErrorPageTypes.PAGE_NOT_FOUND:\n        default:\n            errorMessage = (\n                <p>\n                    <FormattedMessage\n                        id='error.not_found.message'\n                        defaultMessage='The page you were trying to reach does not exist'\n                    />\n                </p>\n            );\n        }\n    } else if (message) {\n        errorMessage = (\n            <p>\n                {message}\n            </p>\n        );\n    } else {\n        errorMessage = (\n            <p>\n                <FormattedMessage\n                    id='error.generic.message'\n                    defaultMessage='An error has occurred.'\n                />\n            </p>\n        );\n    }\n\n    return errorMessage;\n};\n\nexport default ErrorMessage;\n","export default __webpack_public_path__ + \"files/1f40904aa7bcdbd852202532e3c20a61.svg\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {useEffect} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'matterfoss-redux/client';\n\nimport computerWithAlert from 'images/cloud/computer-with-alert.svg';\nimport mattermostCloud from 'images/cloud/mattermost-cloud.svg';\nimport wavesBackground from 'images/cloud/waves.svg';\nimport blueDots from 'images/cloud/blue.svg';\n\nconst WorkspaceUserLimitReached: React.FC = () => {\n    useEffect(() => {\n        Client4.sendAdminUpgradeRequestEmailOnJoin();\n    }, []);\n\n    return (\n        <div className='ErrorPage__container_max_free_users'>\n            <header className='ErrorPage__mattermostCloudImg'>\n                <img src={mattermostCloud}/>\n            </header>\n            <section className='ErrorPage__mainContentContainer'>\n                <div className='ErrorPage__mainContentItem'>\n                    <img\n                        src={computerWithAlert}\n                        className='ErrorPage__computerWithAlertImg'\n                    />\n                    <article>\n                        <div className='ErrorPage__maxFreeUsersReachedTitle'>\n                            <FormattedMessage\n                                id='error.maxFreeUsersReached.title'\n                                defaultMessage='This workspace has reached the user limit.'\n                            />\n                        </div>\n                        <div className='ErrorPage__maxFreeUsersReachedDescription'>\n                            <FormattedMessage\n                                id='error.maxFreeUsersReached.description'\n                                defaultMessage='New users cannot be added to this workspace because it has reached the user limit for the free version of MatterFOSS. The system administrator has been notified'\n                            />\n                        </div>\n                    </article>\n                </div>\n            </section>\n            <div>\n                <img\n                    className='waves'\n                    src={wavesBackground}\n                />\n                <img\n                    className='blue-dots'\n                    src={blueDots}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default WorkspaceUserLimitReached;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {ErrorPageTypes, Constants} from 'utils/constants';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport ErrorTitle from './error_title';\nimport ErrorMessage from './error_message';\nimport WorkspaceUserLimitReached from './workspace_user_limit_reached';\n\ntype Location = {\n    search: string;\n}\n\ntype Props = {\n    location: Location;\n    asymmetricSigningPublicKey?: string;\n    siteName?: string;\n    isGuest?: boolean;\n}\n\nexport default class ErrorPage extends React.PureComponent<Props> {\n    public componentDidMount() {\n        document.body.setAttribute('class', 'sticky error');\n    }\n\n    public componentWillUnmount() {\n        document.body.removeAttribute('class');\n    }\n\n    public render() {\n        const {isGuest} = this.props;\n        const params: URLSearchParams = new URLSearchParams(this.props.location.search);\n        const signature = params.get('s');\n\n        let trustParams = false;\n        if (signature) {\n            params.delete('s');\n\n            const key = this.props.asymmetricSigningPublicKey;\n            const keyPEM = '-----BEGIN PUBLIC KEY-----\\n' + key + '\\n-----END PUBLIC KEY-----';\n\n            const verify = crypto.createVerify('sha256');\n            verify.update('/error?' + params.toString());\n            trustParams = verify.verify(keyPEM, signature, 'base64');\n        }\n\n        const type = params.get('type');\n        const title = (trustParams && params.get('title')) || '';\n        const message = (trustParams && params.get('message')) || '';\n        const service = (trustParams && params.get('service')) || '';\n        const returnTo = (trustParams && params.get('returnTo')) || '';\n\n        let backButton;\n        if (type === ErrorPageTypes.PERMALINK_NOT_FOUND && returnTo) {\n            backButton = (\n                <Link to={returnTo}>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to MatterFOSS'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.TEAM_NOT_FOUND) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND && isGuest) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.channelNotFound.guest_link'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.CHANNEL_NOT_FOUND) {\n            backButton = (\n                <Link to={params.get('returnTo') as string}>\n                    <FormattedMessage\n                        id='error.channelNotFound.link'\n                        defaultMessage='Back to {defaultChannelName}'\n                        values={{\n                            defaultChannelName: Constants.DEFAULT_CHANNEL_UI_NAME,\n                        }}\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_ACCESS_DENIED || type === ErrorPageTypes.OAUTH_MISSING_CODE) {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link_login'\n                        defaultMessage='Back to Login Page'\n                    />\n                </Link>\n            );\n        } else if (type === ErrorPageTypes.OAUTH_INVALID_PARAM || type === ErrorPageTypes.OAUTH_INVALID_REDIRECT_URL) {\n            backButton = null;\n        } else {\n            backButton = (\n                <Link to='/'>\n                    <FormattedMessage\n                        id='error.generic.link'\n                        defaultMessage='Back to {siteName}'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </Link>\n            );\n        }\n\n        let errorPage = (\n            <div className='container-fluid'>\n                <div className='error__container'>\n                    <div className='error__icon'>\n                        <WarningIcon/>\n                    </div>\n                    <h2 data-testid='errorMessageTitle'>\n                        <ErrorTitle\n                            type={type}\n                            title={title}\n                        />\n                    </h2>\n                    <ErrorMessage\n                        type={type}\n                        message={message}\n                        service={service}\n                        isGuest={isGuest}\n                    />\n                    {backButton}\n                </div>\n            </div>\n        );\n\n        if (type === ErrorPageTypes.MAX_FREE_USERS_REACHED) {\n            errorPage = <WorkspaceUserLimitReached/>;\n        }\n\n        return (\n            <>\n                {errorPage}\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getCurrentUser} from 'matterfoss-redux/selectors/entities/common';\n\nimport {GlobalState} from 'types/store';\n\nimport {isGuest} from 'utils/utils.jsx';\n\nimport ErrorPage from './error_page';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n    const user = getCurrentUser(state);\n\n    return {\n        siteName: config.SiteName,\n        asymmetricSigningPublicKey: config.AsymmetricSigningPublicKey,\n        isGuest: Boolean(user && isGuest(user)),\n    };\n}\n\nexport default connect(mapStateToProps)(ErrorPage);\n"],"sourceRoot":""}