{"version":3,"sources":["webpack://mattermost-webapp/./actions/views/login.js","webpack://mattermost-webapp/./components/common/back_button.tsx","webpack://mattermost-webapp/./components/common/site_name_and_description.tsx","webpack://mattermost-webapp/./components/signup/signup_email/signup_email.tsx","webpack://mattermost-webapp/./components/signup/signup_email/index.ts","webpack://mattermost-webapp/./images/logo.png"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","BackButton","React","render","id","className","Link","onClick","this","props","to","url","defaultMessage","title","toString","SiteNameAndDescription","customDescriptionText","siteName","description","SignupEmail","constructor","super","document","token","parsedData","JSON","parse","loading","email","teamName","name","teamInviteInfo","actions","getTeamInviteInfo","inviteId","setState","noOpenServerError","serverError","user","trackEvent","redirectTo","URLSearchParams","location","search","get","then","verifyUrl","encodeURIComponent","state","browserHistory","message","isSubmitting","length","setGlobalItem","stringify","usedBefore","GlobalActions","providedEmail","emailRef","current","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","nameRef","toLowerCase","usernameError","Utils","errObj","ValidationErrors","values","min","Constants","max","providedPassword","passwordRef","valid","passwordConfig","e","preventDefault","isUserValid","username","allow_marketing","createUser","handleSignupSuccess","emailHelpText","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","handleSubmit","disabled","getTokenData","componentDidMount","setDocumentTitle","getInviteInfo","hasAccounts","body","classList","remove","componentDidUpdate","enableSignUpWithEmail","privacyPolicyLink","termsOfServiceLink","emailSignup","renderEmailSignup","terms","TermsOfServiceLink","PrivacyPolicyLink","alt","src","logoImage","PropTypes","isRequired","connect","config","getConfig","EnableSignUpWithEmail","SiteName","CustomDescriptionText","NoAccounts","getPasswordConfig","bindActionCreators"],"mappings":"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","file":"930.85ee9053438f62c515e6.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'matterfoss-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/',\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'MatterFOSS',\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n/* eslint-disable react/no-string-refs */\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {UserProfile} from 'matterfoss-redux/types/users';\nimport {ServerError} from 'matterfoss-redux/types/errors';\n\nimport {isEmail} from 'matterfoss-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/telemetry_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants, {ValidationErrors} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\ntype TeamInviteInfo = {\n    display_name: string;\n    description: string;\n    name: string;\n    id: string;\n};\n\nexport type Actions = {\n    createUser: (user: UserProfile, token: string, inviteId: string, redirect: string) => Promise<{data: UserProfile} | {error: ServerError}>;\n    loginById: (id: string, password: string, mfaToken?: string) => Promise<{data: boolean} | {error: ServerError}>;\n    setGlobalItem: (name: string, value: string) => {data: boolean};\n    getTeamInviteInfo: (inviteId: string) => Promise<{data: TeamInviteInfo} | {error: ServerError}>;\n};\n\nexport type PasswordConfig = {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n    requireUppercase: boolean;\n}\n\nexport type Props = {\n    location?: {search: string};\n    enableSignUpWithEmail: boolean;\n    siteName?: string;\n    termsOfServiceLink?: string;\n    privacyPolicyLink?: string;\n    customDescriptionText?: string;\n    passwordConfig?: PasswordConfig;\n    hasAccounts: boolean;\n    actions: Actions;\n};\n\nexport type State = {\n    loading: boolean;\n    inviteId?: string;\n    token?: string;\n    email?: string;\n    teamName?: string;\n    noOpenServerError?: boolean;\n    isSubmitting?: boolean;\n    nameError?: React.ReactNode;\n    emailError?: React.ReactNode;\n    passwordError?: React.ReactNode;\n    serverError?: React.ReactNode;\n};\n\nexport default class SignupEmail extends React.PureComponent<Props, State> {\n    static propTypes = {\n        location: PropTypes.object,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        termsOfServiceLink: PropTypes.string,\n        privacyPolicyLink: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        hasAccounts: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            createUser: PropTypes.func.isRequired,\n            loginById: PropTypes.func.isRequired,\n            setGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    private emailRef: React.RefObject<HTMLInputElement>;\n    private nameRef: React.RefObject<HTMLInputElement>;\n    private passwordRef: React.RefObject<HTMLInputElement>;\n\n    constructor(props: Props) {\n        super(props);\n\n        const data = (new URLSearchParams(this.props.location!.search)).get('d');\n        const token = (new URLSearchParams(this.props.location!.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location!.search)).get('id');\n\n        this.state = {loading: false};\n        if (token && token.length > 0) {\n            this.state = this.getTokenData(token, data!);\n        } else if (inviteId && inviteId.length > 0) {\n            this.state = {\n                loading: true,\n                inviteId,\n            };\n        }\n\n        this.emailRef = React.createRef();\n        this.nameRef = React.createRef();\n        this.passwordRef = React.createRef();\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n\n        this.setDocumentTitle(this.props.siteName!);\n\n        const {inviteId} = this.state;\n        if (inviteId && inviteId.length > 0) {\n            this.getInviteInfo(inviteId);\n        }\n\n        if (!this.props.hasAccounts) {\n            document.body.classList.remove('sticky');\n        }\n    }\n\n    componentDidUpdate() {\n        this.setDocumentTitle(this.props.siteName!);\n    }\n\n    setDocumentTitle = (siteName: string) => {\n        if (siteName) {\n            document.title = siteName;\n        }\n    }\n\n    getTokenData = (token: string, data: string) => {\n        const parsedData = JSON.parse(data);\n\n        return {\n            loading: false,\n            token,\n            email: parsedData.email,\n            teamName: parsedData.name,\n        };\n    }\n\n    getInviteInfo = async (inviteId: string) => {\n        const teamInviteInfo = await this.props.actions.getTeamInviteInfo(inviteId);\n        if ('data' in teamInviteInfo) {\n            this.setState({\n                loading: false,\n                noOpenServerError: false,\n                serverError: '',\n                teamName: teamInviteInfo.data.name,\n            });\n        } else if ('error' in teamInviteInfo) {\n            this.setState({\n                loading: false,\n                noOpenServerError: true,\n                serverError: (\n                    <FormattedMessage\n                        id='signup_user_completed.invalid_invite'\n                        defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleSignupSuccess = (user: UserProfile, data: UserProfile) => {\n        trackEvent('signup', 'signup_user_02_complete');\n        const redirectTo = (new URLSearchParams(this.props.location!.search)).get('redirect_to');\n\n        this.props.actions.loginById(data.id, user.password, '').then((result: {data: boolean} | {error: ServerError}) => {\n            if ('error' in result) {\n                if (result.error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    let verifyUrl = '/should_verify_email?email=' + encodeURIComponent(user.email);\n                    if (this.state.teamName) {\n                        verifyUrl += '&teamname=' + encodeURIComponent(this.state.teamName);\n                    }\n                    if (redirectTo) {\n                        verifyUrl += '&redirect_to=' + redirectTo;\n                    }\n                    browserHistory.push(verifyUrl);\n                } else {\n                    this.setState({\n                        serverError: result.error.message,\n                        isSubmitting: false,\n                    });\n                }\n\n                return;\n            }\n\n            if (this.state.token && this.state.token.length > 0) {\n                this.props.actions.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n            }\n\n            if (redirectTo) {\n                browserHistory.push(redirectTo);\n            } else {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        });\n    }\n\n    isUserValid = () => {\n        const providedEmail = this.emailRef.current?.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.nameRef.current?.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError) {\n            let errObj;\n            if (usernameError.id === ValidationErrors.RESERVED_NAME) {\n                errObj = {\n                    nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: '',\n                };\n            } else {\n                errObj = {\n                    nameError: (\n                        <FormattedMessage\n                            id='signup_user_completed.usernameLength'\n                            values={{\n                                min: Constants.MIN_USERNAME_LENGTH,\n                                max: Constants.MAX_USERNAME_LENGTH,\n                            }}\n                        />\n                    ),\n                    emailError: '',\n                    passwordError: '',\n                    serverError: '',\n                };\n            }\n            this.setState(errObj);\n            return false;\n        }\n\n        const providedPassword = this.passwordRef.current?.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n        trackEvent('signup_email', 'click_create_account');\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.emailRef.current?.value.trim(),\n                username: this.nameRef.current?.value.trim().toLowerCase(),\n                password: this.passwordRef.current?.value,\n                allow_marketing: true,\n            } as UserProfile;\n\n            const redirectTo = (new URLSearchParams(this.props.location!.search)).get('redirect_to');\n\n            this.props.actions.createUser(user, this.state.token as string, this.state.inviteId as string, redirectTo as string).then((result: {data: UserProfile} | {error: ServerError}) => {\n                if ('error' in result) {\n                    this.setState({\n                        serverError: result.error.message,\n                        isSubmitting: false,\n                    });\n                    return;\n                }\n\n                this.handleSignupSuccess(user, result.data);\n            });\n        }\n    }\n\n    renderEmailSignup = () => {\n        let emailError = null;\n        let emailHelpText: React.ReactNode = (\n            <span\n                id='valid_email'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText: React.ReactNode = (\n            <span\n                id='valid_name'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'mt-8';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5 id='email_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.whatis'\n                                    defaultMessage=\"What's your email address?\"\n                                />\n                            </strong>\n                        </h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref={this.emailRef}\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength={128}\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='mt-8'>\n                        <h5 id='name_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.chooseUser'\n                                    defaultMessage='Choose your username'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref={this.nameRef}\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='mt-8'>\n                        <h5 id='password_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.choosePwd'\n                                    defaultMessage='Choose your password'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref={this.passwordRef}\n                                className='form-control'\n                                placeholder=''\n                                maxLength={128}\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='mt-5'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n            hasAccounts,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div\n                    id='existingEmailErrorContainer'\n                    className={'form-group has-error'}\n                >\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p id='signup_agreement'>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='Welcome to your new MatterFOSS server, you can specify your own message here by changing signup_email.jsx.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: `!${termsOfServiceLink}`,\n                            PrivacyPolicyLink: `!${privacyPolicyLink}`,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                {hasAccounts && <BackButton onClick={() => trackEvent('signup_email', 'click_back')}/>}\n                <div\n                    id='signup_email_section'\n                    className='col-sm-12'\n                >\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4\n                            id='create_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span\n                            id='signin_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                id='signin_account_link'\n                                to={'/login' + location!.search}\n                                onClick={() => trackEvent('signup_email', 'click_signin_account')}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n/* eslint-enable react/no-string-refs */\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {ActionCreatorsMapObject, bindActionCreators, Dispatch} from 'redux';\n\nimport {GenericAction, ActionFunc} from 'matterfoss-redux/types/actions';\n\nimport {createUser} from 'matterfoss-redux/actions/users';\nimport {getConfig} from 'matterfoss-redux/selectors/entities/general';\nimport {getTeamInviteInfo} from 'matterfoss-redux/actions/teams';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {loginById} from 'actions/views/login';\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport {GlobalState} from '../../../types/store';\n\nimport SignupEmail, {Props, State, Actions} from './signup_email';\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName || '';\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n    const hasAccounts = config.NoAccounts === 'false';\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n        hasAccounts,\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc | GenericAction>, Actions>({\n            createUser,\n            loginById,\n            setGlobalItem,\n            getTeamInviteInfo,\n        }, dispatch),\n    };\n}\n\n/* This is a workaround to handle the issue of Typescript not being able to correctly infer the types of the component's Props */\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupEmail as React.ComponentClass<Props, State>);\n","export default __webpack_public_path__ + \"files/37ecfc86d48a22a44e9c13bb44bc7425.png\";"],"sourceRoot":""}